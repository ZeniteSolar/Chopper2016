
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a2  00800100  00000922  000009b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000922  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000035  008001a2  008001a2  00000a58  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  00000a58  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ab8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000710  00000000  00000000  00000af8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003c76  00000000  00000000  00001208  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eba  00000000  00000000  00004e7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002bb5  00000000  00000000  00005d38  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ea0  00000000  00000000  000088f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000027a5  00000000  00000000  00009790  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002392  00000000  00000000  0000bf35  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000690  00000000  00000000  0000e2c7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 40 00 	jmp	0x80	; 0x80 <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 1a 02 	jmp	0x434	; 0x434 <__vector_18>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	04 b6       	in	r0, 0x34	; 52
  6a:	e7 04       	cpc	r14, r7
  6c:	b6 d3       	rcall	.+1900   	; 0x7da <can_send_message+0x78>
  6e:	04 b6       	in	r0, 0x34	; 52
  70:	c7 04       	cpc	r12, r7
  72:	b6 c3       	rjmp	.+1900   	; 0x7e0 <can_send_message+0x7e>
  74:	02 90       	ld	r0, -Z
  76:	07 03       	mulsu	r16, r23
  78:	ac 81       	ldd	r26, Y+4	; 0x04
  7a:	03 ac       	ldd	r0, Z+59	; 0x3b
  7c:	80 02       	muls	r24, r16
  7e:	90 00       	.word	0x0090	; ????

00000080 <__ctors_end>:
  80:	11 24       	eor	r1, r1
  82:	1f be       	out	0x3f, r1	; 63
  84:	cf ef       	ldi	r28, 0xFF	; 255
  86:	d8 e0       	ldi	r29, 0x08	; 8
  88:	de bf       	out	0x3e, r29	; 62
  8a:	cd bf       	out	0x3d, r28	; 61

0000008c <__do_copy_data>:
  8c:	11 e0       	ldi	r17, 0x01	; 1
  8e:	a0 e0       	ldi	r26, 0x00	; 0
  90:	b1 e0       	ldi	r27, 0x01	; 1
  92:	e2 e2       	ldi	r30, 0x22	; 34
  94:	f9 e0       	ldi	r31, 0x09	; 9
  96:	02 c0       	rjmp	.+4      	; 0x9c <__do_copy_data+0x10>
  98:	05 90       	lpm	r0, Z+
  9a:	0d 92       	st	X+, r0
  9c:	a2 3a       	cpi	r26, 0xA2	; 162
  9e:	b1 07       	cpc	r27, r17
  a0:	d9 f7       	brne	.-10     	; 0x98 <__do_copy_data+0xc>

000000a2 <__do_clear_bss>:
  a2:	21 e0       	ldi	r18, 0x01	; 1
  a4:	a2 ea       	ldi	r26, 0xA2	; 162
  a6:	b1 e0       	ldi	r27, 0x01	; 1
  a8:	01 c0       	rjmp	.+2      	; 0xac <.do_clear_bss_start>

000000aa <.do_clear_bss_loop>:
  aa:	1d 92       	st	X+, r1

000000ac <.do_clear_bss_start>:
  ac:	a7 3d       	cpi	r26, 0xD7	; 215
  ae:	b2 07       	cpc	r27, r18
  b0:	e1 f7       	brne	.-8      	; 0xaa <.do_clear_bss_loop>
  b2:	0e 94 a7 01 	call	0x34e	; 0x34e <main>
  b6:	0c 94 8f 04 	jmp	0x91e	; 0x91e <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <usartConfig>:
 * -------------------------------------------------------------------------- */

void usartClearReceptionBuffer(void)
{
	uint8 aux;
	while(usartIsReceptionComplete())
  be:	8f 92       	push	r8
  c0:	9f 92       	push	r9
  c2:	af 92       	push	r10
  c4:	bf 92       	push	r11
  c6:	cf 92       	push	r12
  c8:	df 92       	push	r13
  ca:	ef 92       	push	r14
  cc:	ff 92       	push	r15
  ce:	0f 93       	push	r16
  d0:	4a 01       	movw	r8, r20
  d2:	5b 01       	movw	r10, r22
  d4:	92 2f       	mov	r25, r18
  d6:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
  da:	20 91 c1 00 	lds	r18, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  de:	20 91 c2 00 	lds	r18, 0x00C2	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  e2:	2f ef       	ldi	r18, 0xFF	; 255
  e4:	e2 16       	cp	r14, r18
  e6:	21 f0       	breq	.+8      	; 0xf0 <usartConfig+0x32>
  e8:	21 e0       	ldi	r18, 0x01	; 1
  ea:	2e 15       	cp	r18, r14
  ec:	08 f4       	brcc	.+2      	; 0xf0 <usartConfig+0x32>
  ee:	7d c0       	rjmp	.+250    	; 0x1ea <usartConfig+0x12c>
  f0:	0f 3f       	cpi	r16, 0xFF	; 255
  f2:	19 f0       	breq	.+6      	; 0xfa <usartConfig+0x3c>
  f4:	03 30       	cpi	r16, 0x03	; 3
  f6:	08 f0       	brcs	.+2      	; 0xfa <usartConfig+0x3c>
  f8:	7a c0       	rjmp	.+244    	; 0x1ee <usartConfig+0x130>
  fa:	9f 3f       	cpi	r25, 0xFF	; 255
  fc:	19 f0       	breq	.+6      	; 0x104 <usartConfig+0x46>
  fe:	95 30       	cpi	r25, 0x05	; 5
 100:	08 f0       	brcs	.+2      	; 0x104 <usartConfig+0x46>
 102:	77 c0       	rjmp	.+238    	; 0x1f2 <usartConfig+0x134>
 104:	8f 3f       	cpi	r24, 0xFF	; 255
 106:	89 f4       	brne	.+34     	; 0x12a <usartConfig+0x6c>
 108:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 10c:	82 95       	swap	r24
 10e:	86 95       	lsr	r24
 110:	86 95       	lsr	r24
 112:	83 70       	andi	r24, 0x03	; 3
 114:	21 f0       	breq	.+8      	; 0x11e <usartConfig+0x60>
 116:	83 30       	cpi	r24, 0x03	; 3
 118:	09 f4       	brne	.+2      	; 0x11c <usartConfig+0x5e>
 11a:	6f c0       	rjmp	.+222    	; 0x1fa <usartConfig+0x13c>
 11c:	05 c0       	rjmp	.+10     	; 0x128 <usartConfig+0x6a>
 11e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 122:	86 95       	lsr	r24
 124:	81 70       	andi	r24, 0x01	; 1
 126:	01 c0       	rjmp	.+2      	; 0x12a <usartConfig+0x6c>
 128:	80 e0       	ldi	r24, 0x00	; 0
 12a:	9f ef       	ldi	r25, 0xFF	; 255
 12c:	89 16       	cp	r8, r25
 12e:	99 06       	cpc	r9, r25
 130:	a9 06       	cpc	r10, r25
 132:	b9 06       	cpc	r11, r25
 134:	09 f4       	brne	.+2      	; 0x138 <usartConfig+0x7a>
 136:	5f c0       	rjmp	.+190    	; 0x1f6 <usartConfig+0x138>
 138:	81 30       	cpi	r24, 0x01	; 1
 13a:	b9 f0       	breq	.+46     	; 0x16a <usartConfig+0xac>
 13c:	18 f0       	brcs	.+6      	; 0x144 <usartConfig+0x86>
 13e:	84 30       	cpi	r24, 0x04	; 4
 140:	39 f1       	breq	.+78     	; 0x190 <usartConfig+0xd2>
 142:	39 c0       	rjmp	.+114    	; 0x1b6 <usartConfig+0xf8>
 144:	60 e4       	ldi	r22, 0x40	; 64
 146:	72 e4       	ldi	r23, 0x42	; 66
 148:	8f e0       	ldi	r24, 0x0F	; 15
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	a5 01       	movw	r20, r10
 14e:	94 01       	movw	r18, r8
 150:	0e 94 4f 04 	call	0x89e	; 0x89e <__udivmodsi4>
 154:	da 01       	movw	r26, r20
 156:	c9 01       	movw	r24, r18
 158:	01 97       	sbiw	r24, 0x01	; 1
 15a:	a1 09       	sbc	r26, r1
 15c:	b1 09       	sbc	r27, r1
 15e:	4c 01       	movw	r8, r24
 160:	5d 01       	movw	r10, r26
 162:	c1 2c       	mov	r12, r1
 164:	d1 2c       	mov	r13, r1
 166:	76 01       	movw	r14, r12
 168:	2e c0       	rjmp	.+92     	; 0x1c6 <usartConfig+0x108>
 16a:	60 e8       	ldi	r22, 0x80	; 128
 16c:	74 e8       	ldi	r23, 0x84	; 132
 16e:	8e e1       	ldi	r24, 0x1E	; 30
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	a5 01       	movw	r20, r10
 174:	94 01       	movw	r18, r8
 176:	0e 94 4f 04 	call	0x89e	; 0x89e <__udivmodsi4>
 17a:	da 01       	movw	r26, r20
 17c:	c9 01       	movw	r24, r18
 17e:	01 97       	sbiw	r24, 0x01	; 1
 180:	a1 09       	sbc	r26, r1
 182:	b1 09       	sbc	r27, r1
 184:	4c 01       	movw	r8, r24
 186:	5d 01       	movw	r10, r26
 188:	c1 2c       	mov	r12, r1
 18a:	d1 2c       	mov	r13, r1
 18c:	76 01       	movw	r14, r12
 18e:	1b c0       	rjmp	.+54     	; 0x1c6 <usartConfig+0x108>
 190:	60 e0       	ldi	r22, 0x00	; 0
 192:	72 e1       	ldi	r23, 0x12	; 18
 194:	8a e7       	ldi	r24, 0x7A	; 122
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	a5 01       	movw	r20, r10
 19a:	94 01       	movw	r18, r8
 19c:	0e 94 4f 04 	call	0x89e	; 0x89e <__udivmodsi4>
 1a0:	da 01       	movw	r26, r20
 1a2:	c9 01       	movw	r24, r18
 1a4:	01 97       	sbiw	r24, 0x01	; 1
 1a6:	a1 09       	sbc	r26, r1
 1a8:	b1 09       	sbc	r27, r1
 1aa:	4c 01       	movw	r8, r24
 1ac:	5d 01       	movw	r10, r26
 1ae:	c1 2c       	mov	r12, r1
 1b0:	d1 2c       	mov	r13, r1
 1b2:	76 01       	movw	r14, r12
 1b4:	08 c0       	rjmp	.+16     	; 0x1c6 <usartConfig+0x108>
 1b6:	81 2c       	mov	r8, r1
 1b8:	91 2c       	mov	r9, r1
 1ba:	a1 2c       	mov	r10, r1
 1bc:	b1 2c       	mov	r11, r1
 1be:	c1 2c       	mov	r12, r1
 1c0:	d1 2c       	mov	r13, r1
 1c2:	e1 2c       	mov	r14, r1
 1c4:	f1 2c       	mov	r15, r1
 1c6:	28 2d       	mov	r18, r8
 1c8:	39 2d       	mov	r19, r9
 1ca:	4a 2d       	mov	r20, r10
 1cc:	5b 2d       	mov	r21, r11
 1ce:	6c 2d       	mov	r22, r12
 1d0:	7d 2d       	mov	r23, r13
 1d2:	8e 2d       	mov	r24, r14
 1d4:	9f 2d       	mov	r25, r15
 1d6:	08 e0       	ldi	r16, 0x08	; 8
 1d8:	0e 94 73 04 	call	0x8e6	; 0x8e6 <__lshrdi3>
 1dc:	2f 70       	andi	r18, 0x0F	; 15
 1de:	20 93 c5 00 	sts	0x00C5, r18	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 1e2:	80 92 c4 00 	sts	0x00C4, r8	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 1e6:	80 e0       	ldi	r24, 0x00	; 0
 1e8:	0f c0       	rjmp	.+30     	; 0x208 <usartConfig+0x14a>
 1ea:	87 e0       	ldi	r24, 0x07	; 7
 1ec:	0d c0       	rjmp	.+26     	; 0x208 <usartConfig+0x14a>
 1ee:	85 e0       	ldi	r24, 0x05	; 5
 1f0:	0b c0       	rjmp	.+22     	; 0x208 <usartConfig+0x14a>
 1f2:	85 e0       	ldi	r24, 0x05	; 5
 1f4:	09 c0       	rjmp	.+18     	; 0x208 <usartConfig+0x14a>
 1f6:	80 e0       	ldi	r24, 0x00	; 0
 1f8:	07 c0       	rjmp	.+14     	; 0x208 <usartConfig+0x14a>
 1fa:	2f ef       	ldi	r18, 0xFF	; 255
 1fc:	82 16       	cp	r8, r18
 1fe:	92 06       	cpc	r9, r18
 200:	a2 06       	cpc	r10, r18
 202:	b2 06       	cpc	r11, r18
 204:	29 f6       	brne	.-118    	; 0x190 <usartConfig+0xd2>
 206:	80 e0       	ldi	r24, 0x00	; 0
 208:	0f 91       	pop	r16
 20a:	ff 90       	pop	r15
 20c:	ef 90       	pop	r14
 20e:	df 90       	pop	r13
 210:	cf 90       	pop	r12
 212:	bf 90       	pop	r11
 214:	af 90       	pop	r10
 216:	9f 90       	pop	r9
 218:	8f 90       	pop	r8
 21a:	08 95       	ret

0000021c <usartEnableReceiver>:
 21c:	e1 ec       	ldi	r30, 0xC1	; 193
 21e:	f0 e0       	ldi	r31, 0x00	; 0
 220:	80 81       	ld	r24, Z
 222:	80 61       	ori	r24, 0x10	; 16
 224:	80 83       	st	Z, r24
 226:	80 e0       	ldi	r24, 0x00	; 0
 228:	08 95       	ret

0000022a <usartEnableTransmitter>:
 22a:	e1 ec       	ldi	r30, 0xC1	; 193
 22c:	f0 e0       	ldi	r31, 0x00	; 0
 22e:	80 81       	ld	r24, Z
 230:	88 60       	ori	r24, 0x08	; 8
 232:	80 83       	st	Z, r24
 234:	80 e0       	ldi	r24, 0x00	; 0
 236:	08 95       	ret

00000238 <usartActivateReceptionCompleteInterrupt>:
 238:	e1 ec       	ldi	r30, 0xC1	; 193
 23a:	f0 e0       	ldi	r31, 0x00	; 0
 23c:	80 81       	ld	r24, Z
 23e:	80 68       	ori	r24, 0x80	; 128
 240:	80 83       	st	Z, r24
 242:	80 e0       	ldi	r24, 0x00	; 0
 244:	08 95       	ret

00000246 <usartIsBufferEmpty>:
 246:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 24a:	85 fb       	bst	r24, 5
 24c:	88 27       	eor	r24, r24
 24e:	80 f9       	bld	r24, 0
 250:	08 95       	ret

00000252 <usartTransmit>:
 252:	cf 93       	push	r28
 254:	c8 2f       	mov	r28, r24
 256:	0e 94 23 01 	call	0x246	; 0x246 <usartIsBufferEmpty>
 25a:	88 23       	and	r24, r24
 25c:	e1 f3       	breq	.-8      	; 0x256 <usartTransmit+0x4>
 25e:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 262:	80 e0       	ldi	r24, 0x00	; 0
 264:	cf 91       	pop	r28
 266:	08 95       	ret

00000268 <usartAddDataToReceiverBuffer>:
/* -----------------------------------------------------------------------------
 * Adds data to the reception buffer. The function has NO CONTROL of lost data.
 * -------------------------------------------------------------------------- */

void usartAddDataToReceiverBuffer(uint8 data)
{
 268:	cf 92       	push	r12
 26a:	df 92       	push	r13
 26c:	ef 92       	push	r14
 26e:	ff 92       	push	r15
 270:	1f 93       	push	r17
 272:	cf 93       	push	r28
 274:	df 93       	push	r29
 276:	18 2f       	mov	r17, r24
	if(((usartReceiverBufferNextWrite + 1) % USART_RECEIVER_BUFFER_SIZE) != usartReceiverBufferNextRead){
 278:	c0 91 d4 01 	lds	r28, 0x01D4	; 0x8001d4 <usartReceiverBufferNextWrite>
 27c:	d0 e0       	ldi	r29, 0x00	; 0
 27e:	be 01       	movw	r22, r28
 280:	6f 5f       	subi	r22, 0xFF	; 255
 282:	7f 4f       	sbci	r23, 0xFF	; 255
 284:	07 2e       	mov	r0, r23
 286:	00 0c       	add	r0, r0
 288:	88 0b       	sbc	r24, r24
 28a:	99 0b       	sbc	r25, r25
 28c:	22 e3       	ldi	r18, 0x32	; 50
 28e:	30 e0       	ldi	r19, 0x00	; 0
 290:	40 e0       	ldi	r20, 0x00	; 0
 292:	50 e0       	ldi	r21, 0x00	; 0
 294:	0e 94 4f 04 	call	0x89e	; 0x89e <__udivmodsi4>
 298:	40 91 d6 01 	lds	r20, 0x01D6	; 0x8001d6 <usartReceiverBufferNextRead>
 29c:	c4 2e       	mov	r12, r20
 29e:	d1 2c       	mov	r13, r1
 2a0:	e1 2c       	mov	r14, r1
 2a2:	f1 2c       	mov	r15, r1
 2a4:	6c 15       	cp	r22, r12
 2a6:	7d 05       	cpc	r23, r13
 2a8:	8e 05       	cpc	r24, r14
 2aa:	9f 05       	cpc	r25, r15
 2ac:	51 f0       	breq	.+20     	; 0x2c2 <usartAddDataToReceiverBuffer+0x5a>
		usartReceiverBuffer[usartReceiverBufferNextWrite] = data;
 2ae:	ce 55       	subi	r28, 0x5E	; 94
 2b0:	de 4f       	sbci	r29, 0xFE	; 254
 2b2:	18 83       	st	Y, r17
		usartReceiverBufferNextWrite = (usartReceiverBufferNextWrite + 1) % USART_RECEIVER_BUFFER_SIZE;
 2b4:	60 93 d4 01 	sts	0x01D4, r22	; 0x8001d4 <usartReceiverBufferNextWrite>
		usartReceiverBufferLength++;
 2b8:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <usartReceiverBufferLength>
 2bc:	8f 5f       	subi	r24, 0xFF	; 255
 2be:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <usartReceiverBufferLength>
	}
	return;
}
 2c2:	df 91       	pop	r29
 2c4:	cf 91       	pop	r28
 2c6:	1f 91       	pop	r17
 2c8:	ff 90       	pop	r15
 2ca:	ef 90       	pop	r14
 2cc:	df 90       	pop	r13
 2ce:	cf 90       	pop	r12
 2d0:	08 95       	ret

000002d2 <usartGetDataFromReceiverBuffer>:
 * usartIsReceiverBufferEmpty() function must be called to check if there is new
 * data in the buffer.
 * -------------------------------------------------------------------------- */

uint8 usartGetDataFromReceiverBuffer(void)
{
 2d2:	cf 93       	push	r28
 2d4:	df 93       	push	r29
	uint8 data = usartReceiverBuffer[usartReceiverBufferNextRead];
 2d6:	60 91 d6 01 	lds	r22, 0x01D6	; 0x8001d6 <usartReceiverBufferNextRead>
 2da:	70 e0       	ldi	r23, 0x00	; 0
 2dc:	fb 01       	movw	r30, r22
 2de:	ee 55       	subi	r30, 0x5E	; 94
 2e0:	fe 4f       	sbci	r31, 0xFE	; 254
 2e2:	d0 81       	ld	r29, Z
	if(usartReceiverBufferLength > 0){
 2e4:	c0 91 d5 01 	lds	r28, 0x01D5	; 0x8001d5 <usartReceiverBufferLength>
 2e8:	cc 23       	and	r28, r28
 2ea:	89 f0       	breq	.+34     	; 0x30e <usartGetDataFromReceiverBuffer+0x3c>
		usartReceiverBufferNextRead = (usartReceiverBufferNextRead + 1) % USART_RECEIVER_BUFFER_SIZE;
 2ec:	6f 5f       	subi	r22, 0xFF	; 255
 2ee:	7f 4f       	sbci	r23, 0xFF	; 255
 2f0:	07 2e       	mov	r0, r23
 2f2:	00 0c       	add	r0, r0
 2f4:	88 0b       	sbc	r24, r24
 2f6:	99 0b       	sbc	r25, r25
 2f8:	22 e3       	ldi	r18, 0x32	; 50
 2fa:	30 e0       	ldi	r19, 0x00	; 0
 2fc:	40 e0       	ldi	r20, 0x00	; 0
 2fe:	50 e0       	ldi	r21, 0x00	; 0
 300:	0e 94 4f 04 	call	0x89e	; 0x89e <__udivmodsi4>
 304:	60 93 d6 01 	sts	0x01D6, r22	; 0x8001d6 <usartReceiverBufferNextRead>
		usartReceiverBufferLength--;
 308:	c1 50       	subi	r28, 0x01	; 1
 30a:	c0 93 d5 01 	sts	0x01D5, r28	; 0x8001d5 <usartReceiverBufferLength>
	}
	return data;
}
 30e:	8d 2f       	mov	r24, r29
 310:	df 91       	pop	r29
 312:	cf 91       	pop	r28
 314:	08 95       	ret

00000316 <usartIsReceiverBufferEmpty>:
 * reading the buffer.
 * -------------------------------------------------------------------------- */

uint8 usartIsReceiverBufferEmpty(void)
{
	if(usartReceiverBufferLength == 0)
 316:	81 e0       	ldi	r24, 0x01	; 1
 318:	90 91 d5 01 	lds	r25, 0x01D5	; 0x8001d5 <usartReceiverBufferLength>
 31c:	91 11       	cpse	r25, r1
 31e:	80 e0       	ldi	r24, 0x00	; 0
		return TRUE;
	return FALSE;
}
 320:	08 95       	ret

00000322 <stringTransmit>:
// -----------------------------------------------------------------------------
// Main loop for receiving and sending messages.

//envia uma msg usando
void stringTransmit(char* texto)
{
 322:	0f 93       	push	r16
 324:	1f 93       	push	r17
 326:	cf 93       	push	r28
 328:	fc 01       	movw	r30, r24
	uint8 i = 0;
	for(i = 0; texto[i] != '\0'; i++)
 32a:	80 81       	ld	r24, Z
 32c:	88 23       	and	r24, r24
 32e:	59 f0       	breq	.+22     	; 0x346 <stringTransmit+0x24>
 330:	8f 01       	movw	r16, r30
 332:	c0 e0       	ldi	r28, 0x00	; 0
	usartTransmit(texto[i]);
 334:	0e 94 29 01 	call	0x252	; 0x252 <usartTransmit>

//envia uma msg usando
void stringTransmit(char* texto)
{
	uint8 i = 0;
	for(i = 0; texto[i] != '\0'; i++)
 338:	cf 5f       	subi	r28, 0xFF	; 255
 33a:	f8 01       	movw	r30, r16
 33c:	ec 0f       	add	r30, r28
 33e:	f1 1d       	adc	r31, r1
 340:	80 81       	ld	r24, Z
 342:	81 11       	cpse	r24, r1
 344:	f7 cf       	rjmp	.-18     	; 0x334 <stringTransmit+0x12>
	usartTransmit(texto[i]);
}
 346:	cf 91       	pop	r28
 348:	1f 91       	pop	r17
 34a:	0f 91       	pop	r16
 34c:	08 95       	ret

0000034e <main>:

int main(void)
{
 34e:	cf 93       	push	r28
 350:	df 93       	push	r29
 352:	cd b7       	in	r28, 0x3d	; 61
 354:	de b7       	in	r29, 0x3e	; 62
 356:	e6 97       	sbiw	r28, 0x36	; 54
 358:	0f b6       	in	r0, 0x3f	; 63
 35a:	f8 94       	cli
 35c:	de bf       	out	0x3e, r29	; 62
 35e:	0f be       	out	0x3f, r0	; 63
 360:	cd bf       	out	0x3d, r28	; 61
	uint16 i;
	uint8 frameIndex = 0;
	char receivedInSerial[30];
	
	// CONFIGURA A USART
	usartConfig(USART_MODE_ASYNCHRONOUS,USART_BAUD_9600 ,USART_DATA_BITS_8,USART_PARITY_NONE,USART_STOP_BIT_SINGLE);
 362:	e1 2c       	mov	r14, r1
 364:	00 e0       	ldi	r16, 0x00	; 0
 366:	23 e0       	ldi	r18, 0x03	; 3
 368:	40 e8       	ldi	r20, 0x80	; 128
 36a:	55 e2       	ldi	r21, 0x25	; 37
 36c:	60 e0       	ldi	r22, 0x00	; 0
 36e:	70 e0       	ldi	r23, 0x00	; 0
 370:	80 e0       	ldi	r24, 0x00	; 0
 372:	0e 94 5f 00 	call	0xbe	; 0xbe <usartConfig>
	usartEnableReceiver();
 376:	0e 94 0e 01 	call	0x21c	; 0x21c <usartEnableReceiver>
	usartEnableTransmitter();
 37a:	0e 94 15 01 	call	0x22a	; 0x22a <usartEnableTransmitter>
	usartActivateReceptionCompleteInterrupt();
 37e:	0e 94 1c 01 	call	0x238	; 0x238 <usartActivateReceptionCompleteInterrupt>
	
	// Initialize MCP2515
	can_init(BITRATE_125_KBPS);
 382:	84 e0       	ldi	r24, 0x04	; 4
 384:	0e 94 81 02 	call	0x502	; 0x502 <can_init>
	can_set_mode(NORMAL_MODE);
 388:	82 e0       	ldi	r24, 0x02	; 2
 38a:	0e 94 09 04 	call	0x812	; 0x812 <can_set_mode>
	
	stringTransmit("can_init: ok\r\n");
 38e:	80 e0       	ldi	r24, 0x00	; 0
 390:	91 e0       	ldi	r25, 0x01	; 1
 392:	0e 94 91 01 	call	0x322	; 0x322 <stringTransmit>
	
	// Load filters and masks
	//can_static_filter(can_filter);
	
	stringTransmit("can_static_filter: ok\r\n");
 396:	8f e0       	ldi	r24, 0x0F	; 15
 398:	91 e0       	ldi	r25, 0x01	; 1
 39a:	0e 94 91 01 	call	0x322	; 0x322 <stringTransmit>
	
	sei();
 39e:	78 94       	sei
	// Create a test messsage
	can_t msg;
	
	msg.id = 0x0001;
 3a0:	81 e0       	ldi	r24, 0x01	; 1
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	98 a3       	std	Y+32, r25	; 0x20
 3a6:	8f 8f       	std	Y+31, r24	; 0x1f
	msg.length = 1;
 3a8:	8a a3       	std	Y+34, r24	; 0x22
			msg.data[0] = receivedInSerial[frameIndex-1];
			stringTransmit("tentando enviar pela can\r\n");
			can_send_message(&msg);
			stringTransmit("msg enviada pela can\r\n");
			if(frameIndex>=30)
				frameIndex = 0;
 3aa:	f1 2c       	mov	r15, r1
	
	i = 100;
	while (1){
		
		// Check if a new message was received
		if (can_check_message()){
 3ac:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <can_check_message>
 3b0:	88 23       	and	r24, r24
 3b2:	d9 f1       	breq	.+118    	; 0x42a <__FUSE_REGION_LENGTH__+0x2a>
			stringTransmit("r_msg recebida\r\n");
 3b4:	87 e2       	ldi	r24, 0x27	; 39
 3b6:	91 e0       	ldi	r25, 0x01	; 1
 3b8:	0e 94 91 01 	call	0x322	; 0x322 <stringTransmit>
			can_t r_msg;
			// Try to read the message
			if (can_get_message(&r_msg)){
 3bc:	ce 01       	movw	r24, r28
 3be:	8b 96       	adiw	r24, 0x2b	; 43
 3c0:	0e 94 fe 02 	call	0x5fc	; 0x5fc <can_get_message>
 3c4:	88 23       	and	r24, r24
 3c6:	41 f0       	breq	.+16     	; 0x3d8 <main+0x8a>
				stringTransmit("r_msg lida\r\n");
 3c8:	88 e3       	ldi	r24, 0x38	; 56
 3ca:	91 e0       	ldi	r25, 0x01	; 1
 3cc:	0e 94 91 01 	call	0x322	; 0x322 <stringTransmit>
				usartTransmit(r_msg.data[0]);
 3d0:	8f a5       	ldd	r24, Y+47	; 0x2f
 3d2:	0e 94 29 01 	call	0x252	; 0x252 <usartTransmit>
 3d6:	29 c0       	rjmp	.+82     	; 0x42a <__FUSE_REGION_LENGTH__+0x2a>
			}
			else{
				stringTransmit("r_msg com erro\r\n");
 3d8:	85 e4       	ldi	r24, 0x45	; 69
 3da:	91 e0       	ldi	r25, 0x01	; 1
 3dc:	0e 94 91 01 	call	0x322	; 0x322 <stringTransmit>
 3e0:	24 c0       	rjmp	.+72     	; 0x42a <__FUSE_REGION_LENGTH__+0x2a>
			}
		}
		while(!usartIsReceiverBufferEmpty()){
			stringTransmit("msg da usart recebida \r\n");
 3e2:	86 e5       	ldi	r24, 0x56	; 86
 3e4:	91 e0       	ldi	r25, 0x01	; 1
 3e6:	0e 94 91 01 	call	0x322	; 0x322 <stringTransmit>
			receivedInSerial[frameIndex++] = usartGetDataFromReceiverBuffer();
 3ea:	11 e0       	ldi	r17, 0x01	; 1
 3ec:	10 0f       	add	r17, r16
 3ee:	0e 94 69 01 	call	0x2d2	; 0x2d2 <usartGetDataFromReceiverBuffer>
 3f2:	e1 e0       	ldi	r30, 0x01	; 1
 3f4:	f0 e0       	ldi	r31, 0x00	; 0
 3f6:	ec 0f       	add	r30, r28
 3f8:	fd 1f       	adc	r31, r29
 3fa:	e0 0f       	add	r30, r16
 3fc:	f1 1d       	adc	r31, r1
 3fe:	80 83       	st	Z, r24
			msg.data[0] = receivedInSerial[frameIndex-1];
 400:	fe 01       	movw	r30, r28
 402:	e1 0f       	add	r30, r17
 404:	f1 1d       	adc	r31, r1
 406:	80 81       	ld	r24, Z
 408:	8b a3       	std	Y+35, r24	; 0x23
			stringTransmit("tentando enviar pela can\r\n");
 40a:	8f e6       	ldi	r24, 0x6F	; 111
 40c:	91 e0       	ldi	r25, 0x01	; 1
 40e:	0e 94 91 01 	call	0x322	; 0x322 <stringTransmit>
			can_send_message(&msg);
 412:	ce 01       	movw	r24, r28
 414:	4f 96       	adiw	r24, 0x1f	; 31
 416:	0e 94 b1 03 	call	0x762	; 0x762 <can_send_message>
			stringTransmit("msg enviada pela can\r\n");
 41a:	8a e8       	ldi	r24, 0x8A	; 138
 41c:	91 e0       	ldi	r25, 0x01	; 1
 41e:	0e 94 91 01 	call	0x322	; 0x322 <stringTransmit>
			if(frameIndex>=30)
 422:	1e 31       	cpi	r17, 0x1E	; 30
 424:	08 f0       	brcs	.+2      	; 0x428 <__FUSE_REGION_LENGTH__+0x28>
				frameIndex = 0;
 426:	1f 2d       	mov	r17, r15
 428:	01 2f       	mov	r16, r17
			}
			else{
				stringTransmit("r_msg com erro\r\n");
			}
		}
		while(!usartIsReceiverBufferEmpty()){
 42a:	0e 94 8b 01 	call	0x316	; 0x316 <usartIsReceiverBufferEmpty>
 42e:	88 23       	and	r24, r24
 430:	c1 f2       	breq	.-80     	; 0x3e2 <main+0x94>
 432:	bc cf       	rjmp	.-136    	; 0x3ac <main+0x5e>

00000434 <__vector_18>:
	
	return 0;
}

ISR(USART_RX_vect)
{
 434:	1f 92       	push	r1
 436:	0f 92       	push	r0
 438:	0f b6       	in	r0, 0x3f	; 63
 43a:	0f 92       	push	r0
 43c:	11 24       	eor	r1, r1
 43e:	2f 93       	push	r18
 440:	3f 93       	push	r19
 442:	4f 93       	push	r20
 444:	5f 93       	push	r21
 446:	6f 93       	push	r22
 448:	7f 93       	push	r23
 44a:	8f 93       	push	r24
 44c:	9f 93       	push	r25
 44e:	af 93       	push	r26
 450:	bf 93       	push	r27
 452:	ef 93       	push	r30
 454:	ff 93       	push	r31
	usartAddDataToReceiverBuffer(UDR0);
 456:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 45a:	0e 94 34 01 	call	0x268	; 0x268 <usartAddDataToReceiverBuffer>
 45e:	ff 91       	pop	r31
 460:	ef 91       	pop	r30
 462:	bf 91       	pop	r27
 464:	af 91       	pop	r26
 466:	9f 91       	pop	r25
 468:	8f 91       	pop	r24
 46a:	7f 91       	pop	r23
 46c:	6f 91       	pop	r22
 46e:	5f 91       	pop	r21
 470:	4f 91       	pop	r20
 472:	3f 91       	pop	r19
 474:	2f 91       	pop	r18
 476:	0f 90       	pop	r0
 478:	0f be       	out	0x3f, r0	; 63
 47a:	0f 90       	pop	r0
 47c:	1f 90       	pop	r1
 47e:	18 95       	reti

00000480 <mcp2515_write_register>:
	#error	invaild value of MCP2515_CLKOUT_PRESCALER
#endif

// -------------------------------------------------------------------------
void mcp2515_write_register( uint8_t adress, uint8_t data )
{
 480:	cf 93       	push	r28
 482:	df 93       	push	r29
 484:	d8 2f       	mov	r29, r24
 486:	c6 2f       	mov	r28, r22
	RESET(MCP2515_CS);
 488:	2a 98       	cbi	0x05, 2	; 5
	
	spi_putc(SPI_WRITE);
 48a:	82 e0       	ldi	r24, 0x02	; 2
 48c:	0e 94 49 04 	call	0x892	; 0x892 <spi_putc>
	spi_putc(adress);
 490:	8d 2f       	mov	r24, r29
 492:	0e 94 49 04 	call	0x892	; 0x892 <spi_putc>
	spi_putc(data);
 496:	8c 2f       	mov	r24, r28
 498:	0e 94 49 04 	call	0x892	; 0x892 <spi_putc>
	
	SET(MCP2515_CS);
 49c:	2a 9a       	sbi	0x05, 2	; 5
}
 49e:	df 91       	pop	r29
 4a0:	cf 91       	pop	r28
 4a2:	08 95       	ret

000004a4 <mcp2515_read_register>:

// -------------------------------------------------------------------------
uint8_t mcp2515_read_register(uint8_t adress)
{
 4a4:	cf 93       	push	r28
 4a6:	c8 2f       	mov	r28, r24
	uint8_t data;
	
	RESET(MCP2515_CS);
 4a8:	2a 98       	cbi	0x05, 2	; 5
	
	spi_putc(SPI_READ);
 4aa:	83 e0       	ldi	r24, 0x03	; 3
 4ac:	0e 94 49 04 	call	0x892	; 0x892 <spi_putc>
	spi_putc(adress);
 4b0:	8c 2f       	mov	r24, r28
 4b2:	0e 94 49 04 	call	0x892	; 0x892 <spi_putc>
	
	data = spi_putc(0xff);	
 4b6:	8f ef       	ldi	r24, 0xFF	; 255
 4b8:	0e 94 49 04 	call	0x892	; 0x892 <spi_putc>
	
	SET(MCP2515_CS);
 4bc:	2a 9a       	sbi	0x05, 2	; 5
	
	return data;
}
 4be:	cf 91       	pop	r28
 4c0:	08 95       	ret

000004c2 <mcp2515_bit_modify>:

// -------------------------------------------------------------------------
void mcp2515_bit_modify(uint8_t adress, uint8_t mask, uint8_t data)
{
 4c2:	1f 93       	push	r17
 4c4:	cf 93       	push	r28
 4c6:	df 93       	push	r29
 4c8:	18 2f       	mov	r17, r24
 4ca:	d6 2f       	mov	r29, r22
 4cc:	c4 2f       	mov	r28, r20
	RESET(MCP2515_CS);
 4ce:	2a 98       	cbi	0x05, 2	; 5
	
	spi_putc(SPI_BIT_MODIFY);
 4d0:	85 e0       	ldi	r24, 0x05	; 5
 4d2:	0e 94 49 04 	call	0x892	; 0x892 <spi_putc>
	spi_putc(adress);
 4d6:	81 2f       	mov	r24, r17
 4d8:	0e 94 49 04 	call	0x892	; 0x892 <spi_putc>
	spi_putc(mask);
 4dc:	8d 2f       	mov	r24, r29
 4de:	0e 94 49 04 	call	0x892	; 0x892 <spi_putc>
	spi_putc(data);
 4e2:	8c 2f       	mov	r24, r28
 4e4:	0e 94 49 04 	call	0x892	; 0x892 <spi_putc>
	
	SET(MCP2515_CS);
 4e8:	2a 9a       	sbi	0x05, 2	; 5
}
 4ea:	df 91       	pop	r29
 4ec:	cf 91       	pop	r28
 4ee:	1f 91       	pop	r17
 4f0:	08 95       	ret

000004f2 <mcp2515_read_status>:
// ----------------------------------------------------------------------------
uint8_t mcp2515_read_status(uint8_t type)
{
	uint8_t data;
	
	RESET(MCP2515_CS);
 4f2:	2a 98       	cbi	0x05, 2	; 5
	
	spi_putc(type);
 4f4:	0e 94 49 04 	call	0x892	; 0x892 <spi_putc>
	data = spi_putc(0xff);
 4f8:	8f ef       	ldi	r24, 0xFF	; 255
 4fa:	0e 94 49 04 	call	0x892	; 0x892 <spi_putc>
	
	SET(MCP2515_CS);
 4fe:	2a 9a       	sbi	0x05, 2	; 5
	
	return data;
}
 500:	08 95       	ret

00000502 <can_init>:
	}
};

// -------------------------------------------------------------------------
bool mcp2515_init(can_bitrate_t bitrate)
{
 502:	cf 92       	push	r12
 504:	df 92       	push	r13
 506:	ef 92       	push	r14
 508:	ff 92       	push	r15
 50a:	0f 93       	push	r16
 50c:	1f 93       	push	r17
 50e:	cf 93       	push	r28
 510:	df 93       	push	r29
	if (bitrate >= 8)
 512:	88 30       	cpi	r24, 0x08	; 8
 514:	08 f0       	brcs	.+2      	; 0x518 <can_init+0x16>
 516:	62 c0       	rjmp	.+196    	; 0x5dc <can_init+0xda>
 518:	c8 2f       	mov	r28, r24
		return false;
	
	SET(MCP2515_CS);
 51a:	2a 9a       	sbi	0x05, 2	; 5
	SET_OUTPUT(MCP2515_CS);
 51c:	22 9a       	sbi	0x04, 2	; 4
	
	// Aktivieren der Pins fuer das SPI Interface
	RESET(P_SCK);
 51e:	2d 98       	cbi	0x05, 5	; 5
	RESET(P_MOSI);
 520:	2b 98       	cbi	0x05, 3	; 5
	RESET(P_MISO);
 522:	2c 98       	cbi	0x05, 4	; 5
	
	SET_OUTPUT(P_SCK);
 524:	25 9a       	sbi	0x04, 5	; 4
	SET_OUTPUT(P_MOSI);
 526:	23 9a       	sbi	0x04, 3	; 4
	SET_INPUT(P_MISO);
 528:	24 98       	cbi	0x04, 4	; 4
	
	// SPI Einstellung setzen
	mcp2515_spi_init();
 52a:	0e 94 44 04 	call	0x888	; 0x888 <mcp2515_spi_init>
	
	// MCP2515 per Software Reset zuruecksetzten,
	// danach ist er automatisch im Konfigurations Modus
	RESET(MCP2515_CS);
 52e:	2a 98       	cbi	0x05, 2	; 5
	spi_putc(SPI_RESET);
 530:	80 ec       	ldi	r24, 0xC0	; 192
 532:	0e 94 49 04 	call	0x892	; 0x892 <spi_putc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 536:	89 ef       	ldi	r24, 0xF9	; 249
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	01 97       	sbiw	r24, 0x01	; 1
 53c:	f1 f7       	brne	.-4      	; 0x53a <can_init+0x38>
 53e:	00 c0       	rjmp	.+0      	; 0x540 <can_init+0x3e>
 540:	00 00       	nop
	
	_delay_ms(1);
	
	SET(MCP2515_CS);
 542:	2a 9a       	sbi	0x05, 2	; 5
 544:	83 ec       	ldi	r24, 0xC3	; 195
 546:	99 e0       	ldi	r25, 0x09	; 9
 548:	01 97       	sbiw	r24, 0x01	; 1
 54a:	f1 f7       	brne	.-4      	; 0x548 <can_init+0x46>
 54c:	00 c0       	rjmp	.+0      	; 0x54e <can_init+0x4c>
 54e:	00 00       	nop
	
	// ein bisschen warten bis der MCP2515 sich neu gestartet hat
	_delay_ms(10);
	
	// CNF1..3 Register laden (Bittiming)
	RESET(MCP2515_CS);
 550:	2a 98       	cbi	0x05, 2	; 5
	spi_putc(SPI_WRITE);
 552:	82 e0       	ldi	r24, 0x02	; 2
 554:	0e 94 49 04 	call	0x892	; 0x892 <spi_putc>
	spi_putc(CNF3);
 558:	88 e2       	ldi	r24, 0x28	; 40
 55a:	0e 94 49 04 	call	0x892	; 0x892 <spi_putc>
 55e:	8c 2f       	mov	r24, r28
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	6c 01       	movw	r12, r24
 564:	cc 0c       	add	r12, r12
 566:	dd 1c       	adc	r13, r13
 568:	c8 0e       	add	r12, r24
 56a:	d9 1e       	adc	r13, r25
 56c:	00 e0       	ldi	r16, 0x00	; 0
 56e:	10 e0       	ldi	r17, 0x00	; 0
	for (uint8_t i=0; i<3 ;i++ ) {
		spi_putc(pgm_read_byte(&_mcp2515_cnf[bitrate][i]));
 570:	ec 01       	movw	r28, r24
 572:	7e 01       	movw	r14, r28
 574:	f8 01       	movw	r30, r16
 576:	ec 0d       	add	r30, r12
 578:	fd 1d       	adc	r31, r13
 57a:	e8 59       	subi	r30, 0x98	; 152
 57c:	ff 4f       	sbci	r31, 0xFF	; 255
 57e:	84 91       	lpm	r24, Z
 580:	0e 94 49 04 	call	0x892	; 0x892 <spi_putc>
 584:	0f 5f       	subi	r16, 0xFF	; 255
 586:	1f 4f       	sbci	r17, 0xFF	; 255
	
	// CNF1..3 Register laden (Bittiming)
	RESET(MCP2515_CS);
	spi_putc(SPI_WRITE);
	spi_putc(CNF3);
	for (uint8_t i=0; i<3 ;i++ ) {
 588:	03 30       	cpi	r16, 0x03	; 3
 58a:	11 05       	cpc	r17, r1
 58c:	91 f7       	brne	.-28     	; 0x572 <can_init+0x70>
		spi_putc(pgm_read_byte(&_mcp2515_cnf[bitrate][i]));
	}
	// aktivieren/deaktivieren der Interrupts
	spi_putc(MCP2515_INTERRUPTS);
 58e:	83 e0       	ldi	r24, 0x03	; 3
 590:	0e 94 49 04 	call	0x892	; 0x892 <spi_putc>
	SET(MCP2515_CS);
 594:	2a 9a       	sbi	0x05, 2	; 5
	
	// TXnRTS Bits als Inputs schalten
	mcp2515_write_register(TXRTSCTRL, 0);
 596:	60 e0       	ldi	r22, 0x00	; 0
 598:	8d e0       	ldi	r24, 0x0D	; 13
 59a:	0e 94 40 02 	call	0x480	; 0x480 <mcp2515_write_register>
	
	#if defined(MCP2515_INT)
		SET_INPUT(MCP2515_INT);
 59e:	38 98       	cbi	0x07, 0	; 7
		SET(MCP2515_INT);
 5a0:	40 9a       	sbi	0x08, 0	; 8
			// activate the pin RX1BF as GPIO which is connected 
			// to RS of MCP2551 and set it to 0
			mcp2515_write_register(BFPCTRL, (1<<B1BFE));
		#else
			// Deaktivieren der Pins RXnBF Pins (High Impedance State)
			mcp2515_write_register(BFPCTRL, 0);
 5a2:	60 e0       	ldi	r22, 0x00	; 0
 5a4:	8c e0       	ldi	r24, 0x0C	; 12
 5a6:	0e 94 40 02 	call	0x480	; 0x480 <mcp2515_write_register>
	#endif
	
	// Testen ob das auf die beschreibenen Register zugegriffen werden kann
	// (=> ist der Chip ueberhaupt ansprechbar?)
	bool error = false;
	if (mcp2515_read_register(CNF2) != pgm_read_byte(&_mcp2515_cnf[bitrate][1])) {
 5aa:	89 e2       	ldi	r24, 0x29	; 41
 5ac:	0e 94 52 02 	call	0x4a4	; 0x4a4 <mcp2515_read_register>
 5b0:	c8 2f       	mov	r28, r24
 5b2:	f7 01       	movw	r30, r14
 5b4:	ee 0f       	add	r30, r30
 5b6:	ff 1f       	adc	r31, r31
 5b8:	ee 0d       	add	r30, r14
 5ba:	ff 1d       	adc	r31, r15
 5bc:	e7 59       	subi	r30, 0x97	; 151
 5be:	ff 4f       	sbci	r31, 0xFF	; 255
 5c0:	e4 90       	lpm	r14, Z
		error = true;
	}
	
	// Device zurueck in den normalen Modus versetzten
	// und aktivieren/deaktivieren des Clkout-Pins
	mcp2515_write_register(CANCTRL, CLKOUT_PRESCALER_);
 5c2:	60 e0       	ldi	r22, 0x00	; 0
 5c4:	8f e0       	ldi	r24, 0x0F	; 15
 5c6:	0e 94 40 02 	call	0x480	; 0x480 <mcp2515_write_register>
	
	if (error) {
 5ca:	ce 11       	cpse	r28, r14
 5cc:	09 c0       	rjmp	.+18     	; 0x5e0 <can_init+0xde>
		return false;
	}
	else
	{
		while ((mcp2515_read_register(CANSTAT) & 0xe0) != 0) {
 5ce:	8e e0       	ldi	r24, 0x0E	; 14
 5d0:	0e 94 52 02 	call	0x4a4	; 0x4a4 <mcp2515_read_register>
 5d4:	80 7e       	andi	r24, 0xE0	; 224
 5d6:	d9 f7       	brne	.-10     	; 0x5ce <can_init+0xcc>
			// warten bis der neue Modus uebernommen wurde
		}
		
		return true;
 5d8:	81 e0       	ldi	r24, 0x01	; 1
 5da:	03 c0       	rjmp	.+6      	; 0x5e2 <can_init+0xe0>

// -------------------------------------------------------------------------
bool mcp2515_init(can_bitrate_t bitrate)
{
	if (bitrate >= 8)
		return false;
 5dc:	80 e0       	ldi	r24, 0x00	; 0
 5de:	01 c0       	rjmp	.+2      	; 0x5e2 <can_init+0xe0>
	// Device zurueck in den normalen Modus versetzten
	// und aktivieren/deaktivieren des Clkout-Pins
	mcp2515_write_register(CANCTRL, CLKOUT_PRESCALER_);
	
	if (error) {
		return false;
 5e0:	80 e0       	ldi	r24, 0x00	; 0
			// warten bis der neue Modus uebernommen wurde
		}
		
		return true;
	}
}
 5e2:	df 91       	pop	r29
 5e4:	cf 91       	pop	r28
 5e6:	1f 91       	pop	r17
 5e8:	0f 91       	pop	r16
 5ea:	ff 90       	pop	r15
 5ec:	ef 90       	pop	r14
 5ee:	df 90       	pop	r13
 5f0:	cf 90       	pop	r12
 5f2:	08 95       	ret

000005f4 <can_check_message>:
 5f4:	86 b1       	in	r24, 0x06	; 6
 5f6:	80 95       	com	r24
 5f8:	81 70       	andi	r24, 0x01	; 1
 5fa:	08 95       	ret

000005fc <can_get_message>:
 5fc:	cf 92       	push	r12
 5fe:	df 92       	push	r13
 600:	ef 92       	push	r14
 602:	ff 92       	push	r15
 604:	0f 93       	push	r16
 606:	1f 93       	push	r17
 608:	cf 93       	push	r28
 60a:	df 93       	push	r29
 60c:	6c 01       	movw	r12, r24
 60e:	80 eb       	ldi	r24, 0xB0	; 176
 610:	0e 94 79 02 	call	0x4f2	; 0x4f2 <mcp2515_read_status>
 614:	c8 2f       	mov	r28, r24
 616:	d8 2f       	mov	r29, r24
 618:	d0 74       	andi	r29, 0x40	; 64
 61a:	86 fd       	sbrc	r24, 6
 61c:	53 c0       	rjmp	.+166    	; 0x6c4 <can_get_message+0xc8>
 61e:	88 23       	and	r24, r24
 620:	0c f0       	brlt	.+2      	; 0x624 <can_get_message+0x28>
 622:	5a c0       	rjmp	.+180    	; 0x6d8 <can_get_message+0xdc>
 624:	3d c0       	rjmp	.+122    	; 0x6a0 <can_get_message+0xa4>
 626:	8f ef       	ldi	r24, 0xFF	; 255
 628:	0e 94 49 04 	call	0x892	; 0x892 <spi_putc>
 62c:	c3 fb       	bst	r28, 3
 62e:	99 27       	eor	r25, r25
 630:	90 f9       	bld	r25, 0
 632:	f6 01       	movw	r30, r12
 634:	22 81       	ldd	r18, Z+2	; 0x02
 636:	90 fb       	bst	r25, 0
 638:	20 f9       	bld	r18, 0
 63a:	22 83       	std	Z+2, r18	; 0x02
 63c:	8f 70       	andi	r24, 0x0F	; 15
 63e:	83 83       	std	Z+3, r24	; 0x03
 640:	88 23       	and	r24, r24
 642:	a9 f0       	breq	.+42     	; 0x66e <can_get_message+0x72>
 644:	86 01       	movw	r16, r12
 646:	0c 5f       	subi	r16, 0xFC	; 252
 648:	1f 4f       	sbci	r17, 0xFF	; 255
 64a:	9f ef       	ldi	r25, 0xFF	; 255
 64c:	98 0f       	add	r25, r24
 64e:	e9 2e       	mov	r14, r25
 650:	f1 2c       	mov	r15, r1
 652:	f5 e0       	ldi	r31, 0x05	; 5
 654:	ef 0e       	add	r14, r31
 656:	f1 1c       	adc	r15, r1
 658:	ec 0c       	add	r14, r12
 65a:	fd 1c       	adc	r15, r13
 65c:	8f ef       	ldi	r24, 0xFF	; 255
 65e:	0e 94 49 04 	call	0x892	; 0x892 <spi_putc>
 662:	f8 01       	movw	r30, r16
 664:	81 93       	st	Z+, r24
 666:	8f 01       	movw	r16, r30
 668:	ee 15       	cp	r30, r14
 66a:	ff 05       	cpc	r31, r15
 66c:	b9 f7       	brne	.-18     	; 0x65c <can_get_message+0x60>
 66e:	2a 9a       	sbi	0x05, 2	; 5
 670:	dd 23       	and	r29, r29
 672:	31 f0       	breq	.+12     	; 0x680 <can_get_message+0x84>
 674:	40 e0       	ldi	r20, 0x00	; 0
 676:	61 e0       	ldi	r22, 0x01	; 1
 678:	8c e2       	ldi	r24, 0x2C	; 44
 67a:	0e 94 61 02 	call	0x4c2	; 0x4c2 <mcp2515_bit_modify>
 67e:	05 c0       	rjmp	.+10     	; 0x68a <can_get_message+0x8e>
 680:	40 e0       	ldi	r20, 0x00	; 0
 682:	62 e0       	ldi	r22, 0x02	; 2
 684:	8c e2       	ldi	r24, 0x2C	; 44
 686:	0e 94 61 02 	call	0x4c2	; 0x4c2 <mcp2515_bit_modify>
 68a:	c7 70       	andi	r28, 0x07	; 7
 68c:	d1 e0       	ldi	r29, 0x01	; 1
 68e:	dc 0f       	add	r29, r28
 690:	23 c0       	rjmp	.+70     	; 0x6d8 <can_get_message+0xdc>
 692:	2a 9a       	sbi	0x05, 2	; 5
 694:	40 e0       	ldi	r20, 0x00	; 0
 696:	62 e0       	ldi	r22, 0x02	; 2
 698:	8c e2       	ldi	r24, 0x2C	; 44
 69a:	0e 94 61 02 	call	0x4c2	; 0x4c2 <mcp2515_bit_modify>
 69e:	1c c0       	rjmp	.+56     	; 0x6d8 <can_get_message+0xdc>
 6a0:	2a 98       	cbi	0x05, 2	; 5
 6a2:	84 e9       	ldi	r24, 0x94	; 148
 6a4:	0e 94 49 04 	call	0x892	; 0x892 <spi_putc>
 6a8:	c6 01       	movw	r24, r12
 6aa:	0e 94 76 03 	call	0x6ec	; 0x6ec <mcp2515_read_id>
 6ae:	80 fd       	sbrc	r24, 0
 6b0:	f0 cf       	rjmp	.-32     	; 0x692 <can_get_message+0x96>
 6b2:	b9 cf       	rjmp	.-142    	; 0x626 <can_get_message+0x2a>
 6b4:	2a 9a       	sbi	0x05, 2	; 5
 6b6:	40 e0       	ldi	r20, 0x00	; 0
 6b8:	61 e0       	ldi	r22, 0x01	; 1
 6ba:	8c e2       	ldi	r24, 0x2C	; 44
 6bc:	0e 94 61 02 	call	0x4c2	; 0x4c2 <mcp2515_bit_modify>
 6c0:	d0 e0       	ldi	r29, 0x00	; 0
 6c2:	0a c0       	rjmp	.+20     	; 0x6d8 <can_get_message+0xdc>
 6c4:	2a 98       	cbi	0x05, 2	; 5
 6c6:	80 e9       	ldi	r24, 0x90	; 144
 6c8:	0e 94 49 04 	call	0x892	; 0x892 <spi_putc>
 6cc:	c6 01       	movw	r24, r12
 6ce:	0e 94 76 03 	call	0x6ec	; 0x6ec <mcp2515_read_id>
 6d2:	80 fd       	sbrc	r24, 0
 6d4:	ef cf       	rjmp	.-34     	; 0x6b4 <can_get_message+0xb8>
 6d6:	a7 cf       	rjmp	.-178    	; 0x626 <can_get_message+0x2a>
 6d8:	8d 2f       	mov	r24, r29
 6da:	df 91       	pop	r29
 6dc:	cf 91       	pop	r28
 6de:	1f 91       	pop	r17
 6e0:	0f 91       	pop	r16
 6e2:	ff 90       	pop	r15
 6e4:	ef 90       	pop	r14
 6e6:	df 90       	pop	r13
 6e8:	cf 90       	pop	r12
 6ea:	08 95       	ret

000006ec <mcp2515_read_id>:
 6ec:	1f 93       	push	r17
 6ee:	cf 93       	push	r28
 6f0:	df 93       	push	r29
 6f2:	ec 01       	movw	r28, r24
 6f4:	8f ef       	ldi	r24, 0xFF	; 255
 6f6:	0e 94 49 04 	call	0x892	; 0x892 <spi_putc>
 6fa:	18 2f       	mov	r17, r24
 6fc:	8f ef       	ldi	r24, 0xFF	; 255
 6fe:	0e 94 49 04 	call	0x892	; 0x892 <spi_putc>
 702:	48 2f       	mov	r20, r24
 704:	83 ff       	sbrs	r24, 3
 706:	08 c0       	rjmp	.+16     	; 0x718 <mcp2515_read_id+0x2c>
 708:	8f ef       	ldi	r24, 0xFF	; 255
 70a:	0e 94 49 04 	call	0x892	; 0x892 <spi_putc>
 70e:	8f ef       	ldi	r24, 0xFF	; 255
 710:	0e 94 49 04 	call	0x892	; 0x892 <spi_putc>
 714:	81 e0       	ldi	r24, 0x01	; 1
 716:	21 c0       	rjmp	.+66     	; 0x75a <mcp2515_read_id+0x6e>
 718:	8f ef       	ldi	r24, 0xFF	; 255
 71a:	8e bd       	out	0x2e, r24	; 46
 71c:	21 2f       	mov	r18, r17
 71e:	30 e0       	ldi	r19, 0x00	; 0
 720:	22 0f       	add	r18, r18
 722:	33 1f       	adc	r19, r19
 724:	22 0f       	add	r18, r18
 726:	33 1f       	adc	r19, r19
 728:	22 0f       	add	r18, r18
 72a:	33 1f       	adc	r19, r19
 72c:	39 83       	std	Y+1, r19	; 0x01
 72e:	28 83       	st	Y, r18
 730:	0d b4       	in	r0, 0x2d	; 45
 732:	07 fe       	sbrs	r0, 7
 734:	fd cf       	rjmp	.-6      	; 0x730 <mcp2515_read_id+0x44>
 736:	8e b5       	in	r24, 0x2e	; 46
 738:	8f ef       	ldi	r24, 0xFF	; 255
 73a:	8e bd       	out	0x2e, r24	; 46
 73c:	88 81       	ld	r24, Y
 73e:	94 2f       	mov	r25, r20
 740:	92 95       	swap	r25
 742:	96 95       	lsr	r25
 744:	97 70       	andi	r25, 0x07	; 7
 746:	98 2b       	or	r25, r24
 748:	98 83       	st	Y, r25
 74a:	0d b4       	in	r0, 0x2d	; 45
 74c:	07 fe       	sbrs	r0, 7
 74e:	fd cf       	rjmp	.-6      	; 0x74a <mcp2515_read_id+0x5e>
 750:	8e b5       	in	r24, 0x2e	; 46
 752:	84 2f       	mov	r24, r20
 754:	80 71       	andi	r24, 0x10	; 16
 756:	44 fd       	sbrc	r20, 4
 758:	82 e0       	ldi	r24, 0x02	; 2
 75a:	df 91       	pop	r29
 75c:	cf 91       	pop	r28
 75e:	1f 91       	pop	r17
 760:	08 95       	ret

00000762 <can_send_message>:
 762:	df 92       	push	r13
 764:	ef 92       	push	r14
 766:	ff 92       	push	r15
 768:	0f 93       	push	r16
 76a:	1f 93       	push	r17
 76c:	cf 93       	push	r28
 76e:	df 93       	push	r29
 770:	7c 01       	movw	r14, r24
 772:	80 ea       	ldi	r24, 0xA0	; 160
 774:	0e 94 79 02 	call	0x4f2	; 0x4f2 <mcp2515_read_status>
 778:	82 ff       	sbrs	r24, 2
 77a:	08 c0       	rjmp	.+16     	; 0x78c <can_send_message+0x2a>
 77c:	84 ff       	sbrs	r24, 4
 77e:	08 c0       	rjmp	.+16     	; 0x790 <can_send_message+0x2e>
 780:	86 fd       	sbrc	r24, 6
 782:	3e c0       	rjmp	.+124    	; 0x800 <can_send_message+0x9e>
 784:	68 94       	set
 786:	dd 24       	eor	r13, r13
 788:	d2 f8       	bld	r13, 2
 78a:	05 c0       	rjmp	.+10     	; 0x796 <can_send_message+0x34>
 78c:	d1 2c       	mov	r13, r1
 78e:	03 c0       	rjmp	.+6      	; 0x796 <can_send_message+0x34>
 790:	68 94       	set
 792:	dd 24       	eor	r13, r13
 794:	d1 f8       	bld	r13, 1
 796:	2a 98       	cbi	0x05, 2	; 5
 798:	8d 2d       	mov	r24, r13
 79a:	80 64       	ori	r24, 0x40	; 64
 79c:	0e 94 49 04 	call	0x892	; 0x892 <spi_putc>
 7a0:	c7 01       	movw	r24, r14
 7a2:	0e 94 29 04 	call	0x852	; 0x852 <mcp2515_write_id>
 7a6:	f7 01       	movw	r30, r14
 7a8:	13 81       	ldd	r17, Z+3	; 0x03
 7aa:	1f 70       	andi	r17, 0x0F	; 15
 7ac:	82 81       	ldd	r24, Z+2	; 0x02
 7ae:	80 ff       	sbrs	r24, 0
 7b0:	05 c0       	rjmp	.+10     	; 0x7bc <can_send_message+0x5a>
 7b2:	81 2f       	mov	r24, r17
 7b4:	80 64       	ori	r24, 0x40	; 64
 7b6:	0e 94 49 04 	call	0x892	; 0x892 <spi_putc>
 7ba:	14 c0       	rjmp	.+40     	; 0x7e4 <can_send_message+0x82>
 7bc:	81 2f       	mov	r24, r17
 7be:	0e 94 49 04 	call	0x892	; 0x892 <spi_putc>
 7c2:	11 23       	and	r17, r17
 7c4:	79 f0       	breq	.+30     	; 0x7e4 <can_send_message+0x82>
 7c6:	e7 01       	movw	r28, r14
 7c8:	24 96       	adiw	r28, 0x04	; 4
 7ca:	11 50       	subi	r17, 0x01	; 1
 7cc:	01 2f       	mov	r16, r17
 7ce:	10 e0       	ldi	r17, 0x00	; 0
 7d0:	0b 5f       	subi	r16, 0xFB	; 251
 7d2:	1f 4f       	sbci	r17, 0xFF	; 255
 7d4:	0e 0d       	add	r16, r14
 7d6:	1f 1d       	adc	r17, r15
 7d8:	89 91       	ld	r24, Y+
 7da:	0e 94 49 04 	call	0x892	; 0x892 <spi_putc>
 7de:	c0 17       	cp	r28, r16
 7e0:	d1 07       	cpc	r29, r17
 7e2:	d1 f7       	brne	.-12     	; 0x7d8 <can_send_message+0x76>
 7e4:	2a 9a       	sbi	0x05, 2	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 7e6:	00 00       	nop
 7e8:	2a 98       	cbi	0x05, 2	; 5
 7ea:	d1 10       	cpse	r13, r1
 7ec:	02 c0       	rjmp	.+4      	; 0x7f2 <can_send_message+0x90>
 7ee:	dd 24       	eor	r13, r13
 7f0:	d3 94       	inc	r13
 7f2:	8d 2d       	mov	r24, r13
 7f4:	80 68       	ori	r24, 0x80	; 128
 7f6:	0e 94 49 04 	call	0x892	; 0x892 <spi_putc>
 7fa:	2a 9a       	sbi	0x05, 2	; 5
 7fc:	8d 2d       	mov	r24, r13
 7fe:	01 c0       	rjmp	.+2      	; 0x802 <can_send_message+0xa0>
 800:	80 e0       	ldi	r24, 0x00	; 0
 802:	df 91       	pop	r29
 804:	cf 91       	pop	r28
 806:	1f 91       	pop	r17
 808:	0f 91       	pop	r16
 80a:	ff 90       	pop	r15
 80c:	ef 90       	pop	r14
 80e:	df 90       	pop	r13
 810:	08 95       	ret

00000812 <can_set_mode>:
 812:	cf 93       	push	r28
 814:	df 93       	push	r29
 816:	88 23       	and	r24, r24
 818:	31 f0       	breq	.+12     	; 0x826 <can_set_mode+0x14>
 81a:	81 30       	cpi	r24, 0x01	; 1
 81c:	31 f0       	breq	.+12     	; 0x82a <can_set_mode+0x18>
 81e:	83 30       	cpi	r24, 0x03	; 3
 820:	31 f4       	brne	.+12     	; 0x82e <can_set_mode+0x1c>
 822:	c0 e2       	ldi	r28, 0x20	; 32
 824:	05 c0       	rjmp	.+10     	; 0x830 <can_set_mode+0x1e>
 826:	c0 e6       	ldi	r28, 0x60	; 96
 828:	03 c0       	rjmp	.+6      	; 0x830 <can_set_mode+0x1e>
 82a:	c0 e4       	ldi	r28, 0x40	; 64
 82c:	01 c0       	rjmp	.+2      	; 0x830 <can_set_mode+0x1e>
 82e:	c0 e0       	ldi	r28, 0x00	; 0
 830:	4c 2f       	mov	r20, r28
 832:	60 ee       	ldi	r22, 0xE0	; 224
 834:	8f e0       	ldi	r24, 0x0F	; 15
 836:	0e 94 61 02 	call	0x4c2	; 0x4c2 <mcp2515_bit_modify>
 83a:	d0 e0       	ldi	r29, 0x00	; 0
 83c:	8e e0       	ldi	r24, 0x0E	; 14
 83e:	0e 94 52 02 	call	0x4a4	; 0x4a4 <mcp2515_read_register>
 842:	80 7e       	andi	r24, 0xE0	; 224
 844:	90 e0       	ldi	r25, 0x00	; 0
 846:	8c 17       	cp	r24, r28
 848:	9d 07       	cpc	r25, r29
 84a:	c1 f7       	brne	.-16     	; 0x83c <can_set_mode+0x2a>
 84c:	df 91       	pop	r29
 84e:	cf 91       	pop	r28
 850:	08 95       	ret

00000852 <mcp2515_write_id>:
 852:	fc 01       	movw	r30, r24
 854:	20 81       	ld	r18, Z
 856:	31 81       	ldd	r19, Z+1	; 0x01
 858:	36 95       	lsr	r19
 85a:	27 95       	ror	r18
 85c:	36 95       	lsr	r19
 85e:	27 95       	ror	r18
 860:	36 95       	lsr	r19
 862:	27 95       	ror	r18
 864:	2e bd       	out	0x2e, r18	; 46
 866:	80 81       	ld	r24, Z
 868:	82 95       	swap	r24
 86a:	88 0f       	add	r24, r24
 86c:	80 7e       	andi	r24, 0xE0	; 224
 86e:	0d b4       	in	r0, 0x2d	; 45
 870:	07 fe       	sbrs	r0, 7
 872:	fd cf       	rjmp	.-6      	; 0x86e <mcp2515_write_id+0x1c>
 874:	9e b5       	in	r25, 0x2e	; 46
 876:	0e 94 49 04 	call	0x892	; 0x892 <spi_putc>
 87a:	80 e0       	ldi	r24, 0x00	; 0
 87c:	0e 94 49 04 	call	0x892	; 0x892 <spi_putc>
 880:	80 e0       	ldi	r24, 0x00	; 0
 882:	0e 94 49 04 	call	0x892	; 0x892 <spi_putc>
 886:	08 95       	ret

00000888 <mcp2515_spi_init>:
 888:	81 e5       	ldi	r24, 0x51	; 81
 88a:	8c bd       	out	0x2c, r24	; 44
 88c:	81 e0       	ldi	r24, 0x01	; 1
 88e:	8d bd       	out	0x2d, r24	; 45
 890:	08 95       	ret

00000892 <spi_putc>:
 892:	8e bd       	out	0x2e, r24	; 46
 894:	0d b4       	in	r0, 0x2d	; 45
 896:	07 fe       	sbrs	r0, 7
 898:	fd cf       	rjmp	.-6      	; 0x894 <spi_putc+0x2>
 89a:	8e b5       	in	r24, 0x2e	; 46
 89c:	08 95       	ret

0000089e <__udivmodsi4>:
 89e:	a1 e2       	ldi	r26, 0x21	; 33
 8a0:	1a 2e       	mov	r1, r26
 8a2:	aa 1b       	sub	r26, r26
 8a4:	bb 1b       	sub	r27, r27
 8a6:	fd 01       	movw	r30, r26
 8a8:	0d c0       	rjmp	.+26     	; 0x8c4 <__udivmodsi4_ep>

000008aa <__udivmodsi4_loop>:
 8aa:	aa 1f       	adc	r26, r26
 8ac:	bb 1f       	adc	r27, r27
 8ae:	ee 1f       	adc	r30, r30
 8b0:	ff 1f       	adc	r31, r31
 8b2:	a2 17       	cp	r26, r18
 8b4:	b3 07       	cpc	r27, r19
 8b6:	e4 07       	cpc	r30, r20
 8b8:	f5 07       	cpc	r31, r21
 8ba:	20 f0       	brcs	.+8      	; 0x8c4 <__udivmodsi4_ep>
 8bc:	a2 1b       	sub	r26, r18
 8be:	b3 0b       	sbc	r27, r19
 8c0:	e4 0b       	sbc	r30, r20
 8c2:	f5 0b       	sbc	r31, r21

000008c4 <__udivmodsi4_ep>:
 8c4:	66 1f       	adc	r22, r22
 8c6:	77 1f       	adc	r23, r23
 8c8:	88 1f       	adc	r24, r24
 8ca:	99 1f       	adc	r25, r25
 8cc:	1a 94       	dec	r1
 8ce:	69 f7       	brne	.-38     	; 0x8aa <__udivmodsi4_loop>
 8d0:	60 95       	com	r22
 8d2:	70 95       	com	r23
 8d4:	80 95       	com	r24
 8d6:	90 95       	com	r25
 8d8:	9b 01       	movw	r18, r22
 8da:	ac 01       	movw	r20, r24
 8dc:	bd 01       	movw	r22, r26
 8de:	cf 01       	movw	r24, r30
 8e0:	08 95       	ret

000008e2 <__ashrdi3>:
 8e2:	97 fb       	bst	r25, 7
 8e4:	10 f8       	bld	r1, 0

000008e6 <__lshrdi3>:
 8e6:	16 94       	lsr	r1
 8e8:	00 08       	sbc	r0, r0
 8ea:	0f 93       	push	r16
 8ec:	08 30       	cpi	r16, 0x08	; 8
 8ee:	98 f0       	brcs	.+38     	; 0x916 <__stack+0x17>
 8f0:	08 50       	subi	r16, 0x08	; 8
 8f2:	23 2f       	mov	r18, r19
 8f4:	34 2f       	mov	r19, r20
 8f6:	45 2f       	mov	r20, r21
 8f8:	56 2f       	mov	r21, r22
 8fa:	67 2f       	mov	r22, r23
 8fc:	78 2f       	mov	r23, r24
 8fe:	89 2f       	mov	r24, r25
 900:	90 2d       	mov	r25, r0
 902:	f4 cf       	rjmp	.-24     	; 0x8ec <__lshrdi3+0x6>
 904:	05 94       	asr	r0
 906:	97 95       	ror	r25
 908:	87 95       	ror	r24
 90a:	77 95       	ror	r23
 90c:	67 95       	ror	r22
 90e:	57 95       	ror	r21
 910:	47 95       	ror	r20
 912:	37 95       	ror	r19
 914:	27 95       	ror	r18
 916:	0a 95       	dec	r16
 918:	aa f7       	brpl	.-22     	; 0x904 <__stack+0x5>
 91a:	0f 91       	pop	r16
 91c:	08 95       	ret

0000091e <_exit>:
 91e:	f8 94       	cli

00000920 <__stop_program>:
 920:	ff cf       	rjmp	.-2      	; 0x920 <__stop_program>
