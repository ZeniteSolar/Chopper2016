
placaAdicionalChopper.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000034  00800100  00001ba2  00001c36  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ba2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000048  00800134  00800134  00001c6a  2**0
                  ALLOC
  3 .stab         00000c54  00000000  00000000  00001c6c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d41  00000000  00000000  000028c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000022  00000000  00000000  00003601  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000048  00000000  00000000  00003623  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000033d5  00000000  00000000  0000366b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000006bb  00000000  00000000  00006a40  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000083c  00000000  00000000  000070fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000de8  00000000  00000000  00007938  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002634  00000000  00000000  00008720  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001ae5  00000000  00000000  0000ad54  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000030  00000000  00000000  0000c839  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__ctors_end>
       4:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
       8:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
       c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      10:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      14:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      18:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      1c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      20:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      24:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      28:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      2c:	0c 94 cd 01 	jmp	0x39a	; 0x39a <__vector_11>
      30:	0c 94 e3 01 	jmp	0x3c6	; 0x3c6 <__vector_12>
      34:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      38:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      3c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      40:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__vector_16>
      44:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      48:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__vector_18>
      4c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      50:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      54:	0c 94 66 01 	jmp	0x2cc	; 0x2cc <__vector_21>
      58:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      5c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      60:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      64:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      68:	3e 0c       	add	r3, r14
      6a:	41 0c       	add	r4, r1
      6c:	4b 0c       	add	r4, r11
      6e:	4e 0c       	add	r4, r14
      70:	51 0c       	add	r5, r1
      72:	54 0c       	add	r5, r4
      74:	57 0c       	add	r5, r7
      76:	5e 0c       	add	r5, r14
      78:	65 0c       	add	r6, r5
      7a:	68 0c       	add	r6, r8
      7c:	6b 0c       	add	r6, r11
      7e:	6e 0c       	add	r6, r14
      80:	71 0c       	add	r7, r1
      82:	74 0c       	add	r7, r4
      84:	ae 0c       	add	r10, r14
      86:	c8 0c       	add	r12, r8
      88:	cf 0c       	add	r12, r15
      8a:	f0 0c       	add	r15, r0
      8c:	0d 0d       	add	r16, r13
      8e:	14 0d       	add	r17, r4
      90:	22 0d       	add	r18, r2
      92:	31 0d       	add	r19, r1
      94:	38 0d       	add	r19, r8
      96:	3f 0d       	add	r19, r15
      98:	e1 02       	muls	r30, r17
      9a:	f1 02       	muls	r31, r17
      9c:	e3 02       	muls	r30, r19
      9e:	e5 02       	muls	r30, r21
      a0:	e7 02       	muls	r30, r23
      a2:	e9 02       	muls	r30, r25
      a4:	eb 02       	muls	r30, r27
      a6:	ed 02       	muls	r30, r29
      a8:	ef 02       	muls	r30, r31
      aa:	14 07       	cpc	r17, r20
      ac:	07 07       	cpc	r16, r23
      ae:	09 07       	cpc	r16, r25
      b0:	0b 07       	cpc	r16, r27
      b2:	0d 07       	cpc	r16, r29
      b4:	0f 07       	cpc	r16, r31
      b6:	11 07       	cpc	r17, r17
      b8:	13 07       	cpc	r17, r19
      ba:	0f 09       	sbc	r16, r15
      bc:	11 09       	sbc	r17, r1
      be:	13 09       	sbc	r17, r3
      c0:	15 09       	sbc	r17, r5
      c2:	17 09       	sbc	r17, r7
      c4:	19 09       	sbc	r17, r9
      c6:	1b 09       	sbc	r17, r11

000000c8 <__ctors_end>:
      c8:	11 24       	eor	r1, r1
      ca:	1f be       	out	0x3f, r1	; 63
      cc:	cf ef       	ldi	r28, 0xFF	; 255
      ce:	d8 e0       	ldi	r29, 0x08	; 8
      d0:	de bf       	out	0x3e, r29	; 62
      d2:	cd bf       	out	0x3d, r28	; 61

000000d4 <__do_copy_data>:
      d4:	11 e0       	ldi	r17, 0x01	; 1
      d6:	a0 e0       	ldi	r26, 0x00	; 0
      d8:	b1 e0       	ldi	r27, 0x01	; 1
      da:	e2 ea       	ldi	r30, 0xA2	; 162
      dc:	fb e1       	ldi	r31, 0x1B	; 27
      de:	02 c0       	rjmp	.+4      	; 0xe4 <__do_copy_data+0x10>
      e0:	05 90       	lpm	r0, Z+
      e2:	0d 92       	st	X+, r0
      e4:	a4 33       	cpi	r26, 0x34	; 52
      e6:	b1 07       	cpc	r27, r17
      e8:	d9 f7       	brne	.-10     	; 0xe0 <__do_copy_data+0xc>

000000ea <__do_clear_bss>:
      ea:	11 e0       	ldi	r17, 0x01	; 1
      ec:	a4 e3       	ldi	r26, 0x34	; 52
      ee:	b1 e0       	ldi	r27, 0x01	; 1
      f0:	01 c0       	rjmp	.+2      	; 0xf4 <.do_clear_bss_start>

000000f2 <.do_clear_bss_loop>:
      f2:	1d 92       	st	X+, r1

000000f4 <.do_clear_bss_start>:
      f4:	ac 37       	cpi	r26, 0x7C	; 124
      f6:	b1 07       	cpc	r27, r17
      f8:	e1 f7       	brne	.-8      	; 0xf2 <.do_clear_bss_loop>
      fa:	0e 94 3e 0b 	call	0x167c	; 0x167c <main>
      fe:	0c 94 cf 0d 	jmp	0x1b9e	; 0x1b9e <_exit>

00000102 <__bad_interrupt>:
     102:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000106 <seta_dc>:
uint8 maxTemp = 70;				//temperatura maxima, desliga o sistema
uint8 criticalTemp = 60;		//temperatura critica
uint8 minVoltage = 30;

void seta_dc(uint8 d_cycle)		//função para definição do Duty Cicle do PWM
{
     106:	cf 93       	push	r28
     108:	c8 2f       	mov	r28, r24
	dcReq = d_cycle;
     10a:	80 93 34 01 	sts	0x0134, r24
	if(dcReq < minDC)				// Comparação com o valor mínimo de Duty Cicle
     10e:	80 91 05 01 	lds	r24, 0x0105
     112:	c8 17       	cp	r28, r24
     114:	18 f4       	brcc	.+6      	; 0x11c <seta_dc+0x16>
		status.dc = 0;
     116:	10 92 3d 01 	sts	0x013D, r1
     11a:	1a c0       	rjmp	.+52     	; 0x150 <seta_dc+0x4a>
	else
	{
		if(dcReq > maxDC)			//Comparação com o valor máximo de Duty Cicle
     11c:	80 91 04 01 	lds	r24, 0x0104
     120:	8c 17       	cp	r24, r28
     122:	20 f4       	brcc	.+8      	; 0x12c <seta_dc+0x26>
			status.dc = 100;
     124:	84 e6       	ldi	r24, 0x64	; 100
     126:	80 93 3d 01 	sts	0x013D, r24
     12a:	12 c0       	rjmp	.+36     	; 0x150 <seta_dc+0x4a>
		else
		{
			status.dc = dcReq;
     12c:	c0 93 3d 01 	sts	0x013D, r28
			timer1SetCompareBValue((status.dc * (timer1GetCompareAValue()))/100);		//seta o valor do comparador B para gerar o DC requerido
     130:	0e 94 41 08 	call	0x1082	; 0x1082 <timer1GetCompareAValue>
     134:	9c 01       	movw	r18, r24
     136:	c2 9f       	mul	r28, r18
     138:	c0 01       	movw	r24, r0
     13a:	c3 9f       	mul	r28, r19
     13c:	90 0d       	add	r25, r0
     13e:	11 24       	eor	r1, r1
     140:	64 e6       	ldi	r22, 0x64	; 100
     142:	70 e0       	ldi	r23, 0x00	; 0
     144:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <__udivmodhi4>
     148:	cb 01       	movw	r24, r22
		}
	}
}
     14a:	cf 91       	pop	r28
		if(dcReq > maxDC)			//Comparação com o valor máximo de Duty Cicle
			status.dc = 100;
		else
		{
			status.dc = dcReq;
			timer1SetCompareBValue((status.dc * (timer1GetCompareAValue()))/100);		//seta o valor do comparador B para gerar o DC requerido
     14c:	0c 94 46 08 	jmp	0x108c	; 0x108c <timer1SetCompareBValue>
		}
	}
}
     150:	cf 91       	pop	r28
     152:	08 95       	ret

00000154 <esvaziaBuffer>:

//esvazia o buffer de entrada da usart
void esvaziaBuffer()
{
	while(!usartIsReceiverBufferEmpty())
     154:	0e 94 28 0b 	call	0x1650	; 0x1650 <usartIsReceiverBufferEmpty>
     158:	81 11       	cpse	r24, r1
     15a:	03 c0       	rjmp	.+6      	; 0x162 <esvaziaBuffer+0xe>
		usartGetDataFromReceiverBuffer();
     15c:	0e 94 06 0b 	call	0x160c	; 0x160c <usartGetDataFromReceiverBuffer>
     160:	f9 cf       	rjmp	.-14     	; 0x154 <esvaziaBuffer>
}
     162:	08 95       	ret

00000164 <stringTransmit>:

//envia uma msg usando o protocolo GUI
void stringTransmit(char* texto)
{
     164:	1f 93       	push	r17
     166:	cf 93       	push	r28
     168:	df 93       	push	r29
     16a:	ec 01       	movw	r28, r24
	uint8 i = 0;
	usartTransmit(INICIODOPACOTE);
     16c:	80 e4       	ldi	r24, 0x40	; 64
     16e:	0e 94 8e 0a 	call	0x151c	; 0x151c <usartTransmit>
	for(i = 0; texto[i] != '\0'; i++)
     172:	10 e0       	ldi	r17, 0x00	; 0
     174:	fe 01       	movw	r30, r28
     176:	e1 0f       	add	r30, r17
     178:	f1 1d       	adc	r31, r1
     17a:	80 81       	ld	r24, Z
     17c:	88 23       	and	r24, r24
     17e:	21 f0       	breq	.+8      	; 0x188 <stringTransmit+0x24>
		usartTransmit(texto[i]);
     180:	0e 94 8e 0a 	call	0x151c	; 0x151c <usartTransmit>
//envia uma msg usando o protocolo GUI
void stringTransmit(char* texto)
{
	uint8 i = 0;
	usartTransmit(INICIODOPACOTE);
	for(i = 0; texto[i] != '\0'; i++)
     184:	1f 5f       	subi	r17, 0xFF	; 255
     186:	f6 cf       	rjmp	.-20     	; 0x174 <stringTransmit+0x10>
		usartTransmit(texto[i]);
	usartTransmit(FINALDOPACOTE);
     188:	8a e2       	ldi	r24, 0x2A	; 42
}
     18a:	df 91       	pop	r29
     18c:	cf 91       	pop	r28
     18e:	1f 91       	pop	r17
{
	uint8 i = 0;
	usartTransmit(INICIODOPACOTE);
	for(i = 0; texto[i] != '\0'; i++)
		usartTransmit(texto[i]);
	usartTransmit(FINALDOPACOTE);
     190:	0c 94 8e 0a 	jmp	0x151c	; 0x151c <usartTransmit>

00000194 <uint16ToString4>:
}

//convert uint16 to string of 4 characters
void uint16ToString4(char* str,uint16 value)
{
     194:	0f 93       	push	r16
     196:	1f 93       	push	r17
     198:	cf 93       	push	r28
     19a:	df 93       	push	r29
     19c:	fc 01       	movw	r30, r24
     19e:	9b 01       	movw	r18, r22
	str[4] = '\0';
     1a0:	14 82       	std	Z+4, r1	; 0x04
	str[3] = (char ) (value%10 + 48);
     1a2:	ca e0       	ldi	r28, 0x0A	; 10
     1a4:	d0 e0       	ldi	r29, 0x00	; 0
     1a6:	cb 01       	movw	r24, r22
     1a8:	be 01       	movw	r22, r28
     1aa:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <__udivmodhi4>
     1ae:	80 5d       	subi	r24, 0xD0	; 208
     1b0:	83 83       	std	Z+3, r24	; 0x03
	str[2] = (char) ((value%100) / 10 + 48);
     1b2:	04 e6       	ldi	r16, 0x64	; 100
     1b4:	10 e0       	ldi	r17, 0x00	; 0
     1b6:	c9 01       	movw	r24, r18
     1b8:	b8 01       	movw	r22, r16
     1ba:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <__udivmodhi4>
     1be:	be 01       	movw	r22, r28
     1c0:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <__udivmodhi4>
     1c4:	60 5d       	subi	r22, 0xD0	; 208
     1c6:	62 83       	std	Z+2, r22	; 0x02
	str[1] = (char) ((value%1000) / 100 + 48);
     1c8:	c8 ee       	ldi	r28, 0xE8	; 232
     1ca:	d3 e0       	ldi	r29, 0x03	; 3
     1cc:	c9 01       	movw	r24, r18
     1ce:	be 01       	movw	r22, r28
     1d0:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <__udivmodhi4>
     1d4:	b8 01       	movw	r22, r16
     1d6:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <__udivmodhi4>
     1da:	60 5d       	subi	r22, 0xD0	; 208
     1dc:	61 83       	std	Z+1, r22	; 0x01
	str[0] = (char) ((value%10000) / 1000 + 48);
     1de:	c9 01       	movw	r24, r18
     1e0:	60 e1       	ldi	r22, 0x10	; 16
     1e2:	77 e2       	ldi	r23, 0x27	; 39
     1e4:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <__udivmodhi4>
     1e8:	be 01       	movw	r22, r28
     1ea:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <__udivmodhi4>
     1ee:	60 5d       	subi	r22, 0xD0	; 208
     1f0:	60 83       	st	Z, r22
}
     1f2:	df 91       	pop	r29
     1f4:	cf 91       	pop	r28
     1f6:	1f 91       	pop	r17
     1f8:	0f 91       	pop	r16
     1fa:	08 95       	ret

000001fc <uint8ToString4>:

//convert uint8 to string of 4 characters
void uint8ToString4(char* str,uint16 value)
{
     1fc:	0f 93       	push	r16
     1fe:	1f 93       	push	r17
     200:	cf 93       	push	r28
     202:	df 93       	push	r29
     204:	fc 01       	movw	r30, r24
     206:	9b 01       	movw	r18, r22
	str[4] = '\0';
     208:	14 82       	std	Z+4, r1	; 0x04
	str[3] = (char ) (value%10 + 48);
     20a:	0a e0       	ldi	r16, 0x0A	; 10
     20c:	10 e0       	ldi	r17, 0x00	; 0
     20e:	cb 01       	movw	r24, r22
     210:	b8 01       	movw	r22, r16
     212:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <__udivmodhi4>
     216:	80 5d       	subi	r24, 0xD0	; 208
     218:	83 83       	std	Z+3, r24	; 0x03
	str[2] = (char) ((value%100) / 10 + 48);
     21a:	c4 e6       	ldi	r28, 0x64	; 100
     21c:	d0 e0       	ldi	r29, 0x00	; 0
     21e:	c9 01       	movw	r24, r18
     220:	be 01       	movw	r22, r28
     222:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <__udivmodhi4>
     226:	b8 01       	movw	r22, r16
     228:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <__udivmodhi4>
     22c:	60 5d       	subi	r22, 0xD0	; 208
     22e:	62 83       	std	Z+2, r22	; 0x02
	str[1] = (char) ((value%1000) / 100 + 48);
     230:	c9 01       	movw	r24, r18
     232:	68 ee       	ldi	r22, 0xE8	; 232
     234:	73 e0       	ldi	r23, 0x03	; 3
     236:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <__udivmodhi4>
     23a:	be 01       	movw	r22, r28
     23c:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <__udivmodhi4>
     240:	60 5d       	subi	r22, 0xD0	; 208
     242:	61 83       	std	Z+1, r22	; 0x01
	str[0] = '0';
     244:	80 e3       	ldi	r24, 0x30	; 48
     246:	80 83       	st	Z, r24
}
     248:	df 91       	pop	r29
     24a:	cf 91       	pop	r28
     24c:	1f 91       	pop	r17
     24e:	0f 91       	pop	r16
     250:	08 95       	ret

00000252 <string4ToUint16>:

//convert string of 4 characters uint16
uint16 string4ToUint16(char* str)
{
     252:	fc 01       	movw	r30, r24
	uint16 value;
	value = (uint16) (str[0]-48)*1000 + (str[1]-48)*100 
	+ (str[2]-48)*10 + str[3]-48;
     254:	23 81       	ldd	r18, Z+3	; 0x03
     256:	30 e0       	ldi	r19, 0x00	; 0

//convert string of 4 characters uint16
uint16 string4ToUint16(char* str)
{
	uint16 value;
	value = (uint16) (str[0]-48)*1000 + (str[1]-48)*100 
     258:	20 53       	subi	r18, 0x30	; 48
     25a:	31 09       	sbc	r19, r1
     25c:	80 81       	ld	r24, Z
     25e:	90 e0       	ldi	r25, 0x00	; 0
     260:	c0 97       	sbiw	r24, 0x30	; 48
     262:	68 ee       	ldi	r22, 0xE8	; 232
     264:	73 e0       	ldi	r23, 0x03	; 3
     266:	86 9f       	mul	r24, r22
     268:	a0 01       	movw	r20, r0
     26a:	87 9f       	mul	r24, r23
     26c:	50 0d       	add	r21, r0
     26e:	96 9f       	mul	r25, r22
     270:	50 0d       	add	r21, r0
     272:	11 24       	eor	r1, r1
	+ (str[2]-48)*10 + str[3]-48;
     274:	24 0f       	add	r18, r20
     276:	35 1f       	adc	r19, r21

//convert string of 4 characters uint16
uint16 string4ToUint16(char* str)
{
	uint16 value;
	value = (uint16) (str[0]-48)*1000 + (str[1]-48)*100 
     278:	81 81       	ldd	r24, Z+1	; 0x01
     27a:	90 e0       	ldi	r25, 0x00	; 0
     27c:	c0 97       	sbiw	r24, 0x30	; 48
     27e:	64 e6       	ldi	r22, 0x64	; 100
     280:	68 9f       	mul	r22, r24
     282:	a0 01       	movw	r20, r0
     284:	69 9f       	mul	r22, r25
     286:	50 0d       	add	r21, r0
     288:	11 24       	eor	r1, r1
	+ (str[2]-48)*10 + str[3]-48;
     28a:	24 0f       	add	r18, r20
     28c:	35 1f       	adc	r19, r21
     28e:	42 81       	ldd	r20, Z+2	; 0x02
     290:	50 e0       	ldi	r21, 0x00	; 0
     292:	40 53       	subi	r20, 0x30	; 48
     294:	51 09       	sbc	r21, r1
     296:	6a e0       	ldi	r22, 0x0A	; 10
     298:	64 9f       	mul	r22, r20
     29a:	c0 01       	movw	r24, r0
     29c:	65 9f       	mul	r22, r21
     29e:	90 0d       	add	r25, r0
     2a0:	11 24       	eor	r1, r1
	return value;
}
     2a2:	82 0f       	add	r24, r18
     2a4:	93 1f       	adc	r25, r19
     2a6:	08 95       	ret

000002a8 <string4Touint8>:

//convert string of 4 characters uint8
uint8 string4Touint8(char* str)
{
     2a8:	fc 01       	movw	r30, r24
	uint8 value;
	value = (uint8) ((str[1]-48)*100 
     2aa:	83 81       	ldd	r24, Z+3	; 0x03
     2ac:	80 53       	subi	r24, 0x30	; 48
     2ae:	91 81       	ldd	r25, Z+1	; 0x01
     2b0:	90 53       	subi	r25, 0x30	; 48
     2b2:	24 e6       	ldi	r18, 0x64	; 100
     2b4:	92 9f       	mul	r25, r18
     2b6:	80 0d       	add	r24, r0
     2b8:	11 24       	eor	r1, r1
	+ (str[2]-48)*10 + str[3]-48);
     2ba:	92 81       	ldd	r25, Z+2	; 0x02
     2bc:	99 0f       	add	r25, r25

//convert string of 4 characters uint8
uint8 string4Touint8(char* str)
{
	uint8 value;
	value = (uint8) ((str[1]-48)*100 
     2be:	90 56       	subi	r25, 0x60	; 96
     2c0:	29 2f       	mov	r18, r25
     2c2:	22 0f       	add	r18, r18
     2c4:	22 0f       	add	r18, r18
     2c6:	29 0f       	add	r18, r25
	+ (str[2]-48)*10 + str[3]-48);
	return value;
}
     2c8:	82 0f       	add	r24, r18
     2ca:	08 95       	ret

000002cc <__vector_21>:
		}
    }
}

ISR(ADC_vect)
{
     2cc:	1f 92       	push	r1
     2ce:	0f 92       	push	r0
     2d0:	0f b6       	in	r0, 0x3f	; 63
     2d2:	0f 92       	push	r0
     2d4:	11 24       	eor	r1, r1
     2d6:	2f 93       	push	r18
     2d8:	3f 93       	push	r19
     2da:	4f 93       	push	r20
     2dc:	5f 93       	push	r21
     2de:	6f 93       	push	r22
     2e0:	7f 93       	push	r23
     2e2:	8f 93       	push	r24
     2e4:	9f 93       	push	r25
     2e6:	af 93       	push	r26
     2e8:	bf 93       	push	r27
     2ea:	ef 93       	push	r30
     2ec:	ff 93       	push	r31
	switch (channel)
     2ee:	80 91 07 01 	lds	r24, 0x0107
     2f2:	81 30       	cpi	r24, 0x01	; 1
     2f4:	e1 f0       	breq	.+56     	; 0x32e <__vector_21+0x62>
     2f6:	78 f0       	brcs	.+30     	; 0x316 <__vector_21+0x4a>
     2f8:	82 30       	cpi	r24, 0x02	; 2
     2fa:	61 f1       	breq	.+88     	; 0x354 <__vector_21+0x88>
     2fc:	83 30       	cpi	r24, 0x03	; 3
     2fe:	b1 f5       	brne	.+108    	; 0x36c <__vector_21+0xa0>
		case VOLTAGE_CHANNEL:
			status.voltage = ADC / 21;
			channel = TEMP_CHANNEL;
			break;
		case TEMP_CHANNEL:
			status.temperature = ADC / 2;
     300:	80 91 78 00 	lds	r24, 0x0078
     304:	90 91 79 00 	lds	r25, 0x0079
     308:	96 95       	lsr	r25
     30a:	87 95       	ror	r24
     30c:	80 93 3e 01 	sts	0x013E, r24
			channel = CURRENT_CHANNEL;
     310:	10 92 07 01 	sts	0x0107, r1
			break;
     314:	2b c0       	rjmp	.+86     	; 0x36c <__vector_21+0xa0>
ISR(ADC_vect)
{
	switch (channel)
	{
		case CURRENT_CHANNEL:
			status.current = ADC / 5;
     316:	80 91 78 00 	lds	r24, 0x0078
     31a:	90 91 79 00 	lds	r25, 0x0079
     31e:	65 e0       	ldi	r22, 0x05	; 5
     320:	70 e0       	ldi	r23, 0x00	; 0
     322:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <__udivmodhi4>
     326:	60 93 3c 01 	sts	0x013C, r22
			channel = POT_CHANNEL;
     32a:	81 e0       	ldi	r24, 0x01	; 1
     32c:	10 c0       	rjmp	.+32     	; 0x34e <__vector_21+0x82>
			break;
		case POT_CHANNEL:
			if(flags.mode == POT_MODE)
     32e:	80 91 39 01 	lds	r24, 0x0139
     332:	8c 70       	andi	r24, 0x0C	; 12
     334:	88 30       	cpi	r24, 0x08	; 8
     336:	51 f4       	brne	.+20     	; 0x34c <__vector_21+0x80>
				dcReq = ADC / 10;
     338:	80 91 78 00 	lds	r24, 0x0078
     33c:	90 91 79 00 	lds	r25, 0x0079
     340:	6a e0       	ldi	r22, 0x0A	; 10
     342:	70 e0       	ldi	r23, 0x00	; 0
     344:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <__udivmodhi4>
     348:	60 93 34 01 	sts	0x0134, r22
			channel = VOLTAGE_CHANNEL;
     34c:	82 e0       	ldi	r24, 0x02	; 2
     34e:	80 93 07 01 	sts	0x0107, r24
			break;
     352:	0c c0       	rjmp	.+24     	; 0x36c <__vector_21+0xa0>
		case VOLTAGE_CHANNEL:
			status.voltage = ADC / 21;
     354:	80 91 78 00 	lds	r24, 0x0078
     358:	90 91 79 00 	lds	r25, 0x0079
     35c:	65 e1       	ldi	r22, 0x15	; 21
     35e:	70 e0       	ldi	r23, 0x00	; 0
     360:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <__udivmodhi4>
     364:	60 93 3f 01 	sts	0x013F, r22
			channel = TEMP_CHANNEL;
     368:	83 e0       	ldi	r24, 0x03	; 3
     36a:	f1 cf       	rjmp	.-30     	; 0x34e <__vector_21+0x82>
	/*if(channel == LAST_CHANNEL)
		channel = FIRST_CHANNEL;
	else
		channel ++;
	*/
	adcSelectChannel(channel);
     36c:	80 91 07 01 	lds	r24, 0x0107
     370:	0e 94 27 09 	call	0x124e	; 0x124e <adcSelectChannel>
	adcStartConversion();
     374:	0e 94 6e 09 	call	0x12dc	; 0x12dc <adcStartConversion>
}
     378:	ff 91       	pop	r31
     37a:	ef 91       	pop	r30
     37c:	bf 91       	pop	r27
     37e:	af 91       	pop	r26
     380:	9f 91       	pop	r25
     382:	8f 91       	pop	r24
     384:	7f 91       	pop	r23
     386:	6f 91       	pop	r22
     388:	5f 91       	pop	r21
     38a:	4f 91       	pop	r20
     38c:	3f 91       	pop	r19
     38e:	2f 91       	pop	r18
     390:	0f 90       	pop	r0
     392:	0f be       	out	0x3f, r0	; 63
     394:	0f 90       	pop	r0
     396:	1f 90       	pop	r1
     398:	18 95       	reti

0000039a <__vector_11>:

ISR(TIMER1_COMPA_vect)
{
     39a:	1f 92       	push	r1
     39c:	0f 92       	push	r0
     39e:	0f b6       	in	r0, 0x3f	; 63
     3a0:	0f 92       	push	r0
     3a2:	11 24       	eor	r1, r1
     3a4:	8f 93       	push	r24
	if(status.dc > 0 && flags.on && flags.dms)
     3a6:	80 91 3d 01 	lds	r24, 0x013D
     3aa:	88 23       	and	r24, r24
     3ac:	31 f0       	breq	.+12     	; 0x3ba <__vector_11+0x20>
     3ae:	80 91 39 01 	lds	r24, 0x0139
     3b2:	80 73       	andi	r24, 0x30	; 48
     3b4:	80 33       	cpi	r24, 0x30	; 48
     3b6:	09 f4       	brne	.+2      	; 0x3ba <__vector_11+0x20>
		setBit(PWM_PORT,PWM_BIT);		//Inicia o período em nível alto do PWM
     3b8:	29 9a       	sbi	0x05, 1	; 5
}
     3ba:	8f 91       	pop	r24
     3bc:	0f 90       	pop	r0
     3be:	0f be       	out	0x3f, r0	; 63
     3c0:	0f 90       	pop	r0
     3c2:	1f 90       	pop	r1
     3c4:	18 95       	reti

000003c6 <__vector_12>:

ISR(TIMER1_COMPB_vect)
{
     3c6:	1f 92       	push	r1
     3c8:	0f 92       	push	r0
     3ca:	0f b6       	in	r0, 0x3f	; 63
     3cc:	0f 92       	push	r0
     3ce:	11 24       	eor	r1, r1
     3d0:	8f 93       	push	r24
	if(status.dc < 100)
     3d2:	80 91 3d 01 	lds	r24, 0x013D
     3d6:	84 36       	cpi	r24, 0x64	; 100
     3d8:	08 f4       	brcc	.+2      	; 0x3dc <__vector_12+0x16>
		clrBit(PWM_PORT,PWM_BIT);		//Inicia o período em nível baixo do PWM
     3da:	29 98       	cbi	0x05, 1	; 5
}
     3dc:	8f 91       	pop	r24
     3de:	0f 90       	pop	r0
     3e0:	0f be       	out	0x3f, r0	; 63
     3e2:	0f 90       	pop	r0
     3e4:	1f 90       	pop	r1
     3e6:	18 95       	reti

000003e8 <__vector_16>:

//60Hz
ISR(TIMER0_OVF_vect)
{
     3e8:	1f 92       	push	r1
     3ea:	0f 92       	push	r0
     3ec:	0f b6       	in	r0, 0x3f	; 63
     3ee:	0f 92       	push	r0
     3f0:	11 24       	eor	r1, r1
     3f2:	2f 93       	push	r18
     3f4:	3f 93       	push	r19
     3f6:	4f 93       	push	r20
     3f8:	5f 93       	push	r21
     3fa:	6f 93       	push	r22
     3fc:	7f 93       	push	r23
     3fe:	8f 93       	push	r24
     400:	9f 93       	push	r25
     402:	af 93       	push	r26
     404:	bf 93       	push	r27
     406:	ef 93       	push	r30
     408:	ff 93       	push	r31
	//setBit(PIND,PD0);
	flags.on = isBitClr(ON_PIN,ON_BIT);
     40a:	89 b1       	in	r24, 0x09	; 9
     40c:	85 fb       	bst	r24, 5
     40e:	88 27       	eor	r24, r24
     410:	80 f9       	bld	r24, 0
     412:	91 e0       	ldi	r25, 0x01	; 1
     414:	89 27       	eor	r24, r25
     416:	20 91 39 01 	lds	r18, 0x0139
     41a:	80 fb       	bst	r24, 0
     41c:	24 f9       	bld	r18, 4
     41e:	20 93 39 01 	sts	0x0139, r18
	flags.dms = isBitClr(DMS_PIN,DMS_BIT);
     422:	89 b1       	in	r24, 0x09	; 9
     424:	82 95       	swap	r24
     426:	81 70       	andi	r24, 0x01	; 1
     428:	89 27       	eor	r24, r25
     42a:	80 fb       	bst	r24, 0
     42c:	25 f9       	bld	r18, 5
     42e:	20 93 39 01 	sts	0x0139, r18
	if(!(flags.on && flags.dms))					//informa ao sistema para nao acionar o motor caso botão ON e DMS estejam desligados.
     432:	20 73       	andi	r18, 0x30	; 48
     434:	20 33       	cpi	r18, 0x30	; 48
     436:	11 f0       	breq	.+4      	; 0x43c <__vector_16+0x54>
		status.on = 0;
     438:	10 92 40 01 	sts	0x0140, r1
	if(dcReq<minDC && flags.on && flags.dms)		//informa ao sistema para acionar o motor apenas quando botão ON e DMS estejam ligados
     43c:	80 91 34 01 	lds	r24, 0x0134
     440:	60 91 05 01 	lds	r22, 0x0105
     444:	86 17       	cp	r24, r22
     446:	28 f4       	brcc	.+10     	; 0x452 <__vector_16+0x6a>
     448:	20 33       	cpi	r18, 0x30	; 48
     44a:	19 f4       	brne	.+6      	; 0x452 <__vector_16+0x6a>
		status.on = 1;								//e o potenciometro esteja numa posicao correspondente a menos de 10% do DC do PWM.
     44c:	91 e0       	ldi	r25, 0x01	; 1
     44e:	90 93 40 01 	sts	0x0140, r25
	if(status.on && flags.on && flags.dms)		//inicia o acionamento do motor, com os as condições preliminares acima satisfeitas.
     452:	30 91 40 01 	lds	r19, 0x0140
     456:	90 91 3d 01 	lds	r25, 0x013D
     45a:	33 23       	and	r19, r19
     45c:	69 f1       	breq	.+90     	; 0x4b8 <__vector_16+0xd0>
     45e:	20 33       	cpi	r18, 0x30	; 48
     460:	59 f5       	brne	.+86     	; 0x4b8 <__vector_16+0xd0>
	{
    	if(status.dc != dcReq)
     462:	98 17       	cp	r25, r24
     464:	71 f1       	breq	.+92     	; 0x4c2 <__vector_16+0xda>
    	{
    		if(dcReq > status.dc && dcReq > (minDC + 5))
     466:	98 17       	cp	r25, r24
     468:	20 f5       	brcc	.+72     	; 0x4b2 <__vector_16+0xca>
     46a:	48 2f       	mov	r20, r24
     46c:	50 e0       	ldi	r21, 0x00	; 0
     46e:	26 2f       	mov	r18, r22
     470:	30 e0       	ldi	r19, 0x00	; 0
     472:	2b 5f       	subi	r18, 0xFB	; 251
     474:	3f 4f       	sbci	r19, 0xFF	; 255
     476:	24 17       	cp	r18, r20
     478:	35 07       	cpc	r19, r21
     47a:	dc f4       	brge	.+54     	; 0x4b2 <__vector_16+0xca>
    		{
    			if(cont == maxCont)
     47c:	20 91 37 01 	lds	r18, 0x0137
     480:	30 91 38 01 	lds	r19, 0x0138
     484:	23 30       	cpi	r18, 0x03	; 3
     486:	31 05       	cpc	r19, r1
     488:	69 f4       	brne	.+26     	; 0x4a4 <__vector_16+0xbc>
    			{
    				if(status.dc == 0)
     48a:	91 11       	cpse	r25, r1
     48c:	02 c0       	rjmp	.+4      	; 0x492 <__vector_16+0xaa>
    					seta_dc(minDC);
     48e:	86 2f       	mov	r24, r22
     490:	02 c0       	rjmp	.+4      	; 0x496 <__vector_16+0xae>
    				else
    					seta_dc(status.dc+1);
     492:	81 e0       	ldi	r24, 0x01	; 1
     494:	89 0f       	add	r24, r25
     496:	0e 94 83 00 	call	0x106	; 0x106 <seta_dc>
    				cont = 0;
     49a:	10 92 38 01 	sts	0x0138, r1
     49e:	10 92 37 01 	sts	0x0137, r1
     4a2:	0f c0       	rjmp	.+30     	; 0x4c2 <__vector_16+0xda>
    			}
    			else
    				cont++;
     4a4:	2f 5f       	subi	r18, 0xFF	; 255
     4a6:	3f 4f       	sbci	r19, 0xFF	; 255
     4a8:	30 93 38 01 	sts	0x0138, r19
     4ac:	20 93 37 01 	sts	0x0137, r18
     4b0:	08 c0       	rjmp	.+16     	; 0x4c2 <__vector_16+0xda>
    		}
    		else
    			if (dcReq < status.dc)
     4b2:	89 17       	cp	r24, r25
     4b4:	30 f4       	brcc	.+12     	; 0x4c2 <__vector_16+0xda>
     4b6:	03 c0       	rjmp	.+6      	; 0x4be <__vector_16+0xd6>
    				seta_dc(dcReq);			//definição do Duty Cicle do PWM
    	}
	}
	else
	{
		if(status.dc != 0)					//se o sistema ainda nao esta desligado
     4b8:	99 23       	and	r25, r25
     4ba:	19 f0       	breq	.+6      	; 0x4c2 <__vector_16+0xda>
			seta_dc(0);						//desliga o sistema
     4bc:	80 e0       	ldi	r24, 0x00	; 0
     4be:	0e 94 83 00 	call	0x106	; 0x106 <seta_dc>
	}
	if(status.dc>minDC && (status.current>maxCurrent || status.voltage<minVoltage))
     4c2:	80 91 3d 01 	lds	r24, 0x013D
     4c6:	90 91 05 01 	lds	r25, 0x0105
     4ca:	98 17       	cp	r25, r24
     4cc:	a0 f4       	brcc	.+40     	; 0x4f6 <__vector_16+0x10e>
     4ce:	20 91 3c 01 	lds	r18, 0x013C
     4d2:	90 91 06 01 	lds	r25, 0x0106
     4d6:	92 17       	cp	r25, r18
     4d8:	30 f0       	brcs	.+12     	; 0x4e6 <__vector_16+0xfe>
     4da:	20 91 3f 01 	lds	r18, 0x013F
     4de:	90 91 00 01 	lds	r25, 0x0100
     4e2:	29 17       	cp	r18, r25
     4e4:	40 f4       	brcc	.+16     	; 0x4f6 <__vector_16+0x10e>
	{
		if(status.dc==100)
     4e6:	84 36       	cpi	r24, 0x64	; 100
     4e8:	19 f4       	brne	.+6      	; 0x4f0 <__vector_16+0x108>
			seta_dc(status.dc-(100 - maxDC));
     4ea:	80 91 04 01 	lds	r24, 0x0104
     4ee:	01 c0       	rjmp	.+2      	; 0x4f2 <__vector_16+0x10a>
		else
			seta_dc(status.dc-2);
     4f0:	82 50       	subi	r24, 0x02	; 2
     4f2:	0e 94 83 00 	call	0x106	; 0x106 <seta_dc>
	}
	if(status.temperature > criticalTemp && !flags.warning)
     4f6:	90 91 3e 01 	lds	r25, 0x013E
     4fa:	80 91 01 01 	lds	r24, 0x0101
     4fe:	89 17       	cp	r24, r25
     500:	50 f4       	brcc	.+20     	; 0x516 <__vector_16+0x12e>
     502:	20 91 39 01 	lds	r18, 0x0139
     506:	20 fd       	sbrc	r18, 0
     508:	06 c0       	rjmp	.+12     	; 0x516 <__vector_16+0x12e>
	{
		flags.warning = 1;
     50a:	82 2f       	mov	r24, r18
     50c:	81 60       	ori	r24, 0x01	; 1
     50e:	80 93 39 01 	sts	0x0139, r24
		setBit(BUZZER_PORT,BUZZER_BIT);
     512:	44 9a       	sbi	0x08, 4	; 8
     514:	0a c0       	rjmp	.+20     	; 0x52a <__vector_16+0x142>
	}
	else
		if(status.temperature < criticalTemp && flags.warning)
     516:	98 17       	cp	r25, r24
     518:	40 f4       	brcc	.+16     	; 0x52a <__vector_16+0x142>
     51a:	80 91 39 01 	lds	r24, 0x0139
     51e:	80 ff       	sbrs	r24, 0
     520:	04 c0       	rjmp	.+8      	; 0x52a <__vector_16+0x142>
		{
			flags.warning = 0;
     522:	8e 7f       	andi	r24, 0xFE	; 254
     524:	80 93 39 01 	sts	0x0139, r24
			clrBit(BUZZER_PORT,BUZZER_BIT);
     528:	44 98       	cbi	0x08, 4	; 8
		}
}
     52a:	ff 91       	pop	r31
     52c:	ef 91       	pop	r30
     52e:	bf 91       	pop	r27
     530:	af 91       	pop	r26
     532:	9f 91       	pop	r25
     534:	8f 91       	pop	r24
     536:	7f 91       	pop	r23
     538:	6f 91       	pop	r22
     53a:	5f 91       	pop	r21
     53c:	4f 91       	pop	r20
     53e:	3f 91       	pop	r19
     540:	2f 91       	pop	r18
     542:	0f 90       	pop	r0
     544:	0f be       	out	0x3f, r0	; 63
     546:	0f 90       	pop	r0
     548:	1f 90       	pop	r1
     54a:	18 95       	reti

0000054c <__vector_18>:

ISR(USART_RX_vect)
{
     54c:	1f 92       	push	r1
     54e:	0f 92       	push	r0
     550:	0f b6       	in	r0, 0x3f	; 63
     552:	0f 92       	push	r0
     554:	11 24       	eor	r1, r1
     556:	2f 93       	push	r18
     558:	3f 93       	push	r19
     55a:	4f 93       	push	r20
     55c:	5f 93       	push	r21
     55e:	6f 93       	push	r22
     560:	7f 93       	push	r23
     562:	8f 93       	push	r24
     564:	9f 93       	push	r25
     566:	af 93       	push	r26
     568:	bf 93       	push	r27
     56a:	ef 93       	push	r30
     56c:	ff 93       	push	r31
	usartAddDataToReceiverBuffer(UDR0);
     56e:	80 91 c6 00 	lds	r24, 0x00C6
     572:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <usartAddDataToReceiverBuffer>
     576:	ff 91       	pop	r31
     578:	ef 91       	pop	r30
     57a:	bf 91       	pop	r27
     57c:	af 91       	pop	r26
     57e:	9f 91       	pop	r25
     580:	8f 91       	pop	r24
     582:	7f 91       	pop	r23
     584:	6f 91       	pop	r22
     586:	5f 91       	pop	r21
     588:	4f 91       	pop	r20
     58a:	3f 91       	pop	r19
     58c:	2f 91       	pop	r18
     58e:	0f 90       	pop	r0
     590:	0f be       	out	0x3f, r0	; 63
     592:	0f 90       	pop	r0
     594:	1f 90       	pop	r1
     596:	18 95       	reti

00000598 <usartReceiveStd>:
     598:	80 91 c0 00 	lds	r24, 0x00C0
     59c:	87 ff       	sbrs	r24, 7
     59e:	fc cf       	rjmp	.-8      	; 0x598 <usartReceiveStd>
     5a0:	80 91 c6 00 	lds	r24, 0x00C6
     5a4:	90 e0       	ldi	r25, 0x00	; 0
     5a6:	08 95       	ret

000005a8 <globalInterruptEnable>:
     5a8:	78 94       	sei
     5aa:	08 95       	ret

000005ac <globalInterruptDisable>:
     5ac:	f8 94       	cli
     5ae:	08 95       	ret

000005b0 <systemClockSetPrescaler>:
     5b0:	90 e0       	ldi	r25, 0x00	; 0
     5b2:	89 30       	cpi	r24, 0x09	; 9
     5b4:	91 05       	cpc	r25, r1
     5b6:	00 f5       	brcc	.+64     	; 0x5f8 <systemClockSetPrescaler+0x48>
     5b8:	fc 01       	movw	r30, r24
     5ba:	e4 5b       	subi	r30, 0xB4	; 180
     5bc:	ff 4f       	sbci	r31, 0xFF	; 255
     5be:	0c 94 99 0d 	jmp	0x1b32	; 0x1b32 <__tablejump2__>
     5c2:	80 e0       	ldi	r24, 0x00	; 0
     5c4:	0f c0       	rjmp	.+30     	; 0x5e4 <systemClockSetPrescaler+0x34>
     5c6:	82 e0       	ldi	r24, 0x02	; 2
     5c8:	0d c0       	rjmp	.+26     	; 0x5e4 <systemClockSetPrescaler+0x34>
     5ca:	83 e0       	ldi	r24, 0x03	; 3
     5cc:	0b c0       	rjmp	.+22     	; 0x5e4 <systemClockSetPrescaler+0x34>
     5ce:	84 e0       	ldi	r24, 0x04	; 4
     5d0:	09 c0       	rjmp	.+18     	; 0x5e4 <systemClockSetPrescaler+0x34>
     5d2:	85 e0       	ldi	r24, 0x05	; 5
     5d4:	07 c0       	rjmp	.+14     	; 0x5e4 <systemClockSetPrescaler+0x34>
     5d6:	86 e0       	ldi	r24, 0x06	; 6
     5d8:	05 c0       	rjmp	.+10     	; 0x5e4 <systemClockSetPrescaler+0x34>
     5da:	87 e0       	ldi	r24, 0x07	; 7
     5dc:	03 c0       	rjmp	.+6      	; 0x5e4 <systemClockSetPrescaler+0x34>
     5de:	88 e0       	ldi	r24, 0x08	; 8
     5e0:	01 c0       	rjmp	.+2      	; 0x5e4 <systemClockSetPrescaler+0x34>
     5e2:	81 e0       	ldi	r24, 0x01	; 1
     5e4:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     5e6:	f8 94       	cli
     5e8:	20 e8       	ldi	r18, 0x80	; 128
     5ea:	20 93 61 00 	sts	0x0061, r18
     5ee:	80 93 61 00 	sts	0x0061, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     5f2:	9f bf       	out	0x3f, r25	; 63
     5f4:	80 e0       	ldi	r24, 0x00	; 0
     5f6:	08 95       	ret
     5f8:	87 e0       	ldi	r24, 0x07	; 7
     5fa:	08 95       	ret

000005fc <eepromSetOperationMode>:
     5fc:	2f b3       	in	r18, 0x1f	; 31
     5fe:	30 e1       	ldi	r19, 0x10	; 16
     600:	83 9f       	mul	r24, r19
     602:	c0 01       	movw	r24, r0
     604:	11 24       	eor	r1, r1
     606:	2f 7c       	andi	r18, 0xCF	; 207
     608:	28 2b       	or	r18, r24
     60a:	2f bb       	out	0x1f, r18	; 31
     60c:	08 95       	ret

0000060e <eepromReadyActivateInterrupt>:
     60e:	fb 9a       	sbi	0x1f, 3	; 31
     610:	08 95       	ret

00000612 <eepromReadyDeactivateInterrupt>:
     612:	fb 98       	cbi	0x1f, 3	; 31
     614:	08 95       	ret

00000616 <eepromWrite>:
     616:	f9 99       	sbic	0x1f, 1	; 31
     618:	fe cf       	rjmp	.-4      	; 0x616 <eepromWrite>
     61a:	27 b7       	in	r18, 0x37	; 55
     61c:	93 70       	andi	r25, 0x03	; 3
     61e:	92 bd       	out	0x22, r25	; 34
     620:	81 bd       	out	0x21, r24	; 33
     622:	60 bd       	out	0x20, r22	; 32
     624:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     626:	f8 94       	cli
     628:	fa 9a       	sbi	0x1f, 2	; 31
     62a:	f9 9a       	sbi	0x1f, 1	; 31
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     62c:	8f bf       	out	0x3f, r24	; 63
    __asm__ volatile ("" ::: "memory");
     62e:	08 95       	ret

00000630 <eepromRead>:
     630:	f9 99       	sbic	0x1f, 1	; 31
     632:	fe cf       	rjmp	.-4      	; 0x630 <eepromRead>
     634:	93 70       	andi	r25, 0x03	; 3
     636:	92 bd       	out	0x22, r25	; 34
     638:	81 bd       	out	0x21, r24	; 33
     63a:	f8 9a       	sbi	0x1f, 0	; 31
     63c:	80 b5       	in	r24, 0x20	; 32
     63e:	08 95       	ret

00000640 <globalPullUpEnable>:
     640:	85 b7       	in	r24, 0x35	; 53
     642:	8f 7e       	andi	r24, 0xEF	; 239
     644:	85 bf       	out	0x35, r24	; 53
     646:	08 95       	ret

00000648 <pullUpDisable>:
     648:	85 b7       	in	r24, 0x35	; 53
     64a:	80 61       	ori	r24, 0x10	; 16
     64c:	85 bf       	out	0x35, r24	; 53
     64e:	08 95       	ret

00000650 <int0Config>:
     650:	82 30       	cpi	r24, 0x02	; 2
     652:	79 f0       	breq	.+30     	; 0x672 <int0Config+0x22>
     654:	30 f4       	brcc	.+12     	; 0x662 <int0Config+0x12>
     656:	88 23       	and	r24, r24
     658:	49 f0       	breq	.+18     	; 0x66c <int0Config+0x1c>
     65a:	81 30       	cpi	r24, 0x01	; 1
     65c:	11 f5       	brne	.+68     	; 0x6a2 <int0Config+0x52>
     65e:	5a 9a       	sbi	0x0b, 2	; 11
     660:	06 c0       	rjmp	.+12     	; 0x66e <int0Config+0x1e>
     662:	83 30       	cpi	r24, 0x03	; 3
     664:	41 f0       	breq	.+16     	; 0x676 <int0Config+0x26>
     666:	8f 3f       	cpi	r24, 0xFF	; 255
     668:	41 f0       	breq	.+16     	; 0x67a <int0Config+0x2a>
     66a:	1b c0       	rjmp	.+54     	; 0x6a2 <int0Config+0x52>
     66c:	5a 98       	cbi	0x0b, 2	; 11
     66e:	52 9a       	sbi	0x0a, 2	; 10
     670:	04 c0       	rjmp	.+8      	; 0x67a <int0Config+0x2a>
     672:	5a 98       	cbi	0x0b, 2	; 11
     674:	01 c0       	rjmp	.+2      	; 0x678 <int0Config+0x28>
     676:	5a 9a       	sbi	0x0b, 2	; 11
     678:	52 98       	cbi	0x0a, 2	; 10
     67a:	6f 3f       	cpi	r22, 0xFF	; 255
     67c:	a1 f0       	breq	.+40     	; 0x6a6 <int0Config+0x56>
     67e:	80 91 69 00 	lds	r24, 0x0069
     682:	8c 7f       	andi	r24, 0xFC	; 252
     684:	61 30       	cpi	r22, 0x01	; 1
     686:	39 f0       	breq	.+14     	; 0x696 <int0Config+0x46>
     688:	48 f0       	brcs	.+18     	; 0x69c <int0Config+0x4c>
     68a:	62 30       	cpi	r22, 0x02	; 2
     68c:	31 f0       	breq	.+12     	; 0x69a <int0Config+0x4a>
     68e:	63 30       	cpi	r22, 0x03	; 3
     690:	61 f4       	brne	.+24     	; 0x6aa <int0Config+0x5a>
     692:	83 60       	ori	r24, 0x03	; 3
     694:	03 c0       	rjmp	.+6      	; 0x69c <int0Config+0x4c>
     696:	81 60       	ori	r24, 0x01	; 1
     698:	01 c0       	rjmp	.+2      	; 0x69c <int0Config+0x4c>
     69a:	82 60       	ori	r24, 0x02	; 2
     69c:	80 93 69 00 	sts	0x0069, r24
     6a0:	02 c0       	rjmp	.+4      	; 0x6a6 <int0Config+0x56>
     6a2:	81 e0       	ldi	r24, 0x01	; 1
     6a4:	08 95       	ret
     6a6:	80 e0       	ldi	r24, 0x00	; 0
     6a8:	08 95       	ret
     6aa:	82 e0       	ldi	r24, 0x02	; 2
     6ac:	08 95       	ret

000006ae <int0ActivateInterrupt>:
     6ae:	e8 9a       	sbi	0x1d, 0	; 29
     6b0:	08 95       	ret

000006b2 <int0DeactivateInterrupt>:
     6b2:	e8 98       	cbi	0x1d, 0	; 29
     6b4:	08 95       	ret

000006b6 <int0ClearInterruptRequest>:
     6b6:	e0 9a       	sbi	0x1c, 0	; 28
     6b8:	08 95       	ret

000006ba <int1Config>:
     6ba:	82 30       	cpi	r24, 0x02	; 2
     6bc:	79 f0       	breq	.+30     	; 0x6dc <int1Config+0x22>
     6be:	30 f4       	brcc	.+12     	; 0x6cc <int1Config+0x12>
     6c0:	88 23       	and	r24, r24
     6c2:	49 f0       	breq	.+18     	; 0x6d6 <int1Config+0x1c>
     6c4:	81 30       	cpi	r24, 0x01	; 1
     6c6:	11 f5       	brne	.+68     	; 0x70c <int1Config+0x52>
     6c8:	5b 9a       	sbi	0x0b, 3	; 11
     6ca:	06 c0       	rjmp	.+12     	; 0x6d8 <int1Config+0x1e>
     6cc:	83 30       	cpi	r24, 0x03	; 3
     6ce:	41 f0       	breq	.+16     	; 0x6e0 <int1Config+0x26>
     6d0:	8f 3f       	cpi	r24, 0xFF	; 255
     6d2:	41 f0       	breq	.+16     	; 0x6e4 <int1Config+0x2a>
     6d4:	1b c0       	rjmp	.+54     	; 0x70c <int1Config+0x52>
     6d6:	5b 98       	cbi	0x0b, 3	; 11
     6d8:	53 9a       	sbi	0x0a, 3	; 10
     6da:	04 c0       	rjmp	.+8      	; 0x6e4 <int1Config+0x2a>
     6dc:	5b 98       	cbi	0x0b, 3	; 11
     6de:	01 c0       	rjmp	.+2      	; 0x6e2 <int1Config+0x28>
     6e0:	5b 9a       	sbi	0x0b, 3	; 11
     6e2:	53 98       	cbi	0x0a, 3	; 10
     6e4:	6f 3f       	cpi	r22, 0xFF	; 255
     6e6:	a1 f0       	breq	.+40     	; 0x710 <int1Config+0x56>
     6e8:	80 91 69 00 	lds	r24, 0x0069
     6ec:	83 7f       	andi	r24, 0xF3	; 243
     6ee:	61 30       	cpi	r22, 0x01	; 1
     6f0:	39 f0       	breq	.+14     	; 0x700 <int1Config+0x46>
     6f2:	48 f0       	brcs	.+18     	; 0x706 <int1Config+0x4c>
     6f4:	62 30       	cpi	r22, 0x02	; 2
     6f6:	31 f0       	breq	.+12     	; 0x704 <int1Config+0x4a>
     6f8:	63 30       	cpi	r22, 0x03	; 3
     6fa:	61 f4       	brne	.+24     	; 0x714 <int1Config+0x5a>
     6fc:	8c 60       	ori	r24, 0x0C	; 12
     6fe:	03 c0       	rjmp	.+6      	; 0x706 <int1Config+0x4c>
     700:	84 60       	ori	r24, 0x04	; 4
     702:	01 c0       	rjmp	.+2      	; 0x706 <int1Config+0x4c>
     704:	88 60       	ori	r24, 0x08	; 8
     706:	80 93 69 00 	sts	0x0069, r24
     70a:	02 c0       	rjmp	.+4      	; 0x710 <int1Config+0x56>
     70c:	81 e0       	ldi	r24, 0x01	; 1
     70e:	08 95       	ret
     710:	80 e0       	ldi	r24, 0x00	; 0
     712:	08 95       	ret
     714:	82 e0       	ldi	r24, 0x02	; 2
     716:	08 95       	ret

00000718 <int1ActivateInterrupt>:
     718:	e9 9a       	sbi	0x1d, 1	; 29
     71a:	08 95       	ret

0000071c <int1DeactivateInterrupt>:
     71c:	e9 98       	cbi	0x1d, 1	; 29
     71e:	08 95       	ret

00000720 <int1ClearInterruptRequest>:
     720:	e1 9a       	sbi	0x1c, 1	; 28
     722:	08 95       	ret

00000724 <pcint7_0Enable>:
     724:	e8 e6       	ldi	r30, 0x68	; 104
     726:	f0 e0       	ldi	r31, 0x00	; 0
     728:	80 81       	ld	r24, Z
     72a:	81 60       	ori	r24, 0x01	; 1
     72c:	80 83       	st	Z, r24
     72e:	08 95       	ret

00000730 <pcint7_0Disable>:
     730:	e8 e6       	ldi	r30, 0x68	; 104
     732:	f0 e0       	ldi	r31, 0x00	; 0
     734:	80 81       	ld	r24, Z
     736:	8e 7f       	andi	r24, 0xFE	; 254
     738:	80 83       	st	Z, r24
     73a:	08 95       	ret

0000073c <pcint7_0ClearInterruptRequest>:
     73c:	d8 9a       	sbi	0x1b, 0	; 27
     73e:	08 95       	ret

00000740 <pcint0ActivateInterrupt>:
     740:	82 30       	cpi	r24, 0x02	; 2
     742:	79 f0       	breq	.+30     	; 0x762 <pcint0ActivateInterrupt+0x22>
     744:	30 f4       	brcc	.+12     	; 0x752 <pcint0ActivateInterrupt+0x12>
     746:	88 23       	and	r24, r24
     748:	49 f0       	breq	.+18     	; 0x75c <pcint0ActivateInterrupt+0x1c>
     74a:	81 30       	cpi	r24, 0x01	; 1
     74c:	a9 f4       	brne	.+42     	; 0x778 <pcint0ActivateInterrupt+0x38>
     74e:	28 9a       	sbi	0x05, 0	; 5
     750:	06 c0       	rjmp	.+12     	; 0x75e <pcint0ActivateInterrupt+0x1e>
     752:	83 30       	cpi	r24, 0x03	; 3
     754:	41 f0       	breq	.+16     	; 0x766 <pcint0ActivateInterrupt+0x26>
     756:	8f 3f       	cpi	r24, 0xFF	; 255
     758:	41 f0       	breq	.+16     	; 0x76a <pcint0ActivateInterrupt+0x2a>
     75a:	0e c0       	rjmp	.+28     	; 0x778 <pcint0ActivateInterrupt+0x38>
     75c:	28 98       	cbi	0x05, 0	; 5
     75e:	20 9a       	sbi	0x04, 0	; 4
     760:	04 c0       	rjmp	.+8      	; 0x76a <pcint0ActivateInterrupt+0x2a>
     762:	28 98       	cbi	0x05, 0	; 5
     764:	01 c0       	rjmp	.+2      	; 0x768 <pcint0ActivateInterrupt+0x28>
     766:	28 9a       	sbi	0x05, 0	; 5
     768:	20 98       	cbi	0x04, 0	; 4
     76a:	80 91 6b 00 	lds	r24, 0x006B
     76e:	81 60       	ori	r24, 0x01	; 1
     770:	80 93 6b 00 	sts	0x006B, r24
     774:	80 e0       	ldi	r24, 0x00	; 0
     776:	08 95       	ret
     778:	81 e0       	ldi	r24, 0x01	; 1
     77a:	08 95       	ret

0000077c <pcint0DeactivateInterrupt>:
     77c:	eb e6       	ldi	r30, 0x6B	; 107
     77e:	f0 e0       	ldi	r31, 0x00	; 0
     780:	80 81       	ld	r24, Z
     782:	8e 7f       	andi	r24, 0xFE	; 254
     784:	80 83       	st	Z, r24
     786:	08 95       	ret

00000788 <pcint1ActivateInterrupt>:
     788:	82 30       	cpi	r24, 0x02	; 2
     78a:	79 f0       	breq	.+30     	; 0x7aa <pcint1ActivateInterrupt+0x22>
     78c:	30 f4       	brcc	.+12     	; 0x79a <pcint1ActivateInterrupt+0x12>
     78e:	88 23       	and	r24, r24
     790:	49 f0       	breq	.+18     	; 0x7a4 <pcint1ActivateInterrupt+0x1c>
     792:	81 30       	cpi	r24, 0x01	; 1
     794:	a9 f4       	brne	.+42     	; 0x7c0 <pcint1ActivateInterrupt+0x38>
     796:	29 9a       	sbi	0x05, 1	; 5
     798:	06 c0       	rjmp	.+12     	; 0x7a6 <pcint1ActivateInterrupt+0x1e>
     79a:	83 30       	cpi	r24, 0x03	; 3
     79c:	41 f0       	breq	.+16     	; 0x7ae <pcint1ActivateInterrupt+0x26>
     79e:	8f 3f       	cpi	r24, 0xFF	; 255
     7a0:	41 f0       	breq	.+16     	; 0x7b2 <pcint1ActivateInterrupt+0x2a>
     7a2:	0e c0       	rjmp	.+28     	; 0x7c0 <pcint1ActivateInterrupt+0x38>
     7a4:	29 98       	cbi	0x05, 1	; 5
     7a6:	21 9a       	sbi	0x04, 1	; 4
     7a8:	04 c0       	rjmp	.+8      	; 0x7b2 <pcint1ActivateInterrupt+0x2a>
     7aa:	29 98       	cbi	0x05, 1	; 5
     7ac:	01 c0       	rjmp	.+2      	; 0x7b0 <pcint1ActivateInterrupt+0x28>
     7ae:	29 9a       	sbi	0x05, 1	; 5
     7b0:	21 98       	cbi	0x04, 1	; 4
     7b2:	80 91 6b 00 	lds	r24, 0x006B
     7b6:	82 60       	ori	r24, 0x02	; 2
     7b8:	80 93 6b 00 	sts	0x006B, r24
     7bc:	80 e0       	ldi	r24, 0x00	; 0
     7be:	08 95       	ret
     7c0:	81 e0       	ldi	r24, 0x01	; 1
     7c2:	08 95       	ret

000007c4 <pcint1DeactivateInterrupt>:
     7c4:	eb e6       	ldi	r30, 0x6B	; 107
     7c6:	f0 e0       	ldi	r31, 0x00	; 0
     7c8:	80 81       	ld	r24, Z
     7ca:	8d 7f       	andi	r24, 0xFD	; 253
     7cc:	80 83       	st	Z, r24
     7ce:	08 95       	ret

000007d0 <pcint2ActivateInterrupt>:
     7d0:	82 30       	cpi	r24, 0x02	; 2
     7d2:	79 f0       	breq	.+30     	; 0x7f2 <pcint2ActivateInterrupt+0x22>
     7d4:	30 f4       	brcc	.+12     	; 0x7e2 <pcint2ActivateInterrupt+0x12>
     7d6:	88 23       	and	r24, r24
     7d8:	49 f0       	breq	.+18     	; 0x7ec <pcint2ActivateInterrupt+0x1c>
     7da:	81 30       	cpi	r24, 0x01	; 1
     7dc:	a9 f4       	brne	.+42     	; 0x808 <pcint2ActivateInterrupt+0x38>
     7de:	2a 9a       	sbi	0x05, 2	; 5
     7e0:	06 c0       	rjmp	.+12     	; 0x7ee <pcint2ActivateInterrupt+0x1e>
     7e2:	83 30       	cpi	r24, 0x03	; 3
     7e4:	41 f0       	breq	.+16     	; 0x7f6 <pcint2ActivateInterrupt+0x26>
     7e6:	8f 3f       	cpi	r24, 0xFF	; 255
     7e8:	41 f0       	breq	.+16     	; 0x7fa <pcint2ActivateInterrupt+0x2a>
     7ea:	0e c0       	rjmp	.+28     	; 0x808 <pcint2ActivateInterrupt+0x38>
     7ec:	2a 98       	cbi	0x05, 2	; 5
     7ee:	22 9a       	sbi	0x04, 2	; 4
     7f0:	04 c0       	rjmp	.+8      	; 0x7fa <pcint2ActivateInterrupt+0x2a>
     7f2:	2a 98       	cbi	0x05, 2	; 5
     7f4:	01 c0       	rjmp	.+2      	; 0x7f8 <pcint2ActivateInterrupt+0x28>
     7f6:	2a 9a       	sbi	0x05, 2	; 5
     7f8:	22 98       	cbi	0x04, 2	; 4
     7fa:	80 91 6b 00 	lds	r24, 0x006B
     7fe:	84 60       	ori	r24, 0x04	; 4
     800:	80 93 6b 00 	sts	0x006B, r24
     804:	80 e0       	ldi	r24, 0x00	; 0
     806:	08 95       	ret
     808:	81 e0       	ldi	r24, 0x01	; 1
     80a:	08 95       	ret

0000080c <pcint2DeactivateInterrupt>:
     80c:	eb e6       	ldi	r30, 0x6B	; 107
     80e:	f0 e0       	ldi	r31, 0x00	; 0
     810:	80 81       	ld	r24, Z
     812:	8b 7f       	andi	r24, 0xFB	; 251
     814:	80 83       	st	Z, r24
     816:	08 95       	ret

00000818 <pcint3ActivateInterrupt>:
     818:	82 30       	cpi	r24, 0x02	; 2
     81a:	79 f0       	breq	.+30     	; 0x83a <pcint3ActivateInterrupt+0x22>
     81c:	30 f4       	brcc	.+12     	; 0x82a <pcint3ActivateInterrupt+0x12>
     81e:	88 23       	and	r24, r24
     820:	49 f0       	breq	.+18     	; 0x834 <pcint3ActivateInterrupt+0x1c>
     822:	81 30       	cpi	r24, 0x01	; 1
     824:	a9 f4       	brne	.+42     	; 0x850 <pcint3ActivateInterrupt+0x38>
     826:	2b 9a       	sbi	0x05, 3	; 5
     828:	06 c0       	rjmp	.+12     	; 0x836 <pcint3ActivateInterrupt+0x1e>
     82a:	83 30       	cpi	r24, 0x03	; 3
     82c:	41 f0       	breq	.+16     	; 0x83e <pcint3ActivateInterrupt+0x26>
     82e:	8f 3f       	cpi	r24, 0xFF	; 255
     830:	41 f0       	breq	.+16     	; 0x842 <pcint3ActivateInterrupt+0x2a>
     832:	0e c0       	rjmp	.+28     	; 0x850 <pcint3ActivateInterrupt+0x38>
     834:	2b 98       	cbi	0x05, 3	; 5
     836:	23 9a       	sbi	0x04, 3	; 4
     838:	04 c0       	rjmp	.+8      	; 0x842 <pcint3ActivateInterrupt+0x2a>
     83a:	2b 98       	cbi	0x05, 3	; 5
     83c:	01 c0       	rjmp	.+2      	; 0x840 <pcint3ActivateInterrupt+0x28>
     83e:	2b 9a       	sbi	0x05, 3	; 5
     840:	23 98       	cbi	0x04, 3	; 4
     842:	80 91 6b 00 	lds	r24, 0x006B
     846:	88 60       	ori	r24, 0x08	; 8
     848:	80 93 6b 00 	sts	0x006B, r24
     84c:	80 e0       	ldi	r24, 0x00	; 0
     84e:	08 95       	ret
     850:	81 e0       	ldi	r24, 0x01	; 1
     852:	08 95       	ret

00000854 <pcint3DeactivateInterrupt>:
     854:	eb e6       	ldi	r30, 0x6B	; 107
     856:	f0 e0       	ldi	r31, 0x00	; 0
     858:	80 81       	ld	r24, Z
     85a:	87 7f       	andi	r24, 0xF7	; 247
     85c:	80 83       	st	Z, r24
     85e:	08 95       	ret

00000860 <pcint4ActivateInterrupt>:
     860:	82 30       	cpi	r24, 0x02	; 2
     862:	79 f0       	breq	.+30     	; 0x882 <pcint4ActivateInterrupt+0x22>
     864:	30 f4       	brcc	.+12     	; 0x872 <pcint4ActivateInterrupt+0x12>
     866:	88 23       	and	r24, r24
     868:	49 f0       	breq	.+18     	; 0x87c <pcint4ActivateInterrupt+0x1c>
     86a:	81 30       	cpi	r24, 0x01	; 1
     86c:	a9 f4       	brne	.+42     	; 0x898 <pcint4ActivateInterrupt+0x38>
     86e:	2c 9a       	sbi	0x05, 4	; 5
     870:	06 c0       	rjmp	.+12     	; 0x87e <pcint4ActivateInterrupt+0x1e>
     872:	83 30       	cpi	r24, 0x03	; 3
     874:	41 f0       	breq	.+16     	; 0x886 <pcint4ActivateInterrupt+0x26>
     876:	8f 3f       	cpi	r24, 0xFF	; 255
     878:	41 f0       	breq	.+16     	; 0x88a <pcint4ActivateInterrupt+0x2a>
     87a:	0e c0       	rjmp	.+28     	; 0x898 <pcint4ActivateInterrupt+0x38>
     87c:	2c 98       	cbi	0x05, 4	; 5
     87e:	24 9a       	sbi	0x04, 4	; 4
     880:	04 c0       	rjmp	.+8      	; 0x88a <pcint4ActivateInterrupt+0x2a>
     882:	2c 98       	cbi	0x05, 4	; 5
     884:	01 c0       	rjmp	.+2      	; 0x888 <pcint4ActivateInterrupt+0x28>
     886:	2c 9a       	sbi	0x05, 4	; 5
     888:	24 98       	cbi	0x04, 4	; 4
     88a:	80 91 6b 00 	lds	r24, 0x006B
     88e:	80 61       	ori	r24, 0x10	; 16
     890:	80 93 6b 00 	sts	0x006B, r24
     894:	80 e0       	ldi	r24, 0x00	; 0
     896:	08 95       	ret
     898:	81 e0       	ldi	r24, 0x01	; 1
     89a:	08 95       	ret

0000089c <pcint4DeactivateInterrupt>:
     89c:	eb e6       	ldi	r30, 0x6B	; 107
     89e:	f0 e0       	ldi	r31, 0x00	; 0
     8a0:	80 81       	ld	r24, Z
     8a2:	8f 7e       	andi	r24, 0xEF	; 239
     8a4:	80 83       	st	Z, r24
     8a6:	08 95       	ret

000008a8 <pcint5ActivateInterrupt>:
     8a8:	82 30       	cpi	r24, 0x02	; 2
     8aa:	79 f0       	breq	.+30     	; 0x8ca <pcint5ActivateInterrupt+0x22>
     8ac:	30 f4       	brcc	.+12     	; 0x8ba <pcint5ActivateInterrupt+0x12>
     8ae:	88 23       	and	r24, r24
     8b0:	49 f0       	breq	.+18     	; 0x8c4 <pcint5ActivateInterrupt+0x1c>
     8b2:	81 30       	cpi	r24, 0x01	; 1
     8b4:	a9 f4       	brne	.+42     	; 0x8e0 <pcint5ActivateInterrupt+0x38>
     8b6:	2d 9a       	sbi	0x05, 5	; 5
     8b8:	06 c0       	rjmp	.+12     	; 0x8c6 <pcint5ActivateInterrupt+0x1e>
     8ba:	83 30       	cpi	r24, 0x03	; 3
     8bc:	41 f0       	breq	.+16     	; 0x8ce <pcint5ActivateInterrupt+0x26>
     8be:	8f 3f       	cpi	r24, 0xFF	; 255
     8c0:	41 f0       	breq	.+16     	; 0x8d2 <pcint5ActivateInterrupt+0x2a>
     8c2:	0e c0       	rjmp	.+28     	; 0x8e0 <pcint5ActivateInterrupt+0x38>
     8c4:	2d 98       	cbi	0x05, 5	; 5
     8c6:	25 9a       	sbi	0x04, 5	; 4
     8c8:	04 c0       	rjmp	.+8      	; 0x8d2 <pcint5ActivateInterrupt+0x2a>
     8ca:	2d 98       	cbi	0x05, 5	; 5
     8cc:	01 c0       	rjmp	.+2      	; 0x8d0 <pcint5ActivateInterrupt+0x28>
     8ce:	2d 9a       	sbi	0x05, 5	; 5
     8d0:	25 98       	cbi	0x04, 5	; 4
     8d2:	80 91 6b 00 	lds	r24, 0x006B
     8d6:	80 62       	ori	r24, 0x20	; 32
     8d8:	80 93 6b 00 	sts	0x006B, r24
     8dc:	80 e0       	ldi	r24, 0x00	; 0
     8de:	08 95       	ret
     8e0:	81 e0       	ldi	r24, 0x01	; 1
     8e2:	08 95       	ret

000008e4 <pcint5DeactivateInterrupt>:
     8e4:	eb e6       	ldi	r30, 0x6B	; 107
     8e6:	f0 e0       	ldi	r31, 0x00	; 0
     8e8:	80 81       	ld	r24, Z
     8ea:	8f 7d       	andi	r24, 0xDF	; 223
     8ec:	80 83       	st	Z, r24
     8ee:	08 95       	ret

000008f0 <pcint6ActivateInterrupt>:
     8f0:	82 30       	cpi	r24, 0x02	; 2
     8f2:	79 f0       	breq	.+30     	; 0x912 <__stack+0x13>
     8f4:	30 f4       	brcc	.+12     	; 0x902 <__stack+0x3>
     8f6:	88 23       	and	r24, r24
     8f8:	49 f0       	breq	.+18     	; 0x90c <__stack+0xd>
     8fa:	81 30       	cpi	r24, 0x01	; 1
     8fc:	a9 f4       	brne	.+42     	; 0x928 <__stack+0x29>
     8fe:	2e 9a       	sbi	0x05, 6	; 5
     900:	06 c0       	rjmp	.+12     	; 0x90e <__stack+0xf>
     902:	83 30       	cpi	r24, 0x03	; 3
     904:	41 f0       	breq	.+16     	; 0x916 <__stack+0x17>
     906:	8f 3f       	cpi	r24, 0xFF	; 255
     908:	41 f0       	breq	.+16     	; 0x91a <__stack+0x1b>
     90a:	0e c0       	rjmp	.+28     	; 0x928 <__stack+0x29>
     90c:	2e 98       	cbi	0x05, 6	; 5
     90e:	26 9a       	sbi	0x04, 6	; 4
     910:	04 c0       	rjmp	.+8      	; 0x91a <__stack+0x1b>
     912:	2e 98       	cbi	0x05, 6	; 5
     914:	01 c0       	rjmp	.+2      	; 0x918 <__stack+0x19>
     916:	2e 9a       	sbi	0x05, 6	; 5
     918:	26 98       	cbi	0x04, 6	; 4
     91a:	80 91 6b 00 	lds	r24, 0x006B
     91e:	80 64       	ori	r24, 0x40	; 64
     920:	80 93 6b 00 	sts	0x006B, r24
     924:	80 e0       	ldi	r24, 0x00	; 0
     926:	08 95       	ret
     928:	81 e0       	ldi	r24, 0x01	; 1
     92a:	08 95       	ret

0000092c <pcint6DeactivateInterrupt>:
     92c:	eb e6       	ldi	r30, 0x6B	; 107
     92e:	f0 e0       	ldi	r31, 0x00	; 0
     930:	80 81       	ld	r24, Z
     932:	8f 7b       	andi	r24, 0xBF	; 191
     934:	80 83       	st	Z, r24
     936:	08 95       	ret

00000938 <pcint7ActivateInterrupt>:
     938:	82 30       	cpi	r24, 0x02	; 2
     93a:	79 f0       	breq	.+30     	; 0x95a <pcint7ActivateInterrupt+0x22>
     93c:	30 f4       	brcc	.+12     	; 0x94a <pcint7ActivateInterrupt+0x12>
     93e:	88 23       	and	r24, r24
     940:	49 f0       	breq	.+18     	; 0x954 <pcint7ActivateInterrupt+0x1c>
     942:	81 30       	cpi	r24, 0x01	; 1
     944:	a9 f4       	brne	.+42     	; 0x970 <pcint7ActivateInterrupt+0x38>
     946:	2f 9a       	sbi	0x05, 7	; 5
     948:	06 c0       	rjmp	.+12     	; 0x956 <pcint7ActivateInterrupt+0x1e>
     94a:	83 30       	cpi	r24, 0x03	; 3
     94c:	41 f0       	breq	.+16     	; 0x95e <pcint7ActivateInterrupt+0x26>
     94e:	8f 3f       	cpi	r24, 0xFF	; 255
     950:	41 f0       	breq	.+16     	; 0x962 <pcint7ActivateInterrupt+0x2a>
     952:	0e c0       	rjmp	.+28     	; 0x970 <pcint7ActivateInterrupt+0x38>
     954:	2f 98       	cbi	0x05, 7	; 5
     956:	27 9a       	sbi	0x04, 7	; 4
     958:	04 c0       	rjmp	.+8      	; 0x962 <pcint7ActivateInterrupt+0x2a>
     95a:	2f 98       	cbi	0x05, 7	; 5
     95c:	01 c0       	rjmp	.+2      	; 0x960 <pcint7ActivateInterrupt+0x28>
     95e:	2f 9a       	sbi	0x05, 7	; 5
     960:	27 98       	cbi	0x04, 7	; 4
     962:	80 91 6b 00 	lds	r24, 0x006B
     966:	80 68       	ori	r24, 0x80	; 128
     968:	80 93 6b 00 	sts	0x006B, r24
     96c:	80 e0       	ldi	r24, 0x00	; 0
     96e:	08 95       	ret
     970:	81 e0       	ldi	r24, 0x01	; 1
     972:	08 95       	ret

00000974 <pcint7DeactivateInterrupt>:
     974:	eb e6       	ldi	r30, 0x6B	; 107
     976:	f0 e0       	ldi	r31, 0x00	; 0
     978:	80 81       	ld	r24, Z
     97a:	8f 77       	andi	r24, 0x7F	; 127
     97c:	80 83       	st	Z, r24
     97e:	08 95       	ret

00000980 <pcint14_8Enable>:
     980:	e8 e6       	ldi	r30, 0x68	; 104
     982:	f0 e0       	ldi	r31, 0x00	; 0
     984:	80 81       	ld	r24, Z
     986:	82 60       	ori	r24, 0x02	; 2
     988:	80 83       	st	Z, r24
     98a:	08 95       	ret

0000098c <pcint14_8Disable>:
     98c:	e8 e6       	ldi	r30, 0x68	; 104
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	80 81       	ld	r24, Z
     992:	8d 7f       	andi	r24, 0xFD	; 253
     994:	80 83       	st	Z, r24
     996:	08 95       	ret

00000998 <pcint14_8ClearInterruptRequest>:
     998:	d9 9a       	sbi	0x1b, 1	; 27
     99a:	08 95       	ret

0000099c <pcint8ActivateInterrupt>:
     99c:	82 30       	cpi	r24, 0x02	; 2
     99e:	79 f0       	breq	.+30     	; 0x9be <pcint8ActivateInterrupt+0x22>
     9a0:	30 f4       	brcc	.+12     	; 0x9ae <pcint8ActivateInterrupt+0x12>
     9a2:	88 23       	and	r24, r24
     9a4:	49 f0       	breq	.+18     	; 0x9b8 <pcint8ActivateInterrupt+0x1c>
     9a6:	81 30       	cpi	r24, 0x01	; 1
     9a8:	a9 f4       	brne	.+42     	; 0x9d4 <pcint8ActivateInterrupt+0x38>
     9aa:	40 9a       	sbi	0x08, 0	; 8
     9ac:	06 c0       	rjmp	.+12     	; 0x9ba <pcint8ActivateInterrupt+0x1e>
     9ae:	83 30       	cpi	r24, 0x03	; 3
     9b0:	41 f0       	breq	.+16     	; 0x9c2 <pcint8ActivateInterrupt+0x26>
     9b2:	8f 3f       	cpi	r24, 0xFF	; 255
     9b4:	41 f0       	breq	.+16     	; 0x9c6 <pcint8ActivateInterrupt+0x2a>
     9b6:	0e c0       	rjmp	.+28     	; 0x9d4 <pcint8ActivateInterrupt+0x38>
     9b8:	40 98       	cbi	0x08, 0	; 8
     9ba:	38 9a       	sbi	0x07, 0	; 7
     9bc:	04 c0       	rjmp	.+8      	; 0x9c6 <pcint8ActivateInterrupt+0x2a>
     9be:	40 98       	cbi	0x08, 0	; 8
     9c0:	01 c0       	rjmp	.+2      	; 0x9c4 <pcint8ActivateInterrupt+0x28>
     9c2:	40 9a       	sbi	0x08, 0	; 8
     9c4:	38 98       	cbi	0x07, 0	; 7
     9c6:	80 91 6c 00 	lds	r24, 0x006C
     9ca:	81 60       	ori	r24, 0x01	; 1
     9cc:	80 93 6c 00 	sts	0x006C, r24
     9d0:	80 e0       	ldi	r24, 0x00	; 0
     9d2:	08 95       	ret
     9d4:	81 e0       	ldi	r24, 0x01	; 1
     9d6:	08 95       	ret

000009d8 <pcint8DeactivateInterrupt>:
     9d8:	ec e6       	ldi	r30, 0x6C	; 108
     9da:	f0 e0       	ldi	r31, 0x00	; 0
     9dc:	80 81       	ld	r24, Z
     9de:	8e 7f       	andi	r24, 0xFE	; 254
     9e0:	80 83       	st	Z, r24
     9e2:	08 95       	ret

000009e4 <pcint9ActivateInterrupt>:
     9e4:	82 30       	cpi	r24, 0x02	; 2
     9e6:	79 f0       	breq	.+30     	; 0xa06 <pcint9ActivateInterrupt+0x22>
     9e8:	30 f4       	brcc	.+12     	; 0x9f6 <pcint9ActivateInterrupt+0x12>
     9ea:	88 23       	and	r24, r24
     9ec:	49 f0       	breq	.+18     	; 0xa00 <pcint9ActivateInterrupt+0x1c>
     9ee:	81 30       	cpi	r24, 0x01	; 1
     9f0:	a9 f4       	brne	.+42     	; 0xa1c <pcint9ActivateInterrupt+0x38>
     9f2:	41 9a       	sbi	0x08, 1	; 8
     9f4:	06 c0       	rjmp	.+12     	; 0xa02 <pcint9ActivateInterrupt+0x1e>
     9f6:	83 30       	cpi	r24, 0x03	; 3
     9f8:	41 f0       	breq	.+16     	; 0xa0a <pcint9ActivateInterrupt+0x26>
     9fa:	8f 3f       	cpi	r24, 0xFF	; 255
     9fc:	41 f0       	breq	.+16     	; 0xa0e <pcint9ActivateInterrupt+0x2a>
     9fe:	0e c0       	rjmp	.+28     	; 0xa1c <pcint9ActivateInterrupt+0x38>
     a00:	41 98       	cbi	0x08, 1	; 8
     a02:	39 9a       	sbi	0x07, 1	; 7
     a04:	04 c0       	rjmp	.+8      	; 0xa0e <pcint9ActivateInterrupt+0x2a>
     a06:	41 98       	cbi	0x08, 1	; 8
     a08:	01 c0       	rjmp	.+2      	; 0xa0c <pcint9ActivateInterrupt+0x28>
     a0a:	41 9a       	sbi	0x08, 1	; 8
     a0c:	39 98       	cbi	0x07, 1	; 7
     a0e:	80 91 6c 00 	lds	r24, 0x006C
     a12:	82 60       	ori	r24, 0x02	; 2
     a14:	80 93 6c 00 	sts	0x006C, r24
     a18:	80 e0       	ldi	r24, 0x00	; 0
     a1a:	08 95       	ret
     a1c:	81 e0       	ldi	r24, 0x01	; 1
     a1e:	08 95       	ret

00000a20 <pcint9DeactivateInterrupt>:
     a20:	ec e6       	ldi	r30, 0x6C	; 108
     a22:	f0 e0       	ldi	r31, 0x00	; 0
     a24:	80 81       	ld	r24, Z
     a26:	8d 7f       	andi	r24, 0xFD	; 253
     a28:	80 83       	st	Z, r24
     a2a:	08 95       	ret

00000a2c <pcint10ActivateInterrupt>:
     a2c:	82 30       	cpi	r24, 0x02	; 2
     a2e:	79 f0       	breq	.+30     	; 0xa4e <pcint10ActivateInterrupt+0x22>
     a30:	30 f4       	brcc	.+12     	; 0xa3e <pcint10ActivateInterrupt+0x12>
     a32:	88 23       	and	r24, r24
     a34:	49 f0       	breq	.+18     	; 0xa48 <pcint10ActivateInterrupt+0x1c>
     a36:	81 30       	cpi	r24, 0x01	; 1
     a38:	a9 f4       	brne	.+42     	; 0xa64 <pcint10ActivateInterrupt+0x38>
     a3a:	42 9a       	sbi	0x08, 2	; 8
     a3c:	06 c0       	rjmp	.+12     	; 0xa4a <pcint10ActivateInterrupt+0x1e>
     a3e:	83 30       	cpi	r24, 0x03	; 3
     a40:	41 f0       	breq	.+16     	; 0xa52 <pcint10ActivateInterrupt+0x26>
     a42:	8f 3f       	cpi	r24, 0xFF	; 255
     a44:	41 f0       	breq	.+16     	; 0xa56 <pcint10ActivateInterrupt+0x2a>
     a46:	0e c0       	rjmp	.+28     	; 0xa64 <pcint10ActivateInterrupt+0x38>
     a48:	42 98       	cbi	0x08, 2	; 8
     a4a:	3a 9a       	sbi	0x07, 2	; 7
     a4c:	04 c0       	rjmp	.+8      	; 0xa56 <pcint10ActivateInterrupt+0x2a>
     a4e:	42 98       	cbi	0x08, 2	; 8
     a50:	01 c0       	rjmp	.+2      	; 0xa54 <pcint10ActivateInterrupt+0x28>
     a52:	42 9a       	sbi	0x08, 2	; 8
     a54:	3a 98       	cbi	0x07, 2	; 7
     a56:	80 91 6c 00 	lds	r24, 0x006C
     a5a:	84 60       	ori	r24, 0x04	; 4
     a5c:	80 93 6c 00 	sts	0x006C, r24
     a60:	80 e0       	ldi	r24, 0x00	; 0
     a62:	08 95       	ret
     a64:	81 e0       	ldi	r24, 0x01	; 1
     a66:	08 95       	ret

00000a68 <pcint10DeactivateInterrupt>:
     a68:	ec e6       	ldi	r30, 0x6C	; 108
     a6a:	f0 e0       	ldi	r31, 0x00	; 0
     a6c:	80 81       	ld	r24, Z
     a6e:	8b 7f       	andi	r24, 0xFB	; 251
     a70:	80 83       	st	Z, r24
     a72:	08 95       	ret

00000a74 <pcint11ActivateInterrupt>:
     a74:	82 30       	cpi	r24, 0x02	; 2
     a76:	79 f0       	breq	.+30     	; 0xa96 <pcint11ActivateInterrupt+0x22>
     a78:	30 f4       	brcc	.+12     	; 0xa86 <pcint11ActivateInterrupt+0x12>
     a7a:	88 23       	and	r24, r24
     a7c:	49 f0       	breq	.+18     	; 0xa90 <pcint11ActivateInterrupt+0x1c>
     a7e:	81 30       	cpi	r24, 0x01	; 1
     a80:	a9 f4       	brne	.+42     	; 0xaac <pcint11ActivateInterrupt+0x38>
     a82:	43 9a       	sbi	0x08, 3	; 8
     a84:	06 c0       	rjmp	.+12     	; 0xa92 <pcint11ActivateInterrupt+0x1e>
     a86:	83 30       	cpi	r24, 0x03	; 3
     a88:	41 f0       	breq	.+16     	; 0xa9a <pcint11ActivateInterrupt+0x26>
     a8a:	8f 3f       	cpi	r24, 0xFF	; 255
     a8c:	41 f0       	breq	.+16     	; 0xa9e <pcint11ActivateInterrupt+0x2a>
     a8e:	0e c0       	rjmp	.+28     	; 0xaac <pcint11ActivateInterrupt+0x38>
     a90:	43 98       	cbi	0x08, 3	; 8
     a92:	3b 9a       	sbi	0x07, 3	; 7
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <pcint11ActivateInterrupt+0x2a>
     a96:	43 98       	cbi	0x08, 3	; 8
     a98:	01 c0       	rjmp	.+2      	; 0xa9c <pcint11ActivateInterrupt+0x28>
     a9a:	43 9a       	sbi	0x08, 3	; 8
     a9c:	3b 98       	cbi	0x07, 3	; 7
     a9e:	80 91 6c 00 	lds	r24, 0x006C
     aa2:	88 60       	ori	r24, 0x08	; 8
     aa4:	80 93 6c 00 	sts	0x006C, r24
     aa8:	80 e0       	ldi	r24, 0x00	; 0
     aaa:	08 95       	ret
     aac:	81 e0       	ldi	r24, 0x01	; 1
     aae:	08 95       	ret

00000ab0 <pcint11DeactivateInterrupt>:
     ab0:	ec e6       	ldi	r30, 0x6C	; 108
     ab2:	f0 e0       	ldi	r31, 0x00	; 0
     ab4:	80 81       	ld	r24, Z
     ab6:	87 7f       	andi	r24, 0xF7	; 247
     ab8:	80 83       	st	Z, r24
     aba:	08 95       	ret

00000abc <pcint12ActivateInterrupt>:
     abc:	82 30       	cpi	r24, 0x02	; 2
     abe:	79 f0       	breq	.+30     	; 0xade <pcint12ActivateInterrupt+0x22>
     ac0:	30 f4       	brcc	.+12     	; 0xace <pcint12ActivateInterrupt+0x12>
     ac2:	88 23       	and	r24, r24
     ac4:	49 f0       	breq	.+18     	; 0xad8 <pcint12ActivateInterrupt+0x1c>
     ac6:	81 30       	cpi	r24, 0x01	; 1
     ac8:	a9 f4       	brne	.+42     	; 0xaf4 <pcint12ActivateInterrupt+0x38>
     aca:	44 9a       	sbi	0x08, 4	; 8
     acc:	06 c0       	rjmp	.+12     	; 0xada <pcint12ActivateInterrupt+0x1e>
     ace:	83 30       	cpi	r24, 0x03	; 3
     ad0:	41 f0       	breq	.+16     	; 0xae2 <pcint12ActivateInterrupt+0x26>
     ad2:	8f 3f       	cpi	r24, 0xFF	; 255
     ad4:	41 f0       	breq	.+16     	; 0xae6 <pcint12ActivateInterrupt+0x2a>
     ad6:	0e c0       	rjmp	.+28     	; 0xaf4 <pcint12ActivateInterrupt+0x38>
     ad8:	44 98       	cbi	0x08, 4	; 8
     ada:	3c 9a       	sbi	0x07, 4	; 7
     adc:	04 c0       	rjmp	.+8      	; 0xae6 <pcint12ActivateInterrupt+0x2a>
     ade:	44 98       	cbi	0x08, 4	; 8
     ae0:	01 c0       	rjmp	.+2      	; 0xae4 <pcint12ActivateInterrupt+0x28>
     ae2:	44 9a       	sbi	0x08, 4	; 8
     ae4:	3c 98       	cbi	0x07, 4	; 7
     ae6:	80 91 6c 00 	lds	r24, 0x006C
     aea:	80 61       	ori	r24, 0x10	; 16
     aec:	80 93 6c 00 	sts	0x006C, r24
     af0:	80 e0       	ldi	r24, 0x00	; 0
     af2:	08 95       	ret
     af4:	81 e0       	ldi	r24, 0x01	; 1
     af6:	08 95       	ret

00000af8 <pcint12DeactivateInterrupt>:
     af8:	ec e6       	ldi	r30, 0x6C	; 108
     afa:	f0 e0       	ldi	r31, 0x00	; 0
     afc:	80 81       	ld	r24, Z
     afe:	8f 7e       	andi	r24, 0xEF	; 239
     b00:	80 83       	st	Z, r24
     b02:	08 95       	ret

00000b04 <pcint13ActivateInterrupt>:
     b04:	82 30       	cpi	r24, 0x02	; 2
     b06:	79 f0       	breq	.+30     	; 0xb26 <pcint13ActivateInterrupt+0x22>
     b08:	30 f4       	brcc	.+12     	; 0xb16 <pcint13ActivateInterrupt+0x12>
     b0a:	88 23       	and	r24, r24
     b0c:	49 f0       	breq	.+18     	; 0xb20 <pcint13ActivateInterrupt+0x1c>
     b0e:	81 30       	cpi	r24, 0x01	; 1
     b10:	a9 f4       	brne	.+42     	; 0xb3c <pcint13ActivateInterrupt+0x38>
     b12:	45 9a       	sbi	0x08, 5	; 8
     b14:	06 c0       	rjmp	.+12     	; 0xb22 <pcint13ActivateInterrupt+0x1e>
     b16:	83 30       	cpi	r24, 0x03	; 3
     b18:	41 f0       	breq	.+16     	; 0xb2a <pcint13ActivateInterrupt+0x26>
     b1a:	8f 3f       	cpi	r24, 0xFF	; 255
     b1c:	41 f0       	breq	.+16     	; 0xb2e <pcint13ActivateInterrupt+0x2a>
     b1e:	0e c0       	rjmp	.+28     	; 0xb3c <pcint13ActivateInterrupt+0x38>
     b20:	45 98       	cbi	0x08, 5	; 8
     b22:	3d 9a       	sbi	0x07, 5	; 7
     b24:	04 c0       	rjmp	.+8      	; 0xb2e <pcint13ActivateInterrupt+0x2a>
     b26:	45 98       	cbi	0x08, 5	; 8
     b28:	01 c0       	rjmp	.+2      	; 0xb2c <pcint13ActivateInterrupt+0x28>
     b2a:	45 9a       	sbi	0x08, 5	; 8
     b2c:	3d 98       	cbi	0x07, 5	; 7
     b2e:	80 91 6c 00 	lds	r24, 0x006C
     b32:	80 62       	ori	r24, 0x20	; 32
     b34:	80 93 6c 00 	sts	0x006C, r24
     b38:	80 e0       	ldi	r24, 0x00	; 0
     b3a:	08 95       	ret
     b3c:	81 e0       	ldi	r24, 0x01	; 1
     b3e:	08 95       	ret

00000b40 <pcint13DeactivateInterrupt>:
     b40:	ec e6       	ldi	r30, 0x6C	; 108
     b42:	f0 e0       	ldi	r31, 0x00	; 0
     b44:	80 81       	ld	r24, Z
     b46:	8f 7d       	andi	r24, 0xDF	; 223
     b48:	80 83       	st	Z, r24
     b4a:	08 95       	ret

00000b4c <pcint14ActivateInterrupt>:
     b4c:	82 30       	cpi	r24, 0x02	; 2
     b4e:	79 f0       	breq	.+30     	; 0xb6e <pcint14ActivateInterrupt+0x22>
     b50:	30 f4       	brcc	.+12     	; 0xb5e <pcint14ActivateInterrupt+0x12>
     b52:	88 23       	and	r24, r24
     b54:	49 f0       	breq	.+18     	; 0xb68 <pcint14ActivateInterrupt+0x1c>
     b56:	81 30       	cpi	r24, 0x01	; 1
     b58:	a9 f4       	brne	.+42     	; 0xb84 <pcint14ActivateInterrupt+0x38>
     b5a:	46 9a       	sbi	0x08, 6	; 8
     b5c:	06 c0       	rjmp	.+12     	; 0xb6a <pcint14ActivateInterrupt+0x1e>
     b5e:	83 30       	cpi	r24, 0x03	; 3
     b60:	41 f0       	breq	.+16     	; 0xb72 <pcint14ActivateInterrupt+0x26>
     b62:	8f 3f       	cpi	r24, 0xFF	; 255
     b64:	41 f0       	breq	.+16     	; 0xb76 <pcint14ActivateInterrupt+0x2a>
     b66:	0e c0       	rjmp	.+28     	; 0xb84 <pcint14ActivateInterrupt+0x38>
     b68:	46 98       	cbi	0x08, 6	; 8
     b6a:	3e 9a       	sbi	0x07, 6	; 7
     b6c:	04 c0       	rjmp	.+8      	; 0xb76 <pcint14ActivateInterrupt+0x2a>
     b6e:	46 98       	cbi	0x08, 6	; 8
     b70:	01 c0       	rjmp	.+2      	; 0xb74 <pcint14ActivateInterrupt+0x28>
     b72:	46 9a       	sbi	0x08, 6	; 8
     b74:	3e 98       	cbi	0x07, 6	; 7
     b76:	80 91 6c 00 	lds	r24, 0x006C
     b7a:	80 64       	ori	r24, 0x40	; 64
     b7c:	80 93 6c 00 	sts	0x006C, r24
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	08 95       	ret
     b84:	81 e0       	ldi	r24, 0x01	; 1
     b86:	08 95       	ret

00000b88 <pcint14DeactivateInterrupt>:
     b88:	ec e6       	ldi	r30, 0x6C	; 108
     b8a:	f0 e0       	ldi	r31, 0x00	; 0
     b8c:	80 81       	ld	r24, Z
     b8e:	8f 7b       	andi	r24, 0xBF	; 191
     b90:	80 83       	st	Z, r24
     b92:	08 95       	ret

00000b94 <pcint23_16Enable>:
     b94:	e8 e6       	ldi	r30, 0x68	; 104
     b96:	f0 e0       	ldi	r31, 0x00	; 0
     b98:	80 81       	ld	r24, Z
     b9a:	84 60       	ori	r24, 0x04	; 4
     b9c:	80 83       	st	Z, r24
     b9e:	08 95       	ret

00000ba0 <pcint23_16Disable>:
     ba0:	e8 e6       	ldi	r30, 0x68	; 104
     ba2:	f0 e0       	ldi	r31, 0x00	; 0
     ba4:	80 81       	ld	r24, Z
     ba6:	8b 7f       	andi	r24, 0xFB	; 251
     ba8:	80 83       	st	Z, r24
     baa:	08 95       	ret

00000bac <pcint23_16ClearInterruptRequest>:
     bac:	da 9a       	sbi	0x1b, 2	; 27
     bae:	08 95       	ret

00000bb0 <pcint16ActivateInterrupt>:
     bb0:	82 30       	cpi	r24, 0x02	; 2
     bb2:	79 f0       	breq	.+30     	; 0xbd2 <pcint16ActivateInterrupt+0x22>
     bb4:	30 f4       	brcc	.+12     	; 0xbc2 <pcint16ActivateInterrupt+0x12>
     bb6:	88 23       	and	r24, r24
     bb8:	49 f0       	breq	.+18     	; 0xbcc <pcint16ActivateInterrupt+0x1c>
     bba:	81 30       	cpi	r24, 0x01	; 1
     bbc:	a9 f4       	brne	.+42     	; 0xbe8 <pcint16ActivateInterrupt+0x38>
     bbe:	58 9a       	sbi	0x0b, 0	; 11
     bc0:	06 c0       	rjmp	.+12     	; 0xbce <pcint16ActivateInterrupt+0x1e>
     bc2:	83 30       	cpi	r24, 0x03	; 3
     bc4:	41 f0       	breq	.+16     	; 0xbd6 <pcint16ActivateInterrupt+0x26>
     bc6:	8f 3f       	cpi	r24, 0xFF	; 255
     bc8:	41 f0       	breq	.+16     	; 0xbda <pcint16ActivateInterrupt+0x2a>
     bca:	0e c0       	rjmp	.+28     	; 0xbe8 <pcint16ActivateInterrupt+0x38>
     bcc:	58 98       	cbi	0x0b, 0	; 11
     bce:	50 9a       	sbi	0x0a, 0	; 10
     bd0:	04 c0       	rjmp	.+8      	; 0xbda <pcint16ActivateInterrupt+0x2a>
     bd2:	58 98       	cbi	0x0b, 0	; 11
     bd4:	01 c0       	rjmp	.+2      	; 0xbd8 <pcint16ActivateInterrupt+0x28>
     bd6:	58 9a       	sbi	0x0b, 0	; 11
     bd8:	50 98       	cbi	0x0a, 0	; 10
     bda:	80 91 6d 00 	lds	r24, 0x006D
     bde:	81 60       	ori	r24, 0x01	; 1
     be0:	80 93 6d 00 	sts	0x006D, r24
     be4:	80 e0       	ldi	r24, 0x00	; 0
     be6:	08 95       	ret
     be8:	81 e0       	ldi	r24, 0x01	; 1
     bea:	08 95       	ret

00000bec <pcint16DeactivateInterrupt>:
     bec:	ed e6       	ldi	r30, 0x6D	; 109
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	80 81       	ld	r24, Z
     bf2:	8e 7f       	andi	r24, 0xFE	; 254
     bf4:	80 83       	st	Z, r24
     bf6:	08 95       	ret

00000bf8 <pcint17ActivateInterrupt>:
     bf8:	82 30       	cpi	r24, 0x02	; 2
     bfa:	79 f0       	breq	.+30     	; 0xc1a <pcint17ActivateInterrupt+0x22>
     bfc:	30 f4       	brcc	.+12     	; 0xc0a <pcint17ActivateInterrupt+0x12>
     bfe:	88 23       	and	r24, r24
     c00:	49 f0       	breq	.+18     	; 0xc14 <pcint17ActivateInterrupt+0x1c>
     c02:	81 30       	cpi	r24, 0x01	; 1
     c04:	a9 f4       	brne	.+42     	; 0xc30 <pcint17ActivateInterrupt+0x38>
     c06:	59 9a       	sbi	0x0b, 1	; 11
     c08:	06 c0       	rjmp	.+12     	; 0xc16 <pcint17ActivateInterrupt+0x1e>
     c0a:	83 30       	cpi	r24, 0x03	; 3
     c0c:	41 f0       	breq	.+16     	; 0xc1e <pcint17ActivateInterrupt+0x26>
     c0e:	8f 3f       	cpi	r24, 0xFF	; 255
     c10:	41 f0       	breq	.+16     	; 0xc22 <pcint17ActivateInterrupt+0x2a>
     c12:	0e c0       	rjmp	.+28     	; 0xc30 <pcint17ActivateInterrupt+0x38>
     c14:	59 98       	cbi	0x0b, 1	; 11
     c16:	51 9a       	sbi	0x0a, 1	; 10
     c18:	04 c0       	rjmp	.+8      	; 0xc22 <pcint17ActivateInterrupt+0x2a>
     c1a:	59 98       	cbi	0x0b, 1	; 11
     c1c:	01 c0       	rjmp	.+2      	; 0xc20 <pcint17ActivateInterrupt+0x28>
     c1e:	59 9a       	sbi	0x0b, 1	; 11
     c20:	51 98       	cbi	0x0a, 1	; 10
     c22:	80 91 6d 00 	lds	r24, 0x006D
     c26:	82 60       	ori	r24, 0x02	; 2
     c28:	80 93 6d 00 	sts	0x006D, r24
     c2c:	80 e0       	ldi	r24, 0x00	; 0
     c2e:	08 95       	ret
     c30:	81 e0       	ldi	r24, 0x01	; 1
     c32:	08 95       	ret

00000c34 <pcint17DeactivateInterrupt>:
     c34:	ed e6       	ldi	r30, 0x6D	; 109
     c36:	f0 e0       	ldi	r31, 0x00	; 0
     c38:	80 81       	ld	r24, Z
     c3a:	8d 7f       	andi	r24, 0xFD	; 253
     c3c:	80 83       	st	Z, r24
     c3e:	08 95       	ret

00000c40 <pcint18ActivateInterrupt>:
     c40:	82 30       	cpi	r24, 0x02	; 2
     c42:	79 f0       	breq	.+30     	; 0xc62 <pcint18ActivateInterrupt+0x22>
     c44:	30 f4       	brcc	.+12     	; 0xc52 <pcint18ActivateInterrupt+0x12>
     c46:	88 23       	and	r24, r24
     c48:	49 f0       	breq	.+18     	; 0xc5c <pcint18ActivateInterrupt+0x1c>
     c4a:	81 30       	cpi	r24, 0x01	; 1
     c4c:	a9 f4       	brne	.+42     	; 0xc78 <pcint18ActivateInterrupt+0x38>
     c4e:	5a 9a       	sbi	0x0b, 2	; 11
     c50:	06 c0       	rjmp	.+12     	; 0xc5e <pcint18ActivateInterrupt+0x1e>
     c52:	83 30       	cpi	r24, 0x03	; 3
     c54:	41 f0       	breq	.+16     	; 0xc66 <pcint18ActivateInterrupt+0x26>
     c56:	8f 3f       	cpi	r24, 0xFF	; 255
     c58:	41 f0       	breq	.+16     	; 0xc6a <pcint18ActivateInterrupt+0x2a>
     c5a:	0e c0       	rjmp	.+28     	; 0xc78 <pcint18ActivateInterrupt+0x38>
     c5c:	5a 98       	cbi	0x0b, 2	; 11
     c5e:	52 9a       	sbi	0x0a, 2	; 10
     c60:	04 c0       	rjmp	.+8      	; 0xc6a <pcint18ActivateInterrupt+0x2a>
     c62:	5a 98       	cbi	0x0b, 2	; 11
     c64:	01 c0       	rjmp	.+2      	; 0xc68 <pcint18ActivateInterrupt+0x28>
     c66:	5a 9a       	sbi	0x0b, 2	; 11
     c68:	52 98       	cbi	0x0a, 2	; 10
     c6a:	80 91 6d 00 	lds	r24, 0x006D
     c6e:	84 60       	ori	r24, 0x04	; 4
     c70:	80 93 6d 00 	sts	0x006D, r24
     c74:	80 e0       	ldi	r24, 0x00	; 0
     c76:	08 95       	ret
     c78:	81 e0       	ldi	r24, 0x01	; 1
     c7a:	08 95       	ret

00000c7c <pcint18DeactivateInterrupt>:
     c7c:	ed e6       	ldi	r30, 0x6D	; 109
     c7e:	f0 e0       	ldi	r31, 0x00	; 0
     c80:	80 81       	ld	r24, Z
     c82:	8b 7f       	andi	r24, 0xFB	; 251
     c84:	80 83       	st	Z, r24
     c86:	08 95       	ret

00000c88 <pcint19ActivateInterrupt>:
     c88:	82 30       	cpi	r24, 0x02	; 2
     c8a:	79 f0       	breq	.+30     	; 0xcaa <pcint19ActivateInterrupt+0x22>
     c8c:	30 f4       	brcc	.+12     	; 0xc9a <pcint19ActivateInterrupt+0x12>
     c8e:	88 23       	and	r24, r24
     c90:	49 f0       	breq	.+18     	; 0xca4 <pcint19ActivateInterrupt+0x1c>
     c92:	81 30       	cpi	r24, 0x01	; 1
     c94:	a9 f4       	brne	.+42     	; 0xcc0 <pcint19ActivateInterrupt+0x38>
     c96:	5b 9a       	sbi	0x0b, 3	; 11
     c98:	06 c0       	rjmp	.+12     	; 0xca6 <pcint19ActivateInterrupt+0x1e>
     c9a:	83 30       	cpi	r24, 0x03	; 3
     c9c:	41 f0       	breq	.+16     	; 0xcae <pcint19ActivateInterrupt+0x26>
     c9e:	8f 3f       	cpi	r24, 0xFF	; 255
     ca0:	41 f0       	breq	.+16     	; 0xcb2 <pcint19ActivateInterrupt+0x2a>
     ca2:	0e c0       	rjmp	.+28     	; 0xcc0 <pcint19ActivateInterrupt+0x38>
     ca4:	5b 98       	cbi	0x0b, 3	; 11
     ca6:	53 9a       	sbi	0x0a, 3	; 10
     ca8:	04 c0       	rjmp	.+8      	; 0xcb2 <pcint19ActivateInterrupt+0x2a>
     caa:	5b 98       	cbi	0x0b, 3	; 11
     cac:	01 c0       	rjmp	.+2      	; 0xcb0 <pcint19ActivateInterrupt+0x28>
     cae:	5b 9a       	sbi	0x0b, 3	; 11
     cb0:	53 98       	cbi	0x0a, 3	; 10
     cb2:	80 91 6d 00 	lds	r24, 0x006D
     cb6:	88 60       	ori	r24, 0x08	; 8
     cb8:	80 93 6d 00 	sts	0x006D, r24
     cbc:	80 e0       	ldi	r24, 0x00	; 0
     cbe:	08 95       	ret
     cc0:	81 e0       	ldi	r24, 0x01	; 1
     cc2:	08 95       	ret

00000cc4 <pcint19DeactivateInterrupt>:
     cc4:	ed e6       	ldi	r30, 0x6D	; 109
     cc6:	f0 e0       	ldi	r31, 0x00	; 0
     cc8:	80 81       	ld	r24, Z
     cca:	87 7f       	andi	r24, 0xF7	; 247
     ccc:	80 83       	st	Z, r24
     cce:	08 95       	ret

00000cd0 <pcint20ActivateInterrupt>:
     cd0:	82 30       	cpi	r24, 0x02	; 2
     cd2:	79 f0       	breq	.+30     	; 0xcf2 <pcint20ActivateInterrupt+0x22>
     cd4:	30 f4       	brcc	.+12     	; 0xce2 <pcint20ActivateInterrupt+0x12>
     cd6:	88 23       	and	r24, r24
     cd8:	49 f0       	breq	.+18     	; 0xcec <pcint20ActivateInterrupt+0x1c>
     cda:	81 30       	cpi	r24, 0x01	; 1
     cdc:	a9 f4       	brne	.+42     	; 0xd08 <pcint20ActivateInterrupt+0x38>
     cde:	5c 9a       	sbi	0x0b, 4	; 11
     ce0:	06 c0       	rjmp	.+12     	; 0xcee <pcint20ActivateInterrupt+0x1e>
     ce2:	83 30       	cpi	r24, 0x03	; 3
     ce4:	41 f0       	breq	.+16     	; 0xcf6 <pcint20ActivateInterrupt+0x26>
     ce6:	8f 3f       	cpi	r24, 0xFF	; 255
     ce8:	41 f0       	breq	.+16     	; 0xcfa <pcint20ActivateInterrupt+0x2a>
     cea:	0e c0       	rjmp	.+28     	; 0xd08 <pcint20ActivateInterrupt+0x38>
     cec:	5c 98       	cbi	0x0b, 4	; 11
     cee:	54 9a       	sbi	0x0a, 4	; 10
     cf0:	04 c0       	rjmp	.+8      	; 0xcfa <pcint20ActivateInterrupt+0x2a>
     cf2:	5c 98       	cbi	0x0b, 4	; 11
     cf4:	01 c0       	rjmp	.+2      	; 0xcf8 <pcint20ActivateInterrupt+0x28>
     cf6:	5c 9a       	sbi	0x0b, 4	; 11
     cf8:	54 98       	cbi	0x0a, 4	; 10
     cfa:	80 91 6d 00 	lds	r24, 0x006D
     cfe:	80 61       	ori	r24, 0x10	; 16
     d00:	80 93 6d 00 	sts	0x006D, r24
     d04:	80 e0       	ldi	r24, 0x00	; 0
     d06:	08 95       	ret
     d08:	81 e0       	ldi	r24, 0x01	; 1
     d0a:	08 95       	ret

00000d0c <pcint20DeactivateInterrupt>:
     d0c:	ed e6       	ldi	r30, 0x6D	; 109
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	80 81       	ld	r24, Z
     d12:	8f 7e       	andi	r24, 0xEF	; 239
     d14:	80 83       	st	Z, r24
     d16:	08 95       	ret

00000d18 <pcint21ActivateInterrupt>:
     d18:	82 30       	cpi	r24, 0x02	; 2
     d1a:	79 f0       	breq	.+30     	; 0xd3a <pcint21ActivateInterrupt+0x22>
     d1c:	30 f4       	brcc	.+12     	; 0xd2a <pcint21ActivateInterrupt+0x12>
     d1e:	88 23       	and	r24, r24
     d20:	49 f0       	breq	.+18     	; 0xd34 <pcint21ActivateInterrupt+0x1c>
     d22:	81 30       	cpi	r24, 0x01	; 1
     d24:	a9 f4       	brne	.+42     	; 0xd50 <pcint21ActivateInterrupt+0x38>
     d26:	5d 9a       	sbi	0x0b, 5	; 11
     d28:	06 c0       	rjmp	.+12     	; 0xd36 <pcint21ActivateInterrupt+0x1e>
     d2a:	83 30       	cpi	r24, 0x03	; 3
     d2c:	41 f0       	breq	.+16     	; 0xd3e <pcint21ActivateInterrupt+0x26>
     d2e:	8f 3f       	cpi	r24, 0xFF	; 255
     d30:	41 f0       	breq	.+16     	; 0xd42 <pcint21ActivateInterrupt+0x2a>
     d32:	0e c0       	rjmp	.+28     	; 0xd50 <pcint21ActivateInterrupt+0x38>
     d34:	5d 98       	cbi	0x0b, 5	; 11
     d36:	55 9a       	sbi	0x0a, 5	; 10
     d38:	04 c0       	rjmp	.+8      	; 0xd42 <pcint21ActivateInterrupt+0x2a>
     d3a:	5d 98       	cbi	0x0b, 5	; 11
     d3c:	01 c0       	rjmp	.+2      	; 0xd40 <pcint21ActivateInterrupt+0x28>
     d3e:	5d 9a       	sbi	0x0b, 5	; 11
     d40:	55 98       	cbi	0x0a, 5	; 10
     d42:	80 91 6d 00 	lds	r24, 0x006D
     d46:	80 62       	ori	r24, 0x20	; 32
     d48:	80 93 6d 00 	sts	0x006D, r24
     d4c:	80 e0       	ldi	r24, 0x00	; 0
     d4e:	08 95       	ret
     d50:	81 e0       	ldi	r24, 0x01	; 1
     d52:	08 95       	ret

00000d54 <pcint21DeactivateInterrupt>:
     d54:	ed e6       	ldi	r30, 0x6D	; 109
     d56:	f0 e0       	ldi	r31, 0x00	; 0
     d58:	80 81       	ld	r24, Z
     d5a:	8f 7d       	andi	r24, 0xDF	; 223
     d5c:	80 83       	st	Z, r24
     d5e:	08 95       	ret

00000d60 <pcint22ActivateInterrupt>:
     d60:	82 30       	cpi	r24, 0x02	; 2
     d62:	79 f0       	breq	.+30     	; 0xd82 <pcint22ActivateInterrupt+0x22>
     d64:	30 f4       	brcc	.+12     	; 0xd72 <pcint22ActivateInterrupt+0x12>
     d66:	88 23       	and	r24, r24
     d68:	49 f0       	breq	.+18     	; 0xd7c <pcint22ActivateInterrupt+0x1c>
     d6a:	81 30       	cpi	r24, 0x01	; 1
     d6c:	a9 f4       	brne	.+42     	; 0xd98 <pcint22ActivateInterrupt+0x38>
     d6e:	5e 9a       	sbi	0x0b, 6	; 11
     d70:	06 c0       	rjmp	.+12     	; 0xd7e <pcint22ActivateInterrupt+0x1e>
     d72:	83 30       	cpi	r24, 0x03	; 3
     d74:	41 f0       	breq	.+16     	; 0xd86 <pcint22ActivateInterrupt+0x26>
     d76:	8f 3f       	cpi	r24, 0xFF	; 255
     d78:	41 f0       	breq	.+16     	; 0xd8a <pcint22ActivateInterrupt+0x2a>
     d7a:	0e c0       	rjmp	.+28     	; 0xd98 <pcint22ActivateInterrupt+0x38>
     d7c:	5e 98       	cbi	0x0b, 6	; 11
     d7e:	56 9a       	sbi	0x0a, 6	; 10
     d80:	04 c0       	rjmp	.+8      	; 0xd8a <pcint22ActivateInterrupt+0x2a>
     d82:	5e 98       	cbi	0x0b, 6	; 11
     d84:	01 c0       	rjmp	.+2      	; 0xd88 <pcint22ActivateInterrupt+0x28>
     d86:	5e 9a       	sbi	0x0b, 6	; 11
     d88:	56 98       	cbi	0x0a, 6	; 10
     d8a:	80 91 6d 00 	lds	r24, 0x006D
     d8e:	80 64       	ori	r24, 0x40	; 64
     d90:	80 93 6d 00 	sts	0x006D, r24
     d94:	80 e0       	ldi	r24, 0x00	; 0
     d96:	08 95       	ret
     d98:	81 e0       	ldi	r24, 0x01	; 1
     d9a:	08 95       	ret

00000d9c <pcint22DeactivateInterrupt>:
     d9c:	ed e6       	ldi	r30, 0x6D	; 109
     d9e:	f0 e0       	ldi	r31, 0x00	; 0
     da0:	80 81       	ld	r24, Z
     da2:	8f 7b       	andi	r24, 0xBF	; 191
     da4:	80 83       	st	Z, r24
     da6:	08 95       	ret

00000da8 <pcint23ActivateInterrupt>:
     da8:	82 30       	cpi	r24, 0x02	; 2
     daa:	79 f0       	breq	.+30     	; 0xdca <pcint23ActivateInterrupt+0x22>
     dac:	30 f4       	brcc	.+12     	; 0xdba <pcint23ActivateInterrupt+0x12>
     dae:	88 23       	and	r24, r24
     db0:	49 f0       	breq	.+18     	; 0xdc4 <pcint23ActivateInterrupt+0x1c>
     db2:	81 30       	cpi	r24, 0x01	; 1
     db4:	a9 f4       	brne	.+42     	; 0xde0 <pcint23ActivateInterrupt+0x38>
     db6:	5f 9a       	sbi	0x0b, 7	; 11
     db8:	06 c0       	rjmp	.+12     	; 0xdc6 <pcint23ActivateInterrupt+0x1e>
     dba:	83 30       	cpi	r24, 0x03	; 3
     dbc:	41 f0       	breq	.+16     	; 0xdce <pcint23ActivateInterrupt+0x26>
     dbe:	8f 3f       	cpi	r24, 0xFF	; 255
     dc0:	41 f0       	breq	.+16     	; 0xdd2 <pcint23ActivateInterrupt+0x2a>
     dc2:	0e c0       	rjmp	.+28     	; 0xde0 <pcint23ActivateInterrupt+0x38>
     dc4:	5f 98       	cbi	0x0b, 7	; 11
     dc6:	57 9a       	sbi	0x0a, 7	; 10
     dc8:	04 c0       	rjmp	.+8      	; 0xdd2 <pcint23ActivateInterrupt+0x2a>
     dca:	5f 98       	cbi	0x0b, 7	; 11
     dcc:	01 c0       	rjmp	.+2      	; 0xdd0 <pcint23ActivateInterrupt+0x28>
     dce:	5f 9a       	sbi	0x0b, 7	; 11
     dd0:	57 98       	cbi	0x0a, 7	; 10
     dd2:	80 91 6d 00 	lds	r24, 0x006D
     dd6:	80 68       	ori	r24, 0x80	; 128
     dd8:	80 93 6d 00 	sts	0x006D, r24
     ddc:	80 e0       	ldi	r24, 0x00	; 0
     dde:	08 95       	ret
     de0:	81 e0       	ldi	r24, 0x01	; 1
     de2:	08 95       	ret

00000de4 <pcint23DeactivateInterrupt>:
     de4:	ed e6       	ldi	r30, 0x6D	; 109
     de6:	f0 e0       	ldi	r31, 0x00	; 0
     de8:	80 81       	ld	r24, Z
     dea:	8f 77       	andi	r24, 0x7F	; 127
     dec:	80 83       	st	Z, r24
     dee:	08 95       	ret

00000df0 <timer0Config>:
     df0:	24 b5       	in	r18, 0x24	; 36
     df2:	95 b5       	in	r25, 0x25	; 37
     df4:	6f 3f       	cpi	r22, 0xFF	; 255
     df6:	c1 f0       	breq	.+48     	; 0xe28 <timer0Config+0x38>
     df8:	98 7f       	andi	r25, 0xF8	; 248
     dfa:	46 2f       	mov	r20, r22
     dfc:	50 e0       	ldi	r21, 0x00	; 0
     dfe:	48 30       	cpi	r20, 0x08	; 8
     e00:	51 05       	cpc	r21, r1
     e02:	80 f5       	brcc	.+96     	; 0xe64 <timer0Config+0x74>
     e04:	fa 01       	movw	r30, r20
     e06:	eb 5a       	subi	r30, 0xAB	; 171
     e08:	ff 4f       	sbci	r31, 0xFF	; 255
     e0a:	0c 94 99 0d 	jmp	0x1b32	; 0x1b32 <__tablejump2__>
     e0e:	91 60       	ori	r25, 0x01	; 1
     e10:	0b c0       	rjmp	.+22     	; 0xe28 <timer0Config+0x38>
     e12:	92 60       	ori	r25, 0x02	; 2
     e14:	09 c0       	rjmp	.+18     	; 0xe28 <timer0Config+0x38>
     e16:	93 60       	ori	r25, 0x03	; 3
     e18:	07 c0       	rjmp	.+14     	; 0xe28 <timer0Config+0x38>
     e1a:	94 60       	ori	r25, 0x04	; 4
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <timer0Config+0x38>
     e1e:	95 60       	ori	r25, 0x05	; 5
     e20:	03 c0       	rjmp	.+6      	; 0xe28 <timer0Config+0x38>
     e22:	96 60       	ori	r25, 0x06	; 6
     e24:	01 c0       	rjmp	.+2      	; 0xe28 <timer0Config+0x38>
     e26:	97 60       	ori	r25, 0x07	; 7
     e28:	8f 3f       	cpi	r24, 0xFF	; 255
     e2a:	c1 f0       	breq	.+48     	; 0xe5c <timer0Config+0x6c>
     e2c:	2c 7f       	andi	r18, 0xFC	; 252
     e2e:	97 7f       	andi	r25, 0xF7	; 247
     e30:	82 30       	cpi	r24, 0x02	; 2
     e32:	69 f0       	breq	.+26     	; 0xe4e <timer0Config+0x5e>
     e34:	28 f4       	brcc	.+10     	; 0xe40 <timer0Config+0x50>
     e36:	88 23       	and	r24, r24
     e38:	89 f0       	breq	.+34     	; 0xe5c <timer0Config+0x6c>
     e3a:	81 30       	cpi	r24, 0x01	; 1
     e3c:	59 f0       	breq	.+22     	; 0xe54 <timer0Config+0x64>
     e3e:	14 c0       	rjmp	.+40     	; 0xe68 <timer0Config+0x78>
     e40:	85 30       	cpi	r24, 0x05	; 5
     e42:	39 f0       	breq	.+14     	; 0xe52 <timer0Config+0x62>
     e44:	87 30       	cpi	r24, 0x07	; 7
     e46:	41 f0       	breq	.+16     	; 0xe58 <timer0Config+0x68>
     e48:	83 30       	cpi	r24, 0x03	; 3
     e4a:	71 f4       	brne	.+28     	; 0xe68 <timer0Config+0x78>
     e4c:	06 c0       	rjmp	.+12     	; 0xe5a <timer0Config+0x6a>
     e4e:	22 60       	ori	r18, 0x02	; 2
     e50:	05 c0       	rjmp	.+10     	; 0xe5c <timer0Config+0x6c>
     e52:	98 60       	ori	r25, 0x08	; 8
     e54:	21 60       	ori	r18, 0x01	; 1
     e56:	02 c0       	rjmp	.+4      	; 0xe5c <timer0Config+0x6c>
     e58:	98 60       	ori	r25, 0x08	; 8
     e5a:	23 60       	ori	r18, 0x03	; 3
     e5c:	24 bd       	out	0x24, r18	; 36
     e5e:	95 bd       	out	0x25, r25	; 37
     e60:	80 e0       	ldi	r24, 0x00	; 0
     e62:	08 95       	ret
     e64:	83 e0       	ldi	r24, 0x03	; 3
     e66:	08 95       	ret
     e68:	84 e0       	ldi	r24, 0x04	; 4
     e6a:	08 95       	ret

00000e6c <timer0OutputConfig>:
     e6c:	94 b5       	in	r25, 0x24	; 36
     e6e:	8f 3f       	cpi	r24, 0xFF	; 255
     e70:	69 f0       	breq	.+26     	; 0xe8c <timer0OutputConfig+0x20>
     e72:	9f 73       	andi	r25, 0x3F	; 63
     e74:	81 30       	cpi	r24, 0x01	; 1
     e76:	39 f0       	breq	.+14     	; 0xe86 <timer0OutputConfig+0x1a>
     e78:	48 f0       	brcs	.+18     	; 0xe8c <timer0OutputConfig+0x20>
     e7a:	82 30       	cpi	r24, 0x02	; 2
     e7c:	31 f0       	breq	.+12     	; 0xe8a <timer0OutputConfig+0x1e>
     e7e:	83 30       	cpi	r24, 0x03	; 3
     e80:	e1 f4       	brne	.+56     	; 0xeba <timer0OutputConfig+0x4e>
     e82:	90 6c       	ori	r25, 0xC0	; 192
     e84:	03 c0       	rjmp	.+6      	; 0xe8c <timer0OutputConfig+0x20>
     e86:	90 64       	ori	r25, 0x40	; 64
     e88:	01 c0       	rjmp	.+2      	; 0xe8c <timer0OutputConfig+0x20>
     e8a:	90 68       	ori	r25, 0x80	; 128
     e8c:	6f 3f       	cpi	r22, 0xFF	; 255
     e8e:	91 f0       	breq	.+36     	; 0xeb4 <timer0OutputConfig+0x48>
     e90:	9f 7c       	andi	r25, 0xCF	; 207
     e92:	82 30       	cpi	r24, 0x02	; 2
     e94:	61 f0       	breq	.+24     	; 0xeae <timer0OutputConfig+0x42>
     e96:	30 f4       	brcc	.+12     	; 0xea4 <timer0OutputConfig+0x38>
     e98:	88 23       	and	r24, r24
     e9a:	61 f0       	breq	.+24     	; 0xeb4 <timer0OutputConfig+0x48>
     e9c:	81 30       	cpi	r24, 0x01	; 1
     e9e:	69 f4       	brne	.+26     	; 0xeba <timer0OutputConfig+0x4e>
     ea0:	90 61       	ori	r25, 0x10	; 16
     ea2:	08 c0       	rjmp	.+16     	; 0xeb4 <timer0OutputConfig+0x48>
     ea4:	83 30       	cpi	r24, 0x03	; 3
     ea6:	29 f0       	breq	.+10     	; 0xeb2 <timer0OutputConfig+0x46>
     ea8:	8f 3f       	cpi	r24, 0xFF	; 255
     eaa:	21 f0       	breq	.+8      	; 0xeb4 <timer0OutputConfig+0x48>
     eac:	06 c0       	rjmp	.+12     	; 0xeba <timer0OutputConfig+0x4e>
     eae:	90 62       	ori	r25, 0x20	; 32
     eb0:	01 c0       	rjmp	.+2      	; 0xeb4 <timer0OutputConfig+0x48>
     eb2:	90 63       	ori	r25, 0x30	; 48
     eb4:	94 bd       	out	0x24, r25	; 36
     eb6:	80 e0       	ldi	r24, 0x00	; 0
     eb8:	08 95       	ret
     eba:	81 e0       	ldi	r24, 0x01	; 1
     ebc:	08 95       	ret

00000ebe <timer0ActivateOverflowInterrupt>:
     ebe:	ee e6       	ldi	r30, 0x6E	; 110
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	81 60       	ori	r24, 0x01	; 1
     ec6:	80 83       	st	Z, r24
     ec8:	08 95       	ret

00000eca <timer0DeactivateOverflowInterrupt>:
     eca:	ee e6       	ldi	r30, 0x6E	; 110
     ecc:	f0 e0       	ldi	r31, 0x00	; 0
     ece:	80 81       	ld	r24, Z
     ed0:	8e 7f       	andi	r24, 0xFE	; 254
     ed2:	80 83       	st	Z, r24
     ed4:	08 95       	ret

00000ed6 <timer0ClearOverflowInterruptRequest>:
     ed6:	a8 9a       	sbi	0x15, 0	; 21
     ed8:	08 95       	ret

00000eda <timer0ActivateCompareAInterrupt>:
     eda:	ee e6       	ldi	r30, 0x6E	; 110
     edc:	f0 e0       	ldi	r31, 0x00	; 0
     ede:	80 81       	ld	r24, Z
     ee0:	82 60       	ori	r24, 0x02	; 2
     ee2:	80 83       	st	Z, r24
     ee4:	08 95       	ret

00000ee6 <timer0DeactivateCompareAInterrupt>:
     ee6:	ee e6       	ldi	r30, 0x6E	; 110
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	80 81       	ld	r24, Z
     eec:	8d 7f       	andi	r24, 0xFD	; 253
     eee:	80 83       	st	Z, r24
     ef0:	08 95       	ret

00000ef2 <timer0ClearCompareAInterruptRequest>:
     ef2:	a9 9a       	sbi	0x15, 1	; 21
     ef4:	08 95       	ret

00000ef6 <timer0ActivateCompareBInterrupt>:
     ef6:	ee e6       	ldi	r30, 0x6E	; 110
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	80 81       	ld	r24, Z
     efc:	84 60       	ori	r24, 0x04	; 4
     efe:	80 83       	st	Z, r24
     f00:	08 95       	ret

00000f02 <timer0DeactivateCompareBInterrupt>:
     f02:	ee e6       	ldi	r30, 0x6E	; 110
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	80 81       	ld	r24, Z
     f08:	8b 7f       	andi	r24, 0xFB	; 251
     f0a:	80 83       	st	Z, r24
     f0c:	08 95       	ret

00000f0e <timer0ClearCompareBInterruptRequest>:
     f0e:	aa 9a       	sbi	0x15, 2	; 21
     f10:	08 95       	ret

00000f12 <timer0ForceCompareA>:
     f12:	85 b5       	in	r24, 0x25	; 37
     f14:	80 68       	ori	r24, 0x80	; 128
     f16:	85 bd       	out	0x25, r24	; 37
     f18:	08 95       	ret

00000f1a <timer0ForceCompareB>:
     f1a:	85 b5       	in	r24, 0x25	; 37
     f1c:	80 64       	ori	r24, 0x40	; 64
     f1e:	85 bd       	out	0x25, r24	; 37
     f20:	08 95       	ret

00000f22 <timer0SetCounterValue>:
     f22:	86 bd       	out	0x26, r24	; 38
     f24:	08 95       	ret

00000f26 <timer0GetCounterValue>:
     f26:	86 b5       	in	r24, 0x26	; 38
     f28:	08 95       	ret

00000f2a <timer0SetCompareAValue>:
     f2a:	87 bd       	out	0x27, r24	; 39
     f2c:	08 95       	ret

00000f2e <timer0GetCompareAValue>:
     f2e:	87 b5       	in	r24, 0x27	; 39
     f30:	08 95       	ret

00000f32 <timer0SetCompareBValue>:
     f32:	88 bd       	out	0x28, r24	; 40
     f34:	08 95       	ret

00000f36 <timer0GetCompareBValue>:
     f36:	88 b5       	in	r24, 0x28	; 40
     f38:	08 95       	ret

00000f3a <timer1Config>:
     f3a:	20 91 80 00 	lds	r18, 0x0080
     f3e:	90 91 81 00 	lds	r25, 0x0081
     f42:	6f 3f       	cpi	r22, 0xFF	; 255
     f44:	11 f0       	breq	.+4      	; 0xf4a <timer1Config+0x10>
     f46:	98 7f       	andi	r25, 0xF8	; 248
     f48:	96 2b       	or	r25, r22
     f4a:	8f 3f       	cpi	r24, 0xFF	; 255
     f4c:	69 f0       	breq	.+26     	; 0xf68 <timer1Config+0x2e>
     f4e:	83 ff       	sbrs	r24, 3
     f50:	02 c0       	rjmp	.+4      	; 0xf56 <timer1Config+0x1c>
     f52:	90 61       	ori	r25, 0x10	; 16
     f54:	01 c0       	rjmp	.+2      	; 0xf58 <timer1Config+0x1e>
     f56:	9f 7e       	andi	r25, 0xEF	; 239
     f58:	82 ff       	sbrs	r24, 2
     f5a:	02 c0       	rjmp	.+4      	; 0xf60 <timer1Config+0x26>
     f5c:	98 60       	ori	r25, 0x08	; 8
     f5e:	01 c0       	rjmp	.+2      	; 0xf62 <timer1Config+0x28>
     f60:	97 7f       	andi	r25, 0xF7	; 247
     f62:	83 70       	andi	r24, 0x03	; 3
     f64:	2c 7f       	andi	r18, 0xFC	; 252
     f66:	28 2b       	or	r18, r24
     f68:	20 93 80 00 	sts	0x0080, r18
     f6c:	90 93 81 00 	sts	0x0081, r25
     f70:	80 e0       	ldi	r24, 0x00	; 0
     f72:	08 95       	ret

00000f74 <timer1OutputConfig>:
     f74:	20 91 80 00 	lds	r18, 0x0080
     f78:	8f 3f       	cpi	r24, 0xFF	; 255
     f7a:	31 f0       	breq	.+12     	; 0xf88 <timer1OutputConfig+0x14>
     f7c:	30 e4       	ldi	r19, 0x40	; 64
     f7e:	83 9f       	mul	r24, r19
     f80:	c0 01       	movw	r24, r0
     f82:	11 24       	eor	r1, r1
     f84:	2f 73       	andi	r18, 0x3F	; 63
     f86:	28 2b       	or	r18, r24
     f88:	6f 3f       	cpi	r22, 0xFF	; 255
     f8a:	31 f0       	breq	.+12     	; 0xf98 <timer1OutputConfig+0x24>
     f8c:	2f 7c       	andi	r18, 0xCF	; 207
     f8e:	80 e1       	ldi	r24, 0x10	; 16
     f90:	68 9f       	mul	r22, r24
     f92:	b0 01       	movw	r22, r0
     f94:	11 24       	eor	r1, r1
     f96:	26 2b       	or	r18, r22
     f98:	20 93 80 00 	sts	0x0080, r18
     f9c:	80 e0       	ldi	r24, 0x00	; 0
     f9e:	08 95       	ret

00000fa0 <timer1InputCaptureNoiseCancelerConfig>:
     fa0:	e1 e8       	ldi	r30, 0x81	; 129
     fa2:	f0 e0       	ldi	r31, 0x00	; 0
     fa4:	90 81       	ld	r25, Z
     fa6:	9f 73       	andi	r25, 0x3F	; 63
     fa8:	98 2b       	or	r25, r24
     faa:	90 83       	st	Z, r25
     fac:	80 e0       	ldi	r24, 0x00	; 0
     fae:	08 95       	ret

00000fb0 <timer1ActivateOverflowInterrupt>:
     fb0:	ef e6       	ldi	r30, 0x6F	; 111
     fb2:	f0 e0       	ldi	r31, 0x00	; 0
     fb4:	80 81       	ld	r24, Z
     fb6:	81 60       	ori	r24, 0x01	; 1
     fb8:	80 83       	st	Z, r24
     fba:	80 e0       	ldi	r24, 0x00	; 0
     fbc:	08 95       	ret

00000fbe <timer1DeactivateOverflowInterrupt>:
     fbe:	ef e6       	ldi	r30, 0x6F	; 111
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	80 81       	ld	r24, Z
     fc4:	8e 7f       	andi	r24, 0xFE	; 254
     fc6:	80 83       	st	Z, r24
     fc8:	80 e0       	ldi	r24, 0x00	; 0
     fca:	08 95       	ret

00000fcc <timer1ClearOverflowInterruptRequest>:
     fcc:	b0 9a       	sbi	0x16, 0	; 22
     fce:	80 e0       	ldi	r24, 0x00	; 0
     fd0:	08 95       	ret

00000fd2 <timer1ActivateCompareAInterrupt>:
     fd2:	ef e6       	ldi	r30, 0x6F	; 111
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	80 81       	ld	r24, Z
     fd8:	82 60       	ori	r24, 0x02	; 2
     fda:	80 83       	st	Z, r24
     fdc:	80 e0       	ldi	r24, 0x00	; 0
     fde:	08 95       	ret

00000fe0 <timer1DeactivateCompareAInterrupt>:
     fe0:	ef e6       	ldi	r30, 0x6F	; 111
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	80 81       	ld	r24, Z
     fe6:	8d 7f       	andi	r24, 0xFD	; 253
     fe8:	80 83       	st	Z, r24
     fea:	80 e0       	ldi	r24, 0x00	; 0
     fec:	08 95       	ret

00000fee <timer1ClearCompareAInterruptRequest>:
     fee:	b1 9a       	sbi	0x16, 1	; 22
     ff0:	80 e0       	ldi	r24, 0x00	; 0
     ff2:	08 95       	ret

00000ff4 <timer1ActivateCompareBInterrupt>:
     ff4:	ef e6       	ldi	r30, 0x6F	; 111
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	80 81       	ld	r24, Z
     ffa:	84 60       	ori	r24, 0x04	; 4
     ffc:	80 83       	st	Z, r24
     ffe:	80 e0       	ldi	r24, 0x00	; 0
    1000:	08 95       	ret

00001002 <timer1DeactivateCompareBInterrupt>:
    1002:	ef e6       	ldi	r30, 0x6F	; 111
    1004:	f0 e0       	ldi	r31, 0x00	; 0
    1006:	80 81       	ld	r24, Z
    1008:	8b 7f       	andi	r24, 0xFB	; 251
    100a:	80 83       	st	Z, r24
    100c:	80 e0       	ldi	r24, 0x00	; 0
    100e:	08 95       	ret

00001010 <timer1ClearCompareBInterruptRequest>:
    1010:	b2 9a       	sbi	0x16, 2	; 22
    1012:	80 e0       	ldi	r24, 0x00	; 0
    1014:	08 95       	ret

00001016 <timer1ActivateInputCaptureInterrupt>:
    1016:	ef e6       	ldi	r30, 0x6F	; 111
    1018:	f0 e0       	ldi	r31, 0x00	; 0
    101a:	80 81       	ld	r24, Z
    101c:	80 62       	ori	r24, 0x20	; 32
    101e:	80 83       	st	Z, r24
    1020:	80 e0       	ldi	r24, 0x00	; 0
    1022:	08 95       	ret

00001024 <timer1DeactivateInputCaptureInterrupt>:
    1024:	ef e6       	ldi	r30, 0x6F	; 111
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	80 81       	ld	r24, Z
    102a:	8f 7d       	andi	r24, 0xDF	; 223
    102c:	80 83       	st	Z, r24
    102e:	80 e0       	ldi	r24, 0x00	; 0
    1030:	08 95       	ret

00001032 <timer1ClearInputCaptureInterruptRequest>:
    1032:	b5 9a       	sbi	0x16, 5	; 22
    1034:	80 e0       	ldi	r24, 0x00	; 0
    1036:	08 95       	ret

00001038 <timer1ForceCompareA>:
    1038:	e2 e8       	ldi	r30, 0x82	; 130
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	80 81       	ld	r24, Z
    103e:	80 68       	ori	r24, 0x80	; 128
    1040:	80 83       	st	Z, r24
    1042:	80 e0       	ldi	r24, 0x00	; 0
    1044:	08 95       	ret

00001046 <timer1ForceCompareB>:
    1046:	e2 e8       	ldi	r30, 0x82	; 130
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	80 81       	ld	r24, Z
    104c:	80 64       	ori	r24, 0x40	; 64
    104e:	80 83       	st	Z, r24
    1050:	80 e0       	ldi	r24, 0x00	; 0
    1052:	08 95       	ret

00001054 <timer1SetCounterValue>:
    1054:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1056:	f8 94       	cli
    1058:	90 93 85 00 	sts	0x0085, r25
    105c:	80 93 84 00 	sts	0x0084, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1060:	2f bf       	out	0x3f, r18	; 63
    1062:	80 e0       	ldi	r24, 0x00	; 0
    1064:	08 95       	ret

00001066 <timer1GetCounterValue>:
    1066:	80 91 84 00 	lds	r24, 0x0084
    106a:	90 91 85 00 	lds	r25, 0x0085
    106e:	08 95       	ret

00001070 <timer1SetCompareAValue>:
    1070:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1072:	f8 94       	cli
    1074:	90 93 89 00 	sts	0x0089, r25
    1078:	80 93 88 00 	sts	0x0088, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    107c:	2f bf       	out	0x3f, r18	; 63
    107e:	80 e0       	ldi	r24, 0x00	; 0
    1080:	08 95       	ret

00001082 <timer1GetCompareAValue>:
    1082:	80 91 88 00 	lds	r24, 0x0088
    1086:	90 91 89 00 	lds	r25, 0x0089
    108a:	08 95       	ret

0000108c <timer1SetCompareBValue>:
    108c:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    108e:	f8 94       	cli
    1090:	90 93 8b 00 	sts	0x008B, r25
    1094:	80 93 8a 00 	sts	0x008A, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1098:	2f bf       	out	0x3f, r18	; 63
    109a:	80 e0       	ldi	r24, 0x00	; 0
    109c:	08 95       	ret

0000109e <timer1GetCompareBValue>:
    109e:	80 91 8a 00 	lds	r24, 0x008A
    10a2:	90 91 8b 00 	lds	r25, 0x008B
    10a6:	08 95       	ret

000010a8 <timer1SetInputCaptureValue>:
    10a8:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    10aa:	f8 94       	cli
    10ac:	90 93 87 00 	sts	0x0087, r25
    10b0:	80 93 86 00 	sts	0x0086, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    10b4:	2f bf       	out	0x3f, r18	; 63
    10b6:	80 e0       	ldi	r24, 0x00	; 0
    10b8:	08 95       	ret

000010ba <timer1GetInputCaptureValue>:
    10ba:	80 91 86 00 	lds	r24, 0x0086
    10be:	90 91 87 00 	lds	r25, 0x0087
    10c2:	08 95       	ret

000010c4 <timer2Config>:
    10c4:	20 91 b0 00 	lds	r18, 0x00B0
    10c8:	90 91 b1 00 	lds	r25, 0x00B1
    10cc:	6f 3f       	cpi	r22, 0xFF	; 255
    10ce:	11 f0       	breq	.+4      	; 0x10d4 <timer2Config+0x10>
    10d0:	98 7f       	andi	r25, 0xF8	; 248
    10d2:	96 2b       	or	r25, r22
    10d4:	8f 3f       	cpi	r24, 0xFF	; 255
    10d6:	41 f0       	breq	.+16     	; 0x10e8 <timer2Config+0x24>
    10d8:	82 ff       	sbrs	r24, 2
    10da:	02 c0       	rjmp	.+4      	; 0x10e0 <timer2Config+0x1c>
    10dc:	98 60       	ori	r25, 0x08	; 8
    10de:	01 c0       	rjmp	.+2      	; 0x10e2 <timer2Config+0x1e>
    10e0:	97 7f       	andi	r25, 0xF7	; 247
    10e2:	83 70       	andi	r24, 0x03	; 3
    10e4:	2c 7f       	andi	r18, 0xFC	; 252
    10e6:	28 2b       	or	r18, r24
    10e8:	20 93 b0 00 	sts	0x00B0, r18
    10ec:	90 93 b1 00 	sts	0x00B1, r25
    10f0:	80 e0       	ldi	r24, 0x00	; 0
    10f2:	08 95       	ret

000010f4 <timer2OutputConfig>:
    10f4:	20 91 b0 00 	lds	r18, 0x00B0
    10f8:	8f 3f       	cpi	r24, 0xFF	; 255
    10fa:	31 f0       	breq	.+12     	; 0x1108 <timer2OutputConfig+0x14>
    10fc:	30 e4       	ldi	r19, 0x40	; 64
    10fe:	83 9f       	mul	r24, r19
    1100:	c0 01       	movw	r24, r0
    1102:	11 24       	eor	r1, r1
    1104:	2f 73       	andi	r18, 0x3F	; 63
    1106:	28 2b       	or	r18, r24
    1108:	6f 3f       	cpi	r22, 0xFF	; 255
    110a:	31 f0       	breq	.+12     	; 0x1118 <timer2OutputConfig+0x24>
    110c:	2f 7c       	andi	r18, 0xCF	; 207
    110e:	80 e1       	ldi	r24, 0x10	; 16
    1110:	68 9f       	mul	r22, r24
    1112:	b0 01       	movw	r22, r0
    1114:	11 24       	eor	r1, r1
    1116:	26 2b       	or	r18, r22
    1118:	20 93 b0 00 	sts	0x00B0, r18
    111c:	80 e0       	ldi	r24, 0x00	; 0
    111e:	08 95       	ret

00001120 <timer2ActivateOverflowInterrupt>:
    1120:	e0 e7       	ldi	r30, 0x70	; 112
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	80 81       	ld	r24, Z
    1126:	81 60       	ori	r24, 0x01	; 1
    1128:	80 83       	st	Z, r24
    112a:	80 e0       	ldi	r24, 0x00	; 0
    112c:	08 95       	ret

0000112e <timer2DeactivateOverflowInterrupt>:
    112e:	e0 e7       	ldi	r30, 0x70	; 112
    1130:	f0 e0       	ldi	r31, 0x00	; 0
    1132:	80 81       	ld	r24, Z
    1134:	8e 7f       	andi	r24, 0xFE	; 254
    1136:	80 83       	st	Z, r24
    1138:	80 e0       	ldi	r24, 0x00	; 0
    113a:	08 95       	ret

0000113c <timer2ClearOverflowInterruptRequest>:
    113c:	b8 9a       	sbi	0x17, 0	; 23
    113e:	80 e0       	ldi	r24, 0x00	; 0
    1140:	08 95       	ret

00001142 <timer2ActivateCompareAInterrupt>:
    1142:	e0 e7       	ldi	r30, 0x70	; 112
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	80 81       	ld	r24, Z
    1148:	82 60       	ori	r24, 0x02	; 2
    114a:	80 83       	st	Z, r24
    114c:	80 e0       	ldi	r24, 0x00	; 0
    114e:	08 95       	ret

00001150 <timer2DeactivateCompareAInterrupt>:
    1150:	e0 e7       	ldi	r30, 0x70	; 112
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	80 81       	ld	r24, Z
    1156:	8d 7f       	andi	r24, 0xFD	; 253
    1158:	80 83       	st	Z, r24
    115a:	80 e0       	ldi	r24, 0x00	; 0
    115c:	08 95       	ret

0000115e <timer2ClearCompareAInterruptRequest>:
    115e:	b9 9a       	sbi	0x17, 1	; 23
    1160:	80 e0       	ldi	r24, 0x00	; 0
    1162:	08 95       	ret

00001164 <timer2ActivateCompareBInterrupt>:
    1164:	e0 e7       	ldi	r30, 0x70	; 112
    1166:	f0 e0       	ldi	r31, 0x00	; 0
    1168:	80 81       	ld	r24, Z
    116a:	84 60       	ori	r24, 0x04	; 4
    116c:	80 83       	st	Z, r24
    116e:	80 e0       	ldi	r24, 0x00	; 0
    1170:	08 95       	ret

00001172 <timer2DeactivateCompareBInterrupt>:
    1172:	e0 e7       	ldi	r30, 0x70	; 112
    1174:	f0 e0       	ldi	r31, 0x00	; 0
    1176:	80 81       	ld	r24, Z
    1178:	8b 7f       	andi	r24, 0xFB	; 251
    117a:	80 83       	st	Z, r24
    117c:	80 e0       	ldi	r24, 0x00	; 0
    117e:	08 95       	ret

00001180 <timer2ClearCompareBInterruptRequest>:
    1180:	ba 9a       	sbi	0x17, 2	; 23
    1182:	80 e0       	ldi	r24, 0x00	; 0
    1184:	08 95       	ret

00001186 <timer2ForceCompareA>:
    1186:	e1 eb       	ldi	r30, 0xB1	; 177
    1188:	f0 e0       	ldi	r31, 0x00	; 0
    118a:	80 81       	ld	r24, Z
    118c:	80 68       	ori	r24, 0x80	; 128
    118e:	80 83       	st	Z, r24
    1190:	80 e0       	ldi	r24, 0x00	; 0
    1192:	08 95       	ret

00001194 <timer2ForceCompareB>:
    1194:	e1 eb       	ldi	r30, 0xB1	; 177
    1196:	f0 e0       	ldi	r31, 0x00	; 0
    1198:	80 81       	ld	r24, Z
    119a:	80 64       	ori	r24, 0x40	; 64
    119c:	80 83       	st	Z, r24
    119e:	80 e0       	ldi	r24, 0x00	; 0
    11a0:	08 95       	ret

000011a2 <timer2SetCounterValue>:
    11a2:	80 93 b2 00 	sts	0x00B2, r24
    11a6:	80 e0       	ldi	r24, 0x00	; 0
    11a8:	08 95       	ret

000011aa <timer2GetCounterValue>:
    11aa:	80 91 b2 00 	lds	r24, 0x00B2
    11ae:	08 95       	ret

000011b0 <timer2SetCompareAValue>:
    11b0:	80 93 b3 00 	sts	0x00B3, r24
    11b4:	80 e0       	ldi	r24, 0x00	; 0
    11b6:	08 95       	ret

000011b8 <timer2GetCompareAValue>:
    11b8:	80 91 b3 00 	lds	r24, 0x00B3
    11bc:	08 95       	ret

000011be <timer2SetCompareBValue>:
    11be:	80 93 b4 00 	sts	0x00B4, r24
    11c2:	80 e0       	ldi	r24, 0x00	; 0
    11c4:	08 95       	ret

000011c6 <timer2GetCompareBValue>:
    11c6:	80 91 b4 00 	lds	r24, 0x00B4
    11ca:	08 95       	ret

000011cc <adcConfig>:
    11cc:	6f 3f       	cpi	r22, 0xFF	; 255
    11ce:	51 f0       	breq	.+20     	; 0x11e4 <adcConfig+0x18>
    11d0:	90 91 7c 00 	lds	r25, 0x007C
    11d4:	20 e4       	ldi	r18, 0x40	; 64
    11d6:	62 9f       	mul	r22, r18
    11d8:	b0 01       	movw	r22, r0
    11da:	11 24       	eor	r1, r1
    11dc:	9f 73       	andi	r25, 0x3F	; 63
    11de:	96 2b       	or	r25, r22
    11e0:	90 93 7c 00 	sts	0x007C, r25
    11e4:	4f 3f       	cpi	r20, 0xFF	; 255
    11e6:	31 f0       	breq	.+12     	; 0x11f4 <adcConfig+0x28>
    11e8:	90 91 7a 00 	lds	r25, 0x007A
    11ec:	98 7f       	andi	r25, 0xF8	; 248
    11ee:	94 2b       	or	r25, r20
    11f0:	90 93 7a 00 	sts	0x007A, r25
    11f4:	8f 3f       	cpi	r24, 0xFF	; 255
    11f6:	39 f1       	breq	.+78     	; 0x1246 <adcConfig+0x7a>
    11f8:	81 11       	cpse	r24, r1
    11fa:	04 c0       	rjmp	.+8      	; 0x1204 <adcConfig+0x38>
    11fc:	80 91 7a 00 	lds	r24, 0x007A
    1200:	8f 7d       	andi	r24, 0xDF	; 223
    1202:	1f c0       	rjmp	.+62     	; 0x1242 <adcConfig+0x76>
    1204:	20 91 7b 00 	lds	r18, 0x007B
    1208:	28 7f       	andi	r18, 0xF8	; 248
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	fc 01       	movw	r30, r24
    120e:	32 97       	sbiw	r30, 0x02	; 2
    1210:	e7 30       	cpi	r30, 0x07	; 7
    1212:	f1 05       	cpc	r31, r1
    1214:	d0 f4       	brcc	.+52     	; 0x124a <adcConfig+0x7e>
    1216:	e3 5a       	subi	r30, 0xA3	; 163
    1218:	ff 4f       	sbci	r31, 0xFF	; 255
    121a:	0c 94 99 0d 	jmp	0x1b32	; 0x1b32 <__tablejump2__>
    121e:	21 60       	ori	r18, 0x01	; 1
    1220:	0b c0       	rjmp	.+22     	; 0x1238 <adcConfig+0x6c>
    1222:	22 60       	ori	r18, 0x02	; 2
    1224:	09 c0       	rjmp	.+18     	; 0x1238 <adcConfig+0x6c>
    1226:	23 60       	ori	r18, 0x03	; 3
    1228:	07 c0       	rjmp	.+14     	; 0x1238 <adcConfig+0x6c>
    122a:	24 60       	ori	r18, 0x04	; 4
    122c:	05 c0       	rjmp	.+10     	; 0x1238 <adcConfig+0x6c>
    122e:	25 60       	ori	r18, 0x05	; 5
    1230:	03 c0       	rjmp	.+6      	; 0x1238 <adcConfig+0x6c>
    1232:	26 60       	ori	r18, 0x06	; 6
    1234:	01 c0       	rjmp	.+2      	; 0x1238 <adcConfig+0x6c>
    1236:	27 60       	ori	r18, 0x07	; 7
    1238:	20 93 7b 00 	sts	0x007B, r18
    123c:	80 91 7a 00 	lds	r24, 0x007A
    1240:	80 62       	ori	r24, 0x20	; 32
    1242:	80 93 7a 00 	sts	0x007A, r24
    1246:	80 e0       	ldi	r24, 0x00	; 0
    1248:	08 95       	ret
    124a:	87 e0       	ldi	r24, 0x07	; 7
    124c:	08 95       	ret

0000124e <adcSelectChannel>:
    124e:	ec e7       	ldi	r30, 0x7C	; 124
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	90 81       	ld	r25, Z
    1254:	90 7f       	andi	r25, 0xF0	; 240
    1256:	98 2b       	or	r25, r24
    1258:	90 83       	st	Z, r25
    125a:	80 e0       	ldi	r24, 0x00	; 0
    125c:	08 95       	ret

0000125e <adcEnableDigitalInput>:
    125e:	ee e7       	ldi	r30, 0x7E	; 126
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	90 81       	ld	r25, Z
    1264:	80 95       	com	r24
    1266:	89 23       	and	r24, r25
    1268:	80 83       	st	Z, r24
    126a:	80 e0       	ldi	r24, 0x00	; 0
    126c:	08 95       	ret

0000126e <adcDisableDigitalInput>:
    126e:	ee e7       	ldi	r30, 0x7E	; 126
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	90 81       	ld	r25, Z
    1274:	98 2b       	or	r25, r24
    1276:	90 83       	st	Z, r25
    1278:	80 e0       	ldi	r24, 0x00	; 0
    127a:	08 95       	ret

0000127c <adcDataPresentation>:
    127c:	81 11       	cpse	r24, r1
    127e:	04 c0       	rjmp	.+8      	; 0x1288 <adcDataPresentation+0xc>
    1280:	80 91 7c 00 	lds	r24, 0x007C
    1284:	80 62       	ori	r24, 0x20	; 32
    1286:	03 c0       	rjmp	.+6      	; 0x128e <adcDataPresentation+0x12>
    1288:	80 91 7c 00 	lds	r24, 0x007C
    128c:	8f 7d       	andi	r24, 0xDF	; 223
    128e:	80 93 7c 00 	sts	0x007C, r24
    1292:	80 e0       	ldi	r24, 0x00	; 0
    1294:	08 95       	ret

00001296 <adcEnable>:
    1296:	ea e7       	ldi	r30, 0x7A	; 122
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	80 81       	ld	r24, Z
    129c:	80 68       	ori	r24, 0x80	; 128
    129e:	80 83       	st	Z, r24
    12a0:	80 e0       	ldi	r24, 0x00	; 0
    12a2:	08 95       	ret

000012a4 <adcDisable>:
    12a4:	ea e7       	ldi	r30, 0x7A	; 122
    12a6:	f0 e0       	ldi	r31, 0x00	; 0
    12a8:	80 81       	ld	r24, Z
    12aa:	8f 77       	andi	r24, 0x7F	; 127
    12ac:	80 83       	st	Z, r24
    12ae:	80 e0       	ldi	r24, 0x00	; 0
    12b0:	08 95       	ret

000012b2 <adcClearInterruptRequest>:
    12b2:	ea e7       	ldi	r30, 0x7A	; 122
    12b4:	f0 e0       	ldi	r31, 0x00	; 0
    12b6:	80 81       	ld	r24, Z
    12b8:	80 61       	ori	r24, 0x10	; 16
    12ba:	80 83       	st	Z, r24
    12bc:	80 e0       	ldi	r24, 0x00	; 0
    12be:	08 95       	ret

000012c0 <adcActivateInterrupt>:
    12c0:	ea e7       	ldi	r30, 0x7A	; 122
    12c2:	f0 e0       	ldi	r31, 0x00	; 0
    12c4:	80 81       	ld	r24, Z
    12c6:	88 60       	ori	r24, 0x08	; 8
    12c8:	80 83       	st	Z, r24
    12ca:	80 e0       	ldi	r24, 0x00	; 0
    12cc:	08 95       	ret

000012ce <adcDeactivateInterrupt>:
    12ce:	ea e7       	ldi	r30, 0x7A	; 122
    12d0:	f0 e0       	ldi	r31, 0x00	; 0
    12d2:	80 81       	ld	r24, Z
    12d4:	87 7f       	andi	r24, 0xF7	; 247
    12d6:	80 83       	st	Z, r24
    12d8:	80 e0       	ldi	r24, 0x00	; 0
    12da:	08 95       	ret

000012dc <adcStartConversion>:
    12dc:	ea e7       	ldi	r30, 0x7A	; 122
    12de:	f0 e0       	ldi	r31, 0x00	; 0
    12e0:	80 81       	ld	r24, Z
    12e2:	80 64       	ori	r24, 0x40	; 64
    12e4:	80 83       	st	Z, r24
    12e6:	80 e0       	ldi	r24, 0x00	; 0
    12e8:	08 95       	ret

000012ea <adcIsBusy>:
    12ea:	80 91 7a 00 	lds	r24, 0x007A
    12ee:	86 fb       	bst	r24, 6
    12f0:	88 27       	eor	r24, r24
    12f2:	80 f9       	bld	r24, 0
    12f4:	08 95       	ret

000012f6 <adcWaitUntilConversionFinish>:
    12f6:	80 91 7a 00 	lds	r24, 0x007A
    12fa:	86 fd       	sbrc	r24, 6
    12fc:	fc cf       	rjmp	.-8      	; 0x12f6 <adcWaitUntilConversionFinish>
    12fe:	80 e0       	ldi	r24, 0x00	; 0
    1300:	08 95       	ret

00001302 <usartConfig>:
    1302:	8f 92       	push	r8
    1304:	9f 92       	push	r9
    1306:	af 92       	push	r10
    1308:	bf 92       	push	r11
    130a:	cf 92       	push	r12
    130c:	df 92       	push	r13
    130e:	ef 92       	push	r14
    1310:	ff 92       	push	r15
    1312:	0f 93       	push	r16
    1314:	4a 01       	movw	r8, r20
    1316:	5b 01       	movw	r10, r22
    1318:	9e 2d       	mov	r25, r14
    131a:	30 91 c0 00 	lds	r19, 0x00C0
    131e:	30 91 c1 00 	lds	r19, 0x00C1
    1322:	30 91 c2 00 	lds	r19, 0x00C2
    1326:	9f 3f       	cpi	r25, 0xFF	; 255
    1328:	19 f0       	breq	.+6      	; 0x1330 <usartConfig+0x2e>
    132a:	92 30       	cpi	r25, 0x02	; 2
    132c:	08 f0       	brcs	.+2      	; 0x1330 <usartConfig+0x2e>
    132e:	5f c0       	rjmp	.+190    	; 0x13ee <usartConfig+0xec>
    1330:	0f 3f       	cpi	r16, 0xFF	; 255
    1332:	19 f0       	breq	.+6      	; 0x133a <usartConfig+0x38>
    1334:	03 30       	cpi	r16, 0x03	; 3
    1336:	08 f0       	brcs	.+2      	; 0x133a <usartConfig+0x38>
    1338:	5c c0       	rjmp	.+184    	; 0x13f2 <usartConfig+0xf0>
    133a:	2f 3f       	cpi	r18, 0xFF	; 255
    133c:	19 f0       	breq	.+6      	; 0x1344 <usartConfig+0x42>
    133e:	25 30       	cpi	r18, 0x05	; 5
    1340:	08 f0       	brcs	.+2      	; 0x1344 <usartConfig+0x42>
    1342:	57 c0       	rjmp	.+174    	; 0x13f2 <usartConfig+0xf0>
    1344:	8f 3f       	cpi	r24, 0xFF	; 255
    1346:	79 f4       	brne	.+30     	; 0x1366 <usartConfig+0x64>
    1348:	80 91 c2 00 	lds	r24, 0x00C2
    134c:	82 95       	swap	r24
    134e:	86 95       	lsr	r24
    1350:	86 95       	lsr	r24
    1352:	83 70       	andi	r24, 0x03	; 3
    1354:	21 f0       	breq	.+8      	; 0x135e <usartConfig+0x5c>
    1356:	83 30       	cpi	r24, 0x03	; 3
    1358:	e9 f0       	breq	.+58     	; 0x1394 <usartConfig+0x92>
    135a:	80 e0       	ldi	r24, 0x00	; 0
    135c:	04 c0       	rjmp	.+8      	; 0x1366 <usartConfig+0x64>
    135e:	80 91 c0 00 	lds	r24, 0x00C0
    1362:	86 95       	lsr	r24
    1364:	81 70       	andi	r24, 0x01	; 1
    1366:	9f ef       	ldi	r25, 0xFF	; 255
    1368:	89 16       	cp	r8, r25
    136a:	99 06       	cpc	r9, r25
    136c:	a9 06       	cpc	r10, r25
    136e:	b9 06       	cpc	r11, r25
    1370:	09 f4       	brne	.+2      	; 0x1374 <usartConfig+0x72>
    1372:	41 c0       	rjmp	.+130    	; 0x13f6 <usartConfig+0xf4>
    1374:	81 30       	cpi	r24, 0x01	; 1
    1376:	49 f0       	breq	.+18     	; 0x138a <usartConfig+0x88>
    1378:	18 f0       	brcs	.+6      	; 0x1380 <usartConfig+0x7e>
    137a:	84 30       	cpi	r24, 0x04	; 4
    137c:	89 f0       	breq	.+34     	; 0x13a0 <usartConfig+0x9e>
    137e:	22 c0       	rjmp	.+68     	; 0x13c4 <usartConfig+0xc2>
    1380:	60 e4       	ldi	r22, 0x40	; 64
    1382:	72 e4       	ldi	r23, 0x42	; 66
    1384:	8f e0       	ldi	r24, 0x0F	; 15
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	0f c0       	rjmp	.+30     	; 0x13a8 <usartConfig+0xa6>
    138a:	60 e8       	ldi	r22, 0x80	; 128
    138c:	74 e8       	ldi	r23, 0x84	; 132
    138e:	8e e1       	ldi	r24, 0x1E	; 30
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	0a c0       	rjmp	.+20     	; 0x13a8 <usartConfig+0xa6>
    1394:	8f ef       	ldi	r24, 0xFF	; 255
    1396:	88 16       	cp	r8, r24
    1398:	98 06       	cpc	r9, r24
    139a:	a8 06       	cpc	r10, r24
    139c:	b8 06       	cpc	r11, r24
    139e:	59 f1       	breq	.+86     	; 0x13f6 <usartConfig+0xf4>
    13a0:	60 e0       	ldi	r22, 0x00	; 0
    13a2:	72 e1       	ldi	r23, 0x12	; 18
    13a4:	8a e7       	ldi	r24, 0x7A	; 122
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	a5 01       	movw	r20, r10
    13aa:	94 01       	movw	r18, r8
    13ac:	0e 94 77 0d 	call	0x1aee	; 0x1aee <__udivmodsi4>
    13b0:	21 50       	subi	r18, 0x01	; 1
    13b2:	31 09       	sbc	r19, r1
    13b4:	41 09       	sbc	r20, r1
    13b6:	51 09       	sbc	r21, r1
    13b8:	49 01       	movw	r8, r18
    13ba:	5a 01       	movw	r10, r20
    13bc:	c1 2c       	mov	r12, r1
    13be:	d1 2c       	mov	r13, r1
    13c0:	76 01       	movw	r14, r12
    13c2:	08 c0       	rjmp	.+16     	; 0x13d4 <usartConfig+0xd2>
    13c4:	81 2c       	mov	r8, r1
    13c6:	91 2c       	mov	r9, r1
    13c8:	a1 2c       	mov	r10, r1
    13ca:	b1 2c       	mov	r11, r1
    13cc:	c1 2c       	mov	r12, r1
    13ce:	d1 2c       	mov	r13, r1
    13d0:	e1 2c       	mov	r14, r1
    13d2:	f1 2c       	mov	r15, r1
    13d4:	94 01       	movw	r18, r8
    13d6:	a5 01       	movw	r20, r10
    13d8:	b6 01       	movw	r22, r12
    13da:	c7 01       	movw	r24, r14
    13dc:	08 e0       	ldi	r16, 0x08	; 8
    13de:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <__lshrdi3>
    13e2:	2f 70       	andi	r18, 0x0F	; 15
    13e4:	20 93 c5 00 	sts	0x00C5, r18
    13e8:	80 92 c4 00 	sts	0x00C4, r8
    13ec:	04 c0       	rjmp	.+8      	; 0x13f6 <usartConfig+0xf4>
    13ee:	87 e0       	ldi	r24, 0x07	; 7
    13f0:	03 c0       	rjmp	.+6      	; 0x13f8 <usartConfig+0xf6>
    13f2:	85 e0       	ldi	r24, 0x05	; 5
    13f4:	01 c0       	rjmp	.+2      	; 0x13f8 <usartConfig+0xf6>
    13f6:	80 e0       	ldi	r24, 0x00	; 0
    13f8:	0f 91       	pop	r16
    13fa:	ff 90       	pop	r15
    13fc:	ef 90       	pop	r14
    13fe:	df 90       	pop	r13
    1400:	cf 90       	pop	r12
    1402:	bf 90       	pop	r11
    1404:	af 90       	pop	r10
    1406:	9f 90       	pop	r9
    1408:	8f 90       	pop	r8
    140a:	08 95       	ret

0000140c <usartEnableReceiver>:
    140c:	e1 ec       	ldi	r30, 0xC1	; 193
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	80 81       	ld	r24, Z
    1412:	80 61       	ori	r24, 0x10	; 16
    1414:	80 83       	st	Z, r24
    1416:	80 e0       	ldi	r24, 0x00	; 0
    1418:	08 95       	ret

0000141a <usartDisableReceiver>:
    141a:	e1 ec       	ldi	r30, 0xC1	; 193
    141c:	f0 e0       	ldi	r31, 0x00	; 0
    141e:	80 81       	ld	r24, Z
    1420:	8f 7e       	andi	r24, 0xEF	; 239
    1422:	80 83       	st	Z, r24
    1424:	80 e0       	ldi	r24, 0x00	; 0
    1426:	08 95       	ret

00001428 <usartEnableTransmitter>:
    1428:	e1 ec       	ldi	r30, 0xC1	; 193
    142a:	f0 e0       	ldi	r31, 0x00	; 0
    142c:	80 81       	ld	r24, Z
    142e:	88 60       	ori	r24, 0x08	; 8
    1430:	80 83       	st	Z, r24
    1432:	80 e0       	ldi	r24, 0x00	; 0
    1434:	08 95       	ret

00001436 <usartDisableTransmitter>:
    1436:	e1 ec       	ldi	r30, 0xC1	; 193
    1438:	f0 e0       	ldi	r31, 0x00	; 0
    143a:	80 81       	ld	r24, Z
    143c:	87 7f       	andi	r24, 0xF7	; 247
    143e:	80 83       	st	Z, r24
    1440:	80 e0       	ldi	r24, 0x00	; 0
    1442:	08 95       	ret

00001444 <usartActivateReceptionCompleteInterrupt>:
    1444:	e1 ec       	ldi	r30, 0xC1	; 193
    1446:	f0 e0       	ldi	r31, 0x00	; 0
    1448:	80 81       	ld	r24, Z
    144a:	80 68       	ori	r24, 0x80	; 128
    144c:	80 83       	st	Z, r24
    144e:	80 e0       	ldi	r24, 0x00	; 0
    1450:	08 95       	ret

00001452 <usartDeactivateReceptionCompleteInterrupt>:
    1452:	e1 ec       	ldi	r30, 0xC1	; 193
    1454:	f0 e0       	ldi	r31, 0x00	; 0
    1456:	80 81       	ld	r24, Z
    1458:	8f 77       	andi	r24, 0x7F	; 127
    145a:	80 83       	st	Z, r24
    145c:	80 e0       	ldi	r24, 0x00	; 0
    145e:	08 95       	ret

00001460 <usartActivateTransmissionCompleteInterrupt>:
    1460:	e1 ec       	ldi	r30, 0xC1	; 193
    1462:	f0 e0       	ldi	r31, 0x00	; 0
    1464:	80 81       	ld	r24, Z
    1466:	80 64       	ori	r24, 0x40	; 64
    1468:	80 83       	st	Z, r24
    146a:	80 e0       	ldi	r24, 0x00	; 0
    146c:	08 95       	ret

0000146e <usartDeactivateTransmissionCompleteInterrupt>:
    146e:	e1 ec       	ldi	r30, 0xC1	; 193
    1470:	f0 e0       	ldi	r31, 0x00	; 0
    1472:	80 81       	ld	r24, Z
    1474:	8f 7b       	andi	r24, 0xBF	; 191
    1476:	80 83       	st	Z, r24
    1478:	80 e0       	ldi	r24, 0x00	; 0
    147a:	08 95       	ret

0000147c <usartActivateBufferEmptyInterrupt>:
    147c:	e1 ec       	ldi	r30, 0xC1	; 193
    147e:	f0 e0       	ldi	r31, 0x00	; 0
    1480:	80 81       	ld	r24, Z
    1482:	80 62       	ori	r24, 0x20	; 32
    1484:	80 83       	st	Z, r24
    1486:	80 e0       	ldi	r24, 0x00	; 0
    1488:	08 95       	ret

0000148a <usartDeactivateBufferEmptyInterrupt>:
    148a:	e1 ec       	ldi	r30, 0xC1	; 193
    148c:	f0 e0       	ldi	r31, 0x00	; 0
    148e:	80 81       	ld	r24, Z
    1490:	8f 7d       	andi	r24, 0xDF	; 223
    1492:	80 83       	st	Z, r24
    1494:	80 e0       	ldi	r24, 0x00	; 0
    1496:	08 95       	ret

00001498 <usartStdio>:
    1498:	88 e0       	ldi	r24, 0x08	; 8
    149a:	91 e0       	ldi	r25, 0x01	; 1
    149c:	90 93 7b 01 	sts	0x017B, r25
    14a0:	80 93 7a 01 	sts	0x017A, r24
    14a4:	90 93 79 01 	sts	0x0179, r25
    14a8:	80 93 78 01 	sts	0x0178, r24
    14ac:	90 93 77 01 	sts	0x0177, r25
    14b0:	80 93 76 01 	sts	0x0176, r24
    14b4:	80 e0       	ldi	r24, 0x00	; 0
    14b6:	08 95       	ret

000014b8 <usartIsReceptionComplete>:
    14b8:	80 91 c0 00 	lds	r24, 0x00C0
    14bc:	88 1f       	adc	r24, r24
    14be:	88 27       	eor	r24, r24
    14c0:	88 1f       	adc	r24, r24
    14c2:	08 95       	ret

000014c4 <usartIsTransmissionComplete>:
    14c4:	80 91 c0 00 	lds	r24, 0x00C0
    14c8:	86 fb       	bst	r24, 6
    14ca:	88 27       	eor	r24, r24
    14cc:	80 f9       	bld	r24, 0
    14ce:	08 95       	ret

000014d0 <usartIsBufferEmpty>:
    14d0:	80 91 c0 00 	lds	r24, 0x00C0
    14d4:	85 fb       	bst	r24, 5
    14d6:	88 27       	eor	r24, r24
    14d8:	80 f9       	bld	r24, 0
    14da:	08 95       	ret

000014dc <usartTransmitStd>:
    14dc:	cf 93       	push	r28
    14de:	c8 2f       	mov	r28, r24
    14e0:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <usartIsBufferEmpty>
    14e4:	88 23       	and	r24, r24
    14e6:	e1 f3       	breq	.-8      	; 0x14e0 <usartTransmitStd+0x4>
    14e8:	c0 93 c6 00 	sts	0x00C6, r28
    14ec:	80 e0       	ldi	r24, 0x00	; 0
    14ee:	cf 91       	pop	r28
    14f0:	08 95       	ret

000014f2 <usartCheckError>:
    14f2:	80 91 c0 00 	lds	r24, 0x00C0
    14f6:	84 fd       	sbrc	r24, 4
    14f8:	02 c0       	rjmp	.+4      	; 0x14fe <usartCheckError+0xc>
    14fa:	80 e0       	ldi	r24, 0x00	; 0
    14fc:	01 c0       	rjmp	.+2      	; 0x1500 <usartCheckError+0xe>
    14fe:	82 e0       	ldi	r24, 0x02	; 2
    1500:	90 91 c0 00 	lds	r25, 0x00C0
    1504:	93 fd       	sbrc	r25, 3
    1506:	84 60       	ori	r24, 0x04	; 4
    1508:	90 91 c0 00 	lds	r25, 0x00C0
    150c:	92 ff       	sbrs	r25, 2
    150e:	02 c0       	rjmp	.+4      	; 0x1514 <usartCheckError+0x22>
    1510:	88 60       	ori	r24, 0x08	; 8
    1512:	08 95       	ret
    1514:	81 11       	cpse	r24, r1
    1516:	01 c0       	rjmp	.+2      	; 0x151a <usartCheckError+0x28>
    1518:	81 e0       	ldi	r24, 0x01	; 1
    151a:	08 95       	ret

0000151c <usartTransmit>:
    151c:	cf 93       	push	r28
    151e:	c8 2f       	mov	r28, r24
    1520:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <usartIsBufferEmpty>
    1524:	88 23       	and	r24, r24
    1526:	e1 f3       	breq	.-8      	; 0x1520 <usartTransmit+0x4>
    1528:	c0 93 c6 00 	sts	0x00C6, r28
    152c:	80 e0       	ldi	r24, 0x00	; 0
    152e:	cf 91       	pop	r28
    1530:	08 95       	ret

00001532 <usartTransmit9bits>:
    1532:	cf 93       	push	r28
    1534:	df 93       	push	r29
    1536:	ec 01       	movw	r28, r24
    1538:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <usartIsBufferEmpty>
    153c:	88 23       	and	r24, r24
    153e:	e1 f3       	breq	.-8      	; 0x1538 <usartTransmit9bits+0x6>
    1540:	ce 01       	movw	r24, r28
    1542:	88 27       	eor	r24, r24
    1544:	91 70       	andi	r25, 0x01	; 1
    1546:	80 91 c1 00 	lds	r24, 0x00C1
    154a:	99 23       	and	r25, r25
    154c:	11 f0       	breq	.+4      	; 0x1552 <usartTransmit9bits+0x20>
    154e:	81 60       	ori	r24, 0x01	; 1
    1550:	01 c0       	rjmp	.+2      	; 0x1554 <usartTransmit9bits+0x22>
    1552:	8e 7f       	andi	r24, 0xFE	; 254
    1554:	80 93 c1 00 	sts	0x00C1, r24
    1558:	c0 93 c6 00 	sts	0x00C6, r28
    155c:	80 e0       	ldi	r24, 0x00	; 0
    155e:	df 91       	pop	r29
    1560:	cf 91       	pop	r28
    1562:	08 95       	ret

00001564 <usartReceive>:
    1564:	80 91 c0 00 	lds	r24, 0x00C0
    1568:	87 ff       	sbrs	r24, 7
    156a:	fc cf       	rjmp	.-8      	; 0x1564 <usartReceive>
    156c:	80 91 c0 00 	lds	r24, 0x00C0
    1570:	80 91 c6 00 	lds	r24, 0x00C6
    1574:	08 95       	ret

00001576 <usartReceive9bits>:
    1576:	80 91 c0 00 	lds	r24, 0x00C0
    157a:	87 ff       	sbrs	r24, 7
    157c:	fc cf       	rjmp	.-8      	; 0x1576 <usartReceive9bits>
    157e:	80 91 c0 00 	lds	r24, 0x00C0
    1582:	80 91 c1 00 	lds	r24, 0x00C1
    1586:	20 91 c6 00 	lds	r18, 0x00C6
    158a:	82 70       	andi	r24, 0x02	; 2
    158c:	90 e0       	ldi	r25, 0x00	; 0
    158e:	96 95       	lsr	r25
    1590:	98 2f       	mov	r25, r24
    1592:	88 27       	eor	r24, r24
    1594:	97 95       	ror	r25
    1596:	87 95       	ror	r24
    1598:	82 2b       	or	r24, r18
    159a:	08 95       	ret

0000159c <usartClearReceptionBuffer>:
    159c:	80 91 c0 00 	lds	r24, 0x00C0
    15a0:	87 ff       	sbrs	r24, 7
    15a2:	03 c0       	rjmp	.+6      	; 0x15aa <usartClearReceptionBuffer+0xe>
    15a4:	80 91 c6 00 	lds	r24, 0x00C6
    15a8:	f9 cf       	rjmp	.-14     	; 0x159c <usartClearReceptionBuffer>
    15aa:	08 95       	ret

000015ac <usartAddDataToReceiverBuffer>:
    15ac:	ff 92       	push	r15
    15ae:	0f 93       	push	r16
    15b0:	1f 93       	push	r17
    15b2:	cf 93       	push	r28
    15b4:	df 93       	push	r29
    15b6:	f8 2e       	mov	r15, r24
    15b8:	c0 91 73 01 	lds	r28, 0x0173
    15bc:	d0 e0       	ldi	r29, 0x00	; 0
    15be:	be 01       	movw	r22, r28
    15c0:	6f 5f       	subi	r22, 0xFF	; 255
    15c2:	7f 4f       	sbci	r23, 0xFF	; 255
    15c4:	88 27       	eor	r24, r24
    15c6:	77 fd       	sbrc	r23, 7
    15c8:	80 95       	com	r24
    15ca:	98 2f       	mov	r25, r24
    15cc:	22 e3       	ldi	r18, 0x32	; 50
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	40 e0       	ldi	r20, 0x00	; 0
    15d2:	50 e0       	ldi	r21, 0x00	; 0
    15d4:	0e 94 77 0d 	call	0x1aee	; 0x1aee <__udivmodsi4>
    15d8:	00 91 75 01 	lds	r16, 0x0175
    15dc:	10 e0       	ldi	r17, 0x00	; 0
    15de:	20 e0       	ldi	r18, 0x00	; 0
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	60 17       	cp	r22, r16
    15e4:	71 07       	cpc	r23, r17
    15e6:	82 07       	cpc	r24, r18
    15e8:	93 07       	cpc	r25, r19
    15ea:	51 f0       	breq	.+20     	; 0x1600 <usartAddDataToReceiverBuffer+0x54>
    15ec:	cf 5b       	subi	r28, 0xBF	; 191
    15ee:	de 4f       	sbci	r29, 0xFE	; 254
    15f0:	f8 82       	st	Y, r15
    15f2:	60 93 73 01 	sts	0x0173, r22
    15f6:	80 91 74 01 	lds	r24, 0x0174
    15fa:	8f 5f       	subi	r24, 0xFF	; 255
    15fc:	80 93 74 01 	sts	0x0174, r24
    1600:	df 91       	pop	r29
    1602:	cf 91       	pop	r28
    1604:	1f 91       	pop	r17
    1606:	0f 91       	pop	r16
    1608:	ff 90       	pop	r15
    160a:	08 95       	ret

0000160c <usartGetDataFromReceiverBuffer>:
    160c:	cf 93       	push	r28
    160e:	df 93       	push	r29
    1610:	60 91 75 01 	lds	r22, 0x0175
    1614:	70 e0       	ldi	r23, 0x00	; 0
    1616:	fb 01       	movw	r30, r22
    1618:	ef 5b       	subi	r30, 0xBF	; 191
    161a:	fe 4f       	sbci	r31, 0xFE	; 254
    161c:	d0 81       	ld	r29, Z
    161e:	c0 91 74 01 	lds	r28, 0x0174
    1622:	cc 23       	and	r28, r28
    1624:	89 f0       	breq	.+34     	; 0x1648 <usartGetDataFromReceiverBuffer+0x3c>
    1626:	6f 5f       	subi	r22, 0xFF	; 255
    1628:	7f 4f       	sbci	r23, 0xFF	; 255
    162a:	88 27       	eor	r24, r24
    162c:	77 fd       	sbrc	r23, 7
    162e:	80 95       	com	r24
    1630:	98 2f       	mov	r25, r24
    1632:	22 e3       	ldi	r18, 0x32	; 50
    1634:	30 e0       	ldi	r19, 0x00	; 0
    1636:	40 e0       	ldi	r20, 0x00	; 0
    1638:	50 e0       	ldi	r21, 0x00	; 0
    163a:	0e 94 77 0d 	call	0x1aee	; 0x1aee <__udivmodsi4>
    163e:	60 93 75 01 	sts	0x0175, r22
    1642:	c1 50       	subi	r28, 0x01	; 1
    1644:	c0 93 74 01 	sts	0x0174, r28
    1648:	8d 2f       	mov	r24, r29
    164a:	df 91       	pop	r29
    164c:	cf 91       	pop	r28
    164e:	08 95       	ret

00001650 <usartIsReceiverBufferEmpty>:
    1650:	81 e0       	ldi	r24, 0x01	; 1
    1652:	90 91 74 01 	lds	r25, 0x0174
    1656:	91 11       	cpse	r25, r1
    1658:	80 e0       	ldi	r24, 0x00	; 0
    165a:	08 95       	ret

0000165c <usartGetCurrentBaudRate>:
    165c:	60 e0       	ldi	r22, 0x00	; 0
    165e:	70 e0       	ldi	r23, 0x00	; 0
    1660:	cb 01       	movw	r24, r22
    1662:	08 95       	ret

00001664 <spiInit>:
    1664:	08 95       	ret

00001666 <spiMasterTransmit>:
    1666:	8e bd       	out	0x2e, r24	; 46
    1668:	0d b4       	in	r0, 0x2d	; 45
    166a:	07 fc       	sbrc	r0, 7
    166c:	fd cf       	rjmp	.-6      	; 0x1668 <spiMasterTransmit+0x2>
    166e:	8e b5       	in	r24, 0x2e	; 46
    1670:	08 95       	ret

00001672 <spiSlaveTransmit>:
    1672:	0d b4       	in	r0, 0x2d	; 45
    1674:	07 fc       	sbrc	r0, 7
    1676:	fd cf       	rjmp	.-6      	; 0x1672 <spiSlaveTransmit>
    1678:	8e b5       	in	r24, 0x2e	; 46
    167a:	08 95       	ret

0000167c <main>:
	+ (str[2]-48)*10 + str[3]-48);
	return value;
}

int main(void)
{
    167c:	cf 93       	push	r28
    167e:	df 93       	push	r29
    1680:	cd b7       	in	r28, 0x3d	; 61
    1682:	de b7       	in	r29, 0x3e	; 62
    1684:	ce 59       	subi	r28, 0x9E	; 158
    1686:	d1 09       	sbc	r29, r1
    1688:	0f b6       	in	r0, 0x3f	; 63
    168a:	f8 94       	cli
    168c:	de bf       	out	0x3e, r29	; 62
    168e:	0f be       	out	0x3f, r0	; 63
    1690:	cd bf       	out	0x3d, r28	; 61
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1692:	2f ef       	ldi	r18, 0xFF	; 255
    1694:	33 ed       	ldi	r19, 0xD3	; 211
    1696:	80 e3       	ldi	r24, 0x30	; 48
    1698:	21 50       	subi	r18, 0x01	; 1
    169a:	30 40       	sbci	r19, 0x00	; 0
    169c:	80 40       	sbci	r24, 0x00	; 0
    169e:	e1 f7       	brne	.-8      	; 0x1698 <main+0x1c>
    16a0:	00 c0       	rjmp	.+0      	; 0x16a2 <main+0x26>
    16a2:	00 00       	nop
	_delay_ms(1000);
	flags.mode = POT_MODE;
    16a4:	80 91 39 01 	lds	r24, 0x0139
    16a8:	83 7f       	andi	r24, 0xF3	; 243
    16aa:	88 60       	ori	r24, 0x08	; 8
    16ac:	80 93 39 01 	sts	0x0139, r24
	status.freq = 1000;
    16b0:	88 ee       	ldi	r24, 0xE8	; 232
    16b2:	93 e0       	ldi	r25, 0x03	; 3
    16b4:	90 93 3b 01 	sts	0x013B, r25
    16b8:	80 93 3a 01 	sts	0x013A, r24
	status.on = 0;			//indica que o sistema inicia sem acionar o motor
    16bc:	10 92 40 01 	sts	0x0140, r1
	status.dc = 0;
    16c0:	10 92 3d 01 	sts	0x013D, r1
	// VARIAVEIS LOCAIS;
	char frameData[50];
	uint8 frameIndex = 0;
	char recebido[100] = "";
    16c4:	19 82       	std	Y+1, r1	; 0x01
    16c6:	1a 82       	std	Y+2, r1	; 0x02
    16c8:	1b 82       	std	Y+3, r1	; 0x03
    16ca:	1c 82       	std	Y+4, r1	; 0x04
    16cc:	fe 01       	movw	r30, r28
    16ce:	35 96       	adiw	r30, 0x05	; 5
    16d0:	80 e6       	ldi	r24, 0x60	; 96
    16d2:	df 01       	movw	r26, r30
    16d4:	1d 92       	st	X+, r1
    16d6:	8a 95       	dec	r24
    16d8:	e9 f7       	brne	.-6      	; 0x16d4 <main+0x58>
	char msgToSend[8] = "";
    16da:	c9 56       	subi	r28, 0x69	; 105
    16dc:	df 4f       	sbci	r29, 0xFF	; 255
    16de:	18 82       	st	Y, r1
    16e0:	19 82       	std	Y+1, r1	; 0x01
    16e2:	1a 82       	std	Y+2, r1	; 0x02
    16e4:	1b 82       	std	Y+3, r1	; 0x03
    16e6:	c7 59       	subi	r28, 0x97	; 151
    16e8:	d0 40       	sbci	r29, 0x00	; 0
    16ea:	c5 56       	subi	r28, 0x65	; 101
    16ec:	df 4f       	sbci	r29, 0xFF	; 255
    16ee:	18 82       	st	Y, r1
    16f0:	19 82       	std	Y+1, r1	; 0x01
    16f2:	1a 82       	std	Y+2, r1	; 0x02
    16f4:	1b 82       	std	Y+3, r1	; 0x03
    16f6:	cb 59       	subi	r28, 0x9B	; 155
    16f8:	d0 40       	sbci	r29, 0x00	; 0
	uint8 pos =  0;
	
	// CONFIGURA ADC
	clrBit(DDRC,POT_BIT);		//SETA O PINO DO ADC COMO ENTRADA
    16fa:	39 98       	cbi	0x07, 1	; 7
	adcConfig(ADC_MODE_SINGLE_CONVERSION, ADC_REFRENCE_POWER_SUPPLY , ADC_PRESCALER_128);
    16fc:	47 e0       	ldi	r20, 0x07	; 7
    16fe:	61 e0       	ldi	r22, 0x01	; 1
    1700:	80 e0       	ldi	r24, 0x00	; 0
    1702:	0e 94 e6 08 	call	0x11cc	; 0x11cc <adcConfig>
	adcSelectChannel(POT_CHANNEL);
    1706:	81 e0       	ldi	r24, 0x01	; 1
    1708:	0e 94 27 09 	call	0x124e	; 0x124e <adcSelectChannel>
	adcClearInterruptRequest();
    170c:	0e 94 59 09 	call	0x12b2	; 0x12b2 <adcClearInterruptRequest>
	adcActivateInterrupt();
    1710:	0e 94 60 09 	call	0x12c0	; 0x12c0 <adcActivateInterrupt>
	adcEnable();
    1714:	0e 94 4b 09 	call	0x1296	; 0x1296 <adcEnable>
	adcStartConversion();
    1718:	0e 94 6e 09 	call	0x12dc	; 0x12dc <adcStartConversion>
	
	// CONFIGURA PWM
	timer1Config(TIMER_B_MODE_CTC, TIMER_A_PRESCALER_64);
    171c:	63 e0       	ldi	r22, 0x03	; 3
    171e:	84 e0       	ldi	r24, 0x04	; 4
    1720:	0e 94 9d 07 	call	0xf3a	; 0xf3a <timer1Config>
	timer1ClearCompareBInterruptRequest();									
    1724:	0e 94 08 08 	call	0x1010	; 0x1010 <timer1ClearCompareBInterruptRequest>
	timer1ClearCompareAInterruptRequest();
    1728:	0e 94 f7 07 	call	0xfee	; 0xfee <timer1ClearCompareAInterruptRequest>
	timer1ActivateCompareBInterrupt();									//ativa a interrupcao do compA
    172c:	0e 94 fa 07 	call	0xff4	; 0xff4 <timer1ActivateCompareBInterrupt>
	timer1ActivateCompareAInterrupt();									//ativa a interrupcao do compB
    1730:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <timer1ActivateCompareAInterrupt>
	timer1SetCompareAValue((F_CPU/64)/status.freq);							//valor do comparador A,  define a frequencia
    1734:	20 91 3a 01 	lds	r18, 0x013A
    1738:	30 91 3b 01 	lds	r19, 0x013B
    173c:	40 e0       	ldi	r20, 0x00	; 0
    173e:	50 e0       	ldi	r21, 0x00	; 0
    1740:	60 e9       	ldi	r22, 0x90	; 144
    1742:	70 ed       	ldi	r23, 0xD0	; 208
    1744:	83 e0       	ldi	r24, 0x03	; 3
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	0e 94 77 0d 	call	0x1aee	; 0x1aee <__udivmodsi4>
    174c:	c9 01       	movw	r24, r18
    174e:	0e 94 38 08 	call	0x1070	; 0x1070 <timer1SetCompareAValue>
	timer1SetCompareBValue((status.dc * (timer1GetCompareAValue()))/100);		//valor do comparador B,  define Duty Cicle
    1752:	00 91 3d 01 	lds	r16, 0x013D
    1756:	10 e0       	ldi	r17, 0x00	; 0
    1758:	0e 94 41 08 	call	0x1082	; 0x1082 <timer1GetCompareAValue>
    175c:	9c 01       	movw	r18, r24
    175e:	20 9f       	mul	r18, r16
    1760:	c0 01       	movw	r24, r0
    1762:	21 9f       	mul	r18, r17
    1764:	90 0d       	add	r25, r0
    1766:	30 9f       	mul	r19, r16
    1768:	90 0d       	add	r25, r0
    176a:	11 24       	eor	r1, r1
    176c:	64 e6       	ldi	r22, 0x64	; 100
    176e:	70 e0       	ldi	r23, 0x00	; 0
    1770:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <__udivmodhi4>
    1774:	cb 01       	movw	r24, r22
    1776:	0e 94 46 08 	call	0x108c	; 0x108c <timer1SetCompareBValue>

	// CONFIGURA A INTERRUPÇÃO DE CONTROLE(60Hz)
	timer0Config(TIMER_A_MODE_NORMAL, TIMER_A_PRESCALER_1024);			
    177a:	65 e0       	ldi	r22, 0x05	; 5
    177c:	80 e0       	ldi	r24, 0x00	; 0
    177e:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <timer0Config>
	timer0ClearOverflowInterruptRequest();								//limpa a interrupcao de OVF
    1782:	0e 94 6b 07 	call	0xed6	; 0xed6 <timer0ClearOverflowInterruptRequest>
	timer0ActivateOverflowInterrupt();							
    1786:	0e 94 5f 07 	call	0xebe	; 0xebe <timer0ActivateOverflowInterrupt>
	if (flags.mode == SERIAL_MODE)
    178a:	80 91 39 01 	lds	r24, 0x0139
    178e:	8c 70       	andi	r24, 0x0C	; 12
    1790:	84 30       	cpi	r24, 0x04	; 4
    1792:	81 f4       	brne	.+32     	; 0x17b4 <main+0x138>
	{
		// CONFIGURA A USART
		usartConfig(USART_MODE_ASYNCHRONOUS,USART_BAUD_9600 ,USART_DATA_BITS_8,USART_PARITY_NONE,USART_STOP_BIT_SINGLE);
    1794:	e1 2c       	mov	r14, r1
    1796:	00 e0       	ldi	r16, 0x00	; 0
    1798:	23 e0       	ldi	r18, 0x03	; 3
    179a:	40 e8       	ldi	r20, 0x80	; 128
    179c:	55 e2       	ldi	r21, 0x25	; 37
    179e:	60 e0       	ldi	r22, 0x00	; 0
    17a0:	70 e0       	ldi	r23, 0x00	; 0
    17a2:	80 e0       	ldi	r24, 0x00	; 0
    17a4:	0e 94 81 09 	call	0x1302	; 0x1302 <usartConfig>
		usartEnableReceiver();
    17a8:	0e 94 06 0a 	call	0x140c	; 0x140c <usartEnableReceiver>
		usartEnableTransmitter();
    17ac:	0e 94 14 0a 	call	0x1428	; 0x1428 <usartEnableTransmitter>
		usartActivateReceptionCompleteInterrupt();
    17b0:	0e 94 22 0a 	call	0x1444	; 0x1444 <usartActivateReceptionCompleteInterrupt>
	}

	sei();
    17b4:	78 94       	sei
	
	setBit(PWM_DDR,PWM_BIT);			//define o pino do pwm como saída
    17b6:	21 9a       	sbi	0x04, 1	; 4

	setBit(ON_PORT,ON_BIT);				//habilita o pull-up da chave on
    17b8:	5d 9a       	sbi	0x0b, 5	; 11
	setBit(DMS_PORT,DMS_BIT);			//habilita o pull-up da chave dms
    17ba:	5c 9a       	sbi	0x0b, 4	; 11

//configura o buzzer e da sinal de alerta de ligação
	setBit(BUZZER_DDR,BUZZER_BIT);			
    17bc:	3c 9a       	sbi	0x07, 4	; 7
	setBit(BUZZER_PORT,BUZZER_BIT);
    17be:	44 9a       	sbi	0x08, 4	; 8
    17c0:	3f ef       	ldi	r19, 0xFF	; 255
    17c2:	83 ed       	ldi	r24, 0xD3	; 211
    17c4:	90 e3       	ldi	r25, 0x30	; 48
    17c6:	31 50       	subi	r19, 0x01	; 1
    17c8:	80 40       	sbci	r24, 0x00	; 0
    17ca:	90 40       	sbci	r25, 0x00	; 0
    17cc:	e1 f7       	brne	.-8      	; 0x17c6 <main+0x14a>
    17ce:	00 c0       	rjmp	.+0      	; 0x17d0 <main+0x154>
    17d0:	00 00       	nop
	_delay_ms(1000);
	clrBit(BUZZER_PORT,BUZZER_BIT);
    17d2:	44 98       	cbi	0x08, 4	; 8
	status.freq = 1000;
	status.on = 0;			//indica que o sistema inicia sem acionar o motor
	status.dc = 0;
	// VARIAVEIS LOCAIS;
	char frameData[50];
	uint8 frameIndex = 0;
    17d4:	a1 2c       	mov	r10, r1
										if(status.dc < minDC)
											status.dc = 0;
										else
											if(status.dc > maxDC)
												status.dc = 100;
										timer1SetCompareBValue((status.dc * (timer1GetCompareAValue()))/100);//bota o dc
    17d6:	04 e6       	ldi	r16, 0x64	; 100
    17d8:	10 e0       	ldi	r17, 0x00	; 0
									case 1:
										freqReq = string4ToUint16(recebido);
										if (freqReq >= MIN_FREQ && freqReq <= MAX_FREQ)
										{
											status.freq = freqReq;
											timer1SetCompareAValue((F_CPU/1024)/status.freq);
    17da:	99 e0       	ldi	r25, 0x09	; 9
    17dc:	e9 2e       	mov	r14, r25
    17de:	9d e3       	ldi	r25, 0x3D	; 61
    17e0:	f9 2e       	mov	r15, r25
	setBit(PORTD,PD0);			
*/

    while(1)
    {
    	if(flags.mode == SERIAL_MODE)
    17e2:	80 91 39 01 	lds	r24, 0x0139
    17e6:	8c 70       	andi	r24, 0x0C	; 12
    17e8:	84 30       	cpi	r24, 0x04	; 4
    17ea:	09 f0       	breq	.+2      	; 0x17ee <main+0x172>
    17ec:	ff cf       	rjmp	.-2      	; 0x17ec <main+0x170>
										status.dc = dcReq;
										if(status.dc < minDC)
											status.dc = 0;
										else
											if(status.dc > maxDC)
												status.dc = 100;
    17ee:	84 e6       	ldi	r24, 0x64	; 100
    17f0:	d8 2e       	mov	r13, r24

    while(1)
    {
    	if(flags.mode == SERIAL_MODE)
    	{
	    	while(!usartIsReceiverBufferEmpty())
    17f2:	0e 94 28 0b 	call	0x1650	; 0x1650 <usartIsReceiverBufferEmpty>
    17f6:	81 11       	cpse	r24, r1
    17f8:	f4 cf       	rjmp	.-24     	; 0x17e2 <main+0x166>
	    	{
				frameData[frameIndex++] = usartGetDataFromReceiverBuffer();
    17fa:	bb 24       	eor	r11, r11
    17fc:	b3 94       	inc	r11
    17fe:	ba 0c       	add	r11, r10
    1800:	0e 94 06 0b 	call	0x160c	; 0x160c <usartGetDataFromReceiverBuffer>
    1804:	e5 e6       	ldi	r30, 0x65	; 101
    1806:	f0 e0       	ldi	r31, 0x00	; 0
    1808:	ec 0f       	add	r30, r28
    180a:	fd 1f       	adc	r31, r29
    180c:	ea 0d       	add	r30, r10
    180e:	f1 1d       	adc	r31, r1
    1810:	80 83       	st	Z, r24
				if ((frameData[frameIndex-1] == FINALDOPACOTE))
    1812:	e5 e6       	ldi	r30, 0x65	; 101
    1814:	f0 e0       	ldi	r31, 0x00	; 0
    1816:	ec 0f       	add	r30, r28
    1818:	fd 1f       	adc	r31, r29
    181a:	eb 0d       	add	r30, r11
    181c:	f1 1d       	adc	r31, r1
    181e:	31 97       	sbiw	r30, 0x01	; 1
    1820:	80 81       	ld	r24, Z
    1822:	8a 32       	cpi	r24, 0x2A	; 42
    1824:	11 f0       	breq	.+4      	; 0x182a <main+0x1ae>
    {
    	if(flags.mode == SERIAL_MODE)
    	{
	    	while(!usartIsReceiverBufferEmpty())
	    	{
				frameData[frameIndex++] = usartGetDataFromReceiverBuffer();
    1826:	ab 2c       	mov	r10, r11
    1828:	e4 cf       	rjmp	.-56     	; 0x17f2 <main+0x176>
				if ((frameData[frameIndex-1] == FINALDOPACOTE))
				{//se esta no final da palavra
					if(frameData[0] == INICIODOPACOTE )
    182a:	a6 96       	adiw	r28, 0x26	; 38
    182c:	8f ad       	ldd	r24, Y+63	; 0x3f
    182e:	a6 97       	sbiw	r28, 0x26	; 38
    1830:	80 34       	cpi	r24, 0x40	; 64
    1832:	09 f0       	breq	.+2      	; 0x1836 <main+0x1ba>
    1834:	44 c1       	rjmp	.+648    	; 0x1abe <main+0x442>
					{//verifica se o inicio da palavra esta correto
						strcpy(recebido,frameData);
    1836:	be 01       	movw	r22, r28
    1838:	6b 59       	subi	r22, 0x9B	; 155
    183a:	7f 4f       	sbci	r23, 0xFF	; 255
    183c:	ce 01       	movw	r24, r28
    183e:	01 96       	adiw	r24, 0x01	; 1
    1840:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <strcpy>
						pos = (recebido[2]-48) + (recebido[1] - 48)*10;
    1844:	4b 81       	ldd	r20, Y+3	; 0x03
    1846:	40 53       	subi	r20, 0x30	; 48
    1848:	8a 81       	ldd	r24, Y+2	; 0x02
    184a:	88 0f       	add	r24, r24
    184c:	80 56       	subi	r24, 0x60	; 96
    184e:	98 2f       	mov	r25, r24
    1850:	99 0f       	add	r25, r25
    1852:	99 0f       	add	r25, r25
    1854:	98 0f       	add	r25, r24
    1856:	49 0f       	add	r20, r25
						if(frameIndex == GETWORDSIZE)
    1858:	a4 e0       	ldi	r26, 0x04	; 4
    185a:	ba 12       	cpse	r11, r26
    185c:	68 c0       	rjmp	.+208    	; 0x192e <main+0x2b2>
						{
							memcpy( recebido,  (recebido+1), 2);
    185e:	8a 81       	ldd	r24, Y+2	; 0x02
    1860:	9b 81       	ldd	r25, Y+3	; 0x03
    1862:	9a 83       	std	Y+2, r25	; 0x02
    1864:	89 83       	std	Y+1, r24	; 0x01
							recebido[2] = '\0';//isola o id
    1866:	1b 82       	std	Y+3, r1	; 0x03
							switch (pos)
    1868:	50 e0       	ldi	r21, 0x00	; 0
    186a:	4e 30       	cpi	r20, 0x0E	; 14
    186c:	51 05       	cpc	r21, r1
    186e:	08 f0       	brcs	.+2      	; 0x1872 <main+0x1f6>
    1870:	44 c0       	rjmp	.+136    	; 0x18fa <main+0x27e>
    1872:	fa 01       	movw	r30, r20
    1874:	ec 5c       	subi	r30, 0xCC	; 204
    1876:	ff 4f       	sbci	r31, 0xFF	; 255
    1878:	0c 94 99 0d 	jmp	0x1b32	; 0x1b32 <__tablejump2__>
							{
								case 0:
									strcpy(msgToSend,"OK");
    187c:	66 e1       	ldi	r22, 0x16	; 22
    187e:	71 e0       	ldi	r23, 0x01	; 1
    1880:	3e c0       	rjmp	.+124    	; 0x18fe <main+0x282>
									break;
								case 1:
									uint16ToString4(msgToSend,status.freq);
    1882:	60 91 3a 01 	lds	r22, 0x013A
    1886:	70 91 3b 01 	lds	r23, 0x013B
    188a:	ce 01       	movw	r24, r28
    188c:	89 56       	subi	r24, 0x69	; 105
    188e:	9f 4f       	sbci	r25, 0xFF	; 255
    1890:	0e 94 ca 00 	call	0x194	; 0x194 <uint16ToString4>
									break;
    1894:	39 c0       	rjmp	.+114    	; 0x1908 <main+0x28c>
								case 2:
									uint8ToString4(msgToSend,maxCurrent);
    1896:	60 91 06 01 	lds	r22, 0x0106
    189a:	28 c0       	rjmp	.+80     	; 0x18ec <main+0x270>
									break;
								case 3:
									uint8ToString4(msgToSend,maxDC);
    189c:	60 91 04 01 	lds	r22, 0x0104
    18a0:	25 c0       	rjmp	.+74     	; 0x18ec <main+0x270>
									break;
								case 4:
									uint8ToString4(msgToSend,minDC);
    18a2:	60 91 05 01 	lds	r22, 0x0105
    18a6:	22 c0       	rjmp	.+68     	; 0x18ec <main+0x270>
									break;
								case 5:
									uint8ToString4(msgToSend,maxDV);
    18a8:	60 91 03 01 	lds	r22, 0x0103
    18ac:	1f c0       	rjmp	.+62     	; 0x18ec <main+0x270>
									break;
								case 6 :
									if(flags.on)
    18ae:	80 91 39 01 	lds	r24, 0x0139
    18b2:	84 ff       	sbrs	r24, 4
    18b4:	07 c0       	rjmp	.+14     	; 0x18c4 <main+0x248>
										strcpy(msgToSend, "0001");
    18b6:	69 e1       	ldi	r22, 0x19	; 25
    18b8:	71 e0       	ldi	r23, 0x01	; 1
    18ba:	21 c0       	rjmp	.+66     	; 0x18fe <main+0x282>
									else
										strcpy(msgToSend, "0000");
									break;
								case 7:
									if(flags.dms)
    18bc:	80 91 39 01 	lds	r24, 0x0139
    18c0:	85 fd       	sbrc	r24, 5
    18c2:	f9 cf       	rjmp	.-14     	; 0x18b6 <main+0x23a>
									break;
								case 6 :
									if(flags.on)
										strcpy(msgToSend, "0001");
									else
										strcpy(msgToSend, "0000");
    18c4:	6e e1       	ldi	r22, 0x1E	; 30
    18c6:	71 e0       	ldi	r23, 0x01	; 1
    18c8:	1a c0       	rjmp	.+52     	; 0x18fe <main+0x282>
										strcpy(msgToSend, "0001");
									else
										strcpy(msgToSend, "0000");
									break;
								case 8:
									uint8ToString4(msgToSend,maxTemp);
    18ca:	60 91 02 01 	lds	r22, 0x0102
    18ce:	0e c0       	rjmp	.+28     	; 0x18ec <main+0x270>
									break;
								case 9:
									uint8ToString4(msgToSend,minVoltage);
    18d0:	60 91 00 01 	lds	r22, 0x0100
    18d4:	0b c0       	rjmp	.+22     	; 0x18ec <main+0x270>
									break;
								case 10:
									uint8ToString4(msgToSend,status.dc);
    18d6:	60 91 3d 01 	lds	r22, 0x013D
    18da:	08 c0       	rjmp	.+16     	; 0x18ec <main+0x270>
									break;
								case 11:
									uint8ToString4(msgToSend,status.temperature);
    18dc:	60 91 3e 01 	lds	r22, 0x013E
    18e0:	05 c0       	rjmp	.+10     	; 0x18ec <main+0x270>
									break;
								case 12:
									uint8ToString4(msgToSend,status.current);
    18e2:	60 91 3c 01 	lds	r22, 0x013C
    18e6:	02 c0       	rjmp	.+4      	; 0x18ec <main+0x270>
									break;
								case 13:
									uint8ToString4(msgToSend,status.voltage);
    18e8:	60 91 3f 01 	lds	r22, 0x013F
    18ec:	70 e0       	ldi	r23, 0x00	; 0
    18ee:	ce 01       	movw	r24, r28
    18f0:	89 56       	subi	r24, 0x69	; 105
    18f2:	9f 4f       	sbci	r25, 0xFF	; 255
    18f4:	0e 94 fe 00 	call	0x1fc	; 0x1fc <uint8ToString4>
									break;
    18f8:	07 c0       	rjmp	.+14     	; 0x1908 <main+0x28c>
								default:
									strcpy(msgToSend,"ERRO");
    18fa:	63 e2       	ldi	r22, 0x23	; 35
    18fc:	71 e0       	ldi	r23, 0x01	; 1
    18fe:	ce 01       	movw	r24, r28
    1900:	89 56       	subi	r24, 0x69	; 105
    1902:	9f 4f       	sbci	r25, 0xFF	; 255
    1904:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <strcpy>
							}
							strcat(recebido,msgToSend);
    1908:	be 01       	movw	r22, r28
    190a:	69 56       	subi	r22, 0x69	; 105
    190c:	7f 4f       	sbci	r23, 0xFF	; 255
    190e:	ce 01       	movw	r24, r28
    1910:	01 96       	adiw	r24, 0x01	; 1
    1912:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <strcat>
							strcpy(msgToSend,recebido);
    1916:	be 01       	movw	r22, r28
    1918:	6f 5f       	subi	r22, 0xFF	; 255
    191a:	7f 4f       	sbci	r23, 0xFF	; 255
    191c:	ce 01       	movw	r24, r28
    191e:	89 56       	subi	r24, 0x69	; 105
    1920:	9f 4f       	sbci	r25, 0xFF	; 255
    1922:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <strcpy>

							stringTransmit(msgToSend);
    1926:	ce 01       	movw	r24, r28
    1928:	89 56       	subi	r24, 0x69	; 105
    192a:	9f 4f       	sbci	r25, 0xFF	; 255
    192c:	c1 c0       	rjmp	.+386    	; 0x1ab0 <main+0x434>
						}
						else
						{
							if(frameIndex == SETWORDSIZE)
    192e:	b8 e0       	ldi	r27, 0x08	; 8
    1930:	bb 12       	cpse	r11, r27
    1932:	c1 c0       	rjmp	.+386    	; 0x1ab6 <main+0x43a>
							{
								memcpy((void *) recebido, (void *) (recebido+3), 4);//isola somente o valor, usando 4 caracteres
    1934:	8c 81       	ldd	r24, Y+4	; 0x04
    1936:	9d 81       	ldd	r25, Y+5	; 0x05
    1938:	ae 81       	ldd	r26, Y+6	; 0x06
    193a:	bf 81       	ldd	r27, Y+7	; 0x07
    193c:	89 83       	std	Y+1, r24	; 0x01
    193e:	9a 83       	std	Y+2, r25	; 0x02
    1940:	ab 83       	std	Y+3, r26	; 0x03
    1942:	bc 83       	std	Y+4, r27	; 0x04
								recebido[4] = '\0';
    1944:	1d 82       	std	Y+5, r1	; 0x05

								switch (pos){
    1946:	50 e0       	ldi	r21, 0x00	; 0
    1948:	fa 01       	movw	r30, r20
    194a:	31 97       	sbiw	r30, 0x01	; 1
    194c:	ea 30       	cpi	r30, 0x0A	; 10
    194e:	f1 05       	cpc	r31, r1
    1950:	08 f0       	brcs	.+2      	; 0x1954 <main+0x2d8>
    1952:	ac c0       	rjmp	.+344    	; 0x1aac <main+0x430>
    1954:	ee 5b       	subi	r30, 0xBE	; 190
    1956:	ff 4f       	sbci	r31, 0xFF	; 255
    1958:	0c 94 99 0d 	jmp	0x1b32	; 0x1b32 <__tablejump2__>
									case 1:
										freqReq = string4ToUint16(recebido);
    195c:	ce 01       	movw	r24, r28
    195e:	01 96       	adiw	r24, 0x01	; 1
    1960:	0e 94 29 01 	call	0x252	; 0x252 <string4ToUint16>
    1964:	bc 01       	movw	r22, r24
    1966:	90 93 36 01 	sts	0x0136, r25
    196a:	80 93 35 01 	sts	0x0135, r24
										if (freqReq >= MIN_FREQ && freqReq <= MAX_FREQ)
    196e:	84 5f       	subi	r24, 0xF4	; 244
    1970:	91 40       	sbci	r25, 0x01	; 1
    1972:	85 3f       	cpi	r24, 0xF5	; 245
    1974:	91 40       	sbci	r25, 0x01	; 1
    1976:	08 f0       	brcs	.+2      	; 0x197a <main+0x2fe>
    1978:	a4 c0       	rjmp	.+328    	; 0x1ac2 <main+0x446>
										{
											status.freq = freqReq;
    197a:	70 93 3b 01 	sts	0x013B, r23
    197e:	60 93 3a 01 	sts	0x013A, r22
											timer1SetCompareAValue((F_CPU/1024)/status.freq);
    1982:	c7 01       	movw	r24, r14
    1984:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <__udivmodhi4>
    1988:	cb 01       	movw	r24, r22
    198a:	0e 94 38 08 	call	0x1070	; 0x1070 <timer1SetCompareAValue>
    198e:	37 c0       	rjmp	.+110    	; 0x19fe <main+0x382>
											timer1SetCompareBValue((status.dc * (timer1GetCompareAValue()))/100);//bota o dc
										}
										break;
									case 2:
										maxCurrent = string4Touint8(recebido);
    1990:	ce 01       	movw	r24, r28
    1992:	01 96       	adiw	r24, 0x01	; 1
    1994:	0e 94 54 01 	call	0x2a8	; 0x2a8 <string4Touint8>
    1998:	80 93 06 01 	sts	0x0106, r24
										break;
    199c:	92 c0       	rjmp	.+292    	; 0x1ac2 <main+0x446>
									case 3:
										maxDC = string4Touint8(recebido);
    199e:	ce 01       	movw	r24, r28
    19a0:	01 96       	adiw	r24, 0x01	; 1
    19a2:	0e 94 54 01 	call	0x2a8	; 0x2a8 <string4Touint8>
    19a6:	80 93 04 01 	sts	0x0104, r24
										if(dcReq > maxDC)
    19aa:	90 91 34 01 	lds	r25, 0x0134
    19ae:	89 17       	cp	r24, r25
    19b0:	08 f4       	brcc	.+2      	; 0x19b4 <main+0x338>
    19b2:	79 c0       	rjmp	.+242    	; 0x1aa6 <main+0x42a>
											status.dc = 100;
										else
											status.dc = dcReq;
    19b4:	90 93 3d 01 	sts	0x013D, r25
										timer1SetCompareBValue((status.dc * (timer1GetCompareAValue()))/100);//bota o dc
    19b8:	a0 90 3d 01 	lds	r10, 0x013D
    19bc:	b1 2c       	mov	r11, r1
    19be:	0e 94 41 08 	call	0x1082	; 0x1082 <timer1GetCompareAValue>
    19c2:	9c 01       	movw	r18, r24
    19c4:	2a 9d       	mul	r18, r10
    19c6:	c0 01       	movw	r24, r0
    19c8:	2b 9d       	mul	r18, r11
    19ca:	90 0d       	add	r25, r0
    19cc:	3a 9d       	mul	r19, r10
    19ce:	90 0d       	add	r25, r0
    19d0:	11 24       	eor	r1, r1
    19d2:	b8 01       	movw	r22, r16
    19d4:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <__udivmodhi4>
    19d8:	cb 01       	movw	r24, r22
    19da:	0e 94 46 08 	call	0x108c	; 0x108c <timer1SetCompareBValue>
										break;
    19de:	71 c0       	rjmp	.+226    	; 0x1ac2 <main+0x446>
									case 4:
										minDC = string4Touint8(recebido);
    19e0:	ce 01       	movw	r24, r28
    19e2:	01 96       	adiw	r24, 0x01	; 1
    19e4:	0e 94 54 01 	call	0x2a8	; 0x2a8 <string4Touint8>
    19e8:	80 93 05 01 	sts	0x0105, r24
										if(dcReq < minDC)
    19ec:	90 91 34 01 	lds	r25, 0x0134
    19f0:	98 17       	cp	r25, r24
    19f2:	18 f4       	brcc	.+6      	; 0x19fa <main+0x37e>
											status.dc = 0;
    19f4:	10 92 3d 01 	sts	0x013D, r1
    19f8:	02 c0       	rjmp	.+4      	; 0x19fe <main+0x382>
										else
											status.dc = dcReq;
    19fa:	90 93 3d 01 	sts	0x013D, r25
										timer1SetCompareBValue((status.dc * (timer1GetCompareAValue()))/100);//bota o dc
    19fe:	a0 90 3d 01 	lds	r10, 0x013D
    1a02:	b1 2c       	mov	r11, r1
    1a04:	0e 94 41 08 	call	0x1082	; 0x1082 <timer1GetCompareAValue>
    1a08:	dc 01       	movw	r26, r24
    1a0a:	aa 9d       	mul	r26, r10
    1a0c:	c0 01       	movw	r24, r0
    1a0e:	ab 9d       	mul	r26, r11
    1a10:	90 0d       	add	r25, r0
    1a12:	ba 9d       	mul	r27, r10
    1a14:	90 0d       	add	r25, r0
    1a16:	11 24       	eor	r1, r1
    1a18:	dc cf       	rjmp	.-72     	; 0x19d2 <main+0x356>
										break;
									case 5:
										maxDV = string4Touint8(recebido);
    1a1a:	ce 01       	movw	r24, r28
    1a1c:	01 96       	adiw	r24, 0x01	; 1
    1a1e:	0e 94 54 01 	call	0x2a8	; 0x2a8 <string4Touint8>
    1a22:	80 93 03 01 	sts	0x0103, r24
										break;
    1a26:	4d c0       	rjmp	.+154    	; 0x1ac2 <main+0x446>
									case 6 :
										if(recebido[3] == '1')
    1a28:	8c 81       	ldd	r24, Y+4	; 0x04
    1a2a:	81 33       	cpi	r24, 0x31	; 49
    1a2c:	21 f4       	brne	.+8      	; 0x1a36 <main+0x3ba>
										{
											flags.on = 1;
    1a2e:	80 91 39 01 	lds	r24, 0x0139
    1a32:	80 61       	ori	r24, 0x10	; 16
    1a34:	0d c0       	rjmp	.+26     	; 0x1a50 <main+0x3d4>
										}
										if(recebido[3] == '0')
    1a36:	80 33       	cpi	r24, 0x30	; 48
    1a38:	09 f0       	breq	.+2      	; 0x1a3c <main+0x3c0>
    1a3a:	43 c0       	rjmp	.+134    	; 0x1ac2 <main+0x446>
										{
											flags.on = 0;
    1a3c:	80 91 39 01 	lds	r24, 0x0139
    1a40:	8f 7e       	andi	r24, 0xEF	; 239
    1a42:	06 c0       	rjmp	.+12     	; 0x1a50 <main+0x3d4>
										}
										break;
									case 7:
										if(recebido[3] == '1')
    1a44:	8c 81       	ldd	r24, Y+4	; 0x04
    1a46:	81 33       	cpi	r24, 0x31	; 49
    1a48:	31 f4       	brne	.+12     	; 0x1a56 <main+0x3da>
										{
											flags.dms = 1;
    1a4a:	80 91 39 01 	lds	r24, 0x0139
    1a4e:	80 62       	ori	r24, 0x20	; 32
    1a50:	80 93 39 01 	sts	0x0139, r24
    1a54:	36 c0       	rjmp	.+108    	; 0x1ac2 <main+0x446>
										}
										if(recebido[3] == '0')
    1a56:	80 33       	cpi	r24, 0x30	; 48
    1a58:	a1 f5       	brne	.+104    	; 0x1ac2 <main+0x446>
										{
											flags.dms = 0;
    1a5a:	80 91 39 01 	lds	r24, 0x0139
    1a5e:	8f 7d       	andi	r24, 0xDF	; 223
    1a60:	f7 cf       	rjmp	.-18     	; 0x1a50 <main+0x3d4>
										}
										break;
									case 8:
										maxTemp = string4Touint8(recebido);
    1a62:	ce 01       	movw	r24, r28
    1a64:	01 96       	adiw	r24, 0x01	; 1
    1a66:	0e 94 54 01 	call	0x2a8	; 0x2a8 <string4Touint8>
    1a6a:	80 93 02 01 	sts	0x0102, r24
										break;
    1a6e:	29 c0       	rjmp	.+82     	; 0x1ac2 <main+0x446>
									case 9:
										minVoltage = string4Touint8(recebido);
    1a70:	ce 01       	movw	r24, r28
    1a72:	01 96       	adiw	r24, 0x01	; 1
    1a74:	0e 94 54 01 	call	0x2a8	; 0x2a8 <string4Touint8>
    1a78:	80 93 00 01 	sts	0x0100, r24
										break;
    1a7c:	22 c0       	rjmp	.+68     	; 0x1ac2 <main+0x446>
									case 10:
										dcReq = string4Touint8(recebido);
    1a7e:	ce 01       	movw	r24, r28
    1a80:	01 96       	adiw	r24, 0x01	; 1
    1a82:	0e 94 54 01 	call	0x2a8	; 0x2a8 <string4Touint8>
    1a86:	80 93 34 01 	sts	0x0134, r24
										status.dc = dcReq;
    1a8a:	80 93 3d 01 	sts	0x013D, r24
										if(status.dc < minDC)
    1a8e:	90 91 05 01 	lds	r25, 0x0105
    1a92:	89 17       	cp	r24, r25
    1a94:	18 f4       	brcc	.+6      	; 0x1a9c <main+0x420>
											status.dc = 0;
    1a96:	10 92 3d 01 	sts	0x013D, r1
    1a9a:	8e cf       	rjmp	.-228    	; 0x19b8 <main+0x33c>
										else
											if(status.dc > maxDC)
    1a9c:	90 91 04 01 	lds	r25, 0x0104
    1aa0:	98 17       	cp	r25, r24
    1aa2:	08 f0       	brcs	.+2      	; 0x1aa6 <main+0x42a>
    1aa4:	89 cf       	rjmp	.-238    	; 0x19b8 <main+0x33c>
												status.dc = 100;
    1aa6:	d0 92 3d 01 	sts	0x013D, r13
    1aaa:	86 cf       	rjmp	.-244    	; 0x19b8 <main+0x33c>
									case 11:
									case 12:
									case 13:

									default:
										stringTransmit("ERRO");
    1aac:	83 e2       	ldi	r24, 0x23	; 35
    1aae:	91 e0       	ldi	r25, 0x01	; 1
    1ab0:	0e 94 b2 00 	call	0x164	; 0x164 <stringTransmit>
    1ab4:	06 c0       	rjmp	.+12     	; 0x1ac2 <main+0x446>
								}
							}
							else
							{
								stringTransmit("wrong size");	
    1ab6:	88 e2       	ldi	r24, 0x28	; 40
    1ab8:	91 e0       	ldi	r25, 0x01	; 1
    1aba:	0e 94 b2 00 	call	0x164	; 0x164 <stringTransmit>
							}
						}
					}
					else
					{//se o inicio da palavra nao esta correto
						esvaziaBuffer();
    1abe:	0e 94 aa 00 	call	0x154	; 0x154 <esvaziaBuffer>
    1ac2:	a1 2c       	mov	r10, r1
    1ac4:	96 ce       	rjmp	.-724    	; 0x17f2 <main+0x176>

00001ac6 <__udivmodhi4>:
    1ac6:	aa 1b       	sub	r26, r26
    1ac8:	bb 1b       	sub	r27, r27
    1aca:	51 e1       	ldi	r21, 0x11	; 17
    1acc:	07 c0       	rjmp	.+14     	; 0x1adc <__udivmodhi4_ep>

00001ace <__udivmodhi4_loop>:
    1ace:	aa 1f       	adc	r26, r26
    1ad0:	bb 1f       	adc	r27, r27
    1ad2:	a6 17       	cp	r26, r22
    1ad4:	b7 07       	cpc	r27, r23
    1ad6:	10 f0       	brcs	.+4      	; 0x1adc <__udivmodhi4_ep>
    1ad8:	a6 1b       	sub	r26, r22
    1ada:	b7 0b       	sbc	r27, r23

00001adc <__udivmodhi4_ep>:
    1adc:	88 1f       	adc	r24, r24
    1ade:	99 1f       	adc	r25, r25
    1ae0:	5a 95       	dec	r21
    1ae2:	a9 f7       	brne	.-22     	; 0x1ace <__udivmodhi4_loop>
    1ae4:	80 95       	com	r24
    1ae6:	90 95       	com	r25
    1ae8:	bc 01       	movw	r22, r24
    1aea:	cd 01       	movw	r24, r26
    1aec:	08 95       	ret

00001aee <__udivmodsi4>:
    1aee:	a1 e2       	ldi	r26, 0x21	; 33
    1af0:	1a 2e       	mov	r1, r26
    1af2:	aa 1b       	sub	r26, r26
    1af4:	bb 1b       	sub	r27, r27
    1af6:	fd 01       	movw	r30, r26
    1af8:	0d c0       	rjmp	.+26     	; 0x1b14 <__udivmodsi4_ep>

00001afa <__udivmodsi4_loop>:
    1afa:	aa 1f       	adc	r26, r26
    1afc:	bb 1f       	adc	r27, r27
    1afe:	ee 1f       	adc	r30, r30
    1b00:	ff 1f       	adc	r31, r31
    1b02:	a2 17       	cp	r26, r18
    1b04:	b3 07       	cpc	r27, r19
    1b06:	e4 07       	cpc	r30, r20
    1b08:	f5 07       	cpc	r31, r21
    1b0a:	20 f0       	brcs	.+8      	; 0x1b14 <__udivmodsi4_ep>
    1b0c:	a2 1b       	sub	r26, r18
    1b0e:	b3 0b       	sbc	r27, r19
    1b10:	e4 0b       	sbc	r30, r20
    1b12:	f5 0b       	sbc	r31, r21

00001b14 <__udivmodsi4_ep>:
    1b14:	66 1f       	adc	r22, r22
    1b16:	77 1f       	adc	r23, r23
    1b18:	88 1f       	adc	r24, r24
    1b1a:	99 1f       	adc	r25, r25
    1b1c:	1a 94       	dec	r1
    1b1e:	69 f7       	brne	.-38     	; 0x1afa <__udivmodsi4_loop>
    1b20:	60 95       	com	r22
    1b22:	70 95       	com	r23
    1b24:	80 95       	com	r24
    1b26:	90 95       	com	r25
    1b28:	9b 01       	movw	r18, r22
    1b2a:	ac 01       	movw	r20, r24
    1b2c:	bd 01       	movw	r22, r26
    1b2e:	cf 01       	movw	r24, r30
    1b30:	08 95       	ret

00001b32 <__tablejump2__>:
    1b32:	ee 0f       	add	r30, r30
    1b34:	ff 1f       	adc	r31, r31

00001b36 <__tablejump__>:
    1b36:	05 90       	lpm	r0, Z+
    1b38:	f4 91       	lpm	r31, Z
    1b3a:	e0 2d       	mov	r30, r0
    1b3c:	09 94       	ijmp

00001b3e <__ashrdi3>:
    1b3e:	97 fb       	bst	r25, 7
    1b40:	10 f8       	bld	r1, 0

00001b42 <__lshrdi3>:
    1b42:	16 94       	lsr	r1
    1b44:	00 08       	sbc	r0, r0
    1b46:	0f 93       	push	r16
    1b48:	08 30       	cpi	r16, 0x08	; 8
    1b4a:	98 f0       	brcs	.+38     	; 0x1b72 <__lshrdi3+0x30>
    1b4c:	08 50       	subi	r16, 0x08	; 8
    1b4e:	23 2f       	mov	r18, r19
    1b50:	34 2f       	mov	r19, r20
    1b52:	45 2f       	mov	r20, r21
    1b54:	56 2f       	mov	r21, r22
    1b56:	67 2f       	mov	r22, r23
    1b58:	78 2f       	mov	r23, r24
    1b5a:	89 2f       	mov	r24, r25
    1b5c:	90 2d       	mov	r25, r0
    1b5e:	f4 cf       	rjmp	.-24     	; 0x1b48 <__lshrdi3+0x6>
    1b60:	05 94       	asr	r0
    1b62:	97 95       	ror	r25
    1b64:	87 95       	ror	r24
    1b66:	77 95       	ror	r23
    1b68:	67 95       	ror	r22
    1b6a:	57 95       	ror	r21
    1b6c:	47 95       	ror	r20
    1b6e:	37 95       	ror	r19
    1b70:	27 95       	ror	r18
    1b72:	0a 95       	dec	r16
    1b74:	aa f7       	brpl	.-22     	; 0x1b60 <__lshrdi3+0x1e>
    1b76:	0f 91       	pop	r16
    1b78:	08 95       	ret

00001b7a <strcat>:
    1b7a:	fb 01       	movw	r30, r22
    1b7c:	dc 01       	movw	r26, r24
    1b7e:	0d 90       	ld	r0, X+
    1b80:	00 20       	and	r0, r0
    1b82:	e9 f7       	brne	.-6      	; 0x1b7e <strcat+0x4>
    1b84:	11 97       	sbiw	r26, 0x01	; 1
    1b86:	01 90       	ld	r0, Z+
    1b88:	0d 92       	st	X+, r0
    1b8a:	00 20       	and	r0, r0
    1b8c:	e1 f7       	brne	.-8      	; 0x1b86 <strcat+0xc>
    1b8e:	08 95       	ret

00001b90 <strcpy>:
    1b90:	fb 01       	movw	r30, r22
    1b92:	dc 01       	movw	r26, r24
    1b94:	01 90       	ld	r0, Z+
    1b96:	0d 92       	st	X+, r0
    1b98:	00 20       	and	r0, r0
    1b9a:	e1 f7       	brne	.-8      	; 0x1b94 <strcpy+0x4>
    1b9c:	08 95       	ret

00001b9e <_exit>:
    1b9e:	f8 94       	cli

00001ba0 <__stop_program>:
    1ba0:	ff cf       	rjmp	.-2      	; 0x1ba0 <__stop_program>
