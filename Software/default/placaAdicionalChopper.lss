
placaAdicionalChopper.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000036  00800100  00001b06  00001b9a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b06  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000043  00800136  00800136  00001bd0  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00001bd0  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00001be1  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003347  00000000  00000000  00001c29  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006a7  00000000  00000000  00004f70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000080d  00000000  00000000  00005617  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000de8  00000000  00000000  00005e24  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000025ec  00000000  00000000  00006c0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001ae5  00000000  00000000  000091f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  0000acdd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__ctors_end>
       4:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
       8:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
       c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      10:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      14:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      18:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      1c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      20:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      24:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      28:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      2c:	0c 94 ca 01 	jmp	0x394	; 0x394 <__vector_11>
      30:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__vector_12>
      34:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      38:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      3c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      40:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__vector_16>
      44:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      48:	0c 94 7a 02 	jmp	0x4f4	; 0x4f4 <__vector_18>
      4c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      50:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      54:	0c 94 66 01 	jmp	0x2cc	; 0x2cc <__vector_21>
      58:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      5c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      60:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      64:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      68:	fa 0b       	sbc	r31, r26
      6a:	fd 0b       	sbc	r31, r29
      6c:	07 0c       	add	r0, r7
      6e:	0a 0c       	add	r0, r10
      70:	0d 0c       	add	r0, r13
      72:	10 0c       	add	r1, r0
      74:	13 0c       	add	r1, r3
      76:	1a 0c       	add	r1, r10
      78:	21 0c       	add	r2, r1
      7a:	24 0c       	add	r2, r4
      7c:	27 0c       	add	r2, r7
      7e:	2a 0c       	add	r2, r10
      80:	2d 0c       	add	r2, r13
      82:	30 0c       	add	r3, r0
      84:	6a 0c       	add	r6, r10
      86:	7a 0c       	add	r7, r10
      88:	81 0c       	add	r8, r1
      8a:	a2 0c       	add	r10, r2
      8c:	bf 0c       	add	r11, r15
      8e:	c6 0c       	add	r12, r6
      90:	d4 0c       	add	r13, r4
      92:	e3 0c       	add	r14, r3
      94:	ea 0c       	add	r14, r10
      96:	f1 0c       	add	r15, r1
      98:	b5 02       	muls	r27, r21
      9a:	c5 02       	muls	r28, r21
      9c:	b7 02       	muls	r27, r23
      9e:	b9 02       	muls	r27, r25
      a0:	bb 02       	muls	r27, r27
      a2:	bd 02       	muls	r27, r29
      a4:	bf 02       	muls	r27, r31
      a6:	c1 02       	muls	r28, r17
      a8:	c3 02       	muls	r28, r19
      aa:	e8 06       	cpc	r14, r24
      ac:	db 06       	cpc	r13, r27
      ae:	dd 06       	cpc	r13, r29
      b0:	df 06       	cpc	r13, r31
      b2:	e1 06       	cpc	r14, r17
      b4:	e3 06       	cpc	r14, r19
      b6:	e5 06       	cpc	r14, r21
      b8:	e7 06       	cpc	r14, r23
      ba:	e3 08       	sbc	r14, r3
      bc:	e5 08       	sbc	r14, r5
      be:	e7 08       	sbc	r14, r7
      c0:	e9 08       	sbc	r14, r9
      c2:	eb 08       	sbc	r14, r11
      c4:	ed 08       	sbc	r14, r13
      c6:	ef 08       	sbc	r14, r15

000000c8 <__ctors_end>:
      c8:	11 24       	eor	r1, r1
      ca:	1f be       	out	0x3f, r1	; 63
      cc:	cf ef       	ldi	r28, 0xFF	; 255
      ce:	d8 e0       	ldi	r29, 0x08	; 8
      d0:	de bf       	out	0x3e, r29	; 62
      d2:	cd bf       	out	0x3d, r28	; 61

000000d4 <__do_copy_data>:
      d4:	11 e0       	ldi	r17, 0x01	; 1
      d6:	a0 e0       	ldi	r26, 0x00	; 0
      d8:	b1 e0       	ldi	r27, 0x01	; 1
      da:	e6 e0       	ldi	r30, 0x06	; 6
      dc:	fb e1       	ldi	r31, 0x1B	; 27
      de:	02 c0       	rjmp	.+4      	; 0xe4 <__do_copy_data+0x10>
      e0:	05 90       	lpm	r0, Z+
      e2:	0d 92       	st	X+, r0
      e4:	a6 33       	cpi	r26, 0x36	; 54
      e6:	b1 07       	cpc	r27, r17
      e8:	d9 f7       	brne	.-10     	; 0xe0 <__do_copy_data+0xc>

000000ea <__do_clear_bss>:
      ea:	21 e0       	ldi	r18, 0x01	; 1
      ec:	a6 e3       	ldi	r26, 0x36	; 54
      ee:	b1 e0       	ldi	r27, 0x01	; 1
      f0:	01 c0       	rjmp	.+2      	; 0xf4 <.do_clear_bss_start>

000000f2 <.do_clear_bss_loop>:
      f2:	1d 92       	st	X+, r1

000000f4 <.do_clear_bss_start>:
      f4:	a9 37       	cpi	r26, 0x79	; 121
      f6:	b2 07       	cpc	r27, r18
      f8:	e1 f7       	brne	.-8      	; 0xf2 <.do_clear_bss_loop>
      fa:	0e 94 12 0b 	call	0x1624	; 0x1624 <main>
      fe:	0c 94 81 0d 	jmp	0x1b02	; 0x1b02 <_exit>

00000102 <__bad_interrupt>:
     102:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000106 <seta_dc>:
uint8 criticalTemp = 60;		//temperatura critica
uint8 voltage = 0;
uint8 minVotage = 30;

void seta_dc(uint8 d_cycle)		//função para definição do Duty Cicle do PWM
{
     106:	cf 93       	push	r28
     108:	c8 2f       	mov	r28, r24
	dcReq = d_cycle;
     10a:	80 93 38 01 	sts	0x0138, r24
	if(dcReq < minDC)				// Comparação com o valor mínimo de Duty Cicle
     10e:	80 91 05 01 	lds	r24, 0x0105
     112:	c8 17       	cp	r28, r24
     114:	18 f4       	brcc	.+6      	; 0x11c <seta_dc+0x16>
		dc = 0;
     116:	10 92 39 01 	sts	0x0139, r1
     11a:	1a c0       	rjmp	.+52     	; 0x150 <seta_dc+0x4a>
	else
	{
		if(dcReq > maxDC)			//Comparação com o valor máximo de Duty Cicle
     11c:	80 91 04 01 	lds	r24, 0x0104
     120:	8c 17       	cp	r24, r28
     122:	20 f4       	brcc	.+8      	; 0x12c <seta_dc+0x26>
			dc = 100;
     124:	84 e6       	ldi	r24, 0x64	; 100
     126:	80 93 39 01 	sts	0x0139, r24
     12a:	12 c0       	rjmp	.+36     	; 0x150 <seta_dc+0x4a>
		else
		{
			dc = dcReq;
     12c:	c0 93 39 01 	sts	0x0139, r28
			timer1SetCompareBValue((dc * (timer1GetCompareAValue()))/100);		//seta o valor do comparador B para gerar o DC requerido
     130:	0e 94 15 08 	call	0x102a	; 0x102a <timer1GetCompareAValue>
     134:	9c 01       	movw	r18, r24
     136:	c2 9f       	mul	r28, r18
     138:	c0 01       	movw	r24, r0
     13a:	c3 9f       	mul	r28, r19
     13c:	90 0d       	add	r25, r0
     13e:	11 24       	eor	r1, r1
     140:	64 e6       	ldi	r22, 0x64	; 100
     142:	70 e0       	ldi	r23, 0x00	; 0
     144:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <__udivmodhi4>
     148:	cb 01       	movw	r24, r22
		}
	}
}
     14a:	cf 91       	pop	r28
		if(dcReq > maxDC)			//Comparação com o valor máximo de Duty Cicle
			dc = 100;
		else
		{
			dc = dcReq;
			timer1SetCompareBValue((dc * (timer1GetCompareAValue()))/100);		//seta o valor do comparador B para gerar o DC requerido
     14c:	0c 94 1a 08 	jmp	0x1034	; 0x1034 <timer1SetCompareBValue>
		}
	}
}
     150:	cf 91       	pop	r28
     152:	08 95       	ret

00000154 <esvaziaBuffer>:

//esvazia o buffer de entrada da usart
void esvaziaBuffer(){
	while(!usartIsReceiverBufferEmpty())
     154:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <usartIsReceiverBufferEmpty>
     158:	81 11       	cpse	r24, r1
     15a:	03 c0       	rjmp	.+6      	; 0x162 <esvaziaBuffer+0xe>
		usartGetDataFromReceiverBuffer();
     15c:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <usartGetDataFromReceiverBuffer>
     160:	f9 cf       	rjmp	.-14     	; 0x154 <esvaziaBuffer>
}
     162:	08 95       	ret

00000164 <stringTransmit>:

//envia uma msg usando o protocolo GUI
void stringTransmit(char* texto){
     164:	1f 93       	push	r17
     166:	cf 93       	push	r28
     168:	df 93       	push	r29
     16a:	ec 01       	movw	r28, r24
	uint8 i = 0;
	usartTransmit(INICIODOPACOTE);
     16c:	80 e4       	ldi	r24, 0x40	; 64
     16e:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <usartTransmit>
	for(i = 0; texto[i] != '\0'; i++)
     172:	10 e0       	ldi	r17, 0x00	; 0
     174:	fe 01       	movw	r30, r28
     176:	e1 0f       	add	r30, r17
     178:	f1 1d       	adc	r31, r1
     17a:	80 81       	ld	r24, Z
     17c:	88 23       	and	r24, r24
     17e:	21 f0       	breq	.+8      	; 0x188 <stringTransmit+0x24>
		usartTransmit(texto[i]);
     180:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <usartTransmit>

//envia uma msg usando o protocolo GUI
void stringTransmit(char* texto){
	uint8 i = 0;
	usartTransmit(INICIODOPACOTE);
	for(i = 0; texto[i] != '\0'; i++)
     184:	1f 5f       	subi	r17, 0xFF	; 255
     186:	f6 cf       	rjmp	.-20     	; 0x174 <stringTransmit+0x10>
		usartTransmit(texto[i]);
	usartTransmit(FINALDOPACOTE);
     188:	8a e2       	ldi	r24, 0x2A	; 42
}
     18a:	df 91       	pop	r29
     18c:	cf 91       	pop	r28
     18e:	1f 91       	pop	r17
void stringTransmit(char* texto){
	uint8 i = 0;
	usartTransmit(INICIODOPACOTE);
	for(i = 0; texto[i] != '\0'; i++)
		usartTransmit(texto[i]);
	usartTransmit(FINALDOPACOTE);
     190:	0c 94 62 0a 	jmp	0x14c4	; 0x14c4 <usartTransmit>

00000194 <uint16ToString4>:
}

//convert uint16 to string of 4 characters
void uint16ToString4(char* str,uint16 value){
     194:	0f 93       	push	r16
     196:	1f 93       	push	r17
     198:	cf 93       	push	r28
     19a:	df 93       	push	r29
     19c:	fc 01       	movw	r30, r24
     19e:	9b 01       	movw	r18, r22
	str[4] = '\0';
     1a0:	14 82       	std	Z+4, r1	; 0x04
	str[3] = (char ) (value%10 + 48);
     1a2:	ca e0       	ldi	r28, 0x0A	; 10
     1a4:	d0 e0       	ldi	r29, 0x00	; 0
     1a6:	cb 01       	movw	r24, r22
     1a8:	be 01       	movw	r22, r28
     1aa:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <__udivmodhi4>
     1ae:	80 5d       	subi	r24, 0xD0	; 208
     1b0:	83 83       	std	Z+3, r24	; 0x03
	str[2] = (char) ((value%100) / 10 + 48);
     1b2:	04 e6       	ldi	r16, 0x64	; 100
     1b4:	10 e0       	ldi	r17, 0x00	; 0
     1b6:	c9 01       	movw	r24, r18
     1b8:	b8 01       	movw	r22, r16
     1ba:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <__udivmodhi4>
     1be:	be 01       	movw	r22, r28
     1c0:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <__udivmodhi4>
     1c4:	60 5d       	subi	r22, 0xD0	; 208
     1c6:	62 83       	std	Z+2, r22	; 0x02
	str[1] = (char) ((value%1000) / 100 + 48);
     1c8:	c8 ee       	ldi	r28, 0xE8	; 232
     1ca:	d3 e0       	ldi	r29, 0x03	; 3
     1cc:	c9 01       	movw	r24, r18
     1ce:	be 01       	movw	r22, r28
     1d0:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <__udivmodhi4>
     1d4:	b8 01       	movw	r22, r16
     1d6:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <__udivmodhi4>
     1da:	60 5d       	subi	r22, 0xD0	; 208
     1dc:	61 83       	std	Z+1, r22	; 0x01
	str[0] = (char) ((value%10000) / 1000 + 48);
     1de:	c9 01       	movw	r24, r18
     1e0:	60 e1       	ldi	r22, 0x10	; 16
     1e2:	77 e2       	ldi	r23, 0x27	; 39
     1e4:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <__udivmodhi4>
     1e8:	be 01       	movw	r22, r28
     1ea:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <__udivmodhi4>
     1ee:	60 5d       	subi	r22, 0xD0	; 208
     1f0:	60 83       	st	Z, r22
}
     1f2:	df 91       	pop	r29
     1f4:	cf 91       	pop	r28
     1f6:	1f 91       	pop	r17
     1f8:	0f 91       	pop	r16
     1fa:	08 95       	ret

000001fc <uint8ToString4>:

//convert uint8 to string of 4 characters
void uint8ToString4(char* str,uint16 value){
     1fc:	0f 93       	push	r16
     1fe:	1f 93       	push	r17
     200:	cf 93       	push	r28
     202:	df 93       	push	r29
     204:	fc 01       	movw	r30, r24
     206:	9b 01       	movw	r18, r22
	str[4] = '\0';
     208:	14 82       	std	Z+4, r1	; 0x04
	str[3] = (char ) (value%10 + 48);
     20a:	0a e0       	ldi	r16, 0x0A	; 10
     20c:	10 e0       	ldi	r17, 0x00	; 0
     20e:	cb 01       	movw	r24, r22
     210:	b8 01       	movw	r22, r16
     212:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <__udivmodhi4>
     216:	80 5d       	subi	r24, 0xD0	; 208
     218:	83 83       	std	Z+3, r24	; 0x03
	str[2] = (char) ((value%100) / 10 + 48);
     21a:	c4 e6       	ldi	r28, 0x64	; 100
     21c:	d0 e0       	ldi	r29, 0x00	; 0
     21e:	c9 01       	movw	r24, r18
     220:	be 01       	movw	r22, r28
     222:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <__udivmodhi4>
     226:	b8 01       	movw	r22, r16
     228:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <__udivmodhi4>
     22c:	60 5d       	subi	r22, 0xD0	; 208
     22e:	62 83       	std	Z+2, r22	; 0x02
	str[1] = (char) ((value%1000) / 100 + 48);
     230:	c9 01       	movw	r24, r18
     232:	68 ee       	ldi	r22, 0xE8	; 232
     234:	73 e0       	ldi	r23, 0x03	; 3
     236:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <__udivmodhi4>
     23a:	be 01       	movw	r22, r28
     23c:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <__udivmodhi4>
     240:	60 5d       	subi	r22, 0xD0	; 208
     242:	61 83       	std	Z+1, r22	; 0x01
	str[0] = '0';
     244:	80 e3       	ldi	r24, 0x30	; 48
     246:	80 83       	st	Z, r24
}
     248:	df 91       	pop	r29
     24a:	cf 91       	pop	r28
     24c:	1f 91       	pop	r17
     24e:	0f 91       	pop	r16
     250:	08 95       	ret

00000252 <string4ToUint16>:

//convert string of 4 characters uint16
uint16 string4ToUint16(char* str){
     252:	fc 01       	movw	r30, r24
	uint16 value;
	value = (uint16) (str[0]-48)*1000 + (str[1]-48)*100 
	+ (str[2]-48)*10 + str[3]-48;
     254:	23 81       	ldd	r18, Z+3	; 0x03
     256:	30 e0       	ldi	r19, 0x00	; 0
}

//convert string of 4 characters uint16
uint16 string4ToUint16(char* str){
	uint16 value;
	value = (uint16) (str[0]-48)*1000 + (str[1]-48)*100 
     258:	20 53       	subi	r18, 0x30	; 48
     25a:	31 09       	sbc	r19, r1
     25c:	80 81       	ld	r24, Z
     25e:	90 e0       	ldi	r25, 0x00	; 0
     260:	c0 97       	sbiw	r24, 0x30	; 48
     262:	68 ee       	ldi	r22, 0xE8	; 232
     264:	73 e0       	ldi	r23, 0x03	; 3
     266:	86 9f       	mul	r24, r22
     268:	a0 01       	movw	r20, r0
     26a:	87 9f       	mul	r24, r23
     26c:	50 0d       	add	r21, r0
     26e:	96 9f       	mul	r25, r22
     270:	50 0d       	add	r21, r0
     272:	11 24       	eor	r1, r1
	+ (str[2]-48)*10 + str[3]-48;
     274:	24 0f       	add	r18, r20
     276:	35 1f       	adc	r19, r21
}

//convert string of 4 characters uint16
uint16 string4ToUint16(char* str){
	uint16 value;
	value = (uint16) (str[0]-48)*1000 + (str[1]-48)*100 
     278:	81 81       	ldd	r24, Z+1	; 0x01
     27a:	90 e0       	ldi	r25, 0x00	; 0
     27c:	c0 97       	sbiw	r24, 0x30	; 48
     27e:	64 e6       	ldi	r22, 0x64	; 100
     280:	68 9f       	mul	r22, r24
     282:	a0 01       	movw	r20, r0
     284:	69 9f       	mul	r22, r25
     286:	50 0d       	add	r21, r0
     288:	11 24       	eor	r1, r1
	+ (str[2]-48)*10 + str[3]-48;
     28a:	24 0f       	add	r18, r20
     28c:	35 1f       	adc	r19, r21
     28e:	42 81       	ldd	r20, Z+2	; 0x02
     290:	50 e0       	ldi	r21, 0x00	; 0
     292:	40 53       	subi	r20, 0x30	; 48
     294:	51 09       	sbc	r21, r1
     296:	6a e0       	ldi	r22, 0x0A	; 10
     298:	64 9f       	mul	r22, r20
     29a:	c0 01       	movw	r24, r0
     29c:	65 9f       	mul	r22, r21
     29e:	90 0d       	add	r25, r0
     2a0:	11 24       	eor	r1, r1
	return value;
}
     2a2:	82 0f       	add	r24, r18
     2a4:	93 1f       	adc	r25, r19
     2a6:	08 95       	ret

000002a8 <string4Touint8>:

//convert string of 4 characters uint8
uint8 string4Touint8(char* str){
     2a8:	fc 01       	movw	r30, r24
	uint8 value;
	value = (uint8) ((str[1]-48)*100 
     2aa:	83 81       	ldd	r24, Z+3	; 0x03
     2ac:	80 53       	subi	r24, 0x30	; 48
     2ae:	91 81       	ldd	r25, Z+1	; 0x01
     2b0:	90 53       	subi	r25, 0x30	; 48
     2b2:	24 e6       	ldi	r18, 0x64	; 100
     2b4:	92 9f       	mul	r25, r18
     2b6:	80 0d       	add	r24, r0
     2b8:	11 24       	eor	r1, r1
	+ (str[2]-48)*10 + str[3]-48);
     2ba:	92 81       	ldd	r25, Z+2	; 0x02
     2bc:	99 0f       	add	r25, r25
}

//convert string of 4 characters uint8
uint8 string4Touint8(char* str){
	uint8 value;
	value = (uint8) ((str[1]-48)*100 
     2be:	90 56       	subi	r25, 0x60	; 96
     2c0:	29 2f       	mov	r18, r25
     2c2:	22 0f       	add	r18, r18
     2c4:	22 0f       	add	r18, r18
     2c6:	29 0f       	add	r18, r25
	+ (str[2]-48)*10 + str[3]-48);
	return value;
}
     2c8:	82 0f       	add	r24, r18
     2ca:	08 95       	ret

000002cc <__vector_21>:
			}
		}
    }
}

ISR(ADC_vect){
     2cc:	1f 92       	push	r1
     2ce:	0f 92       	push	r0
     2d0:	0f b6       	in	r0, 0x3f	; 63
     2d2:	0f 92       	push	r0
     2d4:	11 24       	eor	r1, r1
     2d6:	2f 93       	push	r18
     2d8:	3f 93       	push	r19
     2da:	4f 93       	push	r20
     2dc:	5f 93       	push	r21
     2de:	6f 93       	push	r22
     2e0:	7f 93       	push	r23
     2e2:	8f 93       	push	r24
     2e4:	9f 93       	push	r25
     2e6:	af 93       	push	r26
     2e8:	bf 93       	push	r27
     2ea:	ef 93       	push	r30
     2ec:	ff 93       	push	r31
	switch (channel)
     2ee:	80 91 09 01 	lds	r24, 0x0109
     2f2:	81 30       	cpi	r24, 0x01	; 1
     2f4:	d1 f0       	breq	.+52     	; 0x32a <__vector_21+0x5e>
     2f6:	70 f0       	brcs	.+28     	; 0x314 <__vector_21+0x48>
     2f8:	82 30       	cpi	r24, 0x02	; 2
     2fa:	41 f1       	breq	.+80     	; 0x34c <__vector_21+0x80>
     2fc:	83 30       	cpi	r24, 0x03	; 3
     2fe:	99 f5       	brne	.+102    	; 0x366 <__vector_21+0x9a>
			break;
		case VOLTAGE_CHANNEL:
			voltage = ADC / 30;
			break;
		case TEMP_CHANNEL:
			temperature = ADC / 2;
     300:	80 91 78 00 	lds	r24, 0x0078
     304:	90 91 79 00 	lds	r25, 0x0079
     308:	96 95       	lsr	r25
     30a:	87 95       	ror	r24
     30c:	80 93 37 01 	sts	0x0137, r24
			channel = POT_CHANNEL;
     310:	81 e0       	ldi	r24, 0x01	; 1
     312:	27 c0       	rjmp	.+78     	; 0x362 <__vector_21+0x96>

ISR(ADC_vect){
	switch (channel)
	{
		case CURRENT_CHANNEL:
			current = ADC / 5;
     314:	80 91 78 00 	lds	r24, 0x0078
     318:	90 91 79 00 	lds	r25, 0x0079
     31c:	65 e0       	ldi	r22, 0x05	; 5
     31e:	70 e0       	ldi	r23, 0x00	; 0
     320:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <__udivmodhi4>
     324:	60 93 3a 01 	sts	0x013A, r22
			break;
     328:	1e c0       	rjmp	.+60     	; 0x366 <__vector_21+0x9a>
		case POT_CHANNEL:
			if(flags.mode == POT_MODE)
     32a:	80 91 3d 01 	lds	r24, 0x013D
     32e:	8c 70       	andi	r24, 0x0C	; 12
     330:	88 30       	cpi	r24, 0x08	; 8
     332:	51 f4       	brne	.+20     	; 0x348 <__vector_21+0x7c>
				dcReq = ADC / 10;
     334:	80 91 78 00 	lds	r24, 0x0078
     338:	90 91 79 00 	lds	r25, 0x0079
     33c:	6a e0       	ldi	r22, 0x0A	; 10
     33e:	70 e0       	ldi	r23, 0x00	; 0
     340:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <__udivmodhi4>
     344:	60 93 38 01 	sts	0x0138, r22
			channel = TEMP_CHANNEL;
     348:	83 e0       	ldi	r24, 0x03	; 3
     34a:	0b c0       	rjmp	.+22     	; 0x362 <__vector_21+0x96>
			break;
		case VOLTAGE_CHANNEL:
			voltage = ADC / 30;
     34c:	80 91 78 00 	lds	r24, 0x0078
     350:	90 91 79 00 	lds	r25, 0x0079
     354:	6e e1       	ldi	r22, 0x1E	; 30
     356:	70 e0       	ldi	r23, 0x00	; 0
     358:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <__udivmodhi4>
     35c:	60 93 36 01 	sts	0x0136, r22
			break;
     360:	02 c0       	rjmp	.+4      	; 0x366 <__vector_21+0x9a>
		case TEMP_CHANNEL:
			temperature = ADC / 2;
			channel = POT_CHANNEL;
     362:	80 93 09 01 	sts	0x0109, r24
	/*if(channel == LAST_CHANNEL)
		channel = FIRST_CHANNEL;
	else
		channel ++;
	*/
	adcSelectChannel(channel);
     366:	80 91 09 01 	lds	r24, 0x0109
     36a:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <adcSelectChannel>
	adcStartConversion();
     36e:	0e 94 42 09 	call	0x1284	; 0x1284 <adcStartConversion>
}
     372:	ff 91       	pop	r31
     374:	ef 91       	pop	r30
     376:	bf 91       	pop	r27
     378:	af 91       	pop	r26
     37a:	9f 91       	pop	r25
     37c:	8f 91       	pop	r24
     37e:	7f 91       	pop	r23
     380:	6f 91       	pop	r22
     382:	5f 91       	pop	r21
     384:	4f 91       	pop	r20
     386:	3f 91       	pop	r19
     388:	2f 91       	pop	r18
     38a:	0f 90       	pop	r0
     38c:	0f be       	out	0x3f, r0	; 63
     38e:	0f 90       	pop	r0
     390:	1f 90       	pop	r1
     392:	18 95       	reti

00000394 <__vector_11>:

ISR(TIMER1_COMPA_vect)
{
     394:	1f 92       	push	r1
     396:	0f 92       	push	r0
     398:	0f b6       	in	r0, 0x3f	; 63
     39a:	0f 92       	push	r0
     39c:	11 24       	eor	r1, r1
     39e:	8f 93       	push	r24
	if(dc > 0 && flags.on && flags.dms)
     3a0:	80 91 39 01 	lds	r24, 0x0139
     3a4:	88 23       	and	r24, r24
     3a6:	31 f0       	breq	.+12     	; 0x3b4 <__vector_11+0x20>
     3a8:	80 91 3d 01 	lds	r24, 0x013D
     3ac:	80 73       	andi	r24, 0x30	; 48
     3ae:	80 33       	cpi	r24, 0x30	; 48
     3b0:	09 f4       	brne	.+2      	; 0x3b4 <__vector_11+0x20>
		setBit(PWM_PORT,PWM_BIT);		//Inicia o período em nível alto do PWM
     3b2:	29 9a       	sbi	0x05, 1	; 5
}
     3b4:	8f 91       	pop	r24
     3b6:	0f 90       	pop	r0
     3b8:	0f be       	out	0x3f, r0	; 63
     3ba:	0f 90       	pop	r0
     3bc:	1f 90       	pop	r1
     3be:	18 95       	reti

000003c0 <__vector_12>:

ISR(TIMER1_COMPB_vect)
{
     3c0:	1f 92       	push	r1
     3c2:	0f 92       	push	r0
     3c4:	0f b6       	in	r0, 0x3f	; 63
     3c6:	0f 92       	push	r0
     3c8:	11 24       	eor	r1, r1
     3ca:	8f 93       	push	r24
	if(dc < 100)
     3cc:	80 91 39 01 	lds	r24, 0x0139
     3d0:	84 36       	cpi	r24, 0x64	; 100
     3d2:	08 f4       	brcc	.+2      	; 0x3d6 <__vector_12+0x16>
		clrBit(PWM_PORT,PWM_BIT);		//Inicia o período em nível baixo do PWM
     3d4:	29 98       	cbi	0x05, 1	; 5
}
     3d6:	8f 91       	pop	r24
     3d8:	0f 90       	pop	r0
     3da:	0f be       	out	0x3f, r0	; 63
     3dc:	0f 90       	pop	r0
     3de:	1f 90       	pop	r1
     3e0:	18 95       	reti

000003e2 <__vector_16>:

//60Hz
ISR(TIMER0_OVF_vect)
{
     3e2:	1f 92       	push	r1
     3e4:	0f 92       	push	r0
     3e6:	0f b6       	in	r0, 0x3f	; 63
     3e8:	0f 92       	push	r0
     3ea:	11 24       	eor	r1, r1
     3ec:	2f 93       	push	r18
     3ee:	3f 93       	push	r19
     3f0:	4f 93       	push	r20
     3f2:	5f 93       	push	r21
     3f4:	6f 93       	push	r22
     3f6:	7f 93       	push	r23
     3f8:	8f 93       	push	r24
     3fa:	9f 93       	push	r25
     3fc:	af 93       	push	r26
     3fe:	bf 93       	push	r27
     400:	ef 93       	push	r30
     402:	ff 93       	push	r31
	//setBit(PIND,PD0);
	flags.on = isBitClr(ON_PIN,ON_BIT);
     404:	99 b1       	in	r25, 0x09	; 9
     406:	95 fb       	bst	r25, 5
     408:	99 27       	eor	r25, r25
     40a:	90 f9       	bld	r25, 0
     40c:	21 e0       	ldi	r18, 0x01	; 1
     40e:	92 27       	eor	r25, r18
     410:	80 91 3d 01 	lds	r24, 0x013D
     414:	90 fb       	bst	r25, 0
     416:	84 f9       	bld	r24, 4
     418:	80 93 3d 01 	sts	0x013D, r24
	flags.dms = isBitClr(DMS_PIN,DMS_BIT);
     41c:	99 b1       	in	r25, 0x09	; 9
     41e:	92 95       	swap	r25
     420:	91 70       	andi	r25, 0x01	; 1
     422:	92 27       	eor	r25, r18
     424:	90 fb       	bst	r25, 0
     426:	85 f9       	bld	r24, 5
     428:	80 93 3d 01 	sts	0x013D, r24
	if(flags.on && flags.dms)
     42c:	80 73       	andi	r24, 0x30	; 48
     42e:	90 91 39 01 	lds	r25, 0x0139
     432:	80 33       	cpi	r24, 0x30	; 48
     434:	79 f5       	brne	.+94     	; 0x494 <__vector_16+0xb2>
	{
    	if(dc != dcReq)
     436:	80 91 38 01 	lds	r24, 0x0138
     43a:	98 17       	cp	r25, r24
     43c:	81 f1       	breq	.+96     	; 0x49e <__vector_16+0xbc>
    	{
    		if(dcReq > dc && dcReq > (minDC + 5))
     43e:	98 17       	cp	r25, r24
     440:	30 f5       	brcc	.+76     	; 0x48e <__vector_16+0xac>
     442:	60 91 05 01 	lds	r22, 0x0105
     446:	48 2f       	mov	r20, r24
     448:	50 e0       	ldi	r21, 0x00	; 0
     44a:	26 2f       	mov	r18, r22
     44c:	30 e0       	ldi	r19, 0x00	; 0
     44e:	2b 5f       	subi	r18, 0xFB	; 251
     450:	3f 4f       	sbci	r19, 0xFF	; 255
     452:	24 17       	cp	r18, r20
     454:	35 07       	cpc	r19, r21
     456:	dc f4       	brge	.+54     	; 0x48e <__vector_16+0xac>
    		{
    			if(cont == maxCont)
     458:	20 91 3b 01 	lds	r18, 0x013B
     45c:	30 91 3c 01 	lds	r19, 0x013C
     460:	23 30       	cpi	r18, 0x03	; 3
     462:	31 05       	cpc	r19, r1
     464:	69 f4       	brne	.+26     	; 0x480 <__vector_16+0x9e>
    			{
    				if(dc == 0)
     466:	91 11       	cpse	r25, r1
     468:	02 c0       	rjmp	.+4      	; 0x46e <__vector_16+0x8c>
    					seta_dc(minDC);
     46a:	86 2f       	mov	r24, r22
     46c:	02 c0       	rjmp	.+4      	; 0x472 <__vector_16+0x90>
    				else
    					seta_dc(dc+1);
     46e:	81 e0       	ldi	r24, 0x01	; 1
     470:	89 0f       	add	r24, r25
     472:	0e 94 83 00 	call	0x106	; 0x106 <seta_dc>
    				cont = 0;
     476:	10 92 3c 01 	sts	0x013C, r1
     47a:	10 92 3b 01 	sts	0x013B, r1
     47e:	0f c0       	rjmp	.+30     	; 0x49e <__vector_16+0xbc>
    			}
    			else
    				cont++;
     480:	2f 5f       	subi	r18, 0xFF	; 255
     482:	3f 4f       	sbci	r19, 0xFF	; 255
     484:	30 93 3c 01 	sts	0x013C, r19
     488:	20 93 3b 01 	sts	0x013B, r18
     48c:	08 c0       	rjmp	.+16     	; 0x49e <__vector_16+0xbc>
    		}
    		else
    			if (dcReq < dc)
     48e:	89 17       	cp	r24, r25
     490:	30 f4       	brcc	.+12     	; 0x49e <__vector_16+0xbc>
     492:	03 c0       	rjmp	.+6      	; 0x49a <__vector_16+0xb8>
    				seta_dc(dcReq);			//definição do Duty Cicle do PWM
    	}
	}
	else
	{
		if(dc != 0)					//se o sistema ainda nao esta desligado
     494:	99 23       	and	r25, r25
     496:	19 f0       	breq	.+6      	; 0x49e <__vector_16+0xbc>
			seta_dc(0);				//desliga o sistema
     498:	80 e0       	ldi	r24, 0x00	; 0
     49a:	0e 94 83 00 	call	0x106	; 0x106 <seta_dc>
	}
	if(temperature > criticalTemp && !flags.warnnig)
     49e:	90 91 37 01 	lds	r25, 0x0137
     4a2:	80 91 01 01 	lds	r24, 0x0101
     4a6:	89 17       	cp	r24, r25
     4a8:	50 f4       	brcc	.+20     	; 0x4be <__vector_16+0xdc>
     4aa:	20 91 3d 01 	lds	r18, 0x013D
     4ae:	20 fd       	sbrc	r18, 0
     4b0:	06 c0       	rjmp	.+12     	; 0x4be <__vector_16+0xdc>
	{
		flags.warnnig = 1;
     4b2:	82 2f       	mov	r24, r18
     4b4:	81 60       	ori	r24, 0x01	; 1
     4b6:	80 93 3d 01 	sts	0x013D, r24
		setBit(BUZZER_PORT,BUZZER_BIT);
     4ba:	44 9a       	sbi	0x08, 4	; 8
     4bc:	0a c0       	rjmp	.+20     	; 0x4d2 <__vector_16+0xf0>
	}
	else
		if(temperature < criticalTemp && flags.warnnig)
     4be:	98 17       	cp	r25, r24
     4c0:	40 f4       	brcc	.+16     	; 0x4d2 <__vector_16+0xf0>
     4c2:	80 91 3d 01 	lds	r24, 0x013D
     4c6:	80 ff       	sbrs	r24, 0
     4c8:	04 c0       	rjmp	.+8      	; 0x4d2 <__vector_16+0xf0>
		{
			flags.warnnig = 0;
     4ca:	8e 7f       	andi	r24, 0xFE	; 254
     4cc:	80 93 3d 01 	sts	0x013D, r24
			clrBit(BUZZER_PORT,BUZZER_BIT);
     4d0:	44 98       	cbi	0x08, 4	; 8
		}
}
     4d2:	ff 91       	pop	r31
     4d4:	ef 91       	pop	r30
     4d6:	bf 91       	pop	r27
     4d8:	af 91       	pop	r26
     4da:	9f 91       	pop	r25
     4dc:	8f 91       	pop	r24
     4de:	7f 91       	pop	r23
     4e0:	6f 91       	pop	r22
     4e2:	5f 91       	pop	r21
     4e4:	4f 91       	pop	r20
     4e6:	3f 91       	pop	r19
     4e8:	2f 91       	pop	r18
     4ea:	0f 90       	pop	r0
     4ec:	0f be       	out	0x3f, r0	; 63
     4ee:	0f 90       	pop	r0
     4f0:	1f 90       	pop	r1
     4f2:	18 95       	reti

000004f4 <__vector_18>:

ISR(USART_RX_vect)
{
     4f4:	1f 92       	push	r1
     4f6:	0f 92       	push	r0
     4f8:	0f b6       	in	r0, 0x3f	; 63
     4fa:	0f 92       	push	r0
     4fc:	11 24       	eor	r1, r1
     4fe:	2f 93       	push	r18
     500:	3f 93       	push	r19
     502:	4f 93       	push	r20
     504:	5f 93       	push	r21
     506:	6f 93       	push	r22
     508:	7f 93       	push	r23
     50a:	8f 93       	push	r24
     50c:	9f 93       	push	r25
     50e:	af 93       	push	r26
     510:	bf 93       	push	r27
     512:	ef 93       	push	r30
     514:	ff 93       	push	r31
	usartAddDataToReceiverBuffer(UDR0);
     516:	80 91 c6 00 	lds	r24, 0x00C6
     51a:	0e 94 aa 0a 	call	0x1554	; 0x1554 <usartAddDataToReceiverBuffer>
     51e:	ff 91       	pop	r31
     520:	ef 91       	pop	r30
     522:	bf 91       	pop	r27
     524:	af 91       	pop	r26
     526:	9f 91       	pop	r25
     528:	8f 91       	pop	r24
     52a:	7f 91       	pop	r23
     52c:	6f 91       	pop	r22
     52e:	5f 91       	pop	r21
     530:	4f 91       	pop	r20
     532:	3f 91       	pop	r19
     534:	2f 91       	pop	r18
     536:	0f 90       	pop	r0
     538:	0f be       	out	0x3f, r0	; 63
     53a:	0f 90       	pop	r0
     53c:	1f 90       	pop	r1
     53e:	18 95       	reti

00000540 <usartReceiveStd>:
 * Checks if a reception has been completed
 * -------------------------------------------------------------------------- */

bool_t usartIsReceptionComplete(void)
{
	return isBitSet(UCSR0A, RXC0);
     540:	80 91 c0 00 	lds	r24, 0x00C0
 * standard input heandler
 * -------------------------------------------------------------------------- */

int16 usartReceiveStd(FILE * stream)
{
	while(!usartIsReceptionComplete())
     544:	87 ff       	sbrs	r24, 7
     546:	fc cf       	rjmp	.-8      	; 0x540 <usartReceiveStd>
		;	// Waits until last reception ends
	return (int16)UDR0;
     548:	80 91 c6 00 	lds	r24, 0x00C6
}
     54c:	90 e0       	ldi	r25, 0x00	; 0
     54e:	08 95       	ret

00000550 <globalInterruptEnable>:
 * Enable global interrupts
 * -------------------------------------------------------------------------- */

void globalInterruptEnable(void)
{
	sei();
     550:	78 94       	sei
     552:	08 95       	ret

00000554 <globalInterruptDisable>:
 * Disable global interrupts
 * -------------------------------------------------------------------------- */

void globalInterruptDisable(void)
{
	cli();
     554:	f8 94       	cli
     556:	08 95       	ret

00000558 <systemClockSetPrescaler>:

resultValue_t systemClockSetPrescaler(systemPrescalerValue_t prescaler)
{
	uint8 aux8 = 0;

	switch(prescaler){
     558:	90 e0       	ldi	r25, 0x00	; 0
     55a:	89 30       	cpi	r24, 0x09	; 9
     55c:	91 05       	cpc	r25, r1
     55e:	00 f5       	brcc	.+64     	; 0x5a0 <systemClockSetPrescaler+0x48>
     560:	fc 01       	movw	r30, r24
     562:	e4 5b       	subi	r30, 0xB4	; 180
     564:	ff 4f       	sbci	r31, 0xFF	; 255
     566:	0c 94 4b 0d 	jmp	0x1a96	; 0x1a96 <__tablejump2__>
		case SYSTEM_PRESCALER_OFF:		aux8 = 0;	break;
     56a:	80 e0       	ldi	r24, 0x00	; 0
     56c:	0f c0       	rjmp	.+30     	; 0x58c <systemClockSetPrescaler+0x34>
		case SYSTEM_PRESCALER_2:		aux8 = 1;	break;
		case SYSTEM_PRESCALER_4:		aux8 = 2;	break;
     56e:	82 e0       	ldi	r24, 0x02	; 2
     570:	0d c0       	rjmp	.+26     	; 0x58c <systemClockSetPrescaler+0x34>
		case SYSTEM_PRESCALER_8:		aux8 = 3;	break;
     572:	83 e0       	ldi	r24, 0x03	; 3
     574:	0b c0       	rjmp	.+22     	; 0x58c <systemClockSetPrescaler+0x34>
		case SYSTEM_PRESCALER_16:		aux8 = 4;	break;
     576:	84 e0       	ldi	r24, 0x04	; 4
     578:	09 c0       	rjmp	.+18     	; 0x58c <systemClockSetPrescaler+0x34>
		case SYSTEM_PRESCALER_32:		aux8 = 5;	break;
     57a:	85 e0       	ldi	r24, 0x05	; 5
     57c:	07 c0       	rjmp	.+14     	; 0x58c <systemClockSetPrescaler+0x34>
		case SYSTEM_PRESCALER_64:		aux8 = 6;	break;
     57e:	86 e0       	ldi	r24, 0x06	; 6
     580:	05 c0       	rjmp	.+10     	; 0x58c <systemClockSetPrescaler+0x34>
		case SYSTEM_PRESCALER_128:		aux8 = 7;	break;
     582:	87 e0       	ldi	r24, 0x07	; 7
     584:	03 c0       	rjmp	.+6      	; 0x58c <systemClockSetPrescaler+0x34>
		case SYSTEM_PRESCALER_256:		aux8 = 8;	break;
     586:	88 e0       	ldi	r24, 0x08	; 8
     588:	01 c0       	rjmp	.+2      	; 0x58c <systemClockSetPrescaler+0x34>
{
	uint8 aux8 = 0;

	switch(prescaler){
		case SYSTEM_PRESCALER_OFF:		aux8 = 0;	break;
		case SYSTEM_PRESCALER_2:		aux8 = 1;	break;
     58a:	81 e0       	ldi	r24, 0x01	; 1
		case SYSTEM_PRESCALER_64:		aux8 = 6;	break;
		case SYSTEM_PRESCALER_128:		aux8 = 7;	break;
		case SYSTEM_PRESCALER_256:		aux8 = 8;	break;
		default:						return RESULT_UNSUPPORTED_VALUE;	break;
	}
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
     58c:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     58e:	f8 94       	cli
		CLKPR = 0b10000000;
     590:	20 e8       	ldi	r18, 0x80	; 128
     592:	20 93 61 00 	sts	0x0061, r18
		CLKPR = aux8;
     596:	80 93 61 00 	sts	0x0061, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     59a:	9f bf       	out	0x3f, r25	; 63
	}

	return RESULT_OK;
     59c:	80 e0       	ldi	r24, 0x00	; 0
     59e:	08 95       	ret
		case SYSTEM_PRESCALER_16:		aux8 = 4;	break;
		case SYSTEM_PRESCALER_32:		aux8 = 5;	break;
		case SYSTEM_PRESCALER_64:		aux8 = 6;	break;
		case SYSTEM_PRESCALER_128:		aux8 = 7;	break;
		case SYSTEM_PRESCALER_256:		aux8 = 8;	break;
		default:						return RESULT_UNSUPPORTED_VALUE;	break;
     5a0:	87 e0       	ldi	r24, 0x07	; 7
		CLKPR = 0b10000000;
		CLKPR = aux8;
	}

	return RESULT_OK;
}
     5a2:	08 95       	ret

000005a4 <eepromSetOperationMode>:

void eepromSetOperationMode(eepromMode_t mode)
{
	uint8 aux8 = 0;

	aux8 = EECR & ~(0x03 << EEPM0);
     5a4:	2f b3       	in	r18, 0x1f	; 31
	aux8 |= (mode << EEPM0);
     5a6:	30 e1       	ldi	r19, 0x10	; 16
     5a8:	83 9f       	mul	r24, r19
     5aa:	c0 01       	movw	r24, r0
     5ac:	11 24       	eor	r1, r1

void eepromSetOperationMode(eepromMode_t mode)
{
	uint8 aux8 = 0;

	aux8 = EECR & ~(0x03 << EEPM0);
     5ae:	2f 7c       	andi	r18, 0xCF	; 207
	aux8 |= (mode << EEPM0);
     5b0:	28 2b       	or	r18, r24
	EECR = aux8;
     5b2:	2f bb       	out	0x1f, r18	; 31
     5b4:	08 95       	ret

000005b6 <eepromReadyActivateInterrupt>:
 * Activates the EEPROM ready interrupt
 * -------------------------------------------------------------------------- */

void eepromReadyActivateInterrupt(void)
{
	setBit(EECR, EERIE);
     5b6:	fb 9a       	sbi	0x1f, 3	; 31
     5b8:	08 95       	ret

000005ba <eepromReadyDeactivateInterrupt>:
 * Deactivates the EEPROM ready interrupt
 * -------------------------------------------------------------------------- */

void eepromReadyDeactivateInterrupt(void)
{
	clrBit(EECR, EERIE);
     5ba:	fb 98       	cbi	0x1f, 3	; 31
     5bc:	08 95       	ret

000005be <eepromWrite>:
 * Writes a byte in the specified address in the EEPROM
 * -------------------------------------------------------------------------- */

void eepromWrite(uint16 address, uint8 data)
{
	waitUntilBitIsClear(EECR, EEPE);
     5be:	f9 99       	sbic	0x1f, 1	; 31
     5c0:	fe cf       	rjmp	.-4      	; 0x5be <eepromWrite>
	waitUntilBitIsClear(SPMEN, SPMCSR);
     5c2:	27 b7       	in	r18, 0x37	; 55
	EEAR = (address & EEPROM_ADDRESS_MASK);
     5c4:	93 70       	andi	r25, 0x03	; 3
     5c6:	92 bd       	out	0x22, r25	; 34
     5c8:	81 bd       	out	0x21, r24	; 33
	EEDR = data;
     5ca:	60 bd       	out	0x20, r22	; 32
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
     5cc:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     5ce:	f8 94       	cli
		setBit(EECR, EEMPE);
     5d0:	fa 9a       	sbi	0x1f, 2	; 31
		setBit(EECR, EEPE);
     5d2:	f9 9a       	sbi	0x1f, 1	; 31
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     5d4:	8f bf       	out	0x3f, r24	; 63
    __asm__ volatile ("" ::: "memory");
     5d6:	08 95       	ret

000005d8 <eepromRead>:
 * Reads a byte from the specified address in the EEPROM
 * -------------------------------------------------------------------------- */

uint8 eepromRead(uint16 address)
{
	waitUntilBitIsClear(EECR, EEPE);
     5d8:	f9 99       	sbic	0x1f, 1	; 31
     5da:	fe cf       	rjmp	.-4      	; 0x5d8 <eepromRead>
	EEAR = (address & EEPROM_ADDRESS_MASK);
     5dc:	93 70       	andi	r25, 0x03	; 3
     5de:	92 bd       	out	0x22, r25	; 34
     5e0:	81 bd       	out	0x21, r24	; 33
	setBit(EECR, EERE);
     5e2:	f8 9a       	sbi	0x1f, 0	; 31
	return EEDR;
     5e4:	80 b5       	in	r24, 0x20	; 32
}
     5e6:	08 95       	ret

000005e8 <globalPullUpEnable>:
 * Enables the global pull-up
 * -------------------------------------------------------------------------- */

void globalPullUpEnable(void)
{
	clrBit(MCUCR, PUD);
     5e8:	85 b7       	in	r24, 0x35	; 53
     5ea:	8f 7e       	andi	r24, 0xEF	; 239
     5ec:	85 bf       	out	0x35, r24	; 53
     5ee:	08 95       	ret

000005f0 <pullUpDisable>:
 * Disables the global pull-up
 * -------------------------------------------------------------------------- */

void pullUpDisable(void)
{
	setBit(MCUCR, PUD);
     5f0:	85 b7       	in	r24, 0x35	; 53
     5f2:	80 61       	ori	r24, 0x10	; 16
     5f4:	85 bf       	out	0x35, r24	; 53
     5f6:	08 95       	ret

000005f8 <int0Config>:

resultValue_t int0Config(portMode_t port, senseMode_t sense)
{
	uint8 aux8 = 0;

	switch(port){
     5f8:	82 30       	cpi	r24, 0x02	; 2
     5fa:	79 f0       	breq	.+30     	; 0x61a <int0Config+0x22>
     5fc:	30 f4       	brcc	.+12     	; 0x60a <int0Config+0x12>
     5fe:	88 23       	and	r24, r24
     600:	49 f0       	breq	.+18     	; 0x614 <int0Config+0x1c>
     602:	81 30       	cpi	r24, 0x01	; 1
     604:	11 f5       	brne	.+68     	; 0x64a <int0Config+0x52>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD2); setBit(DDRD, PD2);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD2); setBit(DDRD, PD2);	break;
     606:	5a 9a       	sbi	0x0b, 2	; 11
     608:	06 c0       	rjmp	.+12     	; 0x616 <int0Config+0x1e>

resultValue_t int0Config(portMode_t port, senseMode_t sense)
{
	uint8 aux8 = 0;

	switch(port){
     60a:	83 30       	cpi	r24, 0x03	; 3
     60c:	41 f0       	breq	.+16     	; 0x61e <int0Config+0x26>
     60e:	8f 3f       	cpi	r24, 0xFF	; 255
     610:	41 f0       	breq	.+16     	; 0x622 <int0Config+0x2a>
     612:	1b c0       	rjmp	.+54     	; 0x64a <int0Config+0x52>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD2); setBit(DDRD, PD2);	break;
     614:	5a 98       	cbi	0x0b, 2	; 11
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD2); setBit(DDRD, PD2);	break;
     616:	52 9a       	sbi	0x0a, 2	; 10
     618:	04 c0       	rjmp	.+8      	; 0x622 <int0Config+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD2); clrBit(DDRD, PD2);	break;
     61a:	5a 98       	cbi	0x0b, 2	; 11
     61c:	01 c0       	rjmp	.+2      	; 0x620 <int0Config+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD2); clrBit(DDRD, PD2);	break;
     61e:	5a 9a       	sbi	0x0b, 2	; 11
     620:	52 98       	cbi	0x0a, 2	; 10
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}

	if(sense != SENSE_NO_CHANGE){
     622:	6f 3f       	cpi	r22, 0xFF	; 255
     624:	a1 f0       	breq	.+40     	; 0x64e <int0Config+0x56>
		aux8 = EICRA & ~(0x03 << ISC00);
     626:	80 91 69 00 	lds	r24, 0x0069
     62a:	8c 7f       	andi	r24, 0xFC	; 252
		switch(sense){
     62c:	61 30       	cpi	r22, 0x01	; 1
     62e:	39 f0       	breq	.+14     	; 0x63e <int0Config+0x46>
     630:	48 f0       	brcs	.+18     	; 0x644 <int0Config+0x4c>
     632:	62 30       	cpi	r22, 0x02	; 2
     634:	31 f0       	breq	.+12     	; 0x642 <int0Config+0x4a>
     636:	63 30       	cpi	r22, 0x03	; 3
     638:	61 f4       	brne	.+24     	; 0x652 <int0Config+0x5a>
			case SENSE_LOW_LEVEL:		break;
			case SENSE_ANY_EDGE:		aux8 |= (0x01 << ISC00);			break;
			case SENSE_FALLING_EDGE:	aux8 |= (0x02 << ISC00);			break;
			case SENSE_RISING_EDGE:		aux8 |= (0x03 << ISC00);			break;
     63a:	83 60       	ori	r24, 0x03	; 3
     63c:	03 c0       	rjmp	.+6      	; 0x644 <int0Config+0x4c>

	if(sense != SENSE_NO_CHANGE){
		aux8 = EICRA & ~(0x03 << ISC00);
		switch(sense){
			case SENSE_LOW_LEVEL:		break;
			case SENSE_ANY_EDGE:		aux8 |= (0x01 << ISC00);			break;
     63e:	81 60       	ori	r24, 0x01	; 1
     640:	01 c0       	rjmp	.+2      	; 0x644 <int0Config+0x4c>
			case SENSE_FALLING_EDGE:	aux8 |= (0x02 << ISC00);			break;
     642:	82 60       	ori	r24, 0x02	; 2
			case SENSE_RISING_EDGE:		aux8 |= (0x03 << ISC00);			break;
			case SENSE_NO_CHANGE:		break;
			default:					return RESULT_INT_SENSE_VALUE_UNSUPPORTED;	break;
		}
		EICRA = aux8;
     644:	80 93 69 00 	sts	0x0069, r24
     648:	02 c0       	rjmp	.+4      	; 0x64e <int0Config+0x56>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD2); setBit(DDRD, PD2);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD2); setBit(DDRD, PD2);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD2); clrBit(DDRD, PD2);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD2); clrBit(DDRD, PD2);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     64a:	81 e0       	ldi	r24, 0x01	; 1
     64c:	08 95       	ret
			default:					return RESULT_INT_SENSE_VALUE_UNSUPPORTED;	break;
		}
		EICRA = aux8;
	}

	return RESULT_OK;
     64e:	80 e0       	ldi	r24, 0x00	; 0
     650:	08 95       	ret
			case SENSE_LOW_LEVEL:		break;
			case SENSE_ANY_EDGE:		aux8 |= (0x01 << ISC00);			break;
			case SENSE_FALLING_EDGE:	aux8 |= (0x02 << ISC00);			break;
			case SENSE_RISING_EDGE:		aux8 |= (0x03 << ISC00);			break;
			case SENSE_NO_CHANGE:		break;
			default:					return RESULT_INT_SENSE_VALUE_UNSUPPORTED;	break;
     652:	82 e0       	ldi	r24, 0x02	; 2
		}
		EICRA = aux8;
	}

	return RESULT_OK;
}
     654:	08 95       	ret

00000656 <int0ActivateInterrupt>:
 * Activates the external interrupt int0
 * -------------------------------------------------------------------------- */

void int0ActivateInterrupt(void)
{
	setBit(EIMSK, INT0);
     656:	e8 9a       	sbi	0x1d, 0	; 29
     658:	08 95       	ret

0000065a <int0DeactivateInterrupt>:
 * Deactivates the external interrupt int0
 * -------------------------------------------------------------------------- */

void int0DeactivateInterrupt(void)
{
	clrBit(EIMSK, INT0);
     65a:	e8 98       	cbi	0x1d, 0	; 29
     65c:	08 95       	ret

0000065e <int0ClearInterruptRequest>:
 * Clears the external interrupt int0 request
 * -------------------------------------------------------------------------- */

void int0ClearInterruptRequest(void)
{
	setBit(EIFR, INTF0);
     65e:	e0 9a       	sbi	0x1c, 0	; 28
     660:	08 95       	ret

00000662 <int1Config>:

resultValue_t int1Config(portMode_t port, senseMode_t sense)
{
	uint8 aux8 = 0;

	switch(port){
     662:	82 30       	cpi	r24, 0x02	; 2
     664:	79 f0       	breq	.+30     	; 0x684 <int1Config+0x22>
     666:	30 f4       	brcc	.+12     	; 0x674 <int1Config+0x12>
     668:	88 23       	and	r24, r24
     66a:	49 f0       	breq	.+18     	; 0x67e <int1Config+0x1c>
     66c:	81 30       	cpi	r24, 0x01	; 1
     66e:	11 f5       	brne	.+68     	; 0x6b4 <int1Config+0x52>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD3); setBit(DDRD, PD3);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD3); setBit(DDRD, PD3);	break;
     670:	5b 9a       	sbi	0x0b, 3	; 11
     672:	06 c0       	rjmp	.+12     	; 0x680 <int1Config+0x1e>

resultValue_t int1Config(portMode_t port, senseMode_t sense)
{
	uint8 aux8 = 0;

	switch(port){
     674:	83 30       	cpi	r24, 0x03	; 3
     676:	41 f0       	breq	.+16     	; 0x688 <int1Config+0x26>
     678:	8f 3f       	cpi	r24, 0xFF	; 255
     67a:	41 f0       	breq	.+16     	; 0x68c <int1Config+0x2a>
     67c:	1b c0       	rjmp	.+54     	; 0x6b4 <int1Config+0x52>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD3); setBit(DDRD, PD3);	break;
     67e:	5b 98       	cbi	0x0b, 3	; 11
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD3); setBit(DDRD, PD3);	break;
     680:	53 9a       	sbi	0x0a, 3	; 10
     682:	04 c0       	rjmp	.+8      	; 0x68c <int1Config+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD3); clrBit(DDRD, PD3);	break;
     684:	5b 98       	cbi	0x0b, 3	; 11
     686:	01 c0       	rjmp	.+2      	; 0x68a <int1Config+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD3); clrBit(DDRD, PD3);	break;
     688:	5b 9a       	sbi	0x0b, 3	; 11
     68a:	53 98       	cbi	0x0a, 3	; 10
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}

	if(sense != SENSE_NO_CHANGE){
     68c:	6f 3f       	cpi	r22, 0xFF	; 255
     68e:	a1 f0       	breq	.+40     	; 0x6b8 <int1Config+0x56>
		aux8 = EICRA & ~(0x03 << ISC10);
     690:	80 91 69 00 	lds	r24, 0x0069
     694:	83 7f       	andi	r24, 0xF3	; 243
		switch(sense){
     696:	61 30       	cpi	r22, 0x01	; 1
     698:	39 f0       	breq	.+14     	; 0x6a8 <int1Config+0x46>
     69a:	48 f0       	brcs	.+18     	; 0x6ae <int1Config+0x4c>
     69c:	62 30       	cpi	r22, 0x02	; 2
     69e:	31 f0       	breq	.+12     	; 0x6ac <int1Config+0x4a>
     6a0:	63 30       	cpi	r22, 0x03	; 3
     6a2:	61 f4       	brne	.+24     	; 0x6bc <int1Config+0x5a>
			case SENSE_LOW_LEVEL:		break;
			case SENSE_ANY_EDGE:		aux8 |= (0x01 << ISC10);			break;
			case SENSE_FALLING_EDGE:	aux8 |= (0x02 << ISC10);			break;
			case SENSE_RISING_EDGE:		aux8 |= (0x03 << ISC10);			break;
     6a4:	8c 60       	ori	r24, 0x0C	; 12
     6a6:	03 c0       	rjmp	.+6      	; 0x6ae <int1Config+0x4c>

	if(sense != SENSE_NO_CHANGE){
		aux8 = EICRA & ~(0x03 << ISC10);
		switch(sense){
			case SENSE_LOW_LEVEL:		break;
			case SENSE_ANY_EDGE:		aux8 |= (0x01 << ISC10);			break;
     6a8:	84 60       	ori	r24, 0x04	; 4
     6aa:	01 c0       	rjmp	.+2      	; 0x6ae <int1Config+0x4c>
			case SENSE_FALLING_EDGE:	aux8 |= (0x02 << ISC10);			break;
     6ac:	88 60       	ori	r24, 0x08	; 8
			case SENSE_RISING_EDGE:		aux8 |= (0x03 << ISC10);			break;
			case SENSE_NO_CHANGE:		break;
			default:					return RESULT_INT_SENSE_VALUE_UNSUPPORTED;	break;
		}
		EICRA = aux8;
     6ae:	80 93 69 00 	sts	0x0069, r24
     6b2:	02 c0       	rjmp	.+4      	; 0x6b8 <int1Config+0x56>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD3); setBit(DDRD, PD3);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD3); setBit(DDRD, PD3);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD3); clrBit(DDRD, PD3);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD3); clrBit(DDRD, PD3);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     6b4:	81 e0       	ldi	r24, 0x01	; 1
     6b6:	08 95       	ret
			default:					return RESULT_INT_SENSE_VALUE_UNSUPPORTED;	break;
		}
		EICRA = aux8;
	}

	return RESULT_OK;
     6b8:	80 e0       	ldi	r24, 0x00	; 0
     6ba:	08 95       	ret
			case SENSE_LOW_LEVEL:		break;
			case SENSE_ANY_EDGE:		aux8 |= (0x01 << ISC10);			break;
			case SENSE_FALLING_EDGE:	aux8 |= (0x02 << ISC10);			break;
			case SENSE_RISING_EDGE:		aux8 |= (0x03 << ISC10);			break;
			case SENSE_NO_CHANGE:		break;
			default:					return RESULT_INT_SENSE_VALUE_UNSUPPORTED;	break;
     6bc:	82 e0       	ldi	r24, 0x02	; 2
		}
		EICRA = aux8;
	}

	return RESULT_OK;
}
     6be:	08 95       	ret

000006c0 <int1ActivateInterrupt>:
 * Activates the external interrupt int1
 * -------------------------------------------------------------------------- */

void int1ActivateInterrupt(void)
{
	setBit(EIMSK, INT1);
     6c0:	e9 9a       	sbi	0x1d, 1	; 29
     6c2:	08 95       	ret

000006c4 <int1DeactivateInterrupt>:
 * Deactivates the external interrupt int1
 * -------------------------------------------------------------------------- */

void int1DeactivateInterrupt(void)
{
	clrBit(EIMSK, INT1);
     6c4:	e9 98       	cbi	0x1d, 1	; 29
     6c6:	08 95       	ret

000006c8 <int1ClearInterruptRequest>:
 * Clears the external interrupt int1 request
 * -------------------------------------------------------------------------- */

void int1ClearInterruptRequest(void)
{
	setBit(EIFR, INTF1);
     6c8:	e1 9a       	sbi	0x1c, 1	; 28
     6ca:	08 95       	ret

000006cc <pcint7_0Enable>:
 * Enables the external interrupt pcint in port B
 * -------------------------------------------------------------------------- */

void pcint7_0Enable(void)
{
	setBit(PCICR, PCIE0);
     6cc:	e8 e6       	ldi	r30, 0x68	; 104
     6ce:	f0 e0       	ldi	r31, 0x00	; 0
     6d0:	80 81       	ld	r24, Z
     6d2:	81 60       	ori	r24, 0x01	; 1
     6d4:	80 83       	st	Z, r24
     6d6:	08 95       	ret

000006d8 <pcint7_0Disable>:
 * Disables the external interrupt pcint in port B
 * -------------------------------------------------------------------------- */

void pcint7_0Disable(void)
{
	clrBit(PCICR, PCIE0);
     6d8:	e8 e6       	ldi	r30, 0x68	; 104
     6da:	f0 e0       	ldi	r31, 0x00	; 0
     6dc:	80 81       	ld	r24, Z
     6de:	8e 7f       	andi	r24, 0xFE	; 254
     6e0:	80 83       	st	Z, r24
     6e2:	08 95       	ret

000006e4 <pcint7_0ClearInterruptRequest>:
 * Disables the external interrupt pcint in port B
 * -------------------------------------------------------------------------- */

void pcint7_0ClearInterruptRequest(void)
{
	setBit(PCIFR, PCIF0);
     6e4:	d8 9a       	sbi	0x1b, 0	; 27
     6e6:	08 95       	ret

000006e8 <pcint0ActivateInterrupt>:
 * Activates the external interrupt pcint0 and configures port mode in PB0
 * -------------------------------------------------------------------------- */

resultValue_t pcint0ActivateInterrupt(portMode_t port)
{
	switch(port){
     6e8:	82 30       	cpi	r24, 0x02	; 2
     6ea:	79 f0       	breq	.+30     	; 0x70a <pcint0ActivateInterrupt+0x22>
     6ec:	30 f4       	brcc	.+12     	; 0x6fa <pcint0ActivateInterrupt+0x12>
     6ee:	88 23       	and	r24, r24
     6f0:	49 f0       	breq	.+18     	; 0x704 <pcint0ActivateInterrupt+0x1c>
     6f2:	81 30       	cpi	r24, 0x01	; 1
     6f4:	a9 f4       	brne	.+42     	; 0x720 <pcint0ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB0); setBit(DDRB, PB0);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB0); setBit(DDRB, PB0);	break;
     6f6:	28 9a       	sbi	0x05, 0	; 5
     6f8:	06 c0       	rjmp	.+12     	; 0x706 <pcint0ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint0 and configures port mode in PB0
 * -------------------------------------------------------------------------- */

resultValue_t pcint0ActivateInterrupt(portMode_t port)
{
	switch(port){
     6fa:	83 30       	cpi	r24, 0x03	; 3
     6fc:	41 f0       	breq	.+16     	; 0x70e <pcint0ActivateInterrupt+0x26>
     6fe:	8f 3f       	cpi	r24, 0xFF	; 255
     700:	41 f0       	breq	.+16     	; 0x712 <pcint0ActivateInterrupt+0x2a>
     702:	0e c0       	rjmp	.+28     	; 0x720 <pcint0ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB0); setBit(DDRB, PB0);	break;
     704:	28 98       	cbi	0x05, 0	; 5
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB0); setBit(DDRB, PB0);	break;
     706:	20 9a       	sbi	0x04, 0	; 4
     708:	04 c0       	rjmp	.+8      	; 0x712 <pcint0ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB0); clrBit(DDRB, PB0);	break;
     70a:	28 98       	cbi	0x05, 0	; 5
     70c:	01 c0       	rjmp	.+2      	; 0x710 <pcint0ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB0); clrBit(DDRB, PB0);	break;
     70e:	28 9a       	sbi	0x05, 0	; 5
     710:	20 98       	cbi	0x04, 0	; 4
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK0, PCINT0);
     712:	80 91 6b 00 	lds	r24, 0x006B
     716:	81 60       	ori	r24, 0x01	; 1
     718:	80 93 6b 00 	sts	0x006B, r24
	return RESULT_OK;
     71c:	80 e0       	ldi	r24, 0x00	; 0
     71e:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB0); setBit(DDRB, PB0);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB0); setBit(DDRB, PB0);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB0); clrBit(DDRB, PB0);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB0); clrBit(DDRB, PB0);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     720:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK0, PCINT0);
	return RESULT_OK;
}
     722:	08 95       	ret

00000724 <pcint0DeactivateInterrupt>:
 * Deactivates the external interrupt pcint0 in PB0
 * -------------------------------------------------------------------------- */

void pcint0DeactivateInterrupt(void)
{
	clrBit(PCMSK0, PCINT0);
     724:	eb e6       	ldi	r30, 0x6B	; 107
     726:	f0 e0       	ldi	r31, 0x00	; 0
     728:	80 81       	ld	r24, Z
     72a:	8e 7f       	andi	r24, 0xFE	; 254
     72c:	80 83       	st	Z, r24
     72e:	08 95       	ret

00000730 <pcint1ActivateInterrupt>:
 * Activates the external interrupt pcint1 and configures port mode in PB1
 * -------------------------------------------------------------------------- */

resultValue_t pcint1ActivateInterrupt(portMode_t port)
{
	switch(port){
     730:	82 30       	cpi	r24, 0x02	; 2
     732:	79 f0       	breq	.+30     	; 0x752 <pcint1ActivateInterrupt+0x22>
     734:	30 f4       	brcc	.+12     	; 0x742 <pcint1ActivateInterrupt+0x12>
     736:	88 23       	and	r24, r24
     738:	49 f0       	breq	.+18     	; 0x74c <pcint1ActivateInterrupt+0x1c>
     73a:	81 30       	cpi	r24, 0x01	; 1
     73c:	a9 f4       	brne	.+42     	; 0x768 <pcint1ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB1); setBit(DDRB, PB1);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB1); setBit(DDRB, PB1);	break;
     73e:	29 9a       	sbi	0x05, 1	; 5
     740:	06 c0       	rjmp	.+12     	; 0x74e <pcint1ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint1 and configures port mode in PB1
 * -------------------------------------------------------------------------- */

resultValue_t pcint1ActivateInterrupt(portMode_t port)
{
	switch(port){
     742:	83 30       	cpi	r24, 0x03	; 3
     744:	41 f0       	breq	.+16     	; 0x756 <pcint1ActivateInterrupt+0x26>
     746:	8f 3f       	cpi	r24, 0xFF	; 255
     748:	41 f0       	breq	.+16     	; 0x75a <pcint1ActivateInterrupt+0x2a>
     74a:	0e c0       	rjmp	.+28     	; 0x768 <pcint1ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB1); setBit(DDRB, PB1);	break;
     74c:	29 98       	cbi	0x05, 1	; 5
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB1); setBit(DDRB, PB1);	break;
     74e:	21 9a       	sbi	0x04, 1	; 4
     750:	04 c0       	rjmp	.+8      	; 0x75a <pcint1ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB1); clrBit(DDRB, PB1);	break;
     752:	29 98       	cbi	0x05, 1	; 5
     754:	01 c0       	rjmp	.+2      	; 0x758 <pcint1ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB1); clrBit(DDRB, PB1);	break;
     756:	29 9a       	sbi	0x05, 1	; 5
     758:	21 98       	cbi	0x04, 1	; 4
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK0, PCINT1);
     75a:	80 91 6b 00 	lds	r24, 0x006B
     75e:	82 60       	ori	r24, 0x02	; 2
     760:	80 93 6b 00 	sts	0x006B, r24
	return RESULT_OK;
     764:	80 e0       	ldi	r24, 0x00	; 0
     766:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB1); setBit(DDRB, PB1);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB1); setBit(DDRB, PB1);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB1); clrBit(DDRB, PB1);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB1); clrBit(DDRB, PB1);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     768:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK0, PCINT1);
	return RESULT_OK;
}
     76a:	08 95       	ret

0000076c <pcint1DeactivateInterrupt>:
 * Deactivates the external interrupt pcint1 in PB1
 * -------------------------------------------------------------------------- */

void pcint1DeactivateInterrupt(void)
{
	clrBit(PCMSK0, PCINT1);
     76c:	eb e6       	ldi	r30, 0x6B	; 107
     76e:	f0 e0       	ldi	r31, 0x00	; 0
     770:	80 81       	ld	r24, Z
     772:	8d 7f       	andi	r24, 0xFD	; 253
     774:	80 83       	st	Z, r24
     776:	08 95       	ret

00000778 <pcint2ActivateInterrupt>:
 * Activates the external interrupt pcint2 and configures port mode in PB2
 * -------------------------------------------------------------------------- */

resultValue_t pcint2ActivateInterrupt(portMode_t port)
{
	switch(port){
     778:	82 30       	cpi	r24, 0x02	; 2
     77a:	79 f0       	breq	.+30     	; 0x79a <pcint2ActivateInterrupt+0x22>
     77c:	30 f4       	brcc	.+12     	; 0x78a <pcint2ActivateInterrupt+0x12>
     77e:	88 23       	and	r24, r24
     780:	49 f0       	breq	.+18     	; 0x794 <pcint2ActivateInterrupt+0x1c>
     782:	81 30       	cpi	r24, 0x01	; 1
     784:	a9 f4       	brne	.+42     	; 0x7b0 <pcint2ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB2); setBit(DDRB, PB2);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB2); setBit(DDRB, PB2);	break;
     786:	2a 9a       	sbi	0x05, 2	; 5
     788:	06 c0       	rjmp	.+12     	; 0x796 <pcint2ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint2 and configures port mode in PB2
 * -------------------------------------------------------------------------- */

resultValue_t pcint2ActivateInterrupt(portMode_t port)
{
	switch(port){
     78a:	83 30       	cpi	r24, 0x03	; 3
     78c:	41 f0       	breq	.+16     	; 0x79e <pcint2ActivateInterrupt+0x26>
     78e:	8f 3f       	cpi	r24, 0xFF	; 255
     790:	41 f0       	breq	.+16     	; 0x7a2 <pcint2ActivateInterrupt+0x2a>
     792:	0e c0       	rjmp	.+28     	; 0x7b0 <pcint2ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB2); setBit(DDRB, PB2);	break;
     794:	2a 98       	cbi	0x05, 2	; 5
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB2); setBit(DDRB, PB2);	break;
     796:	22 9a       	sbi	0x04, 2	; 4
     798:	04 c0       	rjmp	.+8      	; 0x7a2 <pcint2ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB2); clrBit(DDRB, PB2);	break;
     79a:	2a 98       	cbi	0x05, 2	; 5
     79c:	01 c0       	rjmp	.+2      	; 0x7a0 <pcint2ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB2); clrBit(DDRB, PB2);	break;
     79e:	2a 9a       	sbi	0x05, 2	; 5
     7a0:	22 98       	cbi	0x04, 2	; 4
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK0, PCINT2);
     7a2:	80 91 6b 00 	lds	r24, 0x006B
     7a6:	84 60       	ori	r24, 0x04	; 4
     7a8:	80 93 6b 00 	sts	0x006B, r24
	return RESULT_OK;
     7ac:	80 e0       	ldi	r24, 0x00	; 0
     7ae:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB2); setBit(DDRB, PB2);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB2); setBit(DDRB, PB2);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB2); clrBit(DDRB, PB2);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB2); clrBit(DDRB, PB2);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     7b0:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK0, PCINT2);
	return RESULT_OK;
}
     7b2:	08 95       	ret

000007b4 <pcint2DeactivateInterrupt>:
 * Deactivates the external interrupt pcint2 in PB2
 * -------------------------------------------------------------------------- */

void pcint2DeactivateInterrupt(void)
{
	clrBit(PCMSK0, PCINT2);
     7b4:	eb e6       	ldi	r30, 0x6B	; 107
     7b6:	f0 e0       	ldi	r31, 0x00	; 0
     7b8:	80 81       	ld	r24, Z
     7ba:	8b 7f       	andi	r24, 0xFB	; 251
     7bc:	80 83       	st	Z, r24
     7be:	08 95       	ret

000007c0 <pcint3ActivateInterrupt>:
 * Activates the external interrupt pcint3 and configures port mode in PB3
 * -------------------------------------------------------------------------- */

resultValue_t pcint3ActivateInterrupt(portMode_t port)
{
	switch(port){
     7c0:	82 30       	cpi	r24, 0x02	; 2
     7c2:	79 f0       	breq	.+30     	; 0x7e2 <pcint3ActivateInterrupt+0x22>
     7c4:	30 f4       	brcc	.+12     	; 0x7d2 <pcint3ActivateInterrupt+0x12>
     7c6:	88 23       	and	r24, r24
     7c8:	49 f0       	breq	.+18     	; 0x7dc <pcint3ActivateInterrupt+0x1c>
     7ca:	81 30       	cpi	r24, 0x01	; 1
     7cc:	a9 f4       	brne	.+42     	; 0x7f8 <pcint3ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB3); setBit(DDRB, PB3);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB3); setBit(DDRB, PB3);	break;
     7ce:	2b 9a       	sbi	0x05, 3	; 5
     7d0:	06 c0       	rjmp	.+12     	; 0x7de <pcint3ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint3 and configures port mode in PB3
 * -------------------------------------------------------------------------- */

resultValue_t pcint3ActivateInterrupt(portMode_t port)
{
	switch(port){
     7d2:	83 30       	cpi	r24, 0x03	; 3
     7d4:	41 f0       	breq	.+16     	; 0x7e6 <pcint3ActivateInterrupt+0x26>
     7d6:	8f 3f       	cpi	r24, 0xFF	; 255
     7d8:	41 f0       	breq	.+16     	; 0x7ea <pcint3ActivateInterrupt+0x2a>
     7da:	0e c0       	rjmp	.+28     	; 0x7f8 <pcint3ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB3); setBit(DDRB, PB3);	break;
     7dc:	2b 98       	cbi	0x05, 3	; 5
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB3); setBit(DDRB, PB3);	break;
     7de:	23 9a       	sbi	0x04, 3	; 4
     7e0:	04 c0       	rjmp	.+8      	; 0x7ea <pcint3ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB3); clrBit(DDRB, PB3);	break;
     7e2:	2b 98       	cbi	0x05, 3	; 5
     7e4:	01 c0       	rjmp	.+2      	; 0x7e8 <pcint3ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB3); clrBit(DDRB, PB3);	break;
     7e6:	2b 9a       	sbi	0x05, 3	; 5
     7e8:	23 98       	cbi	0x04, 3	; 4
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK0, PCINT3);
     7ea:	80 91 6b 00 	lds	r24, 0x006B
     7ee:	88 60       	ori	r24, 0x08	; 8
     7f0:	80 93 6b 00 	sts	0x006B, r24
	return RESULT_OK;
     7f4:	80 e0       	ldi	r24, 0x00	; 0
     7f6:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB3); setBit(DDRB, PB3);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB3); setBit(DDRB, PB3);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB3); clrBit(DDRB, PB3);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB3); clrBit(DDRB, PB3);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     7f8:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK0, PCINT3);
	return RESULT_OK;
}
     7fa:	08 95       	ret

000007fc <pcint3DeactivateInterrupt>:
 * Deactivates the external interrupt pcint3 in PB3
 * -------------------------------------------------------------------------- */

void pcint3DeactivateInterrupt(void)
{
	clrBit(PCMSK0, PCINT3);
     7fc:	eb e6       	ldi	r30, 0x6B	; 107
     7fe:	f0 e0       	ldi	r31, 0x00	; 0
     800:	80 81       	ld	r24, Z
     802:	87 7f       	andi	r24, 0xF7	; 247
     804:	80 83       	st	Z, r24
     806:	08 95       	ret

00000808 <pcint4ActivateInterrupt>:
 * Activates the external interrupt pcint4 and configures port mode in PB4
 * -------------------------------------------------------------------------- */

resultValue_t pcint4ActivateInterrupt(portMode_t port)
{
	switch(port){
     808:	82 30       	cpi	r24, 0x02	; 2
     80a:	79 f0       	breq	.+30     	; 0x82a <pcint4ActivateInterrupt+0x22>
     80c:	30 f4       	brcc	.+12     	; 0x81a <pcint4ActivateInterrupt+0x12>
     80e:	88 23       	and	r24, r24
     810:	49 f0       	breq	.+18     	; 0x824 <pcint4ActivateInterrupt+0x1c>
     812:	81 30       	cpi	r24, 0x01	; 1
     814:	a9 f4       	brne	.+42     	; 0x840 <pcint4ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB4); setBit(DDRB, PB4);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB4); setBit(DDRB, PB4);	break;
     816:	2c 9a       	sbi	0x05, 4	; 5
     818:	06 c0       	rjmp	.+12     	; 0x826 <pcint4ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint4 and configures port mode in PB4
 * -------------------------------------------------------------------------- */

resultValue_t pcint4ActivateInterrupt(portMode_t port)
{
	switch(port){
     81a:	83 30       	cpi	r24, 0x03	; 3
     81c:	41 f0       	breq	.+16     	; 0x82e <pcint4ActivateInterrupt+0x26>
     81e:	8f 3f       	cpi	r24, 0xFF	; 255
     820:	41 f0       	breq	.+16     	; 0x832 <pcint4ActivateInterrupt+0x2a>
     822:	0e c0       	rjmp	.+28     	; 0x840 <pcint4ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB4); setBit(DDRB, PB4);	break;
     824:	2c 98       	cbi	0x05, 4	; 5
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB4); setBit(DDRB, PB4);	break;
     826:	24 9a       	sbi	0x04, 4	; 4
     828:	04 c0       	rjmp	.+8      	; 0x832 <pcint4ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB4); clrBit(DDRB, PB4);	break;
     82a:	2c 98       	cbi	0x05, 4	; 5
     82c:	01 c0       	rjmp	.+2      	; 0x830 <pcint4ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB4); clrBit(DDRB, PB4);	break;
     82e:	2c 9a       	sbi	0x05, 4	; 5
     830:	24 98       	cbi	0x04, 4	; 4
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK0, PCINT4);
     832:	80 91 6b 00 	lds	r24, 0x006B
     836:	80 61       	ori	r24, 0x10	; 16
     838:	80 93 6b 00 	sts	0x006B, r24
	return RESULT_OK;
     83c:	80 e0       	ldi	r24, 0x00	; 0
     83e:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB4); setBit(DDRB, PB4);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB4); setBit(DDRB, PB4);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB4); clrBit(DDRB, PB4);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB4); clrBit(DDRB, PB4);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     840:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK0, PCINT4);
	return RESULT_OK;
}
     842:	08 95       	ret

00000844 <pcint4DeactivateInterrupt>:
 * Deactivates the external interrupt pcint4 in PB4
 * -------------------------------------------------------------------------- */

void pcint4DeactivateInterrupt(void)
{
	clrBit(PCMSK0, PCINT4);
     844:	eb e6       	ldi	r30, 0x6B	; 107
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	80 81       	ld	r24, Z
     84a:	8f 7e       	andi	r24, 0xEF	; 239
     84c:	80 83       	st	Z, r24
     84e:	08 95       	ret

00000850 <pcint5ActivateInterrupt>:
 * Activates the external interrupt pcint5 and configures port mode in PB5
 * -------------------------------------------------------------------------- */

resultValue_t pcint5ActivateInterrupt(portMode_t port)
{
	switch(port){
     850:	82 30       	cpi	r24, 0x02	; 2
     852:	79 f0       	breq	.+30     	; 0x872 <pcint5ActivateInterrupt+0x22>
     854:	30 f4       	brcc	.+12     	; 0x862 <pcint5ActivateInterrupt+0x12>
     856:	88 23       	and	r24, r24
     858:	49 f0       	breq	.+18     	; 0x86c <pcint5ActivateInterrupt+0x1c>
     85a:	81 30       	cpi	r24, 0x01	; 1
     85c:	a9 f4       	brne	.+42     	; 0x888 <pcint5ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB5); setBit(DDRB, PB5);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB5); setBit(DDRB, PB5);	break;
     85e:	2d 9a       	sbi	0x05, 5	; 5
     860:	06 c0       	rjmp	.+12     	; 0x86e <pcint5ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint5 and configures port mode in PB5
 * -------------------------------------------------------------------------- */

resultValue_t pcint5ActivateInterrupt(portMode_t port)
{
	switch(port){
     862:	83 30       	cpi	r24, 0x03	; 3
     864:	41 f0       	breq	.+16     	; 0x876 <pcint5ActivateInterrupt+0x26>
     866:	8f 3f       	cpi	r24, 0xFF	; 255
     868:	41 f0       	breq	.+16     	; 0x87a <pcint5ActivateInterrupt+0x2a>
     86a:	0e c0       	rjmp	.+28     	; 0x888 <pcint5ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB5); setBit(DDRB, PB5);	break;
     86c:	2d 98       	cbi	0x05, 5	; 5
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB5); setBit(DDRB, PB5);	break;
     86e:	25 9a       	sbi	0x04, 5	; 4
     870:	04 c0       	rjmp	.+8      	; 0x87a <pcint5ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB5); clrBit(DDRB, PB5);	break;
     872:	2d 98       	cbi	0x05, 5	; 5
     874:	01 c0       	rjmp	.+2      	; 0x878 <pcint5ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB5); clrBit(DDRB, PB5);	break;
     876:	2d 9a       	sbi	0x05, 5	; 5
     878:	25 98       	cbi	0x04, 5	; 4
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK0, PCINT5);
     87a:	80 91 6b 00 	lds	r24, 0x006B
     87e:	80 62       	ori	r24, 0x20	; 32
     880:	80 93 6b 00 	sts	0x006B, r24
	return RESULT_OK;
     884:	80 e0       	ldi	r24, 0x00	; 0
     886:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB5); setBit(DDRB, PB5);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB5); setBit(DDRB, PB5);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB5); clrBit(DDRB, PB5);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB5); clrBit(DDRB, PB5);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     888:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK0, PCINT5);
	return RESULT_OK;
}
     88a:	08 95       	ret

0000088c <pcint5DeactivateInterrupt>:
 * Deactivates the external interrupt pcint5 in PB5
 * -------------------------------------------------------------------------- */

void pcint5DeactivateInterrupt(void)
{
	clrBit(PCMSK0, PCINT5);
     88c:	eb e6       	ldi	r30, 0x6B	; 107
     88e:	f0 e0       	ldi	r31, 0x00	; 0
     890:	80 81       	ld	r24, Z
     892:	8f 7d       	andi	r24, 0xDF	; 223
     894:	80 83       	st	Z, r24
     896:	08 95       	ret

00000898 <pcint6ActivateInterrupt>:
 * Activates the external interrupt pcint6 and configures port mode in PB6
 * -------------------------------------------------------------------------- */

resultValue_t pcint6ActivateInterrupt(portMode_t port)
{
	switch(port){
     898:	82 30       	cpi	r24, 0x02	; 2
     89a:	79 f0       	breq	.+30     	; 0x8ba <pcint6ActivateInterrupt+0x22>
     89c:	30 f4       	brcc	.+12     	; 0x8aa <pcint6ActivateInterrupt+0x12>
     89e:	88 23       	and	r24, r24
     8a0:	49 f0       	breq	.+18     	; 0x8b4 <pcint6ActivateInterrupt+0x1c>
     8a2:	81 30       	cpi	r24, 0x01	; 1
     8a4:	a9 f4       	brne	.+42     	; 0x8d0 <pcint6ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB6); setBit(DDRB, PB6);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB6); setBit(DDRB, PB6);	break;
     8a6:	2e 9a       	sbi	0x05, 6	; 5
     8a8:	06 c0       	rjmp	.+12     	; 0x8b6 <pcint6ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint6 and configures port mode in PB6
 * -------------------------------------------------------------------------- */

resultValue_t pcint6ActivateInterrupt(portMode_t port)
{
	switch(port){
     8aa:	83 30       	cpi	r24, 0x03	; 3
     8ac:	41 f0       	breq	.+16     	; 0x8be <pcint6ActivateInterrupt+0x26>
     8ae:	8f 3f       	cpi	r24, 0xFF	; 255
     8b0:	41 f0       	breq	.+16     	; 0x8c2 <pcint6ActivateInterrupt+0x2a>
     8b2:	0e c0       	rjmp	.+28     	; 0x8d0 <pcint6ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB6); setBit(DDRB, PB6);	break;
     8b4:	2e 98       	cbi	0x05, 6	; 5
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB6); setBit(DDRB, PB6);	break;
     8b6:	26 9a       	sbi	0x04, 6	; 4
     8b8:	04 c0       	rjmp	.+8      	; 0x8c2 <pcint6ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB6); clrBit(DDRB, PB6);	break;
     8ba:	2e 98       	cbi	0x05, 6	; 5
     8bc:	01 c0       	rjmp	.+2      	; 0x8c0 <pcint6ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB6); clrBit(DDRB, PB6);	break;
     8be:	2e 9a       	sbi	0x05, 6	; 5
     8c0:	26 98       	cbi	0x04, 6	; 4
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK0, PCINT6);
     8c2:	80 91 6b 00 	lds	r24, 0x006B
     8c6:	80 64       	ori	r24, 0x40	; 64
     8c8:	80 93 6b 00 	sts	0x006B, r24
	return RESULT_OK;
     8cc:	80 e0       	ldi	r24, 0x00	; 0
     8ce:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB6); setBit(DDRB, PB6);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB6); setBit(DDRB, PB6);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB6); clrBit(DDRB, PB6);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB6); clrBit(DDRB, PB6);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     8d0:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK0, PCINT6);
	return RESULT_OK;
}
     8d2:	08 95       	ret

000008d4 <pcint6DeactivateInterrupt>:
 * Deactivates the external interrupt pcint6 in PB6
 * -------------------------------------------------------------------------- */

void pcint6DeactivateInterrupt(void)
{
	clrBit(PCMSK0, PCINT6);
     8d4:	eb e6       	ldi	r30, 0x6B	; 107
     8d6:	f0 e0       	ldi	r31, 0x00	; 0
     8d8:	80 81       	ld	r24, Z
     8da:	8f 7b       	andi	r24, 0xBF	; 191
     8dc:	80 83       	st	Z, r24
     8de:	08 95       	ret

000008e0 <pcint7ActivateInterrupt>:
 * Activates the external interrupt pcint7 and configures port mode in PB7
 * -------------------------------------------------------------------------- */

resultValue_t pcint7ActivateInterrupt(portMode_t port)
{
	switch(port){
     8e0:	82 30       	cpi	r24, 0x02	; 2
     8e2:	79 f0       	breq	.+30     	; 0x902 <__stack+0x3>
     8e4:	30 f4       	brcc	.+12     	; 0x8f2 <pcint7ActivateInterrupt+0x12>
     8e6:	88 23       	and	r24, r24
     8e8:	49 f0       	breq	.+18     	; 0x8fc <pcint7ActivateInterrupt+0x1c>
     8ea:	81 30       	cpi	r24, 0x01	; 1
     8ec:	a9 f4       	brne	.+42     	; 0x918 <__stack+0x19>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB7); setBit(DDRB, PB7);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB7); setBit(DDRB, PB7);	break;
     8ee:	2f 9a       	sbi	0x05, 7	; 5
     8f0:	06 c0       	rjmp	.+12     	; 0x8fe <pcint7ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint7 and configures port mode in PB7
 * -------------------------------------------------------------------------- */

resultValue_t pcint7ActivateInterrupt(portMode_t port)
{
	switch(port){
     8f2:	83 30       	cpi	r24, 0x03	; 3
     8f4:	41 f0       	breq	.+16     	; 0x906 <__stack+0x7>
     8f6:	8f 3f       	cpi	r24, 0xFF	; 255
     8f8:	41 f0       	breq	.+16     	; 0x90a <__stack+0xb>
     8fa:	0e c0       	rjmp	.+28     	; 0x918 <__stack+0x19>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB7); setBit(DDRB, PB7);	break;
     8fc:	2f 98       	cbi	0x05, 7	; 5
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB7); setBit(DDRB, PB7);	break;
     8fe:	27 9a       	sbi	0x04, 7	; 4
     900:	04 c0       	rjmp	.+8      	; 0x90a <__stack+0xb>
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB7); clrBit(DDRB, PB7);	break;
     902:	2f 98       	cbi	0x05, 7	; 5
     904:	01 c0       	rjmp	.+2      	; 0x908 <__stack+0x9>
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB7); clrBit(DDRB, PB7);	break;
     906:	2f 9a       	sbi	0x05, 7	; 5
     908:	27 98       	cbi	0x04, 7	; 4
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK0, PCINT7);
     90a:	80 91 6b 00 	lds	r24, 0x006B
     90e:	80 68       	ori	r24, 0x80	; 128
     910:	80 93 6b 00 	sts	0x006B, r24
	return RESULT_OK;
     914:	80 e0       	ldi	r24, 0x00	; 0
     916:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB7); setBit(DDRB, PB7);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB7); setBit(DDRB, PB7);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB7); clrBit(DDRB, PB7);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB7); clrBit(DDRB, PB7);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     918:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK0, PCINT7);
	return RESULT_OK;
}
     91a:	08 95       	ret

0000091c <pcint7DeactivateInterrupt>:
 * Deactivates the external interrupt pcint7 in PB7
 * -------------------------------------------------------------------------- */

void pcint7DeactivateInterrupt(void)
{
	clrBit(PCMSK0, PCINT7);
     91c:	eb e6       	ldi	r30, 0x6B	; 107
     91e:	f0 e0       	ldi	r31, 0x00	; 0
     920:	80 81       	ld	r24, Z
     922:	8f 77       	andi	r24, 0x7F	; 127
     924:	80 83       	st	Z, r24
     926:	08 95       	ret

00000928 <pcint14_8Enable>:
 * Enables the external interrupt pcint in port C
 * -------------------------------------------------------------------------- */

void pcint14_8Enable(void)
{
	setBit(PCICR, PCIE1);
     928:	e8 e6       	ldi	r30, 0x68	; 104
     92a:	f0 e0       	ldi	r31, 0x00	; 0
     92c:	80 81       	ld	r24, Z
     92e:	82 60       	ori	r24, 0x02	; 2
     930:	80 83       	st	Z, r24
     932:	08 95       	ret

00000934 <pcint14_8Disable>:
 * Disables the external interrupt pcint in port C
 * -------------------------------------------------------------------------- */

void pcint14_8Disable(void)
{
	clrBit(PCICR, PCIE1);
     934:	e8 e6       	ldi	r30, 0x68	; 104
     936:	f0 e0       	ldi	r31, 0x00	; 0
     938:	80 81       	ld	r24, Z
     93a:	8d 7f       	andi	r24, 0xFD	; 253
     93c:	80 83       	st	Z, r24
     93e:	08 95       	ret

00000940 <pcint14_8ClearInterruptRequest>:
 * Disables the external interrupt pcint in port C
 * -------------------------------------------------------------------------- */

void pcint14_8ClearInterruptRequest(void)
{
	setBit(PCIFR, PCIF1);
     940:	d9 9a       	sbi	0x1b, 1	; 27
     942:	08 95       	ret

00000944 <pcint8ActivateInterrupt>:
 * Activates the external interrupt pcint8 and configures port mode in PC0
 * -------------------------------------------------------------------------- */

resultValue_t pcint8ActivateInterrupt(portMode_t port)
{
	switch(port){
     944:	82 30       	cpi	r24, 0x02	; 2
     946:	79 f0       	breq	.+30     	; 0x966 <pcint8ActivateInterrupt+0x22>
     948:	30 f4       	brcc	.+12     	; 0x956 <pcint8ActivateInterrupt+0x12>
     94a:	88 23       	and	r24, r24
     94c:	49 f0       	breq	.+18     	; 0x960 <pcint8ActivateInterrupt+0x1c>
     94e:	81 30       	cpi	r24, 0x01	; 1
     950:	a9 f4       	brne	.+42     	; 0x97c <pcint8ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC0); setBit(DDRC, PC0);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC0); setBit(DDRC, PC0);	break;
     952:	40 9a       	sbi	0x08, 0	; 8
     954:	06 c0       	rjmp	.+12     	; 0x962 <pcint8ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint8 and configures port mode in PC0
 * -------------------------------------------------------------------------- */

resultValue_t pcint8ActivateInterrupt(portMode_t port)
{
	switch(port){
     956:	83 30       	cpi	r24, 0x03	; 3
     958:	41 f0       	breq	.+16     	; 0x96a <pcint8ActivateInterrupt+0x26>
     95a:	8f 3f       	cpi	r24, 0xFF	; 255
     95c:	41 f0       	breq	.+16     	; 0x96e <pcint8ActivateInterrupt+0x2a>
     95e:	0e c0       	rjmp	.+28     	; 0x97c <pcint8ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC0); setBit(DDRC, PC0);	break;
     960:	40 98       	cbi	0x08, 0	; 8
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC0); setBit(DDRC, PC0);	break;
     962:	38 9a       	sbi	0x07, 0	; 7
     964:	04 c0       	rjmp	.+8      	; 0x96e <pcint8ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTC, PC0); clrBit(DDRC, PC0);	break;
     966:	40 98       	cbi	0x08, 0	; 8
     968:	01 c0       	rjmp	.+2      	; 0x96c <pcint8ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTC, PC0); clrBit(DDRC, PC0);	break;
     96a:	40 9a       	sbi	0x08, 0	; 8
     96c:	38 98       	cbi	0x07, 0	; 7
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK1, PCINT8);
     96e:	80 91 6c 00 	lds	r24, 0x006C
     972:	81 60       	ori	r24, 0x01	; 1
     974:	80 93 6c 00 	sts	0x006C, r24
	return RESULT_OK;
     978:	80 e0       	ldi	r24, 0x00	; 0
     97a:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC0); setBit(DDRC, PC0);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC0); setBit(DDRC, PC0);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTC, PC0); clrBit(DDRC, PC0);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTC, PC0); clrBit(DDRC, PC0);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     97c:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK1, PCINT8);
	return RESULT_OK;
}
     97e:	08 95       	ret

00000980 <pcint8DeactivateInterrupt>:
 * Deactivates the external interrupt pcint8 in PC0
 * -------------------------------------------------------------------------- */

void pcint8DeactivateInterrupt(void)
{
	clrBit(PCMSK1, PCINT8);
     980:	ec e6       	ldi	r30, 0x6C	; 108
     982:	f0 e0       	ldi	r31, 0x00	; 0
     984:	80 81       	ld	r24, Z
     986:	8e 7f       	andi	r24, 0xFE	; 254
     988:	80 83       	st	Z, r24
     98a:	08 95       	ret

0000098c <pcint9ActivateInterrupt>:
 * Activates the external interrupt pcint9 and configures port mode in PC1
 * -------------------------------------------------------------------------- */

resultValue_t pcint9ActivateInterrupt(portMode_t port)
{
	switch(port){
     98c:	82 30       	cpi	r24, 0x02	; 2
     98e:	79 f0       	breq	.+30     	; 0x9ae <pcint9ActivateInterrupt+0x22>
     990:	30 f4       	brcc	.+12     	; 0x99e <pcint9ActivateInterrupt+0x12>
     992:	88 23       	and	r24, r24
     994:	49 f0       	breq	.+18     	; 0x9a8 <pcint9ActivateInterrupt+0x1c>
     996:	81 30       	cpi	r24, 0x01	; 1
     998:	a9 f4       	brne	.+42     	; 0x9c4 <pcint9ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC1); setBit(DDRC, PC1);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC1); setBit(DDRC, PC1);	break;
     99a:	41 9a       	sbi	0x08, 1	; 8
     99c:	06 c0       	rjmp	.+12     	; 0x9aa <pcint9ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint9 and configures port mode in PC1
 * -------------------------------------------------------------------------- */

resultValue_t pcint9ActivateInterrupt(portMode_t port)
{
	switch(port){
     99e:	83 30       	cpi	r24, 0x03	; 3
     9a0:	41 f0       	breq	.+16     	; 0x9b2 <pcint9ActivateInterrupt+0x26>
     9a2:	8f 3f       	cpi	r24, 0xFF	; 255
     9a4:	41 f0       	breq	.+16     	; 0x9b6 <pcint9ActivateInterrupt+0x2a>
     9a6:	0e c0       	rjmp	.+28     	; 0x9c4 <pcint9ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC1); setBit(DDRC, PC1);	break;
     9a8:	41 98       	cbi	0x08, 1	; 8
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC1); setBit(DDRC, PC1);	break;
     9aa:	39 9a       	sbi	0x07, 1	; 7
     9ac:	04 c0       	rjmp	.+8      	; 0x9b6 <pcint9ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTC, PC1); clrBit(DDRC, PC1);	break;
     9ae:	41 98       	cbi	0x08, 1	; 8
     9b0:	01 c0       	rjmp	.+2      	; 0x9b4 <pcint9ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTC, PC1); clrBit(DDRC, PC1);	break;
     9b2:	41 9a       	sbi	0x08, 1	; 8
     9b4:	39 98       	cbi	0x07, 1	; 7
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK1, PCINT9);
     9b6:	80 91 6c 00 	lds	r24, 0x006C
     9ba:	82 60       	ori	r24, 0x02	; 2
     9bc:	80 93 6c 00 	sts	0x006C, r24
	return RESULT_OK;
     9c0:	80 e0       	ldi	r24, 0x00	; 0
     9c2:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC1); setBit(DDRC, PC1);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC1); setBit(DDRC, PC1);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTC, PC1); clrBit(DDRC, PC1);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTC, PC1); clrBit(DDRC, PC1);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     9c4:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK1, PCINT9);
	return RESULT_OK;
}
     9c6:	08 95       	ret

000009c8 <pcint9DeactivateInterrupt>:
 * Deactivates the external interrupt pcint9 in PC1
 * -------------------------------------------------------------------------- */

void pcint9DeactivateInterrupt(void)
{
	clrBit(PCMSK1, PCINT9);
     9c8:	ec e6       	ldi	r30, 0x6C	; 108
     9ca:	f0 e0       	ldi	r31, 0x00	; 0
     9cc:	80 81       	ld	r24, Z
     9ce:	8d 7f       	andi	r24, 0xFD	; 253
     9d0:	80 83       	st	Z, r24
     9d2:	08 95       	ret

000009d4 <pcint10ActivateInterrupt>:
 * Activates the external interrupt pcint10 and configures port mode in PC2
 * -------------------------------------------------------------------------- */

resultValue_t pcint10ActivateInterrupt(portMode_t port)
{
	switch(port){
     9d4:	82 30       	cpi	r24, 0x02	; 2
     9d6:	79 f0       	breq	.+30     	; 0x9f6 <pcint10ActivateInterrupt+0x22>
     9d8:	30 f4       	brcc	.+12     	; 0x9e6 <pcint10ActivateInterrupt+0x12>
     9da:	88 23       	and	r24, r24
     9dc:	49 f0       	breq	.+18     	; 0x9f0 <pcint10ActivateInterrupt+0x1c>
     9de:	81 30       	cpi	r24, 0x01	; 1
     9e0:	a9 f4       	brne	.+42     	; 0xa0c <pcint10ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC2); setBit(DDRC, PC2);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC2); setBit(DDRC, PC2);	break;
     9e2:	42 9a       	sbi	0x08, 2	; 8
     9e4:	06 c0       	rjmp	.+12     	; 0x9f2 <pcint10ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint10 and configures port mode in PC2
 * -------------------------------------------------------------------------- */

resultValue_t pcint10ActivateInterrupt(portMode_t port)
{
	switch(port){
     9e6:	83 30       	cpi	r24, 0x03	; 3
     9e8:	41 f0       	breq	.+16     	; 0x9fa <pcint10ActivateInterrupt+0x26>
     9ea:	8f 3f       	cpi	r24, 0xFF	; 255
     9ec:	41 f0       	breq	.+16     	; 0x9fe <pcint10ActivateInterrupt+0x2a>
     9ee:	0e c0       	rjmp	.+28     	; 0xa0c <pcint10ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC2); setBit(DDRC, PC2);	break;
     9f0:	42 98       	cbi	0x08, 2	; 8
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC2); setBit(DDRC, PC2);	break;
     9f2:	3a 9a       	sbi	0x07, 2	; 7
     9f4:	04 c0       	rjmp	.+8      	; 0x9fe <pcint10ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTC, PC2); clrBit(DDRC, PC2);	break;
     9f6:	42 98       	cbi	0x08, 2	; 8
     9f8:	01 c0       	rjmp	.+2      	; 0x9fc <pcint10ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTC, PC2); clrBit(DDRC, PC2);	break;
     9fa:	42 9a       	sbi	0x08, 2	; 8
     9fc:	3a 98       	cbi	0x07, 2	; 7
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK1, PCINT10);
     9fe:	80 91 6c 00 	lds	r24, 0x006C
     a02:	84 60       	ori	r24, 0x04	; 4
     a04:	80 93 6c 00 	sts	0x006C, r24
	return RESULT_OK;
     a08:	80 e0       	ldi	r24, 0x00	; 0
     a0a:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC2); setBit(DDRC, PC2);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC2); setBit(DDRC, PC2);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTC, PC2); clrBit(DDRC, PC2);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTC, PC2); clrBit(DDRC, PC2);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     a0c:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK1, PCINT10);
	return RESULT_OK;
}
     a0e:	08 95       	ret

00000a10 <pcint10DeactivateInterrupt>:
 * Deactivates the external interrupt pcint10 in PC2
 * -------------------------------------------------------------------------- */

void pcint10DeactivateInterrupt(void)
{
	clrBit(PCMSK1, PCINT10);
     a10:	ec e6       	ldi	r30, 0x6C	; 108
     a12:	f0 e0       	ldi	r31, 0x00	; 0
     a14:	80 81       	ld	r24, Z
     a16:	8b 7f       	andi	r24, 0xFB	; 251
     a18:	80 83       	st	Z, r24
     a1a:	08 95       	ret

00000a1c <pcint11ActivateInterrupt>:
 * Activates the external interrupt pcint11 and configures port mode in PC3
 * -------------------------------------------------------------------------- */

resultValue_t pcint11ActivateInterrupt(portMode_t port)
{
	switch(port){
     a1c:	82 30       	cpi	r24, 0x02	; 2
     a1e:	79 f0       	breq	.+30     	; 0xa3e <pcint11ActivateInterrupt+0x22>
     a20:	30 f4       	brcc	.+12     	; 0xa2e <pcint11ActivateInterrupt+0x12>
     a22:	88 23       	and	r24, r24
     a24:	49 f0       	breq	.+18     	; 0xa38 <pcint11ActivateInterrupt+0x1c>
     a26:	81 30       	cpi	r24, 0x01	; 1
     a28:	a9 f4       	brne	.+42     	; 0xa54 <pcint11ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC3); setBit(DDRC, PC3);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC3); setBit(DDRC, PC3);	break;
     a2a:	43 9a       	sbi	0x08, 3	; 8
     a2c:	06 c0       	rjmp	.+12     	; 0xa3a <pcint11ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint11 and configures port mode in PC3
 * -------------------------------------------------------------------------- */

resultValue_t pcint11ActivateInterrupt(portMode_t port)
{
	switch(port){
     a2e:	83 30       	cpi	r24, 0x03	; 3
     a30:	41 f0       	breq	.+16     	; 0xa42 <pcint11ActivateInterrupt+0x26>
     a32:	8f 3f       	cpi	r24, 0xFF	; 255
     a34:	41 f0       	breq	.+16     	; 0xa46 <pcint11ActivateInterrupt+0x2a>
     a36:	0e c0       	rjmp	.+28     	; 0xa54 <pcint11ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC3); setBit(DDRC, PC3);	break;
     a38:	43 98       	cbi	0x08, 3	; 8
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC3); setBit(DDRC, PC3);	break;
     a3a:	3b 9a       	sbi	0x07, 3	; 7
     a3c:	04 c0       	rjmp	.+8      	; 0xa46 <pcint11ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTC, PC3); clrBit(DDRC, PC3);	break;
     a3e:	43 98       	cbi	0x08, 3	; 8
     a40:	01 c0       	rjmp	.+2      	; 0xa44 <pcint11ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTC, PC3); clrBit(DDRC, PC3);	break;
     a42:	43 9a       	sbi	0x08, 3	; 8
     a44:	3b 98       	cbi	0x07, 3	; 7
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK1, PCINT11);
     a46:	80 91 6c 00 	lds	r24, 0x006C
     a4a:	88 60       	ori	r24, 0x08	; 8
     a4c:	80 93 6c 00 	sts	0x006C, r24
	return RESULT_OK;
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC3); setBit(DDRC, PC3);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC3); setBit(DDRC, PC3);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTC, PC3); clrBit(DDRC, PC3);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTC, PC3); clrBit(DDRC, PC3);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     a54:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK1, PCINT11);
	return RESULT_OK;
}
     a56:	08 95       	ret

00000a58 <pcint11DeactivateInterrupt>:
 * Deactivates the external interrupt pcint11 in PC3
 * -------------------------------------------------------------------------- */

void pcint11DeactivateInterrupt(void)
{
	clrBit(PCMSK1, PCINT11);
     a58:	ec e6       	ldi	r30, 0x6C	; 108
     a5a:	f0 e0       	ldi	r31, 0x00	; 0
     a5c:	80 81       	ld	r24, Z
     a5e:	87 7f       	andi	r24, 0xF7	; 247
     a60:	80 83       	st	Z, r24
     a62:	08 95       	ret

00000a64 <pcint12ActivateInterrupt>:
 * Activates the external interrupt pcint12 and configures port mode in PC4
 * -------------------------------------------------------------------------- */

resultValue_t pcint12ActivateInterrupt(portMode_t port)
{
	switch(port){
     a64:	82 30       	cpi	r24, 0x02	; 2
     a66:	79 f0       	breq	.+30     	; 0xa86 <pcint12ActivateInterrupt+0x22>
     a68:	30 f4       	brcc	.+12     	; 0xa76 <pcint12ActivateInterrupt+0x12>
     a6a:	88 23       	and	r24, r24
     a6c:	49 f0       	breq	.+18     	; 0xa80 <pcint12ActivateInterrupt+0x1c>
     a6e:	81 30       	cpi	r24, 0x01	; 1
     a70:	a9 f4       	brne	.+42     	; 0xa9c <pcint12ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC4); setBit(DDRC, PC4);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC4); setBit(DDRC, PC4);	break;
     a72:	44 9a       	sbi	0x08, 4	; 8
     a74:	06 c0       	rjmp	.+12     	; 0xa82 <pcint12ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint12 and configures port mode in PC4
 * -------------------------------------------------------------------------- */

resultValue_t pcint12ActivateInterrupt(portMode_t port)
{
	switch(port){
     a76:	83 30       	cpi	r24, 0x03	; 3
     a78:	41 f0       	breq	.+16     	; 0xa8a <pcint12ActivateInterrupt+0x26>
     a7a:	8f 3f       	cpi	r24, 0xFF	; 255
     a7c:	41 f0       	breq	.+16     	; 0xa8e <pcint12ActivateInterrupt+0x2a>
     a7e:	0e c0       	rjmp	.+28     	; 0xa9c <pcint12ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC4); setBit(DDRC, PC4);	break;
     a80:	44 98       	cbi	0x08, 4	; 8
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC4); setBit(DDRC, PC4);	break;
     a82:	3c 9a       	sbi	0x07, 4	; 7
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <pcint12ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTC, PC4); clrBit(DDRC, PC4);	break;
     a86:	44 98       	cbi	0x08, 4	; 8
     a88:	01 c0       	rjmp	.+2      	; 0xa8c <pcint12ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTC, PC4); clrBit(DDRC, PC4);	break;
     a8a:	44 9a       	sbi	0x08, 4	; 8
     a8c:	3c 98       	cbi	0x07, 4	; 7
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK1, PCINT12);
     a8e:	80 91 6c 00 	lds	r24, 0x006C
     a92:	80 61       	ori	r24, 0x10	; 16
     a94:	80 93 6c 00 	sts	0x006C, r24
	return RESULT_OK;
     a98:	80 e0       	ldi	r24, 0x00	; 0
     a9a:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC4); setBit(DDRC, PC4);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC4); setBit(DDRC, PC4);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTC, PC4); clrBit(DDRC, PC4);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTC, PC4); clrBit(DDRC, PC4);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     a9c:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK1, PCINT12);
	return RESULT_OK;
}
     a9e:	08 95       	ret

00000aa0 <pcint12DeactivateInterrupt>:
 * Deactivates the external interrupt pcint12 in PC4
 * -------------------------------------------------------------------------- */

void pcint12DeactivateInterrupt(void)
{
	clrBit(PCMSK1, PCINT12);
     aa0:	ec e6       	ldi	r30, 0x6C	; 108
     aa2:	f0 e0       	ldi	r31, 0x00	; 0
     aa4:	80 81       	ld	r24, Z
     aa6:	8f 7e       	andi	r24, 0xEF	; 239
     aa8:	80 83       	st	Z, r24
     aaa:	08 95       	ret

00000aac <pcint13ActivateInterrupt>:
 * Activates the external interrupt pcint13 and configures port mode in PC5
 * -------------------------------------------------------------------------- */

resultValue_t pcint13ActivateInterrupt(portMode_t port)
{
	switch(port){
     aac:	82 30       	cpi	r24, 0x02	; 2
     aae:	79 f0       	breq	.+30     	; 0xace <pcint13ActivateInterrupt+0x22>
     ab0:	30 f4       	brcc	.+12     	; 0xabe <pcint13ActivateInterrupt+0x12>
     ab2:	88 23       	and	r24, r24
     ab4:	49 f0       	breq	.+18     	; 0xac8 <pcint13ActivateInterrupt+0x1c>
     ab6:	81 30       	cpi	r24, 0x01	; 1
     ab8:	a9 f4       	brne	.+42     	; 0xae4 <pcint13ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC5); setBit(DDRC, PC5);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC5); setBit(DDRC, PC5);	break;
     aba:	45 9a       	sbi	0x08, 5	; 8
     abc:	06 c0       	rjmp	.+12     	; 0xaca <pcint13ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint13 and configures port mode in PC5
 * -------------------------------------------------------------------------- */

resultValue_t pcint13ActivateInterrupt(portMode_t port)
{
	switch(port){
     abe:	83 30       	cpi	r24, 0x03	; 3
     ac0:	41 f0       	breq	.+16     	; 0xad2 <pcint13ActivateInterrupt+0x26>
     ac2:	8f 3f       	cpi	r24, 0xFF	; 255
     ac4:	41 f0       	breq	.+16     	; 0xad6 <pcint13ActivateInterrupt+0x2a>
     ac6:	0e c0       	rjmp	.+28     	; 0xae4 <pcint13ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC5); setBit(DDRC, PC5);	break;
     ac8:	45 98       	cbi	0x08, 5	; 8
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC5); setBit(DDRC, PC5);	break;
     aca:	3d 9a       	sbi	0x07, 5	; 7
     acc:	04 c0       	rjmp	.+8      	; 0xad6 <pcint13ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTC, PC5); clrBit(DDRC, PC5);	break;
     ace:	45 98       	cbi	0x08, 5	; 8
     ad0:	01 c0       	rjmp	.+2      	; 0xad4 <pcint13ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTC, PC5); clrBit(DDRC, PC5);	break;
     ad2:	45 9a       	sbi	0x08, 5	; 8
     ad4:	3d 98       	cbi	0x07, 5	; 7
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK1, PCINT13);
     ad6:	80 91 6c 00 	lds	r24, 0x006C
     ada:	80 62       	ori	r24, 0x20	; 32
     adc:	80 93 6c 00 	sts	0x006C, r24
	return RESULT_OK;
     ae0:	80 e0       	ldi	r24, 0x00	; 0
     ae2:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC5); setBit(DDRC, PC5);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC5); setBit(DDRC, PC5);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTC, PC5); clrBit(DDRC, PC5);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTC, PC5); clrBit(DDRC, PC5);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     ae4:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK1, PCINT13);
	return RESULT_OK;
}
     ae6:	08 95       	ret

00000ae8 <pcint13DeactivateInterrupt>:
 * Deactivates the external interrupt pcint13 in PC5
 * -------------------------------------------------------------------------- */

void pcint13DeactivateInterrupt(void)
{
	clrBit(PCMSK1, PCINT13);
     ae8:	ec e6       	ldi	r30, 0x6C	; 108
     aea:	f0 e0       	ldi	r31, 0x00	; 0
     aec:	80 81       	ld	r24, Z
     aee:	8f 7d       	andi	r24, 0xDF	; 223
     af0:	80 83       	st	Z, r24
     af2:	08 95       	ret

00000af4 <pcint14ActivateInterrupt>:
 * Activates the external interrupt pcint14 and configures port mode in PC6
 * -------------------------------------------------------------------------- */

resultValue_t pcint14ActivateInterrupt(portMode_t port)
{
	switch(port){
     af4:	82 30       	cpi	r24, 0x02	; 2
     af6:	79 f0       	breq	.+30     	; 0xb16 <pcint14ActivateInterrupt+0x22>
     af8:	30 f4       	brcc	.+12     	; 0xb06 <pcint14ActivateInterrupt+0x12>
     afa:	88 23       	and	r24, r24
     afc:	49 f0       	breq	.+18     	; 0xb10 <pcint14ActivateInterrupt+0x1c>
     afe:	81 30       	cpi	r24, 0x01	; 1
     b00:	a9 f4       	brne	.+42     	; 0xb2c <pcint14ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC6); setBit(DDRC, PC6);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC6); setBit(DDRC, PC6);	break;
     b02:	46 9a       	sbi	0x08, 6	; 8
     b04:	06 c0       	rjmp	.+12     	; 0xb12 <pcint14ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint14 and configures port mode in PC6
 * -------------------------------------------------------------------------- */

resultValue_t pcint14ActivateInterrupt(portMode_t port)
{
	switch(port){
     b06:	83 30       	cpi	r24, 0x03	; 3
     b08:	41 f0       	breq	.+16     	; 0xb1a <pcint14ActivateInterrupt+0x26>
     b0a:	8f 3f       	cpi	r24, 0xFF	; 255
     b0c:	41 f0       	breq	.+16     	; 0xb1e <pcint14ActivateInterrupt+0x2a>
     b0e:	0e c0       	rjmp	.+28     	; 0xb2c <pcint14ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC6); setBit(DDRC, PC6);	break;
     b10:	46 98       	cbi	0x08, 6	; 8
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC6); setBit(DDRC, PC6);	break;
     b12:	3e 9a       	sbi	0x07, 6	; 7
     b14:	04 c0       	rjmp	.+8      	; 0xb1e <pcint14ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTC, PC6); clrBit(DDRC, PC6);	break;
     b16:	46 98       	cbi	0x08, 6	; 8
     b18:	01 c0       	rjmp	.+2      	; 0xb1c <pcint14ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTC, PC6); clrBit(DDRC, PC6);	break;
     b1a:	46 9a       	sbi	0x08, 6	; 8
     b1c:	3e 98       	cbi	0x07, 6	; 7
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK1, PCINT14);
     b1e:	80 91 6c 00 	lds	r24, 0x006C
     b22:	80 64       	ori	r24, 0x40	; 64
     b24:	80 93 6c 00 	sts	0x006C, r24
	return RESULT_OK;
     b28:	80 e0       	ldi	r24, 0x00	; 0
     b2a:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC6); setBit(DDRC, PC6);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC6); setBit(DDRC, PC6);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTC, PC6); clrBit(DDRC, PC6);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTC, PC6); clrBit(DDRC, PC6);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     b2c:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK1, PCINT14);
	return RESULT_OK;
}
     b2e:	08 95       	ret

00000b30 <pcint14DeactivateInterrupt>:
 * Deactivates the external interrupt pcint14 in PC6
 * -------------------------------------------------------------------------- */

void pcint14DeactivateInterrupt(void)
{
	clrBit(PCMSK1, PCINT14);
     b30:	ec e6       	ldi	r30, 0x6C	; 108
     b32:	f0 e0       	ldi	r31, 0x00	; 0
     b34:	80 81       	ld	r24, Z
     b36:	8f 7b       	andi	r24, 0xBF	; 191
     b38:	80 83       	st	Z, r24
     b3a:	08 95       	ret

00000b3c <pcint23_16Enable>:
 * Enables the external interrupt pcint in port D
 * -------------------------------------------------------------------------- */

void pcint23_16Enable(void)
{
	setBit(PCICR, PCIE2);
     b3c:	e8 e6       	ldi	r30, 0x68	; 104
     b3e:	f0 e0       	ldi	r31, 0x00	; 0
     b40:	80 81       	ld	r24, Z
     b42:	84 60       	ori	r24, 0x04	; 4
     b44:	80 83       	st	Z, r24
     b46:	08 95       	ret

00000b48 <pcint23_16Disable>:
 * Disables the external interrupt pcint in port D
 * -------------------------------------------------------------------------- */

void pcint23_16Disable(void)
{
	clrBit(PCICR, PCIE2);
     b48:	e8 e6       	ldi	r30, 0x68	; 104
     b4a:	f0 e0       	ldi	r31, 0x00	; 0
     b4c:	80 81       	ld	r24, Z
     b4e:	8b 7f       	andi	r24, 0xFB	; 251
     b50:	80 83       	st	Z, r24
     b52:	08 95       	ret

00000b54 <pcint23_16ClearInterruptRequest>:
 * Disables the external interrupt pcint in port D
 * -------------------------------------------------------------------------- */

void pcint23_16ClearInterruptRequest(void)
{
	setBit(PCIFR, PCIF2);
     b54:	da 9a       	sbi	0x1b, 2	; 27
     b56:	08 95       	ret

00000b58 <pcint16ActivateInterrupt>:
 * Activates the external interrupt pcint16 and configures port mode in PD0
 * -------------------------------------------------------------------------- */

resultValue_t pcint16ActivateInterrupt(portMode_t port)
{
	switch(port){
     b58:	82 30       	cpi	r24, 0x02	; 2
     b5a:	79 f0       	breq	.+30     	; 0xb7a <pcint16ActivateInterrupt+0x22>
     b5c:	30 f4       	brcc	.+12     	; 0xb6a <pcint16ActivateInterrupt+0x12>
     b5e:	88 23       	and	r24, r24
     b60:	49 f0       	breq	.+18     	; 0xb74 <pcint16ActivateInterrupt+0x1c>
     b62:	81 30       	cpi	r24, 0x01	; 1
     b64:	a9 f4       	brne	.+42     	; 0xb90 <pcint16ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD0); setBit(DDRD, PD0);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD0); setBit(DDRD, PD0);	break;
     b66:	58 9a       	sbi	0x0b, 0	; 11
     b68:	06 c0       	rjmp	.+12     	; 0xb76 <pcint16ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint16 and configures port mode in PD0
 * -------------------------------------------------------------------------- */

resultValue_t pcint16ActivateInterrupt(portMode_t port)
{
	switch(port){
     b6a:	83 30       	cpi	r24, 0x03	; 3
     b6c:	41 f0       	breq	.+16     	; 0xb7e <pcint16ActivateInterrupt+0x26>
     b6e:	8f 3f       	cpi	r24, 0xFF	; 255
     b70:	41 f0       	breq	.+16     	; 0xb82 <pcint16ActivateInterrupt+0x2a>
     b72:	0e c0       	rjmp	.+28     	; 0xb90 <pcint16ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD0); setBit(DDRD, PD0);	break;
     b74:	58 98       	cbi	0x0b, 0	; 11
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD0); setBit(DDRD, PD0);	break;
     b76:	50 9a       	sbi	0x0a, 0	; 10
     b78:	04 c0       	rjmp	.+8      	; 0xb82 <pcint16ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD0); clrBit(DDRD, PD0);	break;
     b7a:	58 98       	cbi	0x0b, 0	; 11
     b7c:	01 c0       	rjmp	.+2      	; 0xb80 <pcint16ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD0); clrBit(DDRD, PD0);	break;
     b7e:	58 9a       	sbi	0x0b, 0	; 11
     b80:	50 98       	cbi	0x0a, 0	; 10
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK2, PCINT16);
     b82:	80 91 6d 00 	lds	r24, 0x006D
     b86:	81 60       	ori	r24, 0x01	; 1
     b88:	80 93 6d 00 	sts	0x006D, r24
	return RESULT_OK;
     b8c:	80 e0       	ldi	r24, 0x00	; 0
     b8e:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD0); setBit(DDRD, PD0);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD0); setBit(DDRD, PD0);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD0); clrBit(DDRD, PD0);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD0); clrBit(DDRD, PD0);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     b90:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK2, PCINT16);
	return RESULT_OK;
}
     b92:	08 95       	ret

00000b94 <pcint16DeactivateInterrupt>:
 * Deactivates the external interrupt pcint16 in PD0
 * -------------------------------------------------------------------------- */

void pcint16DeactivateInterrupt(void)
{
	clrBit(PCMSK2, PCINT16);
     b94:	ed e6       	ldi	r30, 0x6D	; 109
     b96:	f0 e0       	ldi	r31, 0x00	; 0
     b98:	80 81       	ld	r24, Z
     b9a:	8e 7f       	andi	r24, 0xFE	; 254
     b9c:	80 83       	st	Z, r24
     b9e:	08 95       	ret

00000ba0 <pcint17ActivateInterrupt>:
 * Activates the external interrupt pcint17 and configures port mode in PD1
 * -------------------------------------------------------------------------- */

resultValue_t pcint17ActivateInterrupt(portMode_t port)
{
	switch(port){
     ba0:	82 30       	cpi	r24, 0x02	; 2
     ba2:	79 f0       	breq	.+30     	; 0xbc2 <pcint17ActivateInterrupt+0x22>
     ba4:	30 f4       	brcc	.+12     	; 0xbb2 <pcint17ActivateInterrupt+0x12>
     ba6:	88 23       	and	r24, r24
     ba8:	49 f0       	breq	.+18     	; 0xbbc <pcint17ActivateInterrupt+0x1c>
     baa:	81 30       	cpi	r24, 0x01	; 1
     bac:	a9 f4       	brne	.+42     	; 0xbd8 <pcint17ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD1); setBit(DDRD, PD1);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD1); setBit(DDRD, PD1);	break;
     bae:	59 9a       	sbi	0x0b, 1	; 11
     bb0:	06 c0       	rjmp	.+12     	; 0xbbe <pcint17ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint17 and configures port mode in PD1
 * -------------------------------------------------------------------------- */

resultValue_t pcint17ActivateInterrupt(portMode_t port)
{
	switch(port){
     bb2:	83 30       	cpi	r24, 0x03	; 3
     bb4:	41 f0       	breq	.+16     	; 0xbc6 <pcint17ActivateInterrupt+0x26>
     bb6:	8f 3f       	cpi	r24, 0xFF	; 255
     bb8:	41 f0       	breq	.+16     	; 0xbca <pcint17ActivateInterrupt+0x2a>
     bba:	0e c0       	rjmp	.+28     	; 0xbd8 <pcint17ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD1); setBit(DDRD, PD1);	break;
     bbc:	59 98       	cbi	0x0b, 1	; 11
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD1); setBit(DDRD, PD1);	break;
     bbe:	51 9a       	sbi	0x0a, 1	; 10
     bc0:	04 c0       	rjmp	.+8      	; 0xbca <pcint17ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD1); clrBit(DDRD, PD1);	break;
     bc2:	59 98       	cbi	0x0b, 1	; 11
     bc4:	01 c0       	rjmp	.+2      	; 0xbc8 <pcint17ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD1); clrBit(DDRD, PD1);	break;
     bc6:	59 9a       	sbi	0x0b, 1	; 11
     bc8:	51 98       	cbi	0x0a, 1	; 10
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK2, PCINT17);
     bca:	80 91 6d 00 	lds	r24, 0x006D
     bce:	82 60       	ori	r24, 0x02	; 2
     bd0:	80 93 6d 00 	sts	0x006D, r24
	return RESULT_OK;
     bd4:	80 e0       	ldi	r24, 0x00	; 0
     bd6:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD1); setBit(DDRD, PD1);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD1); setBit(DDRD, PD1);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD1); clrBit(DDRD, PD1);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD1); clrBit(DDRD, PD1);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     bd8:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK2, PCINT17);
	return RESULT_OK;
}
     bda:	08 95       	ret

00000bdc <pcint17DeactivateInterrupt>:
 * Deactivates the external interrupt pcint17 in PD1
 * -------------------------------------------------------------------------- */

void pcint17DeactivateInterrupt(void)
{
	clrBit(PCMSK2, PCINT17);
     bdc:	ed e6       	ldi	r30, 0x6D	; 109
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	80 81       	ld	r24, Z
     be2:	8d 7f       	andi	r24, 0xFD	; 253
     be4:	80 83       	st	Z, r24
     be6:	08 95       	ret

00000be8 <pcint18ActivateInterrupt>:
 * Activates the external interrupt pcint18 and configures port mode in PD2
 * -------------------------------------------------------------------------- */

resultValue_t pcint18ActivateInterrupt(portMode_t port)
{
	switch(port){
     be8:	82 30       	cpi	r24, 0x02	; 2
     bea:	79 f0       	breq	.+30     	; 0xc0a <pcint18ActivateInterrupt+0x22>
     bec:	30 f4       	brcc	.+12     	; 0xbfa <pcint18ActivateInterrupt+0x12>
     bee:	88 23       	and	r24, r24
     bf0:	49 f0       	breq	.+18     	; 0xc04 <pcint18ActivateInterrupt+0x1c>
     bf2:	81 30       	cpi	r24, 0x01	; 1
     bf4:	a9 f4       	brne	.+42     	; 0xc20 <pcint18ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD2); setBit(DDRD, PD2);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD2); setBit(DDRD, PD2);	break;
     bf6:	5a 9a       	sbi	0x0b, 2	; 11
     bf8:	06 c0       	rjmp	.+12     	; 0xc06 <pcint18ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint18 and configures port mode in PD2
 * -------------------------------------------------------------------------- */

resultValue_t pcint18ActivateInterrupt(portMode_t port)
{
	switch(port){
     bfa:	83 30       	cpi	r24, 0x03	; 3
     bfc:	41 f0       	breq	.+16     	; 0xc0e <pcint18ActivateInterrupt+0x26>
     bfe:	8f 3f       	cpi	r24, 0xFF	; 255
     c00:	41 f0       	breq	.+16     	; 0xc12 <pcint18ActivateInterrupt+0x2a>
     c02:	0e c0       	rjmp	.+28     	; 0xc20 <pcint18ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD2); setBit(DDRD, PD2);	break;
     c04:	5a 98       	cbi	0x0b, 2	; 11
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD2); setBit(DDRD, PD2);	break;
     c06:	52 9a       	sbi	0x0a, 2	; 10
     c08:	04 c0       	rjmp	.+8      	; 0xc12 <pcint18ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD2); clrBit(DDRD, PD2);	break;
     c0a:	5a 98       	cbi	0x0b, 2	; 11
     c0c:	01 c0       	rjmp	.+2      	; 0xc10 <pcint18ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD2); clrBit(DDRD, PD2);	break;
     c0e:	5a 9a       	sbi	0x0b, 2	; 11
     c10:	52 98       	cbi	0x0a, 2	; 10
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK2, PCINT18);
     c12:	80 91 6d 00 	lds	r24, 0x006D
     c16:	84 60       	ori	r24, 0x04	; 4
     c18:	80 93 6d 00 	sts	0x006D, r24
	return RESULT_OK;
     c1c:	80 e0       	ldi	r24, 0x00	; 0
     c1e:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD2); setBit(DDRD, PD2);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD2); setBit(DDRD, PD2);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD2); clrBit(DDRD, PD2);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD2); clrBit(DDRD, PD2);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     c20:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK2, PCINT18);
	return RESULT_OK;
}
     c22:	08 95       	ret

00000c24 <pcint18DeactivateInterrupt>:
 * Deactivates the external interrupt pcint18 in PD2
 * -------------------------------------------------------------------------- */

void pcint18DeactivateInterrupt(void)
{
	clrBit(PCMSK2, PCINT18);
     c24:	ed e6       	ldi	r30, 0x6D	; 109
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	80 81       	ld	r24, Z
     c2a:	8b 7f       	andi	r24, 0xFB	; 251
     c2c:	80 83       	st	Z, r24
     c2e:	08 95       	ret

00000c30 <pcint19ActivateInterrupt>:
 * Activates the external interrupt pcint19 and configures port mode in PD3
 * -------------------------------------------------------------------------- */

resultValue_t pcint19ActivateInterrupt(portMode_t port)
{
	switch(port){
     c30:	82 30       	cpi	r24, 0x02	; 2
     c32:	79 f0       	breq	.+30     	; 0xc52 <pcint19ActivateInterrupt+0x22>
     c34:	30 f4       	brcc	.+12     	; 0xc42 <pcint19ActivateInterrupt+0x12>
     c36:	88 23       	and	r24, r24
     c38:	49 f0       	breq	.+18     	; 0xc4c <pcint19ActivateInterrupt+0x1c>
     c3a:	81 30       	cpi	r24, 0x01	; 1
     c3c:	a9 f4       	brne	.+42     	; 0xc68 <pcint19ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD3); setBit(DDRD, PD3);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD3); setBit(DDRD, PD3);	break;
     c3e:	5b 9a       	sbi	0x0b, 3	; 11
     c40:	06 c0       	rjmp	.+12     	; 0xc4e <pcint19ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint19 and configures port mode in PD3
 * -------------------------------------------------------------------------- */

resultValue_t pcint19ActivateInterrupt(portMode_t port)
{
	switch(port){
     c42:	83 30       	cpi	r24, 0x03	; 3
     c44:	41 f0       	breq	.+16     	; 0xc56 <pcint19ActivateInterrupt+0x26>
     c46:	8f 3f       	cpi	r24, 0xFF	; 255
     c48:	41 f0       	breq	.+16     	; 0xc5a <pcint19ActivateInterrupt+0x2a>
     c4a:	0e c0       	rjmp	.+28     	; 0xc68 <pcint19ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD3); setBit(DDRD, PD3);	break;
     c4c:	5b 98       	cbi	0x0b, 3	; 11
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD3); setBit(DDRD, PD3);	break;
     c4e:	53 9a       	sbi	0x0a, 3	; 10
     c50:	04 c0       	rjmp	.+8      	; 0xc5a <pcint19ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD3); clrBit(DDRD, PD3);	break;
     c52:	5b 98       	cbi	0x0b, 3	; 11
     c54:	01 c0       	rjmp	.+2      	; 0xc58 <pcint19ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD3); clrBit(DDRD, PD3);	break;
     c56:	5b 9a       	sbi	0x0b, 3	; 11
     c58:	53 98       	cbi	0x0a, 3	; 10
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK2, PCINT19);
     c5a:	80 91 6d 00 	lds	r24, 0x006D
     c5e:	88 60       	ori	r24, 0x08	; 8
     c60:	80 93 6d 00 	sts	0x006D, r24
	return RESULT_OK;
     c64:	80 e0       	ldi	r24, 0x00	; 0
     c66:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD3); setBit(DDRD, PD3);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD3); setBit(DDRD, PD3);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD3); clrBit(DDRD, PD3);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD3); clrBit(DDRD, PD3);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     c68:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK2, PCINT19);
	return RESULT_OK;
}
     c6a:	08 95       	ret

00000c6c <pcint19DeactivateInterrupt>:
 * Deactivates the external interrupt pcint19 in PD3
 * -------------------------------------------------------------------------- */

void pcint19DeactivateInterrupt(void)
{
	clrBit(PCMSK2, PCINT19);
     c6c:	ed e6       	ldi	r30, 0x6D	; 109
     c6e:	f0 e0       	ldi	r31, 0x00	; 0
     c70:	80 81       	ld	r24, Z
     c72:	87 7f       	andi	r24, 0xF7	; 247
     c74:	80 83       	st	Z, r24
     c76:	08 95       	ret

00000c78 <pcint20ActivateInterrupt>:
 * Activates the external interrupt pcint20 and configures port mode in PD4
 * -------------------------------------------------------------------------- */

resultValue_t pcint20ActivateInterrupt(portMode_t port)
{
	switch(port){
     c78:	82 30       	cpi	r24, 0x02	; 2
     c7a:	79 f0       	breq	.+30     	; 0xc9a <pcint20ActivateInterrupt+0x22>
     c7c:	30 f4       	brcc	.+12     	; 0xc8a <pcint20ActivateInterrupt+0x12>
     c7e:	88 23       	and	r24, r24
     c80:	49 f0       	breq	.+18     	; 0xc94 <pcint20ActivateInterrupt+0x1c>
     c82:	81 30       	cpi	r24, 0x01	; 1
     c84:	a9 f4       	brne	.+42     	; 0xcb0 <pcint20ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD4); setBit(DDRD, PD4);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD4); setBit(DDRD, PD4);	break;
     c86:	5c 9a       	sbi	0x0b, 4	; 11
     c88:	06 c0       	rjmp	.+12     	; 0xc96 <pcint20ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint20 and configures port mode in PD4
 * -------------------------------------------------------------------------- */

resultValue_t pcint20ActivateInterrupt(portMode_t port)
{
	switch(port){
     c8a:	83 30       	cpi	r24, 0x03	; 3
     c8c:	41 f0       	breq	.+16     	; 0xc9e <pcint20ActivateInterrupt+0x26>
     c8e:	8f 3f       	cpi	r24, 0xFF	; 255
     c90:	41 f0       	breq	.+16     	; 0xca2 <pcint20ActivateInterrupt+0x2a>
     c92:	0e c0       	rjmp	.+28     	; 0xcb0 <pcint20ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD4); setBit(DDRD, PD4);	break;
     c94:	5c 98       	cbi	0x0b, 4	; 11
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD4); setBit(DDRD, PD4);	break;
     c96:	54 9a       	sbi	0x0a, 4	; 10
     c98:	04 c0       	rjmp	.+8      	; 0xca2 <pcint20ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD4); clrBit(DDRD, PD4);	break;
     c9a:	5c 98       	cbi	0x0b, 4	; 11
     c9c:	01 c0       	rjmp	.+2      	; 0xca0 <pcint20ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD4); clrBit(DDRD, PD4);	break;
     c9e:	5c 9a       	sbi	0x0b, 4	; 11
     ca0:	54 98       	cbi	0x0a, 4	; 10
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK2, PCINT20);
     ca2:	80 91 6d 00 	lds	r24, 0x006D
     ca6:	80 61       	ori	r24, 0x10	; 16
     ca8:	80 93 6d 00 	sts	0x006D, r24
	return RESULT_OK;
     cac:	80 e0       	ldi	r24, 0x00	; 0
     cae:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD4); setBit(DDRD, PD4);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD4); setBit(DDRD, PD4);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD4); clrBit(DDRD, PD4);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD4); clrBit(DDRD, PD4);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     cb0:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK2, PCINT20);
	return RESULT_OK;
}
     cb2:	08 95       	ret

00000cb4 <pcint20DeactivateInterrupt>:
 * Deactivates the external interrupt pcint20 in PD4
 * -------------------------------------------------------------------------- */

void pcint20DeactivateInterrupt(void)
{
	clrBit(PCMSK2, PCINT20);
     cb4:	ed e6       	ldi	r30, 0x6D	; 109
     cb6:	f0 e0       	ldi	r31, 0x00	; 0
     cb8:	80 81       	ld	r24, Z
     cba:	8f 7e       	andi	r24, 0xEF	; 239
     cbc:	80 83       	st	Z, r24
     cbe:	08 95       	ret

00000cc0 <pcint21ActivateInterrupt>:
 * Activates the external interrupt pcint21 and configures port mode in PD5
 * -------------------------------------------------------------------------- */

resultValue_t pcint21ActivateInterrupt(portMode_t port)
{
	switch(port){
     cc0:	82 30       	cpi	r24, 0x02	; 2
     cc2:	79 f0       	breq	.+30     	; 0xce2 <pcint21ActivateInterrupt+0x22>
     cc4:	30 f4       	brcc	.+12     	; 0xcd2 <pcint21ActivateInterrupt+0x12>
     cc6:	88 23       	and	r24, r24
     cc8:	49 f0       	breq	.+18     	; 0xcdc <pcint21ActivateInterrupt+0x1c>
     cca:	81 30       	cpi	r24, 0x01	; 1
     ccc:	a9 f4       	brne	.+42     	; 0xcf8 <pcint21ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD5); setBit(DDRD, PD5);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD5); setBit(DDRD, PD5);	break;
     cce:	5d 9a       	sbi	0x0b, 5	; 11
     cd0:	06 c0       	rjmp	.+12     	; 0xcde <pcint21ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint21 and configures port mode in PD5
 * -------------------------------------------------------------------------- */

resultValue_t pcint21ActivateInterrupt(portMode_t port)
{
	switch(port){
     cd2:	83 30       	cpi	r24, 0x03	; 3
     cd4:	41 f0       	breq	.+16     	; 0xce6 <pcint21ActivateInterrupt+0x26>
     cd6:	8f 3f       	cpi	r24, 0xFF	; 255
     cd8:	41 f0       	breq	.+16     	; 0xcea <pcint21ActivateInterrupt+0x2a>
     cda:	0e c0       	rjmp	.+28     	; 0xcf8 <pcint21ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD5); setBit(DDRD, PD5);	break;
     cdc:	5d 98       	cbi	0x0b, 5	; 11
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD5); setBit(DDRD, PD5);	break;
     cde:	55 9a       	sbi	0x0a, 5	; 10
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <pcint21ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD5); clrBit(DDRD, PD5);	break;
     ce2:	5d 98       	cbi	0x0b, 5	; 11
     ce4:	01 c0       	rjmp	.+2      	; 0xce8 <pcint21ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD5); clrBit(DDRD, PD5);	break;
     ce6:	5d 9a       	sbi	0x0b, 5	; 11
     ce8:	55 98       	cbi	0x0a, 5	; 10
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK2, PCINT21);
     cea:	80 91 6d 00 	lds	r24, 0x006D
     cee:	80 62       	ori	r24, 0x20	; 32
     cf0:	80 93 6d 00 	sts	0x006D, r24
	return RESULT_OK;
     cf4:	80 e0       	ldi	r24, 0x00	; 0
     cf6:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD5); setBit(DDRD, PD5);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD5); setBit(DDRD, PD5);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD5); clrBit(DDRD, PD5);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD5); clrBit(DDRD, PD5);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     cf8:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK2, PCINT21);
	return RESULT_OK;
}
     cfa:	08 95       	ret

00000cfc <pcint21DeactivateInterrupt>:
 * Deactivates the external interrupt pcint21 in PD5
 * -------------------------------------------------------------------------- */

void pcint21DeactivateInterrupt(void)
{
	clrBit(PCMSK2, PCINT21);
     cfc:	ed e6       	ldi	r30, 0x6D	; 109
     cfe:	f0 e0       	ldi	r31, 0x00	; 0
     d00:	80 81       	ld	r24, Z
     d02:	8f 7d       	andi	r24, 0xDF	; 223
     d04:	80 83       	st	Z, r24
     d06:	08 95       	ret

00000d08 <pcint22ActivateInterrupt>:
 * Activates the external interrupt pcint22 and configures port mode in PD6
 * -------------------------------------------------------------------------- */

resultValue_t pcint22ActivateInterrupt(portMode_t port)
{
	switch(port){
     d08:	82 30       	cpi	r24, 0x02	; 2
     d0a:	79 f0       	breq	.+30     	; 0xd2a <pcint22ActivateInterrupt+0x22>
     d0c:	30 f4       	brcc	.+12     	; 0xd1a <pcint22ActivateInterrupt+0x12>
     d0e:	88 23       	and	r24, r24
     d10:	49 f0       	breq	.+18     	; 0xd24 <pcint22ActivateInterrupt+0x1c>
     d12:	81 30       	cpi	r24, 0x01	; 1
     d14:	a9 f4       	brne	.+42     	; 0xd40 <pcint22ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD6); setBit(DDRD, PD6);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD6); setBit(DDRD, PD6);	break;
     d16:	5e 9a       	sbi	0x0b, 6	; 11
     d18:	06 c0       	rjmp	.+12     	; 0xd26 <pcint22ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint22 and configures port mode in PD6
 * -------------------------------------------------------------------------- */

resultValue_t pcint22ActivateInterrupt(portMode_t port)
{
	switch(port){
     d1a:	83 30       	cpi	r24, 0x03	; 3
     d1c:	41 f0       	breq	.+16     	; 0xd2e <pcint22ActivateInterrupt+0x26>
     d1e:	8f 3f       	cpi	r24, 0xFF	; 255
     d20:	41 f0       	breq	.+16     	; 0xd32 <pcint22ActivateInterrupt+0x2a>
     d22:	0e c0       	rjmp	.+28     	; 0xd40 <pcint22ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD6); setBit(DDRD, PD6);	break;
     d24:	5e 98       	cbi	0x0b, 6	; 11
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD6); setBit(DDRD, PD6);	break;
     d26:	56 9a       	sbi	0x0a, 6	; 10
     d28:	04 c0       	rjmp	.+8      	; 0xd32 <pcint22ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD6); clrBit(DDRD, PD6);	break;
     d2a:	5e 98       	cbi	0x0b, 6	; 11
     d2c:	01 c0       	rjmp	.+2      	; 0xd30 <pcint22ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD6); clrBit(DDRD, PD6);	break;
     d2e:	5e 9a       	sbi	0x0b, 6	; 11
     d30:	56 98       	cbi	0x0a, 6	; 10
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK2, PCINT22);
     d32:	80 91 6d 00 	lds	r24, 0x006D
     d36:	80 64       	ori	r24, 0x40	; 64
     d38:	80 93 6d 00 	sts	0x006D, r24
	return RESULT_OK;
     d3c:	80 e0       	ldi	r24, 0x00	; 0
     d3e:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD6); setBit(DDRD, PD6);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD6); setBit(DDRD, PD6);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD6); clrBit(DDRD, PD6);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD6); clrBit(DDRD, PD6);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     d40:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK2, PCINT22);
	return RESULT_OK;
}
     d42:	08 95       	ret

00000d44 <pcint22DeactivateInterrupt>:
 * Deactivates the external interrupt pcint22 in PD6
 * -------------------------------------------------------------------------- */

void pcint22DeactivateInterrupt(void)
{
	clrBit(PCMSK2, PCINT22);
     d44:	ed e6       	ldi	r30, 0x6D	; 109
     d46:	f0 e0       	ldi	r31, 0x00	; 0
     d48:	80 81       	ld	r24, Z
     d4a:	8f 7b       	andi	r24, 0xBF	; 191
     d4c:	80 83       	st	Z, r24
     d4e:	08 95       	ret

00000d50 <pcint23ActivateInterrupt>:
 * Activates the external interrupt pcint23 and configures port mode in PD7
 * -------------------------------------------------------------------------- */

resultValue_t pcint23ActivateInterrupt(portMode_t port)
{
	switch(port){
     d50:	82 30       	cpi	r24, 0x02	; 2
     d52:	79 f0       	breq	.+30     	; 0xd72 <pcint23ActivateInterrupt+0x22>
     d54:	30 f4       	brcc	.+12     	; 0xd62 <pcint23ActivateInterrupt+0x12>
     d56:	88 23       	and	r24, r24
     d58:	49 f0       	breq	.+18     	; 0xd6c <pcint23ActivateInterrupt+0x1c>
     d5a:	81 30       	cpi	r24, 0x01	; 1
     d5c:	a9 f4       	brne	.+42     	; 0xd88 <pcint23ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD7); setBit(DDRD, PD7);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD7); setBit(DDRD, PD7);	break;
     d5e:	5f 9a       	sbi	0x0b, 7	; 11
     d60:	06 c0       	rjmp	.+12     	; 0xd6e <pcint23ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint23 and configures port mode in PD7
 * -------------------------------------------------------------------------- */

resultValue_t pcint23ActivateInterrupt(portMode_t port)
{
	switch(port){
     d62:	83 30       	cpi	r24, 0x03	; 3
     d64:	41 f0       	breq	.+16     	; 0xd76 <pcint23ActivateInterrupt+0x26>
     d66:	8f 3f       	cpi	r24, 0xFF	; 255
     d68:	41 f0       	breq	.+16     	; 0xd7a <pcint23ActivateInterrupt+0x2a>
     d6a:	0e c0       	rjmp	.+28     	; 0xd88 <pcint23ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD7); setBit(DDRD, PD7);	break;
     d6c:	5f 98       	cbi	0x0b, 7	; 11
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD7); setBit(DDRD, PD7);	break;
     d6e:	57 9a       	sbi	0x0a, 7	; 10
     d70:	04 c0       	rjmp	.+8      	; 0xd7a <pcint23ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD7); clrBit(DDRD, PD7);	break;
     d72:	5f 98       	cbi	0x0b, 7	; 11
     d74:	01 c0       	rjmp	.+2      	; 0xd78 <pcint23ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD7); clrBit(DDRD, PD7);	break;
     d76:	5f 9a       	sbi	0x0b, 7	; 11
     d78:	57 98       	cbi	0x0a, 7	; 10
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK2, PCINT23);
     d7a:	80 91 6d 00 	lds	r24, 0x006D
     d7e:	80 68       	ori	r24, 0x80	; 128
     d80:	80 93 6d 00 	sts	0x006D, r24
	return RESULT_OK;
     d84:	80 e0       	ldi	r24, 0x00	; 0
     d86:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD7); setBit(DDRD, PD7);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD7); setBit(DDRD, PD7);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD7); clrBit(DDRD, PD7);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD7); clrBit(DDRD, PD7);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     d88:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK2, PCINT23);
	return RESULT_OK;
}
     d8a:	08 95       	ret

00000d8c <pcint23DeactivateInterrupt>:
 * Deactivates the external interrupt pcint23 in PD7
 * -------------------------------------------------------------------------- */

void pcint23DeactivateInterrupt(void)
{
	clrBit(PCMSK2, PCINT23);
     d8c:	ed e6       	ldi	r30, 0x6D	; 109
     d8e:	f0 e0       	ldi	r31, 0x00	; 0
     d90:	80 81       	ld	r24, Z
     d92:	8f 77       	andi	r24, 0x7F	; 127
     d94:	80 83       	st	Z, r24
     d96:	08 95       	ret

00000d98 <timer0Config>:
 * Configures the timer0 mode and prescaler
 * -------------------------------------------------------------------------- */

resultValue_t timer0Config(timerModeA_t mode, timerPrescalerValueA_t prescaler)
{
	uint8 regA = TCCR0A;
     d98:	24 b5       	in	r18, 0x24	; 36
	uint8 regB = TCCR0B;
     d9a:	95 b5       	in	r25, 0x25	; 37

	if(prescaler != TIMER_A_PRESCALER_NO_CHANGE){
     d9c:	6f 3f       	cpi	r22, 0xFF	; 255
     d9e:	c1 f0       	breq	.+48     	; 0xdd0 <timer0Config+0x38>
		regB &= ~(0x07 << CS00);
     da0:	98 7f       	andi	r25, 0xF8	; 248
		switch(prescaler){
     da2:	46 2f       	mov	r20, r22
     da4:	50 e0       	ldi	r21, 0x00	; 0
     da6:	48 30       	cpi	r20, 0x08	; 8
     da8:	51 05       	cpc	r21, r1
     daa:	80 f5       	brcc	.+96     	; 0xe0c <timer0Config+0x74>
     dac:	fa 01       	movw	r30, r20
     dae:	eb 5a       	subi	r30, 0xAB	; 171
     db0:	ff 4f       	sbci	r31, 0xFF	; 255
     db2:	0c 94 4b 0d 	jmp	0x1a96	; 0x1a96 <__tablejump2__>
			case TIMER_A_CLOCK_DISABLE:					break;
			case TIMER_A_PRESCALER_OFF:					regB |= (1 << CS00);	break;
     db6:	91 60       	ori	r25, 0x01	; 1
     db8:	0b c0       	rjmp	.+22     	; 0xdd0 <timer0Config+0x38>
			case TIMER_A_PRESCALER_8:					regB |= (2 << CS00);	break;
     dba:	92 60       	ori	r25, 0x02	; 2
     dbc:	09 c0       	rjmp	.+18     	; 0xdd0 <timer0Config+0x38>
			case TIMER_A_PRESCALER_64:					regB |= (3 << CS00);	break;
     dbe:	93 60       	ori	r25, 0x03	; 3
     dc0:	07 c0       	rjmp	.+14     	; 0xdd0 <timer0Config+0x38>
			case TIMER_A_PRESCALER_256:					regB |= (4 << CS00);	break;
     dc2:	94 60       	ori	r25, 0x04	; 4
     dc4:	05 c0       	rjmp	.+10     	; 0xdd0 <timer0Config+0x38>
			case TIMER_A_PRESCALER_1024:				regB |= (5 << CS00);	break;
     dc6:	95 60       	ori	r25, 0x05	; 5
     dc8:	03 c0       	rjmp	.+6      	; 0xdd0 <timer0Config+0x38>
			case TIMER_A_PRESCALER_T0_FALLING_EDGE:		regB |= (6 << CS00);	break;
     dca:	96 60       	ori	r25, 0x06	; 6
     dcc:	01 c0       	rjmp	.+2      	; 0xdd0 <timer0Config+0x38>
			case TIMER_A_PRESCALER_T0_RISING_EDGE:		regB |= (7 << CS00);	break;
     dce:	97 60       	ori	r25, 0x07	; 7
			case TIMER_A_PRESCALER_NO_CHANGE:			break;
			default:									return RESULT_TIMER_PRESCALER_VALUE_UNSUPPORTED;	break;
		}
	}

	if(mode != TIMER_A_MODE_NO_CHANGE){
     dd0:	8f 3f       	cpi	r24, 0xFF	; 255
     dd2:	c1 f0       	breq	.+48     	; 0xe04 <timer0Config+0x6c>
		regA &= ~(0x03 << WGM00);
     dd4:	2c 7f       	andi	r18, 0xFC	; 252
		clrBit(regB, WGM02);
     dd6:	97 7f       	andi	r25, 0xF7	; 247
		switch(mode){
     dd8:	82 30       	cpi	r24, 0x02	; 2
     dda:	69 f0       	breq	.+26     	; 0xdf6 <timer0Config+0x5e>
     ddc:	28 f4       	brcc	.+10     	; 0xde8 <timer0Config+0x50>
     dde:	88 23       	and	r24, r24
     de0:	89 f0       	breq	.+34     	; 0xe04 <timer0Config+0x6c>
     de2:	81 30       	cpi	r24, 0x01	; 1
     de4:	59 f0       	breq	.+22     	; 0xdfc <timer0Config+0x64>
     de6:	14 c0       	rjmp	.+40     	; 0xe10 <timer0Config+0x78>
     de8:	85 30       	cpi	r24, 0x05	; 5
     dea:	39 f0       	breq	.+14     	; 0xdfa <timer0Config+0x62>
     dec:	87 30       	cpi	r24, 0x07	; 7
     dee:	41 f0       	breq	.+16     	; 0xe00 <timer0Config+0x68>
     df0:	83 30       	cpi	r24, 0x03	; 3
     df2:	71 f4       	brne	.+28     	; 0xe10 <timer0Config+0x78>
     df4:	06 c0       	rjmp	.+12     	; 0xe02 <timer0Config+0x6a>
			case TIMER_A_MODE_NORMAL:						break;
			case TIMER_A_MODE_PWM_PHASE_CORRECTED_MAX:		regA |= (1 << WGM00);	break;
			case TIMER_A_MODE_CTC:							regA |= (2 << WGM00);	break;
     df6:	22 60       	ori	r18, 0x02	; 2
     df8:	05 c0       	rjmp	.+10     	; 0xe04 <timer0Config+0x6c>
			case TIMER_A_MODE_FAST_PWM_MAX:					regA |= (3 << WGM00);	break;
			case TIMER_A_MODE_PWM_PHASE_CORRECTED_OCRA:		setBit(regB, WGM02);regA |= (1 << WGM00);	break;
     dfa:	98 60       	ori	r25, 0x08	; 8
     dfc:	21 60       	ori	r18, 0x01	; 1
     dfe:	02 c0       	rjmp	.+4      	; 0xe04 <timer0Config+0x6c>
			case TIMER_A_MODE_FAST_PWM_OCRA:				setBit(regB, WGM02);regA |= (3 << WGM00);	break;
     e00:	98 60       	ori	r25, 0x08	; 8
     e02:	23 60       	ori	r18, 0x03	; 3
			case TIMER_A_MODE_NO_CHANGE:					break;
			default:										return RESULT_TIMER_MODE_VALUE_UNSUPPORTED;	break;
		}
	}
	TCCR0A = regA;
     e04:	24 bd       	out	0x24, r18	; 36
	TCCR0B = regB;
     e06:	95 bd       	out	0x25, r25	; 37

	return RESULT_OK;
     e08:	80 e0       	ldi	r24, 0x00	; 0
     e0a:	08 95       	ret
			case TIMER_A_PRESCALER_256:					regB |= (4 << CS00);	break;
			case TIMER_A_PRESCALER_1024:				regB |= (5 << CS00);	break;
			case TIMER_A_PRESCALER_T0_FALLING_EDGE:		regB |= (6 << CS00);	break;
			case TIMER_A_PRESCALER_T0_RISING_EDGE:		regB |= (7 << CS00);	break;
			case TIMER_A_PRESCALER_NO_CHANGE:			break;
			default:									return RESULT_TIMER_PRESCALER_VALUE_UNSUPPORTED;	break;
     e0c:	83 e0       	ldi	r24, 0x03	; 3
     e0e:	08 95       	ret
			case TIMER_A_MODE_CTC:							regA |= (2 << WGM00);	break;
			case TIMER_A_MODE_FAST_PWM_MAX:					regA |= (3 << WGM00);	break;
			case TIMER_A_MODE_PWM_PHASE_CORRECTED_OCRA:		setBit(regB, WGM02);regA |= (1 << WGM00);	break;
			case TIMER_A_MODE_FAST_PWM_OCRA:				setBit(regB, WGM02);regA |= (3 << WGM00);	break;
			case TIMER_A_MODE_NO_CHANGE:					break;
			default:										return RESULT_TIMER_MODE_VALUE_UNSUPPORTED;	break;
     e10:	84 e0       	ldi	r24, 0x04	; 4
	}
	TCCR0A = regA;
	TCCR0B = regB;

	return RESULT_OK;
}
     e12:	08 95       	ret

00000e14 <timer0OutputConfig>:
 * Configures the timer0 compare outputs
 * -------------------------------------------------------------------------- */

resultValue_t timer0OutputConfig(timerOutput_t compA, timerOutput_t compB)
{
	uint8 reg = TCCR0A;
     e14:	94 b5       	in	r25, 0x24	; 36

	if(compA != TIMER_PORT_NO_CHANGE){
     e16:	8f 3f       	cpi	r24, 0xFF	; 255
     e18:	69 f0       	breq	.+26     	; 0xe34 <timer0OutputConfig+0x20>
		reg &= ~(0x03 << COM0A0);
     e1a:	9f 73       	andi	r25, 0x3F	; 63
		switch(compA){
     e1c:	81 30       	cpi	r24, 0x01	; 1
     e1e:	39 f0       	breq	.+14     	; 0xe2e <timer0OutputConfig+0x1a>
     e20:	48 f0       	brcs	.+18     	; 0xe34 <timer0OutputConfig+0x20>
     e22:	82 30       	cpi	r24, 0x02	; 2
     e24:	31 f0       	breq	.+12     	; 0xe32 <timer0OutputConfig+0x1e>
     e26:	83 30       	cpi	r24, 0x03	; 3
     e28:	e1 f4       	brne	.+56     	; 0xe62 <timer0OutputConfig+0x4e>
			case TIMER_PORT_NORMAL:				break;
			case TIMER_PORT_TOGGLE_ON_COMPARE:	reg |= (1 << COM0A0);	break;
			case TIMER_PORT_CLEAR_ON_COMPARE:	reg |= (2 << COM0A0);	break;
			case TIMER_PORT_SET_ON_COMPARE:		reg |= (3 << COM0A0);	break;
     e2a:	90 6c       	ori	r25, 0xC0	; 192
     e2c:	03 c0       	rjmp	.+6      	; 0xe34 <timer0OutputConfig+0x20>

	if(compA != TIMER_PORT_NO_CHANGE){
		reg &= ~(0x03 << COM0A0);
		switch(compA){
			case TIMER_PORT_NORMAL:				break;
			case TIMER_PORT_TOGGLE_ON_COMPARE:	reg |= (1 << COM0A0);	break;
     e2e:	90 64       	ori	r25, 0x40	; 64
     e30:	01 c0       	rjmp	.+2      	; 0xe34 <timer0OutputConfig+0x20>
			case TIMER_PORT_CLEAR_ON_COMPARE:	reg |= (2 << COM0A0);	break;
     e32:	90 68       	ori	r25, 0x80	; 128
			case TIMER_PORT_SET_ON_COMPARE:		reg |= (3 << COM0A0);	break;
			case TIMER_PORT_NO_CHANGE:			break;
			default:							return RESULT_PORT_VALUE_UNSUPPORTED;	break;
		}
	}
	if(compB != TIMER_PORT_NO_CHANGE){
     e34:	6f 3f       	cpi	r22, 0xFF	; 255
     e36:	91 f0       	breq	.+36     	; 0xe5c <timer0OutputConfig+0x48>
		reg &= ~(0x03 << COM0B0);
     e38:	9f 7c       	andi	r25, 0xCF	; 207
		switch(compA){
     e3a:	82 30       	cpi	r24, 0x02	; 2
     e3c:	61 f0       	breq	.+24     	; 0xe56 <timer0OutputConfig+0x42>
     e3e:	30 f4       	brcc	.+12     	; 0xe4c <timer0OutputConfig+0x38>
     e40:	88 23       	and	r24, r24
     e42:	61 f0       	breq	.+24     	; 0xe5c <timer0OutputConfig+0x48>
     e44:	81 30       	cpi	r24, 0x01	; 1
     e46:	69 f4       	brne	.+26     	; 0xe62 <timer0OutputConfig+0x4e>
			case TIMER_PORT_NORMAL:				break;
			case TIMER_PORT_TOGGLE_ON_COMPARE:	reg |= (1 << COM0B0);	break;
     e48:	90 61       	ori	r25, 0x10	; 16
     e4a:	08 c0       	rjmp	.+16     	; 0xe5c <timer0OutputConfig+0x48>
			default:							return RESULT_PORT_VALUE_UNSUPPORTED;	break;
		}
	}
	if(compB != TIMER_PORT_NO_CHANGE){
		reg &= ~(0x03 << COM0B0);
		switch(compA){
     e4c:	83 30       	cpi	r24, 0x03	; 3
     e4e:	29 f0       	breq	.+10     	; 0xe5a <timer0OutputConfig+0x46>
     e50:	8f 3f       	cpi	r24, 0xFF	; 255
     e52:	21 f0       	breq	.+8      	; 0xe5c <timer0OutputConfig+0x48>
     e54:	06 c0       	rjmp	.+12     	; 0xe62 <timer0OutputConfig+0x4e>
			case TIMER_PORT_NORMAL:				break;
			case TIMER_PORT_TOGGLE_ON_COMPARE:	reg |= (1 << COM0B0);	break;
			case TIMER_PORT_CLEAR_ON_COMPARE:	reg |= (2 << COM0B0);	break;
     e56:	90 62       	ori	r25, 0x20	; 32
     e58:	01 c0       	rjmp	.+2      	; 0xe5c <timer0OutputConfig+0x48>
			case TIMER_PORT_SET_ON_COMPARE:		reg |= (3 << COM0B0);	break;
     e5a:	90 63       	ori	r25, 0x30	; 48
			case TIMER_PORT_NO_CHANGE:			break;
			default:							return RESULT_PORT_VALUE_UNSUPPORTED;	break;
		}
	}
	TCCR0A = reg;
     e5c:	94 bd       	out	0x24, r25	; 36
	return RESULT_OK;
     e5e:	80 e0       	ldi	r24, 0x00	; 0
     e60:	08 95       	ret
			case TIMER_PORT_NORMAL:				break;
			case TIMER_PORT_TOGGLE_ON_COMPARE:	reg |= (1 << COM0B0);	break;
			case TIMER_PORT_CLEAR_ON_COMPARE:	reg |= (2 << COM0B0);	break;
			case TIMER_PORT_SET_ON_COMPARE:		reg |= (3 << COM0B0);	break;
			case TIMER_PORT_NO_CHANGE:			break;
			default:							return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     e62:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	TCCR0A = reg;
	return RESULT_OK;
}
     e64:	08 95       	ret

00000e66 <timer0ActivateOverflowInterrupt>:
 * Activates the timer0 overflow interrupt
 * -------------------------------------------------------------------------- */

void timer0ActivateOverflowInterrupt(void)
{
	setBit(TIMSK0, TOIE0);
     e66:	ee e6       	ldi	r30, 0x6E	; 110
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	80 81       	ld	r24, Z
     e6c:	81 60       	ori	r24, 0x01	; 1
     e6e:	80 83       	st	Z, r24
     e70:	08 95       	ret

00000e72 <timer0DeactivateOverflowInterrupt>:
 * Deactivates the timer0 overflow interrupt
 * -------------------------------------------------------------------------- */

void timer0DeactivateOverflowInterrupt(void)
{
	clrBit(TIMSK0, TOIE0);
     e72:	ee e6       	ldi	r30, 0x6E	; 110
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	80 81       	ld	r24, Z
     e78:	8e 7f       	andi	r24, 0xFE	; 254
     e7a:	80 83       	st	Z, r24
     e7c:	08 95       	ret

00000e7e <timer0ClearOverflowInterruptRequest>:
 * Clears the timer0 overflow interrupt request
 * -------------------------------------------------------------------------- */

void timer0ClearOverflowInterruptRequest(void)
{
	setBit(TIFR0, TOV0);
     e7e:	a8 9a       	sbi	0x15, 0	; 21
     e80:	08 95       	ret

00000e82 <timer0ActivateCompareAInterrupt>:
 * Activates the timer0 compare A interrupt
 * -------------------------------------------------------------------------- */

void timer0ActivateCompareAInterrupt(void)
{
	setBit(TIMSK0, OCIE0A);
     e82:	ee e6       	ldi	r30, 0x6E	; 110
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	80 81       	ld	r24, Z
     e88:	82 60       	ori	r24, 0x02	; 2
     e8a:	80 83       	st	Z, r24
     e8c:	08 95       	ret

00000e8e <timer0DeactivateCompareAInterrupt>:
 * Deactivates the timer0 compare A interrupt
 * -------------------------------------------------------------------------- */

void timer0DeactivateCompareAInterrupt(void)
{
	clrBit(TIMSK0, OCIE0A);
     e8e:	ee e6       	ldi	r30, 0x6E	; 110
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	80 81       	ld	r24, Z
     e94:	8d 7f       	andi	r24, 0xFD	; 253
     e96:	80 83       	st	Z, r24
     e98:	08 95       	ret

00000e9a <timer0ClearCompareAInterruptRequest>:
 * Clears the timer0 compare A interrupt request
 * -------------------------------------------------------------------------- */

void timer0ClearCompareAInterruptRequest(void)
{
	setBit(TIFR0, OCF0A);
     e9a:	a9 9a       	sbi	0x15, 1	; 21
     e9c:	08 95       	ret

00000e9e <timer0ActivateCompareBInterrupt>:
 * Activates the timer0 compare B interrupt
 * -------------------------------------------------------------------------- */

void timer0ActivateCompareBInterrupt(void)
{
	setBit(TIMSK0, OCIE0B);
     e9e:	ee e6       	ldi	r30, 0x6E	; 110
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	80 81       	ld	r24, Z
     ea4:	84 60       	ori	r24, 0x04	; 4
     ea6:	80 83       	st	Z, r24
     ea8:	08 95       	ret

00000eaa <timer0DeactivateCompareBInterrupt>:
 * Deactivates the timer0 compare B interrupt
 * -------------------------------------------------------------------------- */

void timer0DeactivateCompareBInterrupt(void)
{
	clrBit(TIMSK0, OCIE0B);
     eaa:	ee e6       	ldi	r30, 0x6E	; 110
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	80 81       	ld	r24, Z
     eb0:	8b 7f       	andi	r24, 0xFB	; 251
     eb2:	80 83       	st	Z, r24
     eb4:	08 95       	ret

00000eb6 <timer0ClearCompareBInterruptRequest>:
 * Clears the timer0 compare B interrupt request
 * -------------------------------------------------------------------------- */

void timer0ClearCompareBInterruptRequest(void)
{
	setBit(TIFR0, OCF0B);
     eb6:	aa 9a       	sbi	0x15, 2	; 21
     eb8:	08 95       	ret

00000eba <timer0ForceCompareA>:
 * Forces a comparison on the output compare A of the timer0
 * -------------------------------------------------------------------------- */

void timer0ForceCompareA(void)
{
	setBit(TCCR0B, FOC0A);
     eba:	85 b5       	in	r24, 0x25	; 37
     ebc:	80 68       	ori	r24, 0x80	; 128
     ebe:	85 bd       	out	0x25, r24	; 37
     ec0:	08 95       	ret

00000ec2 <timer0ForceCompareB>:
 * Forces a comparison on the output compare B of the timer0
 * -------------------------------------------------------------------------- */

void timer0ForceCompareB(void)
{
	setBit(TCCR0B, FOC0B);
     ec2:	85 b5       	in	r24, 0x25	; 37
     ec4:	80 64       	ori	r24, 0x40	; 64
     ec6:	85 bd       	out	0x25, r24	; 37
     ec8:	08 95       	ret

00000eca <timer0SetCounterValue>:
 * Sets the timer0 counter value
 * -------------------------------------------------------------------------- */

void timer0SetCounterValue(uint8 value)
{
	TCNT0 = value;
     eca:	86 bd       	out	0x26, r24	; 38
     ecc:	08 95       	ret

00000ece <timer0GetCounterValue>:
 * Gets the timer0 counter value
 * -------------------------------------------------------------------------- */

uint8 timer0GetCounterValue(void)
{
	return TCNT0;
     ece:	86 b5       	in	r24, 0x26	; 38
}
     ed0:	08 95       	ret

00000ed2 <timer0SetCompareAValue>:
 * Sets the timer0 compare A value
 * -------------------------------------------------------------------------- */

void timer0SetCompareAValue(uint8 value)
{
	OCR0A = value;
     ed2:	87 bd       	out	0x27, r24	; 39
     ed4:	08 95       	ret

00000ed6 <timer0GetCompareAValue>:
 * Gets the timer0 compare A value
 * -------------------------------------------------------------------------- */

uint8 timer0GetCompareAValue(void)
{
	return OCR0A;
     ed6:	87 b5       	in	r24, 0x27	; 39
}
     ed8:	08 95       	ret

00000eda <timer0SetCompareBValue>:
 * Sets the timer0 compare B value
 * -------------------------------------------------------------------------- */

void timer0SetCompareBValue(uint8 value)
{
	OCR0B = value;
     eda:	88 bd       	out	0x28, r24	; 40
     edc:	08 95       	ret

00000ede <timer0GetCompareBValue>:
 * Gets the timer0 compare B value
 * -------------------------------------------------------------------------- */

uint8 timer0GetCompareBValue(void)
{
	return OCR0B;
     ede:	88 b5       	in	r24, 0x28	; 40
}
     ee0:	08 95       	ret

00000ee2 <timer1Config>:
 * Configures the timer1 mode and prescaler
 * -------------------------------------------------------------------------- */

resultValue_t timer1Config(timerModeB_t mode, timerPrescalerValueA_t prescaler)
{
	uint8 reg1 = TCCR1A;
     ee2:	20 91 80 00 	lds	r18, 0x0080
	uint8 reg2 = TCCR1B;
     ee6:	90 91 81 00 	lds	r25, 0x0081

	if(prescaler != TIMER_A_PRESCALER_NO_CHANGE){
     eea:	6f 3f       	cpi	r22, 0xFF	; 255
     eec:	11 f0       	breq	.+4      	; 0xef2 <timer1Config+0x10>
		reg2 &= ~(0x07 << CS10);
     eee:	98 7f       	andi	r25, 0xF8	; 248
		reg2 |= prescaler;
     ef0:	96 2b       	or	r25, r22
	}

	if(mode != TIMER_B_MODE_NO_CHANGE){
     ef2:	8f 3f       	cpi	r24, 0xFF	; 255
     ef4:	69 f0       	breq	.+26     	; 0xf10 <timer1Config+0x2e>
		if(isBitSet(mode, 3))
     ef6:	83 ff       	sbrs	r24, 3
     ef8:	02 c0       	rjmp	.+4      	; 0xefe <timer1Config+0x1c>
			setBit(reg2, WGM13);
     efa:	90 61       	ori	r25, 0x10	; 16
     efc:	01 c0       	rjmp	.+2      	; 0xf00 <timer1Config+0x1e>
		else
			clrBit(reg2, WGM13);
     efe:	9f 7e       	andi	r25, 0xEF	; 239
		if(isBitSet(mode, 2))
     f00:	82 ff       	sbrs	r24, 2
     f02:	02 c0       	rjmp	.+4      	; 0xf08 <timer1Config+0x26>
			setBit(reg2, WGM12);
     f04:	98 60       	ori	r25, 0x08	; 8
     f06:	01 c0       	rjmp	.+2      	; 0xf0a <timer1Config+0x28>
		else
			clrBit(reg2, WGM12);
     f08:	97 7f       	andi	r25, 0xF7	; 247
		reg1 &= ~(0x03 << WGM10);
		reg1 |= (mode & 0x03);
     f0a:	83 70       	andi	r24, 0x03	; 3
			clrBit(reg2, WGM13);
		if(isBitSet(mode, 2))
			setBit(reg2, WGM12);
		else
			clrBit(reg2, WGM12);
		reg1 &= ~(0x03 << WGM10);
     f0c:	2c 7f       	andi	r18, 0xFC	; 252
		reg1 |= (mode & 0x03);
     f0e:	28 2b       	or	r18, r24
	}
	TCCR1A = reg1;
     f10:	20 93 80 00 	sts	0x0080, r18
	TCCR1B = reg2;
     f14:	90 93 81 00 	sts	0x0081, r25

	return RESULT_OK;
}
     f18:	80 e0       	ldi	r24, 0x00	; 0
     f1a:	08 95       	ret

00000f1c <timer1OutputConfig>:
 * Configures the timer1 compare outputs
 * -------------------------------------------------------------------------- */

resultValue_t timer1OutputConfig(timerOutput_t compA, timerOutput_t compB)
{
	uint8 aux8 = TCCR1A;
     f1c:	20 91 80 00 	lds	r18, 0x0080

	if(compA != TIMER_PORT_NO_CHANGE){
     f20:	8f 3f       	cpi	r24, 0xFF	; 255
     f22:	31 f0       	breq	.+12     	; 0xf30 <timer1OutputConfig+0x14>
		aux8 &= ~(0x03 << COM1A0);
		aux8 |= (compA << COM1A0); 
     f24:	30 e4       	ldi	r19, 0x40	; 64
     f26:	83 9f       	mul	r24, r19
     f28:	c0 01       	movw	r24, r0
     f2a:	11 24       	eor	r1, r1
resultValue_t timer1OutputConfig(timerOutput_t compA, timerOutput_t compB)
{
	uint8 aux8 = TCCR1A;

	if(compA != TIMER_PORT_NO_CHANGE){
		aux8 &= ~(0x03 << COM1A0);
     f2c:	2f 73       	andi	r18, 0x3F	; 63
		aux8 |= (compA << COM1A0); 
     f2e:	28 2b       	or	r18, r24
	}
	if(compB != TIMER_PORT_NO_CHANGE){
     f30:	6f 3f       	cpi	r22, 0xFF	; 255
     f32:	31 f0       	breq	.+12     	; 0xf40 <timer1OutputConfig+0x24>
		aux8 &= ~(0x03 << COM1B0);
     f34:	2f 7c       	andi	r18, 0xCF	; 207
		aux8 |= (compB << COM1B0); 
     f36:	80 e1       	ldi	r24, 0x10	; 16
     f38:	68 9f       	mul	r22, r24
     f3a:	b0 01       	movw	r22, r0
     f3c:	11 24       	eor	r1, r1
     f3e:	26 2b       	or	r18, r22
	}
	TCCR1A = aux8;
     f40:	20 93 80 00 	sts	0x0080, r18
	return RESULT_OK;
}
     f44:	80 e0       	ldi	r24, 0x00	; 0
     f46:	08 95       	ret

00000f48 <timer1InputCaptureNoiseCancelerConfig>:
 * Configures the noise canceler of input capture of timer1
 * -------------------------------------------------------------------------- */

resultValue_t	timer1InputCaptureNoiseCancelerConfig(timerInputCaptureNoiseCanceler_t mode)
{
	uint8 aux8 = TCCR1B;
     f48:	e1 e8       	ldi	r30, 0x81	; 129
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	90 81       	ld	r25, Z

	aux8 &= ~(0x03 << ICES1);
     f4e:	9f 73       	andi	r25, 0x3F	; 63
	aux8 |= mode;
     f50:	98 2b       	or	r25, r24

	TCCR1B = aux8;
     f52:	90 83       	st	Z, r25
	return RESULT_OK;
}
     f54:	80 e0       	ldi	r24, 0x00	; 0
     f56:	08 95       	ret

00000f58 <timer1ActivateOverflowInterrupt>:
 * Activates the timer1 overflow interrupt
 * -------------------------------------------------------------------------- */

resultValue_t timer1ActivateOverflowInterrupt(void)
{
	setBit(TIMSK1, TOIE1);
     f58:	ef e6       	ldi	r30, 0x6F	; 111
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	81 60       	ori	r24, 0x01	; 1
     f60:	80 83       	st	Z, r24
	return RESULT_OK;
}
     f62:	80 e0       	ldi	r24, 0x00	; 0
     f64:	08 95       	ret

00000f66 <timer1DeactivateOverflowInterrupt>:
 * Deactivates the timer1 overflow interrupt
 * -------------------------------------------------------------------------- */

resultValue_t timer1DeactivateOverflowInterrupt(void)
{
	clrBit(TIMSK1, TOIE1);
     f66:	ef e6       	ldi	r30, 0x6F	; 111
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	80 81       	ld	r24, Z
     f6c:	8e 7f       	andi	r24, 0xFE	; 254
     f6e:	80 83       	st	Z, r24
	return RESULT_OK;
}
     f70:	80 e0       	ldi	r24, 0x00	; 0
     f72:	08 95       	ret

00000f74 <timer1ClearOverflowInterruptRequest>:
 * Clears the timer1 overflow interrupt request
 * -------------------------------------------------------------------------- */

resultValue_t timer1ClearOverflowInterruptRequest(void)
{
	setBit(TIFR1, TOV1);
     f74:	b0 9a       	sbi	0x16, 0	; 22
	return RESULT_OK;
}
     f76:	80 e0       	ldi	r24, 0x00	; 0
     f78:	08 95       	ret

00000f7a <timer1ActivateCompareAInterrupt>:
 * Activates the timer1 compare A interrupt
 * -------------------------------------------------------------------------- */

resultValue_t timer1ActivateCompareAInterrupt(void)
{
	setBit(TIMSK1, OCIE1A);
     f7a:	ef e6       	ldi	r30, 0x6F	; 111
     f7c:	f0 e0       	ldi	r31, 0x00	; 0
     f7e:	80 81       	ld	r24, Z
     f80:	82 60       	ori	r24, 0x02	; 2
     f82:	80 83       	st	Z, r24
	return RESULT_OK;
}
     f84:	80 e0       	ldi	r24, 0x00	; 0
     f86:	08 95       	ret

00000f88 <timer1DeactivateCompareAInterrupt>:
 * Deactivates the timer1 compare A interrupt
 * -------------------------------------------------------------------------- */

resultValue_t timer1DeactivateCompareAInterrupt(void)
{
	clrBit(TIMSK1, OCIE1A);
     f88:	ef e6       	ldi	r30, 0x6F	; 111
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	80 81       	ld	r24, Z
     f8e:	8d 7f       	andi	r24, 0xFD	; 253
     f90:	80 83       	st	Z, r24
	return RESULT_OK;
}
     f92:	80 e0       	ldi	r24, 0x00	; 0
     f94:	08 95       	ret

00000f96 <timer1ClearCompareAInterruptRequest>:
 * Clears the timer1 compare A interrupt request
 * -------------------------------------------------------------------------- */

resultValue_t timer1ClearCompareAInterruptRequest(void)
{
	setBit(TIFR1, OCF1A);
     f96:	b1 9a       	sbi	0x16, 1	; 22
	return RESULT_OK;
}
     f98:	80 e0       	ldi	r24, 0x00	; 0
     f9a:	08 95       	ret

00000f9c <timer1ActivateCompareBInterrupt>:
 * Activates the timer1 compare B interrupt
 * -------------------------------------------------------------------------- */

resultValue_t timer1ActivateCompareBInterrupt(void)
{
	setBit(TIMSK1, OCIE1B);
     f9c:	ef e6       	ldi	r30, 0x6F	; 111
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	80 81       	ld	r24, Z
     fa2:	84 60       	ori	r24, 0x04	; 4
     fa4:	80 83       	st	Z, r24
	return RESULT_OK;
}
     fa6:	80 e0       	ldi	r24, 0x00	; 0
     fa8:	08 95       	ret

00000faa <timer1DeactivateCompareBInterrupt>:
 * Deactivates the timer1 compare B interrupt
 * -------------------------------------------------------------------------- */

resultValue_t timer1DeactivateCompareBInterrupt(void)
{
	clrBit(TIMSK1, OCIE1B);
     faa:	ef e6       	ldi	r30, 0x6F	; 111
     fac:	f0 e0       	ldi	r31, 0x00	; 0
     fae:	80 81       	ld	r24, Z
     fb0:	8b 7f       	andi	r24, 0xFB	; 251
     fb2:	80 83       	st	Z, r24
	return RESULT_OK;
}
     fb4:	80 e0       	ldi	r24, 0x00	; 0
     fb6:	08 95       	ret

00000fb8 <timer1ClearCompareBInterruptRequest>:
 * Clears the timer1 compare B interrupt request
 * -------------------------------------------------------------------------- */

resultValue_t timer1ClearCompareBInterruptRequest(void)
{
	setBit(TIFR1, OCF1B);
     fb8:	b2 9a       	sbi	0x16, 2	; 22
	return RESULT_OK;
}
     fba:	80 e0       	ldi	r24, 0x00	; 0
     fbc:	08 95       	ret

00000fbe <timer1ActivateInputCaptureInterrupt>:
 * Activates the timer1 input capture interrupt
 * -------------------------------------------------------------------------- */

resultValue_t timer1ActivateInputCaptureInterrupt(void)
{
	setBit(TIMSK1, ICIE1);
     fbe:	ef e6       	ldi	r30, 0x6F	; 111
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	80 81       	ld	r24, Z
     fc4:	80 62       	ori	r24, 0x20	; 32
     fc6:	80 83       	st	Z, r24
	return RESULT_OK;
}
     fc8:	80 e0       	ldi	r24, 0x00	; 0
     fca:	08 95       	ret

00000fcc <timer1DeactivateInputCaptureInterrupt>:
 * Deactivates the timer1 input capture interrupt
 * -------------------------------------------------------------------------- */

resultValue_t timer1DeactivateInputCaptureInterrupt(void)
{
	clrBit(TIMSK1, ICIE1);
     fcc:	ef e6       	ldi	r30, 0x6F	; 111
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	80 81       	ld	r24, Z
     fd2:	8f 7d       	andi	r24, 0xDF	; 223
     fd4:	80 83       	st	Z, r24
	return RESULT_OK;
}
     fd6:	80 e0       	ldi	r24, 0x00	; 0
     fd8:	08 95       	ret

00000fda <timer1ClearInputCaptureInterruptRequest>:
 * Clears the timer1 input capture interrupt request
 * -------------------------------------------------------------------------- */

resultValue_t timer1ClearInputCaptureInterruptRequest(void)
{
	setBit(TIFR1, ICF1);
     fda:	b5 9a       	sbi	0x16, 5	; 22
	return RESULT_OK;
}
     fdc:	80 e0       	ldi	r24, 0x00	; 0
     fde:	08 95       	ret

00000fe0 <timer1ForceCompareA>:
 * Forces a comparison on the output compare A of the timer1
 * -------------------------------------------------------------------------- */

resultValue_t timer1ForceCompareA(void)
{
	setBit(TCCR1C, FOC1A);
     fe0:	e2 e8       	ldi	r30, 0x82	; 130
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	80 81       	ld	r24, Z
     fe6:	80 68       	ori	r24, 0x80	; 128
     fe8:	80 83       	st	Z, r24
	return RESULT_OK;
}
     fea:	80 e0       	ldi	r24, 0x00	; 0
     fec:	08 95       	ret

00000fee <timer1ForceCompareB>:
 * Forces a comparison on the output compare B of the timer1
 * -------------------------------------------------------------------------- */

resultValue_t timer1ForceCompareB(void)
{
	setBit(TCCR1C, FOC1B);
     fee:	e2 e8       	ldi	r30, 0x82	; 130
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	80 81       	ld	r24, Z
     ff4:	80 64       	ori	r24, 0x40	; 64
     ff6:	80 83       	st	Z, r24
	return RESULT_OK;
}
     ff8:	80 e0       	ldi	r24, 0x00	; 0
     ffa:	08 95       	ret

00000ffc <timer1SetCounterValue>:
 * Sets the timer1 counter value
 * -------------------------------------------------------------------------- */

resultValue_t timer1SetCounterValue(uint16 value)
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
     ffc:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     ffe:	f8 94       	cli
		TCNT1 = value;
    1000:	90 93 85 00 	sts	0x0085, r25
    1004:	80 93 84 00 	sts	0x0084, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1008:	2f bf       	out	0x3f, r18	; 63
	}
	return RESULT_OK;
}
    100a:	80 e0       	ldi	r24, 0x00	; 0
    100c:	08 95       	ret

0000100e <timer1GetCounterValue>:
 * Gets the timer1 counter value
 * -------------------------------------------------------------------------- */

uint16 timer1GetCounterValue(void)
{
	return TCNT1;
    100e:	80 91 84 00 	lds	r24, 0x0084
    1012:	90 91 85 00 	lds	r25, 0x0085
}
    1016:	08 95       	ret

00001018 <timer1SetCompareAValue>:
 * Sets the timer1 compare A value
 * -------------------------------------------------------------------------- */

resultValue_t timer1SetCompareAValue(uint16 value)
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    1018:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    101a:	f8 94       	cli
		OCR1A = value;
    101c:	90 93 89 00 	sts	0x0089, r25
    1020:	80 93 88 00 	sts	0x0088, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1024:	2f bf       	out	0x3f, r18	; 63
	}
	return RESULT_OK;
}
    1026:	80 e0       	ldi	r24, 0x00	; 0
    1028:	08 95       	ret

0000102a <timer1GetCompareAValue>:
 * Gets the timer1 compare A value
 * -------------------------------------------------------------------------- */

uint16 timer1GetCompareAValue(void)
{
	return OCR1A;
    102a:	80 91 88 00 	lds	r24, 0x0088
    102e:	90 91 89 00 	lds	r25, 0x0089
}
    1032:	08 95       	ret

00001034 <timer1SetCompareBValue>:
 * Sets the timer1 compare B value
 * -------------------------------------------------------------------------- */

resultValue_t timer1SetCompareBValue(uint16 value)
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    1034:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1036:	f8 94       	cli
		OCR1B = value;
    1038:	90 93 8b 00 	sts	0x008B, r25
    103c:	80 93 8a 00 	sts	0x008A, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1040:	2f bf       	out	0x3f, r18	; 63
	}
	return RESULT_OK;
}
    1042:	80 e0       	ldi	r24, 0x00	; 0
    1044:	08 95       	ret

00001046 <timer1GetCompareBValue>:
 * Gets the timer1 compare B value
 * -------------------------------------------------------------------------- */

uint16 timer1GetCompareBValue(void)
{
	return OCR1B;
    1046:	80 91 8a 00 	lds	r24, 0x008A
    104a:	90 91 8b 00 	lds	r25, 0x008B
}
    104e:	08 95       	ret

00001050 <timer1SetInputCaptureValue>:
 * Sets the timer1 input capture value
 * -------------------------------------------------------------------------- */

resultValue_t timer1SetInputCaptureValue(uint16 value)
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    1050:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1052:	f8 94       	cli
		ICR1 = value;
    1054:	90 93 87 00 	sts	0x0087, r25
    1058:	80 93 86 00 	sts	0x0086, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    105c:	2f bf       	out	0x3f, r18	; 63
	}
	return RESULT_OK;
}
    105e:	80 e0       	ldi	r24, 0x00	; 0
    1060:	08 95       	ret

00001062 <timer1GetInputCaptureValue>:
 * Gets the timer1 input capture value
 * -------------------------------------------------------------------------- */

uint16 timer1GetInputCaptureValue(void)
{
	return ICR1;
    1062:	80 91 86 00 	lds	r24, 0x0086
    1066:	90 91 87 00 	lds	r25, 0x0087
}
    106a:	08 95       	ret

0000106c <timer2Config>:
 * Configures the timer2 mode and prescaler
 * -------------------------------------------------------------------------- */

resultValue_t timer2Config(timerModeA_t mode, timerPrescalerValueB_t prescaler)
{
	uint8 reg1 = TCCR2A;
    106c:	20 91 b0 00 	lds	r18, 0x00B0
	uint8 reg2 = TCCR2B;
    1070:	90 91 b1 00 	lds	r25, 0x00B1

	if(prescaler != TIMER_B_PRESCALER_NO_CHANGE){
    1074:	6f 3f       	cpi	r22, 0xFF	; 255
    1076:	11 f0       	breq	.+4      	; 0x107c <timer2Config+0x10>
		reg2 &= ~(0x07 << CS20);
    1078:	98 7f       	andi	r25, 0xF8	; 248
		reg2 |= prescaler;
    107a:	96 2b       	or	r25, r22
	}

	if(mode != TIMER_A_MODE_NO_CHANGE){
    107c:	8f 3f       	cpi	r24, 0xFF	; 255
    107e:	41 f0       	breq	.+16     	; 0x1090 <timer2Config+0x24>
		if(isBitSet(mode, 2))
    1080:	82 ff       	sbrs	r24, 2
    1082:	02 c0       	rjmp	.+4      	; 0x1088 <timer2Config+0x1c>
			setBit(reg2, WGM22);
    1084:	98 60       	ori	r25, 0x08	; 8
    1086:	01 c0       	rjmp	.+2      	; 0x108a <timer2Config+0x1e>
		else
			clrBit(reg2, WGM22);
    1088:	97 7f       	andi	r25, 0xF7	; 247
		reg1 &= ~(0x03 << WGM20);
		reg1 |= (mode & 0x03);
    108a:	83 70       	andi	r24, 0x03	; 3
	if(mode != TIMER_A_MODE_NO_CHANGE){
		if(isBitSet(mode, 2))
			setBit(reg2, WGM22);
		else
			clrBit(reg2, WGM22);
		reg1 &= ~(0x03 << WGM20);
    108c:	2c 7f       	andi	r18, 0xFC	; 252
		reg1 |= (mode & 0x03);
    108e:	28 2b       	or	r18, r24
	}
	TCCR2A = reg1;
    1090:	20 93 b0 00 	sts	0x00B0, r18
	TCCR2B = reg2;
    1094:	90 93 b1 00 	sts	0x00B1, r25

	return RESULT_OK;
}
    1098:	80 e0       	ldi	r24, 0x00	; 0
    109a:	08 95       	ret

0000109c <timer2OutputConfig>:
 * Configures the timer2 compare outputs
 * -------------------------------------------------------------------------- */

resultValue_t timer2OutputConfig(timerOutput_t compA, timerOutput_t compB)
{
	uint8 aux8 = TCCR2A;
    109c:	20 91 b0 00 	lds	r18, 0x00B0

	if(compA != TIMER_PORT_NO_CHANGE){
    10a0:	8f 3f       	cpi	r24, 0xFF	; 255
    10a2:	31 f0       	breq	.+12     	; 0x10b0 <timer2OutputConfig+0x14>
		aux8 &= ~(0x03 << COM2A0);
		aux8 |= (compA << COM2A0); 
    10a4:	30 e4       	ldi	r19, 0x40	; 64
    10a6:	83 9f       	mul	r24, r19
    10a8:	c0 01       	movw	r24, r0
    10aa:	11 24       	eor	r1, r1
resultValue_t timer2OutputConfig(timerOutput_t compA, timerOutput_t compB)
{
	uint8 aux8 = TCCR2A;

	if(compA != TIMER_PORT_NO_CHANGE){
		aux8 &= ~(0x03 << COM2A0);
    10ac:	2f 73       	andi	r18, 0x3F	; 63
		aux8 |= (compA << COM2A0); 
    10ae:	28 2b       	or	r18, r24
	}
	if(compB != TIMER_PORT_NO_CHANGE){
    10b0:	6f 3f       	cpi	r22, 0xFF	; 255
    10b2:	31 f0       	breq	.+12     	; 0x10c0 <timer2OutputConfig+0x24>
		aux8 &= ~(0x03 << COM2B0);
    10b4:	2f 7c       	andi	r18, 0xCF	; 207
		aux8 |= (compB << COM2B0); 
    10b6:	80 e1       	ldi	r24, 0x10	; 16
    10b8:	68 9f       	mul	r22, r24
    10ba:	b0 01       	movw	r22, r0
    10bc:	11 24       	eor	r1, r1
    10be:	26 2b       	or	r18, r22
	}
	TCCR2A = aux8;
    10c0:	20 93 b0 00 	sts	0x00B0, r18
	return RESULT_OK;
}
    10c4:	80 e0       	ldi	r24, 0x00	; 0
    10c6:	08 95       	ret

000010c8 <timer2ActivateOverflowInterrupt>:
 * Activates the timer2 overflow interrupt
 * -------------------------------------------------------------------------- */

resultValue_t timer2ActivateOverflowInterrupt(void)
{
	setBit(TIMSK2, TOIE2);
    10c8:	e0 e7       	ldi	r30, 0x70	; 112
    10ca:	f0 e0       	ldi	r31, 0x00	; 0
    10cc:	80 81       	ld	r24, Z
    10ce:	81 60       	ori	r24, 0x01	; 1
    10d0:	80 83       	st	Z, r24
	return RESULT_OK;
}
    10d2:	80 e0       	ldi	r24, 0x00	; 0
    10d4:	08 95       	ret

000010d6 <timer2DeactivateOverflowInterrupt>:
 * Deactivates the timer2 overflow interrupt
 * -------------------------------------------------------------------------- */

resultValue_t timer2DeactivateOverflowInterrupt(void)
{
	clrBit(TIMSK2, TOIE2);
    10d6:	e0 e7       	ldi	r30, 0x70	; 112
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	80 81       	ld	r24, Z
    10dc:	8e 7f       	andi	r24, 0xFE	; 254
    10de:	80 83       	st	Z, r24
	return RESULT_OK;
}
    10e0:	80 e0       	ldi	r24, 0x00	; 0
    10e2:	08 95       	ret

000010e4 <timer2ClearOverflowInterruptRequest>:
 * Clears the timer2 overflow interrupt request
 * -------------------------------------------------------------------------- */

resultValue_t timer2ClearOverflowInterruptRequest(void)
{
	setBit(TIFR2, TOV2);
    10e4:	b8 9a       	sbi	0x17, 0	; 23
	return RESULT_OK;
}
    10e6:	80 e0       	ldi	r24, 0x00	; 0
    10e8:	08 95       	ret

000010ea <timer2ActivateCompareAInterrupt>:
 * Activates the timer2 compare A interrupt
 * -------------------------------------------------------------------------- */

resultValue_t timer2ActivateCompareAInterrupt(void)
{
	setBit(TIMSK2, OCIE2A);
    10ea:	e0 e7       	ldi	r30, 0x70	; 112
    10ec:	f0 e0       	ldi	r31, 0x00	; 0
    10ee:	80 81       	ld	r24, Z
    10f0:	82 60       	ori	r24, 0x02	; 2
    10f2:	80 83       	st	Z, r24
	return RESULT_OK;
}
    10f4:	80 e0       	ldi	r24, 0x00	; 0
    10f6:	08 95       	ret

000010f8 <timer2DeactivateCompareAInterrupt>:
 * Deactivates the timer2 compare A interrupt
 * -------------------------------------------------------------------------- */

resultValue_t timer2DeactivateCompareAInterrupt(void)
{
	clrBit(TIMSK2, OCIE2A);
    10f8:	e0 e7       	ldi	r30, 0x70	; 112
    10fa:	f0 e0       	ldi	r31, 0x00	; 0
    10fc:	80 81       	ld	r24, Z
    10fe:	8d 7f       	andi	r24, 0xFD	; 253
    1100:	80 83       	st	Z, r24
	return RESULT_OK;
}
    1102:	80 e0       	ldi	r24, 0x00	; 0
    1104:	08 95       	ret

00001106 <timer2ClearCompareAInterruptRequest>:
 * Clears the timer2 compare A interrupt request
 * -------------------------------------------------------------------------- */

resultValue_t timer2ClearCompareAInterruptRequest(void)
{
	setBit(TIFR2, OCF2A);
    1106:	b9 9a       	sbi	0x17, 1	; 23
	return RESULT_OK;
}
    1108:	80 e0       	ldi	r24, 0x00	; 0
    110a:	08 95       	ret

0000110c <timer2ActivateCompareBInterrupt>:
 * Activates the timer2 compare B interrupt
 * -------------------------------------------------------------------------- */

resultValue_t timer2ActivateCompareBInterrupt(void)
{
	setBit(TIMSK2, OCIE2B);
    110c:	e0 e7       	ldi	r30, 0x70	; 112
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	80 81       	ld	r24, Z
    1112:	84 60       	ori	r24, 0x04	; 4
    1114:	80 83       	st	Z, r24
	return RESULT_OK;
}
    1116:	80 e0       	ldi	r24, 0x00	; 0
    1118:	08 95       	ret

0000111a <timer2DeactivateCompareBInterrupt>:
 * Deactivates the timer2 compare B interrupt
 * -------------------------------------------------------------------------- */

resultValue_t timer2DeactivateCompareBInterrupt(void)
{
	clrBit(TIMSK2, OCIE2B);
    111a:	e0 e7       	ldi	r30, 0x70	; 112
    111c:	f0 e0       	ldi	r31, 0x00	; 0
    111e:	80 81       	ld	r24, Z
    1120:	8b 7f       	andi	r24, 0xFB	; 251
    1122:	80 83       	st	Z, r24
	return RESULT_OK;
}
    1124:	80 e0       	ldi	r24, 0x00	; 0
    1126:	08 95       	ret

00001128 <timer2ClearCompareBInterruptRequest>:
 * Clears the timer2 compare B interrupt request
 * -------------------------------------------------------------------------- */

resultValue_t timer2ClearCompareBInterruptRequest(void)
{
	setBit(TIFR2, OCF2B);
    1128:	ba 9a       	sbi	0x17, 2	; 23
	return RESULT_OK;
}
    112a:	80 e0       	ldi	r24, 0x00	; 0
    112c:	08 95       	ret

0000112e <timer2ForceCompareA>:
 * Forces a comparison on the output compare A of the timer2
 * -------------------------------------------------------------------------- */

resultValue_t timer2ForceCompareA(void)
{
	setBit(TCCR2B, FOC2A);
    112e:	e1 eb       	ldi	r30, 0xB1	; 177
    1130:	f0 e0       	ldi	r31, 0x00	; 0
    1132:	80 81       	ld	r24, Z
    1134:	80 68       	ori	r24, 0x80	; 128
    1136:	80 83       	st	Z, r24
	return RESULT_OK;
}
    1138:	80 e0       	ldi	r24, 0x00	; 0
    113a:	08 95       	ret

0000113c <timer2ForceCompareB>:
 * Forces a comparison on the output compare B of the timer2
 * -------------------------------------------------------------------------- */

resultValue_t timer2ForceCompareB(void)
{
	setBit(TCCR2B, FOC2B);
    113c:	e1 eb       	ldi	r30, 0xB1	; 177
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	80 81       	ld	r24, Z
    1142:	80 64       	ori	r24, 0x40	; 64
    1144:	80 83       	st	Z, r24
	return RESULT_OK;
}
    1146:	80 e0       	ldi	r24, 0x00	; 0
    1148:	08 95       	ret

0000114a <timer2SetCounterValue>:
 * Sets the timer2 counter value
 * -------------------------------------------------------------------------- */

resultValue_t timer2SetCounterValue(uint8 value)
{
	TCNT2 = value;
    114a:	80 93 b2 00 	sts	0x00B2, r24
	return RESULT_OK;
}
    114e:	80 e0       	ldi	r24, 0x00	; 0
    1150:	08 95       	ret

00001152 <timer2GetCounterValue>:
 * Gets the timer2 counter value
 * -------------------------------------------------------------------------- */

uint8 timer2GetCounterValue(void)
{
	return TCNT2;
    1152:	80 91 b2 00 	lds	r24, 0x00B2
}
    1156:	08 95       	ret

00001158 <timer2SetCompareAValue>:
 * Sets the timer2 compare A value
 * -------------------------------------------------------------------------- */

resultValue_t timer2SetCompareAValue(uint8 value)
{
	OCR2A = value;
    1158:	80 93 b3 00 	sts	0x00B3, r24
	return RESULT_OK;
}
    115c:	80 e0       	ldi	r24, 0x00	; 0
    115e:	08 95       	ret

00001160 <timer2GetCompareAValue>:
 * Gets the timer2 compare A value
 * -------------------------------------------------------------------------- */

uint8 timer2GetCompareAValue(void)
{
	return OCR2A;
    1160:	80 91 b3 00 	lds	r24, 0x00B3
}
    1164:	08 95       	ret

00001166 <timer2SetCompareBValue>:
 * Sets the timer2 compare B value
 * -------------------------------------------------------------------------- */

resultValue_t timer2SetCompareBValue(uint8 value)
{
	OCR2B = value;
    1166:	80 93 b4 00 	sts	0x00B4, r24
	return RESULT_OK;
}
    116a:	80 e0       	ldi	r24, 0x00	; 0
    116c:	08 95       	ret

0000116e <timer2GetCompareBValue>:
 * Gets the timer2 compare B value
 * -------------------------------------------------------------------------- */

uint8 timer2GetCompareBValue(void)
{
	return OCR2B;
    116e:	80 91 b4 00 	lds	r24, 0x00B4
}
    1172:	08 95       	ret

00001174 <adcConfig>:

resultValue_t adcConfig(adcMode_t mode, adcReference_t reference, adcPrescaler_t  prescaler)
{
	uint8 reg = 0;

	if(reference != ADC_REFERENCE_NO_CHANGE){
    1174:	6f 3f       	cpi	r22, 0xFF	; 255
    1176:	51 f0       	breq	.+20     	; 0x118c <adcConfig+0x18>
		reg = ADMUX;
    1178:	90 91 7c 00 	lds	r25, 0x007C
		reg &= ~(0x03 << REFS0);
		reg |= reference << REFS0;
    117c:	20 e4       	ldi	r18, 0x40	; 64
    117e:	62 9f       	mul	r22, r18
    1180:	b0 01       	movw	r22, r0
    1182:	11 24       	eor	r1, r1
{
	uint8 reg = 0;

	if(reference != ADC_REFERENCE_NO_CHANGE){
		reg = ADMUX;
		reg &= ~(0x03 << REFS0);
    1184:	9f 73       	andi	r25, 0x3F	; 63
		reg |= reference << REFS0;
    1186:	96 2b       	or	r25, r22
		ADMUX = reg;
    1188:	90 93 7c 00 	sts	0x007C, r25
	}

	if(prescaler != ADC_PRESCALER_NO_CHANGE){
    118c:	4f 3f       	cpi	r20, 0xFF	; 255
    118e:	31 f0       	breq	.+12     	; 0x119c <adcConfig+0x28>
		reg = ADCSRA;
    1190:	90 91 7a 00 	lds	r25, 0x007A
		reg &= ~(0x07 << ADPS0);
    1194:	98 7f       	andi	r25, 0xF8	; 248
		reg |= prescaler << ADPS0;
    1196:	94 2b       	or	r25, r20
		ADCSRA = reg;
    1198:	90 93 7a 00 	sts	0x007A, r25
	}

	if(mode != ADC_MODE_NO_CHANGE){
    119c:	8f 3f       	cpi	r24, 0xFF	; 255
    119e:	39 f1       	breq	.+78     	; 0x11ee <adcConfig+0x7a>
		if(mode == ADC_MODE_SINGLE_CONVERSION)
    11a0:	81 11       	cpse	r24, r1
    11a2:	04 c0       	rjmp	.+8      	; 0x11ac <adcConfig+0x38>
			clrBit(ADCSRA, ADATE);
    11a4:	80 91 7a 00 	lds	r24, 0x007A
    11a8:	8f 7d       	andi	r24, 0xDF	; 223
    11aa:	1f c0       	rjmp	.+62     	; 0x11ea <adcConfig+0x76>
		else{
			reg = ADCSRB;
    11ac:	20 91 7b 00 	lds	r18, 0x007B
			reg &= ~(0x07 << ADTS0);
    11b0:	28 7f       	andi	r18, 0xF8	; 248
			switch(mode){
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	fc 01       	movw	r30, r24
    11b6:	32 97       	sbiw	r30, 0x02	; 2
    11b8:	e7 30       	cpi	r30, 0x07	; 7
    11ba:	f1 05       	cpc	r31, r1
    11bc:	d0 f4       	brcc	.+52     	; 0x11f2 <adcConfig+0x7e>
    11be:	e3 5a       	subi	r30, 0xA3	; 163
    11c0:	ff 4f       	sbci	r31, 0xFF	; 255
    11c2:	0c 94 4b 0d 	jmp	0x1a96	; 0x1a96 <__tablejump2__>
				case ADC_MODE_AUTO_ANALOG_COMP:		reg |= (1 << ADTS0);	break;
    11c6:	21 60       	ori	r18, 0x01	; 1
    11c8:	0b c0       	rjmp	.+22     	; 0x11e0 <adcConfig+0x6c>
				case ADC_MODE_AUTO_INT0:			reg |= (2 << ADTS0);	break;
    11ca:	22 60       	ori	r18, 0x02	; 2
    11cc:	09 c0       	rjmp	.+18     	; 0x11e0 <adcConfig+0x6c>
				case ADC_MODE_AUTO_TIMER0_COMPA:	reg |= (3 << ADTS0);	break;
    11ce:	23 60       	ori	r18, 0x03	; 3
    11d0:	07 c0       	rjmp	.+14     	; 0x11e0 <adcConfig+0x6c>
				case ADC_MODE_AUTO_TIMER0_OVERFLOW:	reg |= (4 << ADTS0);	break;
    11d2:	24 60       	ori	r18, 0x04	; 4
    11d4:	05 c0       	rjmp	.+10     	; 0x11e0 <adcConfig+0x6c>
				case ADC_MODE_AUTO_TIMER1_COMPB:	reg |= (5 << ADTS0);	break;
    11d6:	25 60       	ori	r18, 0x05	; 5
    11d8:	03 c0       	rjmp	.+6      	; 0x11e0 <adcConfig+0x6c>
				case ADC_MODE_AUTO_TIMER1_OVERFLOW:	reg |= (6 << ADTS0);	break;
    11da:	26 60       	ori	r18, 0x06	; 6
    11dc:	01 c0       	rjmp	.+2      	; 0x11e0 <adcConfig+0x6c>
				case ADC_MODE_AUTO_TIMER1_CAPTURE:	reg |= (7 << ADTS0);	break;
    11de:	27 60       	ori	r18, 0x07	; 7
				default:							return RESULT_UNSUPPORTED_VALUE;	break;
			}
			ADCSRB = reg;
    11e0:	20 93 7b 00 	sts	0x007B, r18
			setBit(ADCSRA, ADATE);
    11e4:	80 91 7a 00 	lds	r24, 0x007A
    11e8:	80 62       	ori	r24, 0x20	; 32
    11ea:	80 93 7a 00 	sts	0x007A, r24
		}
	}

	return RESULT_OK;
    11ee:	80 e0       	ldi	r24, 0x00	; 0
    11f0:	08 95       	ret
				case ADC_MODE_AUTO_TIMER0_COMPA:	reg |= (3 << ADTS0);	break;
				case ADC_MODE_AUTO_TIMER0_OVERFLOW:	reg |= (4 << ADTS0);	break;
				case ADC_MODE_AUTO_TIMER1_COMPB:	reg |= (5 << ADTS0);	break;
				case ADC_MODE_AUTO_TIMER1_OVERFLOW:	reg |= (6 << ADTS0);	break;
				case ADC_MODE_AUTO_TIMER1_CAPTURE:	reg |= (7 << ADTS0);	break;
				default:							return RESULT_UNSUPPORTED_VALUE;	break;
    11f2:	87 e0       	ldi	r24, 0x07	; 7
			setBit(ADCSRA, ADATE);
		}
	}

	return RESULT_OK;
 }
    11f4:	08 95       	ret

000011f6 <adcSelectChannel>:
 * Selects the adc channel
 * -------------------------------------------------------------------------- */

resultValue_t adcSelectChannel(adcChannel_t channel)
{
	uint8 reg = ADMUX;
    11f6:	ec e7       	ldi	r30, 0x7C	; 124
    11f8:	f0 e0       	ldi	r31, 0x00	; 0
    11fa:	90 81       	ld	r25, Z

	reg &= ~(0x0F << MUX0);
    11fc:	90 7f       	andi	r25, 0xF0	; 240
	reg |= (channel << MUX0);
    11fe:	98 2b       	or	r25, r24
	ADMUX = reg;
    1200:	90 83       	st	Z, r25

	return RESULT_OK;
}
    1202:	80 e0       	ldi	r24, 0x00	; 0
    1204:	08 95       	ret

00001206 <adcEnableDigitalInput>:
 * Enable adc digital inputs
 * -------------------------------------------------------------------------- */

resultValue_t adcEnableDigitalInput(uint8 flagInputs)
{
	DIDR0 &= (~flagInputs);
    1206:	ee e7       	ldi	r30, 0x7E	; 126
    1208:	f0 e0       	ldi	r31, 0x00	; 0
    120a:	90 81       	ld	r25, Z
    120c:	80 95       	com	r24
    120e:	89 23       	and	r24, r25
    1210:	80 83       	st	Z, r24

	return RESULT_OK;
}
    1212:	80 e0       	ldi	r24, 0x00	; 0
    1214:	08 95       	ret

00001216 <adcDisableDigitalInput>:
 * Enable adc digital inputs
 * -------------------------------------------------------------------------- */

resultValue_t adcDisableDigitalInput(uint8 flagInputs)
{
	DIDR0 |= flagInputs;
    1216:	ee e7       	ldi	r30, 0x7E	; 126
    1218:	f0 e0       	ldi	r31, 0x00	; 0
    121a:	90 81       	ld	r25, Z
    121c:	98 2b       	or	r25, r24
    121e:	90 83       	st	Z, r25

	return RESULT_OK;
}
    1220:	80 e0       	ldi	r24, 0x00	; 0
    1222:	08 95       	ret

00001224 <adcDataPresentation>:
 * Sets the adc data presentation
 * -------------------------------------------------------------------------- */

resultValue_t adcDataPresentation(adcDataPresentation_t presentation)
{
	if(presentation == ADC_LEFT_ADJUSTED)
    1224:	81 11       	cpse	r24, r1
    1226:	04 c0       	rjmp	.+8      	; 0x1230 <adcDataPresentation+0xc>
		setBit(ADMUX, ADLAR);
    1228:	80 91 7c 00 	lds	r24, 0x007C
    122c:	80 62       	ori	r24, 0x20	; 32
    122e:	03 c0       	rjmp	.+6      	; 0x1236 <adcDataPresentation+0x12>
	else
		clrBit(ADMUX, ADLAR);
    1230:	80 91 7c 00 	lds	r24, 0x007C
    1234:	8f 7d       	andi	r24, 0xDF	; 223
    1236:	80 93 7c 00 	sts	0x007C, r24

	return RESULT_OK;
}
    123a:	80 e0       	ldi	r24, 0x00	; 0
    123c:	08 95       	ret

0000123e <adcEnable>:
 * Enables the adc module
 * -------------------------------------------------------------------------- */

resultValue_t adcEnable(void)
{
	setBit(ADCSRA, ADEN);
    123e:	ea e7       	ldi	r30, 0x7A	; 122
    1240:	f0 e0       	ldi	r31, 0x00	; 0
    1242:	80 81       	ld	r24, Z
    1244:	80 68       	ori	r24, 0x80	; 128
    1246:	80 83       	st	Z, r24

	return RESULT_OK;
}
    1248:	80 e0       	ldi	r24, 0x00	; 0
    124a:	08 95       	ret

0000124c <adcDisable>:
 * Disables the adc module
 * -------------------------------------------------------------------------- */

resultValue_t adcDisable(void)
{
	clrBit(ADCSRA, ADEN);
    124c:	ea e7       	ldi	r30, 0x7A	; 122
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	80 81       	ld	r24, Z
    1252:	8f 77       	andi	r24, 0x7F	; 127
    1254:	80 83       	st	Z, r24

	return RESULT_OK;
}
    1256:	80 e0       	ldi	r24, 0x00	; 0
    1258:	08 95       	ret

0000125a <adcClearInterruptRequest>:
 * Clears the adc interrupt request
 * -------------------------------------------------------------------------- */

resultValue_t adcClearInterruptRequest(void)
{
	setBit(ADCSRA, ADIF);
    125a:	ea e7       	ldi	r30, 0x7A	; 122
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	80 81       	ld	r24, Z
    1260:	80 61       	ori	r24, 0x10	; 16
    1262:	80 83       	st	Z, r24

	return RESULT_OK;
}
    1264:	80 e0       	ldi	r24, 0x00	; 0
    1266:	08 95       	ret

00001268 <adcActivateInterrupt>:
 * Enables the adc interrupt
 * -------------------------------------------------------------------------- */

resultValue_t adcActivateInterrupt(void)
{
	setBit(ADCSRA, ADIE);
    1268:	ea e7       	ldi	r30, 0x7A	; 122
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	80 81       	ld	r24, Z
    126e:	88 60       	ori	r24, 0x08	; 8
    1270:	80 83       	st	Z, r24

	return RESULT_OK;
}
    1272:	80 e0       	ldi	r24, 0x00	; 0
    1274:	08 95       	ret

00001276 <adcDeactivateInterrupt>:
 * Disables the adc interrupt
 * -------------------------------------------------------------------------- */

resultValue_t adcDeactivateInterrupt(void)
{
	clrBit(ADCSRA, ADIE);
    1276:	ea e7       	ldi	r30, 0x7A	; 122
    1278:	f0 e0       	ldi	r31, 0x00	; 0
    127a:	80 81       	ld	r24, Z
    127c:	87 7f       	andi	r24, 0xF7	; 247
    127e:	80 83       	st	Z, r24

	return RESULT_OK;
}
    1280:	80 e0       	ldi	r24, 0x00	; 0
    1282:	08 95       	ret

00001284 <adcStartConversion>:
 * Starts an adc conversion
 * -------------------------------------------------------------------------- */

resultValue_t adcStartConversion(void)
{
	setBit(ADCSRA, ADSC);
    1284:	ea e7       	ldi	r30, 0x7A	; 122
    1286:	f0 e0       	ldi	r31, 0x00	; 0
    1288:	80 81       	ld	r24, Z
    128a:	80 64       	ori	r24, 0x40	; 64
    128c:	80 83       	st	Z, r24

	return RESULT_OK;
}
    128e:	80 e0       	ldi	r24, 0x00	; 0
    1290:	08 95       	ret

00001292 <adcIsBusy>:
 * Returns if an adc conversion is running
 * -------------------------------------------------------------------------- */

bool_t adcIsBusy(void)
{
	return isBitSet(ADCSRA, ADSC);
    1292:	80 91 7a 00 	lds	r24, 0x007A
}
    1296:	86 fb       	bst	r24, 6
    1298:	88 27       	eor	r24, r24
    129a:	80 f9       	bld	r24, 0
    129c:	08 95       	ret

0000129e <adcWaitUntilConversionFinish>:
 * Waits until the current conversion is finished
 * -------------------------------------------------------------------------- */

resultValue_t adcWaitUntilConversionFinish(void)
{
	waitUntilBitIsClear(ADCSRA, ADSC);
    129e:	80 91 7a 00 	lds	r24, 0x007A
    12a2:	86 fd       	sbrc	r24, 6
    12a4:	fc cf       	rjmp	.-8      	; 0x129e <adcWaitUntilConversionFinish>
	return RESULT_OK;
}
    12a6:	80 e0       	ldi	r24, 0x00	; 0
    12a8:	08 95       	ret

000012aa <usartConfig>:
/* -----------------------------------------------------------------------------
 * Configures the USART controller
 * -------------------------------------------------------------------------- */

resultValue_t usartConfig(usartMode_t mode, usartBaudRate_t baudRate, usartDataBits_t dataBits, usartParity_t parity, usartStopBits_t stopBits)
{
    12aa:	8f 92       	push	r8
    12ac:	9f 92       	push	r9
    12ae:	af 92       	push	r10
    12b0:	bf 92       	push	r11
    12b2:	cf 92       	push	r12
    12b4:	df 92       	push	r13
    12b6:	ef 92       	push	r14
    12b8:	ff 92       	push	r15
    12ba:	0f 93       	push	r16
    12bc:	4a 01       	movw	r8, r20
    12be:	5b 01       	movw	r10, r22
    12c0:	9e 2d       	mov	r25, r14
	uint8 reg1 = UCSR0A;
    12c2:	30 91 c0 00 	lds	r19, 0x00C0
	uint8 reg2 = UCSR0B;
    12c6:	30 91 c1 00 	lds	r19, 0x00C1
	uint8 reg3 = UCSR0C;
    12ca:	30 91 c2 00 	lds	r19, 0x00C2

	// Clear errors
	reg1 &= ~((1 << FE0) | (1 << DOR0) | (1 << UPE0));

	// USART stop bits
	if(stopBits != USART_STOP_BIT_NO_CHANGE){
    12ce:	9f 3f       	cpi	r25, 0xFF	; 255
    12d0:	19 f0       	breq	.+6      	; 0x12d8 <usartConfig+0x2e>
		switch(stopBits){
    12d2:	92 30       	cpi	r25, 0x02	; 2
    12d4:	08 f0       	brcs	.+2      	; 0x12d8 <usartConfig+0x2e>
    12d6:	5f c0       	rjmp	.+190    	; 0x1396 <usartConfig+0xec>
			default:					return RESULT_UNSUPPORTED_VALUE;	break;
		}
	}

	// USART parity bits
	if(parity != USART_PARITY_NO_CHANGE){
    12d8:	0f 3f       	cpi	r16, 0xFF	; 255
    12da:	19 f0       	breq	.+6      	; 0x12e2 <usartConfig+0x38>
		reg3 &= ~(0x03 << UPM00);
		switch(parity){
    12dc:	03 30       	cpi	r16, 0x03	; 3
    12de:	08 f0       	brcs	.+2      	; 0x12e2 <usartConfig+0x38>
    12e0:	5c c0       	rjmp	.+184    	; 0x139a <usartConfig+0xf0>
			default:					return RESULT_USART_PARITY_UNSUPORTED;	break;
		}
	}

	// USART data bits
	if(dataBits != USART_DATA_BITS_NO_CHANGE){
    12e2:	2f 3f       	cpi	r18, 0xFF	; 255
    12e4:	19 f0       	breq	.+6      	; 0x12ec <usartConfig+0x42>
		clrBit(reg2, UCSZ02);
		reg3 &= ~(0x03 << UCSZ00);
		switch(dataBits){
    12e6:	25 30       	cpi	r18, 0x05	; 5
    12e8:	08 f0       	brcs	.+2      	; 0x12ec <usartConfig+0x42>
    12ea:	57 c0       	rjmp	.+174    	; 0x139a <usartConfig+0xf0>
			break;
		}
	}

	// USART mode
	if(mode != USART_MODE_NO_CHANGE){
    12ec:	8f 3f       	cpi	r24, 0xFF	; 255
    12ee:	79 f4       	brne	.+30     	; 0x130e <usartConfig+0x64>
			reg3 |= (3 << UMSEL00);		// Synchronous SPI Mode
			setBit(reg3, UCPOL0);		// Polarity
			break;
		}
	}else{
		aux8 = (0x03 & (UCSR0C >> UMSEL00));
    12f0:	80 91 c2 00 	lds	r24, 0x00C2
    12f4:	82 95       	swap	r24
    12f6:	86 95       	lsr	r24
    12f8:	86 95       	lsr	r24
    12fa:	83 70       	andi	r24, 0x03	; 3
		switch(aux8){
    12fc:	21 f0       	breq	.+8      	; 0x1306 <usartConfig+0x5c>
    12fe:	83 30       	cpi	r24, 0x03	; 3
    1300:	e9 f0       	breq	.+58     	; 0x133c <usartConfig+0x92>
resultValue_t usartConfig(usartMode_t mode, usartBaudRate_t baudRate, usartDataBits_t dataBits, usartParity_t parity, usartStopBits_t stopBits)
{
	uint8 reg1 = UCSR0A;
	uint8 reg2 = UCSR0B;
	uint8 reg3 = UCSR0C;
	uint8 modeAux = 0;
    1302:	80 e0       	ldi	r24, 0x00	; 0
    1304:	04 c0       	rjmp	.+8      	; 0x130e <usartConfig+0x64>
		}
	}else{
		aux8 = (0x03 & (UCSR0C >> UMSEL00));
		switch(aux8){
		case 0:	// Asynchronous mode
			if(isBitClr(UCSR0A, U2X0)){	// Single speed
    1306:	80 91 c0 00 	lds	r24, 0x00C0
    130a:	86 95       	lsr	r24
    130c:	81 70       	andi	r24, 0x01	; 1
			modeAux = USART_MODE_SYNCHRONOUS_SPI;
			break;
		}
	}

	if(baudRate != USART_BAUD_NO_CHANGE){
    130e:	9f ef       	ldi	r25, 0xFF	; 255
    1310:	89 16       	cp	r8, r25
    1312:	99 06       	cpc	r9, r25
    1314:	a9 06       	cpc	r10, r25
    1316:	b9 06       	cpc	r11, r25
    1318:	09 f4       	brne	.+2      	; 0x131c <usartConfig+0x72>
    131a:	41 c0       	rjmp	.+130    	; 0x139e <usartConfig+0xf4>
		switch(modeAux){
    131c:	81 30       	cpi	r24, 0x01	; 1
    131e:	49 f0       	breq	.+18     	; 0x1332 <usartConfig+0x88>
    1320:	18 f0       	brcs	.+6      	; 0x1328 <usartConfig+0x7e>
    1322:	84 30       	cpi	r24, 0x04	; 4
    1324:	89 f0       	breq	.+34     	; 0x1348 <usartConfig+0x9e>
    1326:	22 c0       	rjmp	.+68     	; 0x136c <usartConfig+0xc2>
		case USART_MODE_ASYNCHRONOUS:
			aux64 = (F_CPU / 16 / baudRate) - 1;
    1328:	60 e4       	ldi	r22, 0x40	; 64
    132a:	72 e4       	ldi	r23, 0x42	; 66
    132c:	8f e0       	ldi	r24, 0x0F	; 15
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	0f c0       	rjmp	.+30     	; 0x1350 <usartConfig+0xa6>
			break;
		case USART_MODE_ASYNCHRONOUS_DOUBLE_SPEED:
			aux64 = (F_CPU / 8 / baudRate) - 1;
    1332:	60 e8       	ldi	r22, 0x80	; 128
    1334:	74 e8       	ldi	r23, 0x84	; 132
    1336:	8e e1       	ldi	r24, 0x1E	; 30
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	0a c0       	rjmp	.+20     	; 0x1350 <usartConfig+0xa6>
			modeAux = USART_MODE_SYNCHRONOUS_SPI;
			break;
		}
	}

	if(baudRate != USART_BAUD_NO_CHANGE){
    133c:	8f ef       	ldi	r24, 0xFF	; 255
    133e:	88 16       	cp	r8, r24
    1340:	98 06       	cpc	r9, r24
    1342:	a8 06       	cpc	r10, r24
    1344:	b8 06       	cpc	r11, r24
    1346:	59 f1       	breq	.+86     	; 0x139e <usartConfig+0xf4>
			break;
		case USART_MODE_ASYNCHRONOUS_DOUBLE_SPEED:
			aux64 = (F_CPU / 8 / baudRate) - 1;
			break;
		case USART_MODE_SYNCHRONOUS_SPI:
			aux64 = (F_CPU / 2 / baudRate) - 1;
    1348:	60 e0       	ldi	r22, 0x00	; 0
    134a:	72 e1       	ldi	r23, 0x12	; 18
    134c:	8a e7       	ldi	r24, 0x7A	; 122
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	a5 01       	movw	r20, r10
    1352:	94 01       	movw	r18, r8
    1354:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <__udivmodsi4>
    1358:	21 50       	subi	r18, 0x01	; 1
    135a:	31 09       	sbc	r19, r1
    135c:	41 09       	sbc	r20, r1
    135e:	51 09       	sbc	r21, r1
    1360:	49 01       	movw	r8, r18
    1362:	5a 01       	movw	r10, r20
    1364:	c1 2c       	mov	r12, r1
    1366:	d1 2c       	mov	r13, r1
    1368:	76 01       	movw	r14, r12
			break;
    136a:	08 c0       	rjmp	.+16     	; 0x137c <usartConfig+0xd2>
	uint8 reg1 = UCSR0A;
	uint8 reg2 = UCSR0B;
	uint8 reg3 = UCSR0C;
	uint8 modeAux = 0;
	uint8 aux8 = 0;
	uint64 aux64 = 0;
    136c:	81 2c       	mov	r8, r1
    136e:	91 2c       	mov	r9, r1
    1370:	a1 2c       	mov	r10, r1
    1372:	b1 2c       	mov	r11, r1
    1374:	c1 2c       	mov	r12, r1
    1376:	d1 2c       	mov	r13, r1
    1378:	e1 2c       	mov	r14, r1
    137a:	f1 2c       	mov	r15, r1
			aux64 = (F_CPU / 2 / baudRate) - 1;
			break;
		}
//		if((aux64 > (1.05 * baudRate)) || (aux64 < (0.95 * baudRate)))
//			return RESULT_USART_BAUD_RATE_UNSUPORTED;
		UBRR0H = 0x0F & (aux64 >> 8);
    137c:	94 01       	movw	r18, r8
    137e:	a5 01       	movw	r20, r10
    1380:	b6 01       	movw	r22, r12
    1382:	c7 01       	movw	r24, r14
    1384:	08 e0       	ldi	r16, 0x08	; 8
    1386:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <__lshrdi3>
    138a:	2f 70       	andi	r18, 0x0F	; 15
    138c:	20 93 c5 00 	sts	0x00C5, r18
		UBRR0L = (0xFF & aux64);
    1390:	80 92 c4 00 	sts	0x00C4, r8
    1394:	04 c0       	rjmp	.+8      	; 0x139e <usartConfig+0xf4>
	// USART stop bits
	if(stopBits != USART_STOP_BIT_NO_CHANGE){
		switch(stopBits){
			case USART_STOP_BIT_SINGLE:	clrBit(reg3, USBS0);				break;
			case USART_STOP_BIT_DOUBLE:	setBit(reg3, USBS0);				break;
			default:					return RESULT_UNSUPPORTED_VALUE;	break;
    1396:	87 e0       	ldi	r24, 0x07	; 7
    1398:	03 c0       	rjmp	.+6      	; 0x13a0 <usartConfig+0xf6>
		case USART_DATA_BITS_9:
			setBit(reg2, UCSZ02);
			reg3 |= (0x03 << UCSZ00);
			break;
		default:
			return RESULT_USART_PARITY_UNSUPORTED;
    139a:	85 e0       	ldi	r24, 0x05	; 5
    139c:	01 c0       	rjmp	.+2      	; 0x13a0 <usartConfig+0xf6>
//			return RESULT_USART_BAUD_RATE_UNSUPORTED;
		UBRR0H = 0x0F & (aux64 >> 8);
		UBRR0L = (0xFF & aux64);
	}

	return RESULT_OK;
    139e:	80 e0       	ldi	r24, 0x00	; 0
}
    13a0:	0f 91       	pop	r16
    13a2:	ff 90       	pop	r15
    13a4:	ef 90       	pop	r14
    13a6:	df 90       	pop	r13
    13a8:	cf 90       	pop	r12
    13aa:	bf 90       	pop	r11
    13ac:	af 90       	pop	r10
    13ae:	9f 90       	pop	r9
    13b0:	8f 90       	pop	r8
    13b2:	08 95       	ret

000013b4 <usartEnableReceiver>:
 * Enables USART reception module
 * -------------------------------------------------------------------------- */

resultValue_t usartEnableReceiver(void)
{
	setBit(UCSR0B, RXEN0);
    13b4:	e1 ec       	ldi	r30, 0xC1	; 193
    13b6:	f0 e0       	ldi	r31, 0x00	; 0
    13b8:	80 81       	ld	r24, Z
    13ba:	80 61       	ori	r24, 0x10	; 16
    13bc:	80 83       	st	Z, r24
	return RESULT_OK;
}
    13be:	80 e0       	ldi	r24, 0x00	; 0
    13c0:	08 95       	ret

000013c2 <usartDisableReceiver>:
 * Disables USART reception module
 * -------------------------------------------------------------------------- */

resultValue_t usartDisableReceiver(void)
{
	clrBit(UCSR0B, RXEN0);
    13c2:	e1 ec       	ldi	r30, 0xC1	; 193
    13c4:	f0 e0       	ldi	r31, 0x00	; 0
    13c6:	80 81       	ld	r24, Z
    13c8:	8f 7e       	andi	r24, 0xEF	; 239
    13ca:	80 83       	st	Z, r24
	return RESULT_OK;
}
    13cc:	80 e0       	ldi	r24, 0x00	; 0
    13ce:	08 95       	ret

000013d0 <usartEnableTransmitter>:
 * Enables USART transmission module
 * -------------------------------------------------------------------------- */

resultValue_t usartEnableTransmitter(void)
{
	setBit(UCSR0B, TXEN0);
    13d0:	e1 ec       	ldi	r30, 0xC1	; 193
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	80 81       	ld	r24, Z
    13d6:	88 60       	ori	r24, 0x08	; 8
    13d8:	80 83       	st	Z, r24
	return RESULT_OK;
}
    13da:	80 e0       	ldi	r24, 0x00	; 0
    13dc:	08 95       	ret

000013de <usartDisableTransmitter>:
 * Disables USART transmission module
 * -------------------------------------------------------------------------- */

resultValue_t usartDisableTransmitter(void)
{
	clrBit(UCSR0B, TXEN0);
    13de:	e1 ec       	ldi	r30, 0xC1	; 193
    13e0:	f0 e0       	ldi	r31, 0x00	; 0
    13e2:	80 81       	ld	r24, Z
    13e4:	87 7f       	andi	r24, 0xF7	; 247
    13e6:	80 83       	st	Z, r24
	return RESULT_OK;
}
    13e8:	80 e0       	ldi	r24, 0x00	; 0
    13ea:	08 95       	ret

000013ec <usartActivateReceptionCompleteInterrupt>:
 * Activates USART reception complete interrupt
 * -------------------------------------------------------------------------- */

resultValue_t usartActivateReceptionCompleteInterrupt(void)
{
	setBit(UCSR0B, RXCIE0);
    13ec:	e1 ec       	ldi	r30, 0xC1	; 193
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	80 81       	ld	r24, Z
    13f2:	80 68       	ori	r24, 0x80	; 128
    13f4:	80 83       	st	Z, r24
	return RESULT_OK;
}
    13f6:	80 e0       	ldi	r24, 0x00	; 0
    13f8:	08 95       	ret

000013fa <usartDeactivateReceptionCompleteInterrupt>:
 * Deactivates USART reception complete interrupt
 * -------------------------------------------------------------------------- */

resultValue_t usartDeactivateReceptionCompleteInterrupt(void)
{
	clrBit(UCSR0B, RXCIE0);
    13fa:	e1 ec       	ldi	r30, 0xC1	; 193
    13fc:	f0 e0       	ldi	r31, 0x00	; 0
    13fe:	80 81       	ld	r24, Z
    1400:	8f 77       	andi	r24, 0x7F	; 127
    1402:	80 83       	st	Z, r24
	return RESULT_OK;
}
    1404:	80 e0       	ldi	r24, 0x00	; 0
    1406:	08 95       	ret

00001408 <usartActivateTransmissionCompleteInterrupt>:
 * Activates USART transmission complete interrupt
 * -------------------------------------------------------------------------- */

resultValue_t usartActivateTransmissionCompleteInterrupt(void)
{
	setBit(UCSR0B, TXCIE0);
    1408:	e1 ec       	ldi	r30, 0xC1	; 193
    140a:	f0 e0       	ldi	r31, 0x00	; 0
    140c:	80 81       	ld	r24, Z
    140e:	80 64       	ori	r24, 0x40	; 64
    1410:	80 83       	st	Z, r24
	return RESULT_OK;
}
    1412:	80 e0       	ldi	r24, 0x00	; 0
    1414:	08 95       	ret

00001416 <usartDeactivateTransmissionCompleteInterrupt>:
 * Deactivates USART transmission complete interrupt
 * -------------------------------------------------------------------------- */

resultValue_t usartDeactivateTransmissionCompleteInterrupt(void)
{
	clrBit(UCSR0B, TXCIE0);
    1416:	e1 ec       	ldi	r30, 0xC1	; 193
    1418:	f0 e0       	ldi	r31, 0x00	; 0
    141a:	80 81       	ld	r24, Z
    141c:	8f 7b       	andi	r24, 0xBF	; 191
    141e:	80 83       	st	Z, r24
	return RESULT_OK;
}
    1420:	80 e0       	ldi	r24, 0x00	; 0
    1422:	08 95       	ret

00001424 <usartActivateBufferEmptyInterrupt>:
 * Activates USART buffer empty interrupt
 * -------------------------------------------------------------------------- */

resultValue_t usartActivateBufferEmptyInterrupt(void)
{
	setBit(UCSR0B, UDRIE0);
    1424:	e1 ec       	ldi	r30, 0xC1	; 193
    1426:	f0 e0       	ldi	r31, 0x00	; 0
    1428:	80 81       	ld	r24, Z
    142a:	80 62       	ori	r24, 0x20	; 32
    142c:	80 83       	st	Z, r24
	return RESULT_OK;
}
    142e:	80 e0       	ldi	r24, 0x00	; 0
    1430:	08 95       	ret

00001432 <usartDeactivateBufferEmptyInterrupt>:
 * Deactivates USART buffer empty interrupt
 * -------------------------------------------------------------------------- */

resultValue_t usartDeactivateBufferEmptyInterrupt(void)
{
	clrBit(UCSR0B, UDRIE0);
    1432:	e1 ec       	ldi	r30, 0xC1	; 193
    1434:	f0 e0       	ldi	r31, 0x00	; 0
    1436:	80 81       	ld	r24, Z
    1438:	8f 7d       	andi	r24, 0xDF	; 223
    143a:	80 83       	st	Z, r24
	return RESULT_OK;
}
    143c:	80 e0       	ldi	r24, 0x00	; 0
    143e:	08 95       	ret

00001440 <usartStdio>:
 * Changes the std handlers to usart module
 * -------------------------------------------------------------------------- */

resultValue_t usartStdio(void)
{
	stdin = stdout = stderr = &usartStream;
    1440:	8a e0       	ldi	r24, 0x0A	; 10
    1442:	91 e0       	ldi	r25, 0x01	; 1
    1444:	90 93 78 01 	sts	0x0178, r25
    1448:	80 93 77 01 	sts	0x0177, r24
    144c:	90 93 76 01 	sts	0x0176, r25
    1450:	80 93 75 01 	sts	0x0175, r24
    1454:	90 93 74 01 	sts	0x0174, r25
    1458:	80 93 73 01 	sts	0x0173, r24
	return RESULT_OK;
}
    145c:	80 e0       	ldi	r24, 0x00	; 0
    145e:	08 95       	ret

00001460 <usartIsReceptionComplete>:
 * Checks if a reception has been completed
 * -------------------------------------------------------------------------- */

bool_t usartIsReceptionComplete(void)
{
	return isBitSet(UCSR0A, RXC0);
    1460:	80 91 c0 00 	lds	r24, 0x00C0
}
    1464:	88 1f       	adc	r24, r24
    1466:	88 27       	eor	r24, r24
    1468:	88 1f       	adc	r24, r24
    146a:	08 95       	ret

0000146c <usartIsTransmissionComplete>:
 * Checks if a transmission has been completed
 * -------------------------------------------------------------------------- */

bool_t usartIsTransmissionComplete(void)
{
	return isBitSet(UCSR0A, TXC0);
    146c:	80 91 c0 00 	lds	r24, 0x00C0
}
    1470:	86 fb       	bst	r24, 6
    1472:	88 27       	eor	r24, r24
    1474:	80 f9       	bld	r24, 0
    1476:	08 95       	ret

00001478 <usartIsBufferEmpty>:
 * Checks if the buffer is empty
 * -------------------------------------------------------------------------- */

bool_t usartIsBufferEmpty(void)
{
	return isBitSet(UCSR0A, UDRE0);
    1478:	80 91 c0 00 	lds	r24, 0x00C0
}
    147c:	85 fb       	bst	r24, 5
    147e:	88 27       	eor	r24, r24
    1480:	80 f9       	bld	r24, 0
    1482:	08 95       	ret

00001484 <usartTransmitStd>:
 * Transmits data in 5, 6, 7 or 8 bits modes using the USART controller and
 * standard output heandler
 * -------------------------------------------------------------------------- */

resultValue_t usartTransmitStd(int8 data, FILE * stream)
{
    1484:	cf 93       	push	r28
    1486:	c8 2f       	mov	r28, r24
	while(!usartIsBufferEmpty())
    1488:	0e 94 3c 0a 	call	0x1478	; 0x1478 <usartIsBufferEmpty>
    148c:	88 23       	and	r24, r24
    148e:	e1 f3       	breq	.-8      	; 0x1488 <usartTransmitStd+0x4>
		;	// Waits until last transmission ends
	UDR0 = data;
    1490:	c0 93 c6 00 	sts	0x00C6, r28
	return RESULT_OK;
}
    1494:	80 e0       	ldi	r24, 0x00	; 0
    1496:	cf 91       	pop	r28
    1498:	08 95       	ret

0000149a <usartCheckError>:

usartError_t usartCheckError(void)
{
	usartError_t error = 0;

	if(isBitSet(UCSR0A, FE0))
    149a:	80 91 c0 00 	lds	r24, 0x00C0
    149e:	84 fd       	sbrc	r24, 4
    14a0:	02 c0       	rjmp	.+4      	; 0x14a6 <usartCheckError+0xc>
 * Checks if an error occurred during transmission or reception
 * -------------------------------------------------------------------------- */

usartError_t usartCheckError(void)
{
	usartError_t error = 0;
    14a2:	80 e0       	ldi	r24, 0x00	; 0
    14a4:	01 c0       	rjmp	.+2      	; 0x14a8 <usartCheckError+0xe>

	if(isBitSet(UCSR0A, FE0))
		error |= USART_FRAME_ERROR;
    14a6:	82 e0       	ldi	r24, 0x02	; 2
	if(isBitSet(UCSR0A, DOR0))
    14a8:	90 91 c0 00 	lds	r25, 0x00C0
    14ac:	93 fd       	sbrc	r25, 3
		error |= USART_PARITY_ERROR;
    14ae:	84 60       	ori	r24, 0x04	; 4
	if(isBitSet(UCSR0A, UPE0))
    14b0:	90 91 c0 00 	lds	r25, 0x00C0
    14b4:	92 ff       	sbrs	r25, 2
    14b6:	02 c0       	rjmp	.+4      	; 0x14bc <usartCheckError+0x22>
		error |= USART_BUFFER_OVERFLOW_ERROR;
    14b8:	88 60       	ori	r24, 0x08	; 8
    14ba:	08 95       	ret

	if(error == 0)
    14bc:	81 11       	cpse	r24, r1
    14be:	01 c0       	rjmp	.+2      	; 0x14c2 <usartCheckError+0x28>
		return USART_OK;
    14c0:	81 e0       	ldi	r24, 0x01	; 1
	return error;
}
    14c2:	08 95       	ret

000014c4 <usartTransmit>:
/* -----------------------------------------------------------------------------
 * Transmits data in 5, 6, 7 or 8 bits modes using the USART controller
 * -------------------------------------------------------------------------- */

resultValue_t usartTransmit(int8 data)
{
    14c4:	cf 93       	push	r28
    14c6:	c8 2f       	mov	r28, r24
	while(!usartIsBufferEmpty())
    14c8:	0e 94 3c 0a 	call	0x1478	; 0x1478 <usartIsBufferEmpty>
    14cc:	88 23       	and	r24, r24
    14ce:	e1 f3       	breq	.-8      	; 0x14c8 <usartTransmit+0x4>
		;	// Waits until last transmission ends
	UDR0 = data;
    14d0:	c0 93 c6 00 	sts	0x00C6, r28
	return RESULT_OK;
}
    14d4:	80 e0       	ldi	r24, 0x00	; 0
    14d6:	cf 91       	pop	r28
    14d8:	08 95       	ret

000014da <usartTransmit9bits>:
/* -----------------------------------------------------------------------------
 * Transmits data in 9 bits mode using the USART controller
 * -------------------------------------------------------------------------- */

resultValue_t usartTransmit9bits(uint16 data)
{
    14da:	cf 93       	push	r28
    14dc:	df 93       	push	r29
    14de:	ec 01       	movw	r28, r24
	uint8 aux;

	while(!usartIsBufferEmpty())
    14e0:	0e 94 3c 0a 	call	0x1478	; 0x1478 <usartIsBufferEmpty>
    14e4:	88 23       	and	r24, r24
    14e6:	e1 f3       	breq	.-8      	; 0x14e0 <usartTransmit9bits+0x6>
		;	// Waits until last transmission ends
	aux = ((data & 0x100) >> 8);
    14e8:	ce 01       	movw	r24, r28
    14ea:	88 27       	eor	r24, r24
    14ec:	91 70       	andi	r25, 0x01	; 1
	if(aux)
		setBit(UCSR0B, TXB80);
    14ee:	80 91 c1 00 	lds	r24, 0x00C1
	uint8 aux;

	while(!usartIsBufferEmpty())
		;	// Waits until last transmission ends
	aux = ((data & 0x100) >> 8);
	if(aux)
    14f2:	99 23       	and	r25, r25
    14f4:	11 f0       	breq	.+4      	; 0x14fa <usartTransmit9bits+0x20>
		setBit(UCSR0B, TXB80);
    14f6:	81 60       	ori	r24, 0x01	; 1
    14f8:	01 c0       	rjmp	.+2      	; 0x14fc <usartTransmit9bits+0x22>
	else
		clrBit(UCSR0B, TXB80);
    14fa:	8e 7f       	andi	r24, 0xFE	; 254
    14fc:	80 93 c1 00 	sts	0x00C1, r24
	UDR0 = (uint8)data;
    1500:	c0 93 c6 00 	sts	0x00C6, r28
	return RESULT_OK;
}
    1504:	80 e0       	ldi	r24, 0x00	; 0
    1506:	df 91       	pop	r29
    1508:	cf 91       	pop	r28
    150a:	08 95       	ret

0000150c <usartReceive>:
 * Checks if a reception has been completed
 * -------------------------------------------------------------------------- */

bool_t usartIsReceptionComplete(void)
{
	return isBitSet(UCSR0A, RXC0);
    150c:	80 91 c0 00 	lds	r24, 0x00C0

uint8 usartReceive(void)
{
	uint8 status;

	while(!usartIsReceptionComplete())
    1510:	87 ff       	sbrs	r24, 7
    1512:	fc cf       	rjmp	.-8      	; 0x150c <usartReceive>
		;	// Waits until last reception ends
	status = UCSR0A;
    1514:	80 91 c0 00 	lds	r24, 0x00C0
	return UDR0;
    1518:	80 91 c6 00 	lds	r24, 0x00C6
}
    151c:	08 95       	ret

0000151e <usartReceive9bits>:
 * Checks if a reception has been completed
 * -------------------------------------------------------------------------- */

bool_t usartIsReceptionComplete(void)
{
	return isBitSet(UCSR0A, RXC0);
    151e:	80 91 c0 00 	lds	r24, 0x00C0
	uint8 status;
	uint8 byteh;
	uint8 bytel;
	uint16 byte;

	while(!usartIsReceptionComplete())
    1522:	87 ff       	sbrs	r24, 7
    1524:	fc cf       	rjmp	.-8      	; 0x151e <usartReceive9bits>
		;	// Waits until last reception ends
	status = UCSR0A;
    1526:	80 91 c0 00 	lds	r24, 0x00C0
	byteh = UCSR0B;
    152a:	80 91 c1 00 	lds	r24, 0x00C1
	bytel = UDR0;
    152e:	20 91 c6 00 	lds	r18, 0x00C6

	byte = (uint16)(byteh & 0x02) << 7;
    1532:	82 70       	andi	r24, 0x02	; 2
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	96 95       	lsr	r25
    1538:	98 2f       	mov	r25, r24
    153a:	88 27       	eor	r24, r24
    153c:	97 95       	ror	r25
    153e:	87 95       	ror	r24
	byte |= bytel;
	return  byte;
}
    1540:	82 2b       	or	r24, r18
    1542:	08 95       	ret

00001544 <usartClearReceptionBuffer>:
 * Checks if a reception has been completed
 * -------------------------------------------------------------------------- */

bool_t usartIsReceptionComplete(void)
{
	return isBitSet(UCSR0A, RXC0);
    1544:	80 91 c0 00 	lds	r24, 0x00C0
 * -------------------------------------------------------------------------- */

void usartClearReceptionBuffer(void)
{
	uint8 aux;
	while(usartIsReceptionComplete())
    1548:	87 ff       	sbrs	r24, 7
    154a:	03 c0       	rjmp	.+6      	; 0x1552 <usartClearReceptionBuffer+0xe>
		aux = UDR0;
    154c:	80 91 c6 00 	lds	r24, 0x00C6
    1550:	f9 cf       	rjmp	.-14     	; 0x1544 <usartClearReceptionBuffer>
	return;
}
    1552:	08 95       	ret

00001554 <usartAddDataToReceiverBuffer>:
/* -----------------------------------------------------------------------------
 * Adds data to the reception buffer. The function has NO CONTROL of lost data.
 * -------------------------------------------------------------------------- */

void usartAddDataToReceiverBuffer(uint8 data)
{
    1554:	ff 92       	push	r15
    1556:	0f 93       	push	r16
    1558:	1f 93       	push	r17
    155a:	cf 93       	push	r28
    155c:	df 93       	push	r29
    155e:	f8 2e       	mov	r15, r24
	if(((usartReceiverBufferNextWrite + 1) % USART_RECEIVER_BUFFER_SIZE) != usartReceiverBufferNextRead){
    1560:	c0 91 70 01 	lds	r28, 0x0170
    1564:	d0 e0       	ldi	r29, 0x00	; 0
    1566:	be 01       	movw	r22, r28
    1568:	6f 5f       	subi	r22, 0xFF	; 255
    156a:	7f 4f       	sbci	r23, 0xFF	; 255
    156c:	88 27       	eor	r24, r24
    156e:	77 fd       	sbrc	r23, 7
    1570:	80 95       	com	r24
    1572:	98 2f       	mov	r25, r24
    1574:	22 e3       	ldi	r18, 0x32	; 50
    1576:	30 e0       	ldi	r19, 0x00	; 0
    1578:	40 e0       	ldi	r20, 0x00	; 0
    157a:	50 e0       	ldi	r21, 0x00	; 0
    157c:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <__udivmodsi4>
    1580:	00 91 72 01 	lds	r16, 0x0172
    1584:	10 e0       	ldi	r17, 0x00	; 0
    1586:	20 e0       	ldi	r18, 0x00	; 0
    1588:	30 e0       	ldi	r19, 0x00	; 0
    158a:	60 17       	cp	r22, r16
    158c:	71 07       	cpc	r23, r17
    158e:	82 07       	cpc	r24, r18
    1590:	93 07       	cpc	r25, r19
    1592:	51 f0       	breq	.+20     	; 0x15a8 <usartAddDataToReceiverBuffer+0x54>
		usartReceiverBuffer[usartReceiverBufferNextWrite] = data;
    1594:	c2 5c       	subi	r28, 0xC2	; 194
    1596:	de 4f       	sbci	r29, 0xFE	; 254
    1598:	f8 82       	st	Y, r15
		usartReceiverBufferNextWrite = (usartReceiverBufferNextWrite + 1) % USART_RECEIVER_BUFFER_SIZE;
    159a:	60 93 70 01 	sts	0x0170, r22
		usartReceiverBufferLength++;
    159e:	80 91 71 01 	lds	r24, 0x0171
    15a2:	8f 5f       	subi	r24, 0xFF	; 255
    15a4:	80 93 71 01 	sts	0x0171, r24
	}
	return;
}
    15a8:	df 91       	pop	r29
    15aa:	cf 91       	pop	r28
    15ac:	1f 91       	pop	r17
    15ae:	0f 91       	pop	r16
    15b0:	ff 90       	pop	r15
    15b2:	08 95       	ret

000015b4 <usartGetDataFromReceiverBuffer>:
 * usartIsReceiverBufferEmpty() function must be called to check if there is new
 * data in the buffer.
 * -------------------------------------------------------------------------- */

uint8 usartGetDataFromReceiverBuffer(void)
{
    15b4:	cf 93       	push	r28
    15b6:	df 93       	push	r29
	uint8 data = usartReceiverBuffer[usartReceiverBufferNextRead];
    15b8:	60 91 72 01 	lds	r22, 0x0172
    15bc:	70 e0       	ldi	r23, 0x00	; 0
    15be:	fb 01       	movw	r30, r22
    15c0:	e2 5c       	subi	r30, 0xC2	; 194
    15c2:	fe 4f       	sbci	r31, 0xFE	; 254
    15c4:	d0 81       	ld	r29, Z
	if(usartReceiverBufferLength > 0){
    15c6:	c0 91 71 01 	lds	r28, 0x0171
    15ca:	cc 23       	and	r28, r28
    15cc:	89 f0       	breq	.+34     	; 0x15f0 <usartGetDataFromReceiverBuffer+0x3c>
		usartReceiverBufferNextRead = (usartReceiverBufferNextRead + 1) % USART_RECEIVER_BUFFER_SIZE;
    15ce:	6f 5f       	subi	r22, 0xFF	; 255
    15d0:	7f 4f       	sbci	r23, 0xFF	; 255
    15d2:	88 27       	eor	r24, r24
    15d4:	77 fd       	sbrc	r23, 7
    15d6:	80 95       	com	r24
    15d8:	98 2f       	mov	r25, r24
    15da:	22 e3       	ldi	r18, 0x32	; 50
    15dc:	30 e0       	ldi	r19, 0x00	; 0
    15de:	40 e0       	ldi	r20, 0x00	; 0
    15e0:	50 e0       	ldi	r21, 0x00	; 0
    15e2:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <__udivmodsi4>
    15e6:	60 93 72 01 	sts	0x0172, r22
		usartReceiverBufferLength--;
    15ea:	c1 50       	subi	r28, 0x01	; 1
    15ec:	c0 93 71 01 	sts	0x0171, r28
	}
	return data;
}
    15f0:	8d 2f       	mov	r24, r29
    15f2:	df 91       	pop	r29
    15f4:	cf 91       	pop	r28
    15f6:	08 95       	ret

000015f8 <usartIsReceiverBufferEmpty>:
 * reading the buffer.
 * -------------------------------------------------------------------------- */

uint8 usartIsReceiverBufferEmpty(void)
{
	if(usartReceiverBufferLength == 0)
    15f8:	81 e0       	ldi	r24, 0x01	; 1
    15fa:	90 91 71 01 	lds	r25, 0x0171
    15fe:	91 11       	cpse	r25, r1
    1600:	80 e0       	ldi	r24, 0x00	; 0
		return TRUE;
	return FALSE;
}
    1602:	08 95       	ret

00001604 <usartGetCurrentBaudRate>:
//	case 2:
//		aux32 = F_CPU / 2 / (UBRR0 + 1);
//		break;
//	}
	return aux32;
 }
    1604:	60 e0       	ldi	r22, 0x00	; 0
    1606:	70 e0       	ldi	r23, 0x00	; 0
    1608:	cb 01       	movw	r24, r22
    160a:	08 95       	ret

0000160c <spiInit>:
/* -----------------------------------------------------------------------------
 * Configures the SPI controller
 * -------------------------------------------------------------------------- */

void spiInit(void)
{
    160c:	08 95       	ret

0000160e <spiMasterTransmit>:
 * Transmit data at the SPI bus in master mode
 * -------------------------------------------------------------------------- */

uint8 spiMasterTransmit(uint8 data)
{
	SPDR = data;
    160e:	8e bd       	out	0x2e, r24	; 46
	waitUntilBitIsClear(SPSR, SPIF);
    1610:	0d b4       	in	r0, 0x2d	; 45
    1612:	07 fc       	sbrc	r0, 7
    1614:	fd cf       	rjmp	.-6      	; 0x1610 <spiMasterTransmit+0x2>
	return SPDR;
    1616:	8e b5       	in	r24, 0x2e	; 46
}
    1618:	08 95       	ret

0000161a <spiSlaveTransmit>:
 * Receives data from the SPI bus
 * -------------------------------------------------------------------------- */

uint8 spiSlaveTransmit(void)
{
	waitUntilBitIsClear(SPSR, SPIF);
    161a:	0d b4       	in	r0, 0x2d	; 45
    161c:	07 fc       	sbrc	r0, 7
    161e:	fd cf       	rjmp	.-6      	; 0x161a <spiSlaveTransmit>
	return SPDR;
    1620:	8e b5       	in	r24, 0x2e	; 46
}
    1622:	08 95       	ret

00001624 <main>:
	+ (str[2]-48)*10 + str[3]-48);
	return value;
}

int main(void)
{
    1624:	cf 93       	push	r28
    1626:	df 93       	push	r29
    1628:	cd b7       	in	r28, 0x3d	; 61
    162a:	de b7       	in	r29, 0x3e	; 62
    162c:	ce 59       	subi	r28, 0x9E	; 158
    162e:	d1 09       	sbc	r29, r1
    1630:	0f b6       	in	r0, 0x3f	; 63
    1632:	f8 94       	cli
    1634:	de bf       	out	0x3e, r29	; 62
    1636:	0f be       	out	0x3f, r0	; 63
    1638:	cd bf       	out	0x3d, r28	; 61
	flags.mode = POT_MODE;
    163a:	80 91 3d 01 	lds	r24, 0x013D
    163e:	83 7f       	andi	r24, 0xF3	; 243
    1640:	88 60       	ori	r24, 0x08	; 8
    1642:	80 93 3d 01 	sts	0x013D, r24
	// VARIAVEIS LOCAIS;
	char frameData[50];
	uint8 frameIndex = 0;
	char recebido[100] = "";
    1646:	19 82       	std	Y+1, r1	; 0x01
    1648:	1a 82       	std	Y+2, r1	; 0x02
    164a:	1b 82       	std	Y+3, r1	; 0x03
    164c:	1c 82       	std	Y+4, r1	; 0x04
    164e:	fe 01       	movw	r30, r28
    1650:	35 96       	adiw	r30, 0x05	; 5
    1652:	80 e6       	ldi	r24, 0x60	; 96
    1654:	df 01       	movw	r26, r30
    1656:	1d 92       	st	X+, r1
    1658:	8a 95       	dec	r24
    165a:	e9 f7       	brne	.-6      	; 0x1656 <main+0x32>
	char msgToSend[8] = "";
    165c:	c9 56       	subi	r28, 0x69	; 105
    165e:	df 4f       	sbci	r29, 0xFF	; 255
    1660:	18 82       	st	Y, r1
    1662:	19 82       	std	Y+1, r1	; 0x01
    1664:	1a 82       	std	Y+2, r1	; 0x02
    1666:	1b 82       	std	Y+3, r1	; 0x03
    1668:	c7 59       	subi	r28, 0x97	; 151
    166a:	d0 40       	sbci	r29, 0x00	; 0
    166c:	c5 56       	subi	r28, 0x65	; 101
    166e:	df 4f       	sbci	r29, 0xFF	; 255
    1670:	18 82       	st	Y, r1
    1672:	19 82       	std	Y+1, r1	; 0x01
    1674:	1a 82       	std	Y+2, r1	; 0x02
    1676:	1b 82       	std	Y+3, r1	; 0x03
    1678:	cb 59       	subi	r28, 0x9B	; 155
    167a:	d0 40       	sbci	r29, 0x00	; 0
	uint8 pos =  0;
	
	// CONFIGURA ADC
	clrBit(DDRC,POT_BIT);		//SETA O PINO DO ADC COMO ENTRADA
    167c:	39 98       	cbi	0x07, 1	; 7
	adcConfig(ADC_MODE_SINGLE_CONVERSION, ADC_REFRENCE_POWER_SUPPLY , ADC_PRESCALER_128);
    167e:	47 e0       	ldi	r20, 0x07	; 7
    1680:	61 e0       	ldi	r22, 0x01	; 1
    1682:	80 e0       	ldi	r24, 0x00	; 0
    1684:	0e 94 ba 08 	call	0x1174	; 0x1174 <adcConfig>
	adcSelectChannel(POT_CHANNEL);
    1688:	81 e0       	ldi	r24, 0x01	; 1
    168a:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <adcSelectChannel>
	adcClearInterruptRequest();
    168e:	0e 94 2d 09 	call	0x125a	; 0x125a <adcClearInterruptRequest>
	adcActivateInterrupt();
    1692:	0e 94 34 09 	call	0x1268	; 0x1268 <adcActivateInterrupt>
	adcEnable();
    1696:	0e 94 1f 09 	call	0x123e	; 0x123e <adcEnable>
	adcStartConversion();
    169a:	0e 94 42 09 	call	0x1284	; 0x1284 <adcStartConversion>
	
	// CONFIGURA PWM
	timer1Config(TIMER_B_MODE_CTC, TIMER_A_PRESCALER_64);
    169e:	63 e0       	ldi	r22, 0x03	; 3
    16a0:	84 e0       	ldi	r24, 0x04	; 4
    16a2:	0e 94 71 07 	call	0xee2	; 0xee2 <timer1Config>
	timer1ClearCompareBInterruptRequest();									
    16a6:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <timer1ClearCompareBInterruptRequest>
	timer1ClearCompareAInterruptRequest();
    16aa:	0e 94 cb 07 	call	0xf96	; 0xf96 <timer1ClearCompareAInterruptRequest>
	timer1ActivateCompareBInterrupt();									//ativa a interrupcao do compA
    16ae:	0e 94 ce 07 	call	0xf9c	; 0xf9c <timer1ActivateCompareBInterrupt>
	timer1ActivateCompareAInterrupt();									//ativa a interrupcao do compB
    16b2:	0e 94 bd 07 	call	0xf7a	; 0xf7a <timer1ActivateCompareAInterrupt>
	timer1SetCompareAValue((F_CPU/64)/freq);							//valor do comparador A,  define a frequencia
    16b6:	20 91 07 01 	lds	r18, 0x0107
    16ba:	30 91 08 01 	lds	r19, 0x0108
    16be:	40 e0       	ldi	r20, 0x00	; 0
    16c0:	50 e0       	ldi	r21, 0x00	; 0
    16c2:	60 e9       	ldi	r22, 0x90	; 144
    16c4:	70 ed       	ldi	r23, 0xD0	; 208
    16c6:	83 e0       	ldi	r24, 0x03	; 3
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <__udivmodsi4>
    16ce:	c9 01       	movw	r24, r18
    16d0:	0e 94 0c 08 	call	0x1018	; 0x1018 <timer1SetCompareAValue>
	timer1SetCompareBValue((dc * (timer1GetCompareAValue()))/100);		//valor do comparador B,  define Duty Cicle
    16d4:	00 91 39 01 	lds	r16, 0x0139
    16d8:	10 e0       	ldi	r17, 0x00	; 0
    16da:	0e 94 15 08 	call	0x102a	; 0x102a <timer1GetCompareAValue>
    16de:	9c 01       	movw	r18, r24
    16e0:	20 9f       	mul	r18, r16
    16e2:	c0 01       	movw	r24, r0
    16e4:	21 9f       	mul	r18, r17
    16e6:	90 0d       	add	r25, r0
    16e8:	30 9f       	mul	r19, r16
    16ea:	90 0d       	add	r25, r0
    16ec:	11 24       	eor	r1, r1
    16ee:	64 e6       	ldi	r22, 0x64	; 100
    16f0:	70 e0       	ldi	r23, 0x00	; 0
    16f2:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <__udivmodhi4>
    16f6:	cb 01       	movw	r24, r22
    16f8:	0e 94 1a 08 	call	0x1034	; 0x1034 <timer1SetCompareBValue>

	// CONFIGURA A INTERRUPÇÃO DE CONTROLE(60Hz)
	timer0Config(TIMER_A_MODE_NORMAL, TIMER_A_PRESCALER_1024);			
    16fc:	65 e0       	ldi	r22, 0x05	; 5
    16fe:	80 e0       	ldi	r24, 0x00	; 0
    1700:	0e 94 cc 06 	call	0xd98	; 0xd98 <timer0Config>
	timer0ClearOverflowInterruptRequest();								//limpa a interrupcao de OVF
    1704:	0e 94 3f 07 	call	0xe7e	; 0xe7e <timer0ClearOverflowInterruptRequest>
	timer0ActivateOverflowInterrupt();							
    1708:	0e 94 33 07 	call	0xe66	; 0xe66 <timer0ActivateOverflowInterrupt>
	
	// CONFIGURA A USART
	usartConfig(USART_MODE_ASYNCHRONOUS,USART_BAUD_9600 ,USART_DATA_BITS_8,USART_PARITY_NONE,USART_STOP_BIT_SINGLE);
    170c:	e1 2c       	mov	r14, r1
    170e:	00 e0       	ldi	r16, 0x00	; 0
    1710:	23 e0       	ldi	r18, 0x03	; 3
    1712:	40 e8       	ldi	r20, 0x80	; 128
    1714:	55 e2       	ldi	r21, 0x25	; 37
    1716:	60 e0       	ldi	r22, 0x00	; 0
    1718:	70 e0       	ldi	r23, 0x00	; 0
    171a:	80 e0       	ldi	r24, 0x00	; 0
    171c:	0e 94 55 09 	call	0x12aa	; 0x12aa <usartConfig>
	usartEnableReceiver();
    1720:	0e 94 da 09 	call	0x13b4	; 0x13b4 <usartEnableReceiver>
	usartEnableTransmitter();
    1724:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <usartEnableTransmitter>
	usartActivateReceptionCompleteInterrupt();
    1728:	0e 94 f6 09 	call	0x13ec	; 0x13ec <usartActivateReceptionCompleteInterrupt>

	sei();
    172c:	78 94       	sei
	
	setBit(PWM_DDR,PWM_BIT);			//define o pino do pwm como saída
    172e:	21 9a       	sbi	0x04, 1	; 4

	setBit(ON_PORT,ON_BIT);				//habilita o pull-up da chave on
    1730:	5d 9a       	sbi	0x0b, 5	; 11
	setBit(DMS_PORT,DMS_BIT);			//habilita o pull-up da chave dms
    1732:	5c 9a       	sbi	0x0b, 4	; 11

//configura o buzzer e da sinal de alerta de ligação
	setBit(BUZZER_DDR,BUZZER_BIT);			
    1734:	3c 9a       	sbi	0x07, 4	; 7
	setBit(BUZZER_PORT,BUZZER_BIT);
    1736:	44 9a       	sbi	0x08, 4	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1738:	3f ef       	ldi	r19, 0xFF	; 255
    173a:	83 ed       	ldi	r24, 0xD3	; 211
    173c:	90 e3       	ldi	r25, 0x30	; 48
    173e:	31 50       	subi	r19, 0x01	; 1
    1740:	80 40       	sbci	r24, 0x00	; 0
    1742:	90 40       	sbci	r25, 0x00	; 0
    1744:	e1 f7       	brne	.-8      	; 0x173e <main+0x11a>
    1746:	00 c0       	rjmp	.+0      	; 0x1748 <main+0x124>
    1748:	00 00       	nop
	_delay_ms(1000);
	clrBit(BUZZER_PORT,BUZZER_BIT);
    174a:	44 98       	cbi	0x08, 4	; 8
int main(void)
{
	flags.mode = POT_MODE;
	// VARIAVEIS LOCAIS;
	char frameData[50];
	uint8 frameIndex = 0;
    174c:	a1 2c       	mov	r10, r1
										if(dc < minDC)
											dc = 0;
										else
											if(dc > maxDC)
												dc = 100;
										timer1SetCompareBValue((dc * (timer1GetCompareAValue()))/100);//bota o dc
    174e:	04 e6       	ldi	r16, 0x64	; 100
    1750:	10 e0       	ldi	r17, 0x00	; 0
								recebido[4] = '\0';

								switch (pos){
									case 1:
										freq = string4ToUint16(recebido);
										timer1SetCompareAValue((F_CPU/1024)/freq);
    1752:	99 e0       	ldi	r25, 0x09	; 9
    1754:	e9 2e       	mov	r14, r25
    1756:	9d e3       	ldi	r25, 0x3D	; 61
    1758:	f9 2e       	mov	r15, r25
	setBit(PORTD,PD0);			
*/

    while(1)
    {
    	if(flags.mode == SERIAL_MODE)
    175a:	80 91 3d 01 	lds	r24, 0x013D
    175e:	8c 70       	andi	r24, 0x0C	; 12
    1760:	84 30       	cpi	r24, 0x04	; 4
    1762:	09 f0       	breq	.+2      	; 0x1766 <main+0x142>
    1764:	ff cf       	rjmp	.-2      	; 0x1764 <main+0x140>
										dc = dcReq;
										if(dc < minDC)
											dc = 0;
										else
											if(dc > maxDC)
												dc = 100;
    1766:	84 e6       	ldi	r24, 0x64	; 100
    1768:	d8 2e       	mov	r13, r24

    while(1)
    {
    	if(flags.mode == SERIAL_MODE)
    	{
	    	while(!usartIsReceiverBufferEmpty()){
    176a:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <usartIsReceiverBufferEmpty>
    176e:	81 11       	cpse	r24, r1
    1770:	f4 cf       	rjmp	.-24     	; 0x175a <main+0x136>
				frameData[frameIndex++] = usartGetDataFromReceiverBuffer();
    1772:	bb 24       	eor	r11, r11
    1774:	b3 94       	inc	r11
    1776:	ba 0c       	add	r11, r10
    1778:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <usartGetDataFromReceiverBuffer>
    177c:	e5 e6       	ldi	r30, 0x65	; 101
    177e:	f0 e0       	ldi	r31, 0x00	; 0
    1780:	ec 0f       	add	r30, r28
    1782:	fd 1f       	adc	r31, r29
    1784:	ea 0d       	add	r30, r10
    1786:	f1 1d       	adc	r31, r1
    1788:	80 83       	st	Z, r24
				if ((frameData[frameIndex-1] == FINALDOPACOTE)){//se esta no final da palavra
    178a:	e5 e6       	ldi	r30, 0x65	; 101
    178c:	f0 e0       	ldi	r31, 0x00	; 0
    178e:	ec 0f       	add	r30, r28
    1790:	fd 1f       	adc	r31, r29
    1792:	eb 0d       	add	r30, r11
    1794:	f1 1d       	adc	r31, r1
    1796:	31 97       	sbiw	r30, 0x01	; 1
    1798:	80 81       	ld	r24, Z
    179a:	8a 32       	cpi	r24, 0x2A	; 42
    179c:	11 f0       	breq	.+4      	; 0x17a2 <main+0x17e>
    while(1)
    {
    	if(flags.mode == SERIAL_MODE)
    	{
	    	while(!usartIsReceiverBufferEmpty()){
				frameData[frameIndex++] = usartGetDataFromReceiverBuffer();
    179e:	ab 2c       	mov	r10, r11
    17a0:	e4 cf       	rjmp	.-56     	; 0x176a <main+0x146>
				if ((frameData[frameIndex-1] == FINALDOPACOTE)){//se esta no final da palavra
					if(frameData[0] == INICIODOPACOTE ){//verifica se o inicio da palavra esta correto
    17a2:	a6 96       	adiw	r28, 0x26	; 38
    17a4:	8f ad       	ldd	r24, Y+63	; 0x3f
    17a6:	a6 97       	sbiw	r28, 0x26	; 38
    17a8:	80 34       	cpi	r24, 0x40	; 64
    17aa:	09 f0       	breq	.+2      	; 0x17ae <main+0x18a>
    17ac:	3a c1       	rjmp	.+628    	; 0x1a22 <main+0x3fe>
						strcpy(recebido,frameData);
    17ae:	be 01       	movw	r22, r28
    17b0:	6b 59       	subi	r22, 0x9B	; 155
    17b2:	7f 4f       	sbci	r23, 0xFF	; 255
    17b4:	ce 01       	movw	r24, r28
    17b6:	01 96       	adiw	r24, 0x01	; 1
    17b8:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <strcpy>
						pos = (recebido[2]-48) + (recebido[1] - 48)*10;
    17bc:	4b 81       	ldd	r20, Y+3	; 0x03
    17be:	40 53       	subi	r20, 0x30	; 48
    17c0:	8a 81       	ldd	r24, Y+2	; 0x02
    17c2:	88 0f       	add	r24, r24
    17c4:	80 56       	subi	r24, 0x60	; 96
    17c6:	98 2f       	mov	r25, r24
    17c8:	99 0f       	add	r25, r25
    17ca:	99 0f       	add	r25, r25
    17cc:	98 0f       	add	r25, r24
    17ce:	49 0f       	add	r20, r25
						if(frameIndex == GETWORDSIZE){
    17d0:	a4 e0       	ldi	r26, 0x04	; 4
    17d2:	ba 12       	cpse	r11, r26
    17d4:	68 c0       	rjmp	.+208    	; 0x18a6 <main+0x282>
							memcpy( recebido,  (recebido+1), 2);
    17d6:	8a 81       	ldd	r24, Y+2	; 0x02
    17d8:	9b 81       	ldd	r25, Y+3	; 0x03
    17da:	9a 83       	std	Y+2, r25	; 0x02
    17dc:	89 83       	std	Y+1, r24	; 0x01
							recebido[2] = '\0';//isola o id
    17de:	1b 82       	std	Y+3, r1	; 0x03
							switch (pos){
    17e0:	50 e0       	ldi	r21, 0x00	; 0
    17e2:	4e 30       	cpi	r20, 0x0E	; 14
    17e4:	51 05       	cpc	r21, r1
    17e6:	08 f0       	brcs	.+2      	; 0x17ea <main+0x1c6>
    17e8:	44 c0       	rjmp	.+136    	; 0x1872 <main+0x24e>
    17ea:	fa 01       	movw	r30, r20
    17ec:	ec 5c       	subi	r30, 0xCC	; 204
    17ee:	ff 4f       	sbci	r31, 0xFF	; 255
    17f0:	0c 94 4b 0d 	jmp	0x1a96	; 0x1a96 <__tablejump2__>
								case 0:
									strcpy(msgToSend,"OK");
    17f4:	68 e1       	ldi	r22, 0x18	; 24
    17f6:	71 e0       	ldi	r23, 0x01	; 1
    17f8:	3e c0       	rjmp	.+124    	; 0x1876 <main+0x252>
									break;
								case 1:
									uint16ToString4(msgToSend,freq);
    17fa:	60 91 07 01 	lds	r22, 0x0107
    17fe:	70 91 08 01 	lds	r23, 0x0108
    1802:	ce 01       	movw	r24, r28
    1804:	89 56       	subi	r24, 0x69	; 105
    1806:	9f 4f       	sbci	r25, 0xFF	; 255
    1808:	0e 94 ca 00 	call	0x194	; 0x194 <uint16ToString4>
									break;
    180c:	39 c0       	rjmp	.+114    	; 0x1880 <main+0x25c>
								case 2:
									uint8ToString4(msgToSend,maxCurrent);
    180e:	60 91 06 01 	lds	r22, 0x0106
    1812:	28 c0       	rjmp	.+80     	; 0x1864 <main+0x240>
									break;
								case 3:
									uint8ToString4(msgToSend,maxDC);
    1814:	60 91 04 01 	lds	r22, 0x0104
    1818:	25 c0       	rjmp	.+74     	; 0x1864 <main+0x240>
									break;
								case 4:
									uint8ToString4(msgToSend,minDC);
    181a:	60 91 05 01 	lds	r22, 0x0105
    181e:	22 c0       	rjmp	.+68     	; 0x1864 <main+0x240>
									break;
								case 5:
									uint8ToString4(msgToSend,maxDV);
    1820:	60 91 03 01 	lds	r22, 0x0103
    1824:	1f c0       	rjmp	.+62     	; 0x1864 <main+0x240>
									break;
								case 6 :
									if(flags.on)
    1826:	80 91 3d 01 	lds	r24, 0x013D
    182a:	84 ff       	sbrs	r24, 4
    182c:	07 c0       	rjmp	.+14     	; 0x183c <main+0x218>
										strcpy(msgToSend, "0001");
    182e:	6b e1       	ldi	r22, 0x1B	; 27
    1830:	71 e0       	ldi	r23, 0x01	; 1
    1832:	21 c0       	rjmp	.+66     	; 0x1876 <main+0x252>
									else
										strcpy(msgToSend, "0000");
									break;
								case 7:
									if(flags.dms)
    1834:	80 91 3d 01 	lds	r24, 0x013D
    1838:	85 fd       	sbrc	r24, 5
    183a:	f9 cf       	rjmp	.-14     	; 0x182e <main+0x20a>
									break;
								case 6 :
									if(flags.on)
										strcpy(msgToSend, "0001");
									else
										strcpy(msgToSend, "0000");
    183c:	60 e2       	ldi	r22, 0x20	; 32
    183e:	71 e0       	ldi	r23, 0x01	; 1
    1840:	1a c0       	rjmp	.+52     	; 0x1876 <main+0x252>
										strcpy(msgToSend, "0001");
									else
										strcpy(msgToSend, "0000");
									break;
								case 8:
									uint8ToString4(msgToSend,maxTemp);
    1842:	60 91 02 01 	lds	r22, 0x0102
    1846:	0e c0       	rjmp	.+28     	; 0x1864 <main+0x240>
									break;
								case 9:
									uint8ToString4(msgToSend,minVotage);
    1848:	60 91 00 01 	lds	r22, 0x0100
    184c:	0b c0       	rjmp	.+22     	; 0x1864 <main+0x240>
									break;
								case 10:
									uint8ToString4(msgToSend,dc);
    184e:	60 91 39 01 	lds	r22, 0x0139
    1852:	08 c0       	rjmp	.+16     	; 0x1864 <main+0x240>
									break;
								case 11:
									uint8ToString4(msgToSend,temperature);
    1854:	60 91 37 01 	lds	r22, 0x0137
    1858:	05 c0       	rjmp	.+10     	; 0x1864 <main+0x240>
									break;
								case 12:
									uint8ToString4(msgToSend,current);
    185a:	60 91 3a 01 	lds	r22, 0x013A
    185e:	02 c0       	rjmp	.+4      	; 0x1864 <main+0x240>
									break;
								case 13:
									uint8ToString4(msgToSend,voltage);
    1860:	60 91 36 01 	lds	r22, 0x0136
    1864:	70 e0       	ldi	r23, 0x00	; 0
    1866:	ce 01       	movw	r24, r28
    1868:	89 56       	subi	r24, 0x69	; 105
    186a:	9f 4f       	sbci	r25, 0xFF	; 255
    186c:	0e 94 fe 00 	call	0x1fc	; 0x1fc <uint8ToString4>
									break;
    1870:	07 c0       	rjmp	.+14     	; 0x1880 <main+0x25c>
								default:
									strcpy(msgToSend,"ERRO");
    1872:	65 e2       	ldi	r22, 0x25	; 37
    1874:	71 e0       	ldi	r23, 0x01	; 1
    1876:	ce 01       	movw	r24, r28
    1878:	89 56       	subi	r24, 0x69	; 105
    187a:	9f 4f       	sbci	r25, 0xFF	; 255
    187c:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <strcpy>
							}
							strcat(recebido,msgToSend);
    1880:	be 01       	movw	r22, r28
    1882:	69 56       	subi	r22, 0x69	; 105
    1884:	7f 4f       	sbci	r23, 0xFF	; 255
    1886:	ce 01       	movw	r24, r28
    1888:	01 96       	adiw	r24, 0x01	; 1
    188a:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <strcat>
							strcpy(msgToSend,recebido);
    188e:	be 01       	movw	r22, r28
    1890:	6f 5f       	subi	r22, 0xFF	; 255
    1892:	7f 4f       	sbci	r23, 0xFF	; 255
    1894:	ce 01       	movw	r24, r28
    1896:	89 56       	subi	r24, 0x69	; 105
    1898:	9f 4f       	sbci	r25, 0xFF	; 255
    189a:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <strcpy>

							stringTransmit(msgToSend);
    189e:	ce 01       	movw	r24, r28
    18a0:	89 56       	subi	r24, 0x69	; 105
    18a2:	9f 4f       	sbci	r25, 0xFF	; 255
    18a4:	b7 c0       	rjmp	.+366    	; 0x1a14 <main+0x3f0>
						}
						else{
							if(frameIndex == SETWORDSIZE){
    18a6:	b8 e0       	ldi	r27, 0x08	; 8
    18a8:	bb 12       	cpse	r11, r27
    18aa:	b7 c0       	rjmp	.+366    	; 0x1a1a <main+0x3f6>
							
								memcpy((void *) recebido, (void *) (recebido+3), 4);//isola somente o valor, usando 4 caracteres
    18ac:	8c 81       	ldd	r24, Y+4	; 0x04
    18ae:	9d 81       	ldd	r25, Y+5	; 0x05
    18b0:	ae 81       	ldd	r26, Y+6	; 0x06
    18b2:	bf 81       	ldd	r27, Y+7	; 0x07
    18b4:	89 83       	std	Y+1, r24	; 0x01
    18b6:	9a 83       	std	Y+2, r25	; 0x02
    18b8:	ab 83       	std	Y+3, r26	; 0x03
    18ba:	bc 83       	std	Y+4, r27	; 0x04
								recebido[4] = '\0';
    18bc:	1d 82       	std	Y+5, r1	; 0x05

								switch (pos){
    18be:	50 e0       	ldi	r21, 0x00	; 0
    18c0:	fa 01       	movw	r30, r20
    18c2:	31 97       	sbiw	r30, 0x01	; 1
    18c4:	ea 30       	cpi	r30, 0x0A	; 10
    18c6:	f1 05       	cpc	r31, r1
    18c8:	08 f0       	brcs	.+2      	; 0x18cc <main+0x2a8>
    18ca:	a2 c0       	rjmp	.+324    	; 0x1a10 <main+0x3ec>
    18cc:	ee 5b       	subi	r30, 0xBE	; 190
    18ce:	ff 4f       	sbci	r31, 0xFF	; 255
    18d0:	0c 94 4b 0d 	jmp	0x1a96	; 0x1a96 <__tablejump2__>
									case 1:
										freq = string4ToUint16(recebido);
    18d4:	ce 01       	movw	r24, r28
    18d6:	01 96       	adiw	r24, 0x01	; 1
    18d8:	0e 94 29 01 	call	0x252	; 0x252 <string4ToUint16>
    18dc:	bc 01       	movw	r22, r24
    18de:	90 93 08 01 	sts	0x0108, r25
    18e2:	80 93 07 01 	sts	0x0107, r24
										timer1SetCompareAValue((F_CPU/1024)/freq);
    18e6:	c7 01       	movw	r24, r14
    18e8:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <__udivmodhi4>
    18ec:	cb 01       	movw	r24, r22
    18ee:	0e 94 0c 08 	call	0x1018	; 0x1018 <timer1SetCompareAValue>
    18f2:	37 c0       	rjmp	.+110    	; 0x1962 <main+0x33e>
										timer1SetCompareBValue((dc * (timer1GetCompareAValue()))/100);//bota o dc
										break;
									case 2:
										maxCurrent = string4Touint8(recebido);
    18f4:	ce 01       	movw	r24, r28
    18f6:	01 96       	adiw	r24, 0x01	; 1
    18f8:	0e 94 54 01 	call	0x2a8	; 0x2a8 <string4Touint8>
    18fc:	80 93 06 01 	sts	0x0106, r24
										break;
    1900:	92 c0       	rjmp	.+292    	; 0x1a26 <main+0x402>
									case 3:
										maxDC = string4Touint8(recebido);
    1902:	ce 01       	movw	r24, r28
    1904:	01 96       	adiw	r24, 0x01	; 1
    1906:	0e 94 54 01 	call	0x2a8	; 0x2a8 <string4Touint8>
    190a:	80 93 04 01 	sts	0x0104, r24
										if(dcReq > maxDC)
    190e:	90 91 38 01 	lds	r25, 0x0138
    1912:	89 17       	cp	r24, r25
    1914:	08 f4       	brcc	.+2      	; 0x1918 <main+0x2f4>
    1916:	79 c0       	rjmp	.+242    	; 0x1a0a <main+0x3e6>
											dc = 100;
										else
											dc = dcReq;
    1918:	90 93 39 01 	sts	0x0139, r25
										timer1SetCompareBValue((dc * (timer1GetCompareAValue()))/100);//bota o dc
    191c:	a0 90 39 01 	lds	r10, 0x0139
    1920:	b1 2c       	mov	r11, r1
    1922:	0e 94 15 08 	call	0x102a	; 0x102a <timer1GetCompareAValue>
    1926:	dc 01       	movw	r26, r24
    1928:	aa 9d       	mul	r26, r10
    192a:	c0 01       	movw	r24, r0
    192c:	ab 9d       	mul	r26, r11
    192e:	90 0d       	add	r25, r0
    1930:	ba 9d       	mul	r27, r10
    1932:	90 0d       	add	r25, r0
    1934:	11 24       	eor	r1, r1
    1936:	b8 01       	movw	r22, r16
    1938:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <__udivmodhi4>
    193c:	cb 01       	movw	r24, r22
    193e:	0e 94 1a 08 	call	0x1034	; 0x1034 <timer1SetCompareBValue>
										break;
    1942:	71 c0       	rjmp	.+226    	; 0x1a26 <main+0x402>
									case 4:
										minDC = string4Touint8(recebido);
    1944:	ce 01       	movw	r24, r28
    1946:	01 96       	adiw	r24, 0x01	; 1
    1948:	0e 94 54 01 	call	0x2a8	; 0x2a8 <string4Touint8>
    194c:	80 93 05 01 	sts	0x0105, r24
										if(dcReq < minDC)
    1950:	90 91 38 01 	lds	r25, 0x0138
    1954:	98 17       	cp	r25, r24
    1956:	18 f4       	brcc	.+6      	; 0x195e <main+0x33a>
											dc = 0;
    1958:	10 92 39 01 	sts	0x0139, r1
    195c:	02 c0       	rjmp	.+4      	; 0x1962 <main+0x33e>
										else
											dc = dcReq;
    195e:	90 93 39 01 	sts	0x0139, r25
										timer1SetCompareBValue((dc * (timer1GetCompareAValue()))/100);//bota o dc
    1962:	a0 90 39 01 	lds	r10, 0x0139
    1966:	b1 2c       	mov	r11, r1
    1968:	0e 94 15 08 	call	0x102a	; 0x102a <timer1GetCompareAValue>
    196c:	9c 01       	movw	r18, r24
    196e:	2a 9d       	mul	r18, r10
    1970:	c0 01       	movw	r24, r0
    1972:	2b 9d       	mul	r18, r11
    1974:	90 0d       	add	r25, r0
    1976:	3a 9d       	mul	r19, r10
    1978:	90 0d       	add	r25, r0
    197a:	11 24       	eor	r1, r1
    197c:	dc cf       	rjmp	.-72     	; 0x1936 <main+0x312>
										break;
									case 5:
										maxDV = string4Touint8(recebido);
    197e:	ce 01       	movw	r24, r28
    1980:	01 96       	adiw	r24, 0x01	; 1
    1982:	0e 94 54 01 	call	0x2a8	; 0x2a8 <string4Touint8>
    1986:	80 93 03 01 	sts	0x0103, r24
										break;
    198a:	4d c0       	rjmp	.+154    	; 0x1a26 <main+0x402>
									case 6 :
										if(recebido[3] == '1'){
    198c:	8c 81       	ldd	r24, Y+4	; 0x04
    198e:	81 33       	cpi	r24, 0x31	; 49
    1990:	21 f4       	brne	.+8      	; 0x199a <main+0x376>
											flags.on = 1;
    1992:	80 91 3d 01 	lds	r24, 0x013D
    1996:	80 61       	ori	r24, 0x10	; 16
    1998:	0d c0       	rjmp	.+26     	; 0x19b4 <main+0x390>
										}
										if(recebido[3] == '0'){
    199a:	80 33       	cpi	r24, 0x30	; 48
    199c:	09 f0       	breq	.+2      	; 0x19a0 <main+0x37c>
    199e:	43 c0       	rjmp	.+134    	; 0x1a26 <main+0x402>
											flags.on = 0;
    19a0:	80 91 3d 01 	lds	r24, 0x013D
    19a4:	8f 7e       	andi	r24, 0xEF	; 239
    19a6:	06 c0       	rjmp	.+12     	; 0x19b4 <main+0x390>
										}
										break;
									case 7:
										if(recebido[3] == '1'){
    19a8:	8c 81       	ldd	r24, Y+4	; 0x04
    19aa:	81 33       	cpi	r24, 0x31	; 49
    19ac:	31 f4       	brne	.+12     	; 0x19ba <main+0x396>
											flags.dms = 1;
    19ae:	80 91 3d 01 	lds	r24, 0x013D
    19b2:	80 62       	ori	r24, 0x20	; 32
    19b4:	80 93 3d 01 	sts	0x013D, r24
    19b8:	36 c0       	rjmp	.+108    	; 0x1a26 <main+0x402>
										}
										if(recebido[3] == '0'){
    19ba:	80 33       	cpi	r24, 0x30	; 48
    19bc:	a1 f5       	brne	.+104    	; 0x1a26 <main+0x402>
											flags.dms = 0;
    19be:	80 91 3d 01 	lds	r24, 0x013D
    19c2:	8f 7d       	andi	r24, 0xDF	; 223
    19c4:	f7 cf       	rjmp	.-18     	; 0x19b4 <main+0x390>
										}
										break;
									case 8:
										maxTemp = string4Touint8(recebido);
    19c6:	ce 01       	movw	r24, r28
    19c8:	01 96       	adiw	r24, 0x01	; 1
    19ca:	0e 94 54 01 	call	0x2a8	; 0x2a8 <string4Touint8>
    19ce:	80 93 02 01 	sts	0x0102, r24
										break;
    19d2:	29 c0       	rjmp	.+82     	; 0x1a26 <main+0x402>
									case 9:
										minVotage = string4Touint8(recebido);
    19d4:	ce 01       	movw	r24, r28
    19d6:	01 96       	adiw	r24, 0x01	; 1
    19d8:	0e 94 54 01 	call	0x2a8	; 0x2a8 <string4Touint8>
    19dc:	80 93 00 01 	sts	0x0100, r24
										break;
    19e0:	22 c0       	rjmp	.+68     	; 0x1a26 <main+0x402>
									case 10:
										dcReq = string4Touint8(recebido);
    19e2:	ce 01       	movw	r24, r28
    19e4:	01 96       	adiw	r24, 0x01	; 1
    19e6:	0e 94 54 01 	call	0x2a8	; 0x2a8 <string4Touint8>
    19ea:	80 93 38 01 	sts	0x0138, r24
										dc = dcReq;
    19ee:	80 93 39 01 	sts	0x0139, r24
										if(dc < minDC)
    19f2:	90 91 05 01 	lds	r25, 0x0105
    19f6:	89 17       	cp	r24, r25
    19f8:	18 f4       	brcc	.+6      	; 0x1a00 <main+0x3dc>
											dc = 0;
    19fa:	10 92 39 01 	sts	0x0139, r1
    19fe:	8e cf       	rjmp	.-228    	; 0x191c <main+0x2f8>
										else
											if(dc > maxDC)
    1a00:	90 91 04 01 	lds	r25, 0x0104
    1a04:	98 17       	cp	r25, r24
    1a06:	08 f0       	brcs	.+2      	; 0x1a0a <main+0x3e6>
    1a08:	89 cf       	rjmp	.-238    	; 0x191c <main+0x2f8>
												dc = 100;
    1a0a:	d0 92 39 01 	sts	0x0139, r13
    1a0e:	86 cf       	rjmp	.-244    	; 0x191c <main+0x2f8>
									case 11:
									case 12:
									case 13:

									default:
										stringTransmit("ERRO");
    1a10:	85 e2       	ldi	r24, 0x25	; 37
    1a12:	91 e0       	ldi	r25, 0x01	; 1
    1a14:	0e 94 b2 00 	call	0x164	; 0x164 <stringTransmit>
    1a18:	06 c0       	rjmp	.+12     	; 0x1a26 <main+0x402>
								}
							}
							else{
								stringTransmit("wrong size");	
    1a1a:	8a e2       	ldi	r24, 0x2A	; 42
    1a1c:	91 e0       	ldi	r25, 0x01	; 1
    1a1e:	0e 94 b2 00 	call	0x164	; 0x164 <stringTransmit>
								esvaziaBuffer();
							}
						}
					}
					else{//se o inicio da palavra nao esta correto
						esvaziaBuffer();
    1a22:	0e 94 aa 00 	call	0x154	; 0x154 <esvaziaBuffer>
    1a26:	a1 2c       	mov	r10, r1
    1a28:	a0 ce       	rjmp	.-704    	; 0x176a <main+0x146>

00001a2a <__udivmodhi4>:
    1a2a:	aa 1b       	sub	r26, r26
    1a2c:	bb 1b       	sub	r27, r27
    1a2e:	51 e1       	ldi	r21, 0x11	; 17
    1a30:	07 c0       	rjmp	.+14     	; 0x1a40 <__udivmodhi4_ep>

00001a32 <__udivmodhi4_loop>:
    1a32:	aa 1f       	adc	r26, r26
    1a34:	bb 1f       	adc	r27, r27
    1a36:	a6 17       	cp	r26, r22
    1a38:	b7 07       	cpc	r27, r23
    1a3a:	10 f0       	brcs	.+4      	; 0x1a40 <__udivmodhi4_ep>
    1a3c:	a6 1b       	sub	r26, r22
    1a3e:	b7 0b       	sbc	r27, r23

00001a40 <__udivmodhi4_ep>:
    1a40:	88 1f       	adc	r24, r24
    1a42:	99 1f       	adc	r25, r25
    1a44:	5a 95       	dec	r21
    1a46:	a9 f7       	brne	.-22     	; 0x1a32 <__udivmodhi4_loop>
    1a48:	80 95       	com	r24
    1a4a:	90 95       	com	r25
    1a4c:	bc 01       	movw	r22, r24
    1a4e:	cd 01       	movw	r24, r26
    1a50:	08 95       	ret

00001a52 <__udivmodsi4>:
    1a52:	a1 e2       	ldi	r26, 0x21	; 33
    1a54:	1a 2e       	mov	r1, r26
    1a56:	aa 1b       	sub	r26, r26
    1a58:	bb 1b       	sub	r27, r27
    1a5a:	fd 01       	movw	r30, r26
    1a5c:	0d c0       	rjmp	.+26     	; 0x1a78 <__udivmodsi4_ep>

00001a5e <__udivmodsi4_loop>:
    1a5e:	aa 1f       	adc	r26, r26
    1a60:	bb 1f       	adc	r27, r27
    1a62:	ee 1f       	adc	r30, r30
    1a64:	ff 1f       	adc	r31, r31
    1a66:	a2 17       	cp	r26, r18
    1a68:	b3 07       	cpc	r27, r19
    1a6a:	e4 07       	cpc	r30, r20
    1a6c:	f5 07       	cpc	r31, r21
    1a6e:	20 f0       	brcs	.+8      	; 0x1a78 <__udivmodsi4_ep>
    1a70:	a2 1b       	sub	r26, r18
    1a72:	b3 0b       	sbc	r27, r19
    1a74:	e4 0b       	sbc	r30, r20
    1a76:	f5 0b       	sbc	r31, r21

00001a78 <__udivmodsi4_ep>:
    1a78:	66 1f       	adc	r22, r22
    1a7a:	77 1f       	adc	r23, r23
    1a7c:	88 1f       	adc	r24, r24
    1a7e:	99 1f       	adc	r25, r25
    1a80:	1a 94       	dec	r1
    1a82:	69 f7       	brne	.-38     	; 0x1a5e <__udivmodsi4_loop>
    1a84:	60 95       	com	r22
    1a86:	70 95       	com	r23
    1a88:	80 95       	com	r24
    1a8a:	90 95       	com	r25
    1a8c:	9b 01       	movw	r18, r22
    1a8e:	ac 01       	movw	r20, r24
    1a90:	bd 01       	movw	r22, r26
    1a92:	cf 01       	movw	r24, r30
    1a94:	08 95       	ret

00001a96 <__tablejump2__>:
    1a96:	ee 0f       	add	r30, r30
    1a98:	ff 1f       	adc	r31, r31

00001a9a <__tablejump__>:
    1a9a:	05 90       	lpm	r0, Z+
    1a9c:	f4 91       	lpm	r31, Z
    1a9e:	e0 2d       	mov	r30, r0
    1aa0:	09 94       	ijmp

00001aa2 <__ashrdi3>:
    1aa2:	97 fb       	bst	r25, 7
    1aa4:	10 f8       	bld	r1, 0

00001aa6 <__lshrdi3>:
    1aa6:	16 94       	lsr	r1
    1aa8:	00 08       	sbc	r0, r0
    1aaa:	0f 93       	push	r16
    1aac:	08 30       	cpi	r16, 0x08	; 8
    1aae:	98 f0       	brcs	.+38     	; 0x1ad6 <__lshrdi3+0x30>
    1ab0:	08 50       	subi	r16, 0x08	; 8
    1ab2:	23 2f       	mov	r18, r19
    1ab4:	34 2f       	mov	r19, r20
    1ab6:	45 2f       	mov	r20, r21
    1ab8:	56 2f       	mov	r21, r22
    1aba:	67 2f       	mov	r22, r23
    1abc:	78 2f       	mov	r23, r24
    1abe:	89 2f       	mov	r24, r25
    1ac0:	90 2d       	mov	r25, r0
    1ac2:	f4 cf       	rjmp	.-24     	; 0x1aac <__lshrdi3+0x6>
    1ac4:	05 94       	asr	r0
    1ac6:	97 95       	ror	r25
    1ac8:	87 95       	ror	r24
    1aca:	77 95       	ror	r23
    1acc:	67 95       	ror	r22
    1ace:	57 95       	ror	r21
    1ad0:	47 95       	ror	r20
    1ad2:	37 95       	ror	r19
    1ad4:	27 95       	ror	r18
    1ad6:	0a 95       	dec	r16
    1ad8:	aa f7       	brpl	.-22     	; 0x1ac4 <__lshrdi3+0x1e>
    1ada:	0f 91       	pop	r16
    1adc:	08 95       	ret

00001ade <strcat>:
    1ade:	fb 01       	movw	r30, r22
    1ae0:	dc 01       	movw	r26, r24
    1ae2:	0d 90       	ld	r0, X+
    1ae4:	00 20       	and	r0, r0
    1ae6:	e9 f7       	brne	.-6      	; 0x1ae2 <strcat+0x4>
    1ae8:	11 97       	sbiw	r26, 0x01	; 1
    1aea:	01 90       	ld	r0, Z+
    1aec:	0d 92       	st	X+, r0
    1aee:	00 20       	and	r0, r0
    1af0:	e1 f7       	brne	.-8      	; 0x1aea <strcat+0xc>
    1af2:	08 95       	ret

00001af4 <strcpy>:
    1af4:	fb 01       	movw	r30, r22
    1af6:	dc 01       	movw	r26, r24
    1af8:	01 90       	ld	r0, Z+
    1afa:	0d 92       	st	X+, r0
    1afc:	00 20       	and	r0, r0
    1afe:	e1 f7       	brne	.-8      	; 0x1af8 <strcpy+0x4>
    1b00:	08 95       	ret

00001b02 <_exit>:
    1b02:	f8 94       	cli

00001b04 <__stop_program>:
    1b04:	ff cf       	rjmp	.-2      	; 0x1b04 <__stop_program>
