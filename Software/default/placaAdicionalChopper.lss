
placaAdicionalChopper.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000036  00800100  00002060  000020f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002060  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000047  00800136  00800136  0000212a  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  0000212a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000148  00000000  00000000  0000213b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00004612  00000000  00000000  00002283  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001039  00000000  00000000  00006895  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000dd0  00000000  00000000  000078ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00001020  00000000  00000000  000086a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000028c5  00000000  00000000  000096c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002377  00000000  00000000  0000bf85  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  0000e2fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__ctors_end>
       4:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
       8:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
       c:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      10:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      14:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      18:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      1c:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      20:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      24:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      28:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      2c:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__vector_11>
      30:	0c 94 04 02 	jmp	0x408	; 0x408 <__vector_12>
      34:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      38:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      3c:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      40:	0c 94 15 02 	jmp	0x42a	; 0x42a <__vector_16>
      44:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      48:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__vector_18>
      4c:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      50:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      54:	0c 94 70 01 	jmp	0x2e0	; 0x2e0 <__vector_21>
      58:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      5c:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      60:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      64:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
      68:	ae 0e       	add	r10, r30
      6a:	b1 0e       	add	r11, r17
      6c:	bb 0e       	add	r11, r27
      6e:	be 0e       	add	r11, r30
      70:	c1 0e       	add	r12, r17
      72:	c4 0e       	add	r12, r20
      74:	c7 0e       	add	r12, r23
      76:	ce 0e       	add	r12, r30
      78:	d5 0e       	add	r13, r21
      7a:	d8 0e       	add	r13, r24
      7c:	db 0e       	add	r13, r27
      7e:	de 0e       	add	r13, r30
      80:	e2 0e       	add	r14, r18
      82:	e7 0e       	add	r14, r23
      84:	28 0f       	add	r18, r24
      86:	50 0f       	add	r21, r16
      88:	57 0f       	add	r21, r23
      8a:	5e 0f       	add	r21, r30
      8c:	69 0f       	add	r22, r25
      8e:	70 0f       	add	r23, r16
      90:	7d 0f       	add	r23, r29
      92:	8c 0f       	add	r24, r28
      94:	93 0f       	add	r25, r19
      96:	9a 0f       	add	r25, r26
      98:	0e 03       	fmul	r16, r22
      9a:	1e 03       	fmul	r17, r22
      9c:	10 03       	mulsu	r17, r16
      9e:	12 03       	mulsu	r17, r18
      a0:	14 03       	mulsu	r17, r20
      a2:	16 03       	mulsu	r17, r22
      a4:	18 03       	fmul	r17, r16
      a6:	1a 03       	fmul	r17, r18
      a8:	1c 03       	fmul	r17, r20
      aa:	41 07       	cpc	r20, r17
      ac:	34 07       	cpc	r19, r20
      ae:	36 07       	cpc	r19, r22
      b0:	38 07       	cpc	r19, r24
      b2:	3a 07       	cpc	r19, r26
      b4:	3c 07       	cpc	r19, r28
      b6:	3e 07       	cpc	r19, r30
      b8:	40 07       	cpc	r20, r16
      ba:	3c 09       	sbc	r19, r12
      bc:	3e 09       	sbc	r19, r14
      be:	40 09       	sbc	r20, r0
      c0:	42 09       	sbc	r20, r2
      c2:	44 09       	sbc	r20, r4
      c4:	46 09       	sbc	r20, r6
      c6:	48 09       	sbc	r20, r8

000000c8 <__trampolines_end>:
      c8:	04 b6       	in	r0, 0x34	; 52
      ca:	e7 04       	cpc	r14, r7
      cc:	b6 d3       	rcall	.+1900   	; 0x83a <pcint2ActivateInterrupt+0x10>
      ce:	04 b6       	in	r0, 0x34	; 52
      d0:	c7 04       	cpc	r12, r7
      d2:	b6 c3       	rjmp	.+1900   	; 0x840 <pcint2ActivateInterrupt+0x16>
      d4:	02 90       	ld	r0, -Z
      d6:	07 03       	mulsu	r16, r23
      d8:	ac 81       	ldd	r26, Y+4	; 0x04
      da:	03 ac       	ldd	r0, Z+59	; 0x3b
      dc:	80 02       	muls	r24, r16
      de:	90 00       	.word	0x0090	; ????

000000e0 <__ctors_end>:
      e0:	11 24       	eor	r1, r1
      e2:	1f be       	out	0x3f, r1	; 63
      e4:	cf ef       	ldi	r28, 0xFF	; 255
      e6:	d8 e0       	ldi	r29, 0x08	; 8
      e8:	de bf       	out	0x3e, r29	; 62
      ea:	cd bf       	out	0x3d, r28	; 61

000000ec <__do_copy_data>:
      ec:	11 e0       	ldi	r17, 0x01	; 1
      ee:	a0 e0       	ldi	r26, 0x00	; 0
      f0:	b1 e0       	ldi	r27, 0x01	; 1
      f2:	e0 e6       	ldi	r30, 0x60	; 96
      f4:	f0 e2       	ldi	r31, 0x20	; 32
      f6:	02 c0       	rjmp	.+4      	; 0xfc <__do_copy_data+0x10>
      f8:	05 90       	lpm	r0, Z+
      fa:	0d 92       	st	X+, r0
      fc:	a6 33       	cpi	r26, 0x36	; 54
      fe:	b1 07       	cpc	r27, r17
     100:	d9 f7       	brne	.-10     	; 0xf8 <__do_copy_data+0xc>

00000102 <__do_clear_bss>:
     102:	21 e0       	ldi	r18, 0x01	; 1
     104:	a6 e3       	ldi	r26, 0x36	; 54
     106:	b1 e0       	ldi	r27, 0x01	; 1
     108:	01 c0       	rjmp	.+2      	; 0x10c <.do_clear_bss_start>

0000010a <.do_clear_bss_loop>:
     10a:	1d 92       	st	X+, r1

0000010c <.do_clear_bss_start>:
     10c:	ad 37       	cpi	r26, 0x7D	; 125
     10e:	b2 07       	cpc	r27, r18
     110:	e1 f7       	brne	.-8      	; 0x10a <.do_clear_bss_loop>
     112:	0e 94 65 0d 	call	0x1aca	; 0x1aca <main>
     116:	0c 94 2e 10 	jmp	0x205c	; 0x205c <_exit>

0000011a <__bad_interrupt>:
     11a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011e <seta_dc>:
uint8 maxTemp = 70;				//temperatura maxima, desliga o sistema
uint8 criticalTemp = 60;		//temperatura critica
uint8 minVoltage = 210;			// Este valor é relativo à 10*(tensão de alimentação do sistema) (no momento, 36V)

void seta_dc(uint8 d_cycle)		//função para definição do Duty Cicle do PWM
{
     11e:	cf 93       	push	r28
     120:	c8 2f       	mov	r28, r24
	if(d_cycle < minDC)				// Comparação com o valor mínimo de Duty Cicle
     122:	80 91 05 01 	lds	r24, 0x0105
     126:	c8 17       	cp	r28, r24
     128:	18 f4       	brcc	.+6      	; 0x130 <seta_dc+0x12>
		status.dc = 0;
     12a:	10 92 3d 01 	sts	0x013D, r1
     12e:	1a c0       	rjmp	.+52     	; 0x164 <seta_dc+0x46>
	else
	{
		if(d_cycle > maxDC)			//Comparação com o valor máximo de Duty Cicle
     130:	80 91 04 01 	lds	r24, 0x0104
     134:	8c 17       	cp	r24, r28
     136:	20 f4       	brcc	.+8      	; 0x140 <seta_dc+0x22>
			status.dc = 100;
     138:	84 e6       	ldi	r24, 0x64	; 100
     13a:	80 93 3d 01 	sts	0x013D, r24
     13e:	12 c0       	rjmp	.+36     	; 0x164 <seta_dc+0x46>
		else
		{
			status.dc = d_cycle;
     140:	c0 93 3d 01 	sts	0x013D, r28
			timer1SetCompareBValue((status.dc * (timer1GetCompareAValue()))/100);		//seta o valor do comparador B para gerar o DC requerido
     144:	0e 94 6e 08 	call	0x10dc	; 0x10dc <timer1GetCompareAValue>
     148:	9c 01       	movw	r18, r24
     14a:	c2 9f       	mul	r28, r18
     14c:	c0 01       	movw	r24, r0
     14e:	c3 9f       	mul	r28, r19
     150:	90 0d       	add	r25, r0
     152:	11 24       	eor	r1, r1
     154:	64 e6       	ldi	r22, 0x64	; 100
     156:	70 e0       	ldi	r23, 0x00	; 0
     158:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <__udivmodhi4>
     15c:	cb 01       	movw	r24, r22
		}
	}
}
     15e:	cf 91       	pop	r28
		if(d_cycle > maxDC)			//Comparação com o valor máximo de Duty Cicle
			status.dc = 100;
		else
		{
			status.dc = d_cycle;
			timer1SetCompareBValue((status.dc * (timer1GetCompareAValue()))/100);		//seta o valor do comparador B para gerar o DC requerido
     160:	0c 94 73 08 	jmp	0x10e6	; 0x10e6 <timer1SetCompareBValue>
		}
	}
}
     164:	cf 91       	pop	r28
     166:	08 95       	ret

00000168 <esvaziaBuffer>:
}

//esvazia o buffer de entrada da usart
void esvaziaBuffer()
{
	while(!usartIsReceiverBufferEmpty())
     168:	0e 94 55 0b 	call	0x16aa	; 0x16aa <usartIsReceiverBufferEmpty>
     16c:	81 11       	cpse	r24, r1
     16e:	03 c0       	rjmp	.+6      	; 0x176 <esvaziaBuffer+0xe>
		usartGetDataFromReceiverBuffer();
     170:	0e 94 33 0b 	call	0x1666	; 0x1666 <usartGetDataFromReceiverBuffer>
     174:	f9 cf       	rjmp	.-14     	; 0x168 <esvaziaBuffer>
}
     176:	08 95       	ret

00000178 <stringTransmit>:

//envia uma msg usando o protocolo GUI
void stringTransmit(char* texto)
{
     178:	1f 93       	push	r17
     17a:	cf 93       	push	r28
     17c:	df 93       	push	r29
     17e:	ec 01       	movw	r28, r24
	uint8 i = 0;
	usartTransmit(INICIODOPACOTE);
     180:	80 e4       	ldi	r24, 0x40	; 64
     182:	0e 94 bb 0a 	call	0x1576	; 0x1576 <usartTransmit>
	for(i = 0; texto[i] != '\0'; i++)
     186:	10 e0       	ldi	r17, 0x00	; 0
     188:	fe 01       	movw	r30, r28
     18a:	e1 0f       	add	r30, r17
     18c:	f1 1d       	adc	r31, r1
     18e:	80 81       	ld	r24, Z
     190:	88 23       	and	r24, r24
     192:	21 f0       	breq	.+8      	; 0x19c <stringTransmit+0x24>
		usartTransmit(texto[i]);
     194:	0e 94 bb 0a 	call	0x1576	; 0x1576 <usartTransmit>
//envia uma msg usando o protocolo GUI
void stringTransmit(char* texto)
{
	uint8 i = 0;
	usartTransmit(INICIODOPACOTE);
	for(i = 0; texto[i] != '\0'; i++)
     198:	1f 5f       	subi	r17, 0xFF	; 255
     19a:	f6 cf       	rjmp	.-20     	; 0x188 <stringTransmit+0x10>
		usartTransmit(texto[i]);
	usartTransmit(FINALDOPACOTE);
     19c:	8a e2       	ldi	r24, 0x2A	; 42
}
     19e:	df 91       	pop	r29
     1a0:	cf 91       	pop	r28
     1a2:	1f 91       	pop	r17
{
	uint8 i = 0;
	usartTransmit(INICIODOPACOTE);
	for(i = 0; texto[i] != '\0'; i++)
		usartTransmit(texto[i]);
	usartTransmit(FINALDOPACOTE);
     1a4:	0c 94 bb 0a 	jmp	0x1576	; 0x1576 <usartTransmit>

000001a8 <uint16ToString4>:
}

//convert uint16 to string of 4 characters
void uint16ToString4(char* str,uint16 value)
{
     1a8:	0f 93       	push	r16
     1aa:	1f 93       	push	r17
     1ac:	cf 93       	push	r28
     1ae:	df 93       	push	r29
     1b0:	fc 01       	movw	r30, r24
     1b2:	9b 01       	movw	r18, r22
	str[4] = '\0';
     1b4:	14 82       	std	Z+4, r1	; 0x04
	str[3] = (char ) (value%10 + 48);
     1b6:	ca e0       	ldi	r28, 0x0A	; 10
     1b8:	d0 e0       	ldi	r29, 0x00	; 0
     1ba:	cb 01       	movw	r24, r22
     1bc:	be 01       	movw	r22, r28
     1be:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <__udivmodhi4>
     1c2:	80 5d       	subi	r24, 0xD0	; 208
     1c4:	83 83       	std	Z+3, r24	; 0x03
	str[2] = (char) ((value%100) / 10 + 48);
     1c6:	04 e6       	ldi	r16, 0x64	; 100
     1c8:	10 e0       	ldi	r17, 0x00	; 0
     1ca:	c9 01       	movw	r24, r18
     1cc:	b8 01       	movw	r22, r16
     1ce:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <__udivmodhi4>
     1d2:	be 01       	movw	r22, r28
     1d4:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <__udivmodhi4>
     1d8:	60 5d       	subi	r22, 0xD0	; 208
     1da:	62 83       	std	Z+2, r22	; 0x02
	str[1] = (char) ((value%1000) / 100 + 48);
     1dc:	c8 ee       	ldi	r28, 0xE8	; 232
     1de:	d3 e0       	ldi	r29, 0x03	; 3
     1e0:	c9 01       	movw	r24, r18
     1e2:	be 01       	movw	r22, r28
     1e4:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <__udivmodhi4>
     1e8:	b8 01       	movw	r22, r16
     1ea:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <__udivmodhi4>
     1ee:	60 5d       	subi	r22, 0xD0	; 208
     1f0:	61 83       	std	Z+1, r22	; 0x01
	str[0] = (char) ((value%10000) / 1000 + 48);
     1f2:	c9 01       	movw	r24, r18
     1f4:	60 e1       	ldi	r22, 0x10	; 16
     1f6:	77 e2       	ldi	r23, 0x27	; 39
     1f8:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <__udivmodhi4>
     1fc:	be 01       	movw	r22, r28
     1fe:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <__udivmodhi4>
     202:	60 5d       	subi	r22, 0xD0	; 208
     204:	60 83       	st	Z, r22
}
     206:	df 91       	pop	r29
     208:	cf 91       	pop	r28
     20a:	1f 91       	pop	r17
     20c:	0f 91       	pop	r16
     20e:	08 95       	ret

00000210 <uint8ToString4>:

//convert uint8 to string of 4 characters
void uint8ToString4(char* str,uint16 value)
{
     210:	0f 93       	push	r16
     212:	1f 93       	push	r17
     214:	cf 93       	push	r28
     216:	df 93       	push	r29
     218:	fc 01       	movw	r30, r24
     21a:	9b 01       	movw	r18, r22
	str[4] = '\0';
     21c:	14 82       	std	Z+4, r1	; 0x04
	str[3] = (char ) (value%10 + 48);
     21e:	0a e0       	ldi	r16, 0x0A	; 10
     220:	10 e0       	ldi	r17, 0x00	; 0
     222:	cb 01       	movw	r24, r22
     224:	b8 01       	movw	r22, r16
     226:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <__udivmodhi4>
     22a:	80 5d       	subi	r24, 0xD0	; 208
     22c:	83 83       	std	Z+3, r24	; 0x03
	str[2] = (char) ((value%100) / 10 + 48);
     22e:	c4 e6       	ldi	r28, 0x64	; 100
     230:	d0 e0       	ldi	r29, 0x00	; 0
     232:	c9 01       	movw	r24, r18
     234:	be 01       	movw	r22, r28
     236:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <__udivmodhi4>
     23a:	b8 01       	movw	r22, r16
     23c:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <__udivmodhi4>
     240:	60 5d       	subi	r22, 0xD0	; 208
     242:	62 83       	std	Z+2, r22	; 0x02
	str[1] = (char) ((value%1000) / 100 + 48);
     244:	c9 01       	movw	r24, r18
     246:	68 ee       	ldi	r22, 0xE8	; 232
     248:	73 e0       	ldi	r23, 0x03	; 3
     24a:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <__udivmodhi4>
     24e:	be 01       	movw	r22, r28
     250:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <__udivmodhi4>
     254:	60 5d       	subi	r22, 0xD0	; 208
     256:	61 83       	std	Z+1, r22	; 0x01
	str[0] = '0';
     258:	80 e3       	ldi	r24, 0x30	; 48
     25a:	80 83       	st	Z, r24
}
     25c:	df 91       	pop	r29
     25e:	cf 91       	pop	r28
     260:	1f 91       	pop	r17
     262:	0f 91       	pop	r16
     264:	08 95       	ret

00000266 <string4ToUint16>:

//convert string of 4 characters uint16
uint16 string4ToUint16(char* str)
{
     266:	fc 01       	movw	r30, r24
	uint16 value;
	value = (uint16) (str[0]-48)*1000 + (str[1]-48)*100 
	+ (str[2]-48)*10 + str[3]-48;
     268:	23 81       	ldd	r18, Z+3	; 0x03
     26a:	30 e0       	ldi	r19, 0x00	; 0

//convert string of 4 characters uint16
uint16 string4ToUint16(char* str)
{
	uint16 value;
	value = (uint16) (str[0]-48)*1000 + (str[1]-48)*100 
     26c:	20 53       	subi	r18, 0x30	; 48
     26e:	31 09       	sbc	r19, r1
     270:	80 81       	ld	r24, Z
     272:	90 e0       	ldi	r25, 0x00	; 0
     274:	c0 97       	sbiw	r24, 0x30	; 48
     276:	68 ee       	ldi	r22, 0xE8	; 232
     278:	73 e0       	ldi	r23, 0x03	; 3
     27a:	86 9f       	mul	r24, r22
     27c:	a0 01       	movw	r20, r0
     27e:	87 9f       	mul	r24, r23
     280:	50 0d       	add	r21, r0
     282:	96 9f       	mul	r25, r22
     284:	50 0d       	add	r21, r0
     286:	11 24       	eor	r1, r1
	+ (str[2]-48)*10 + str[3]-48;
     288:	24 0f       	add	r18, r20
     28a:	35 1f       	adc	r19, r21

//convert string of 4 characters uint16
uint16 string4ToUint16(char* str)
{
	uint16 value;
	value = (uint16) (str[0]-48)*1000 + (str[1]-48)*100 
     28c:	81 81       	ldd	r24, Z+1	; 0x01
     28e:	90 e0       	ldi	r25, 0x00	; 0
     290:	c0 97       	sbiw	r24, 0x30	; 48
     292:	64 e6       	ldi	r22, 0x64	; 100
     294:	68 9f       	mul	r22, r24
     296:	a0 01       	movw	r20, r0
     298:	69 9f       	mul	r22, r25
     29a:	50 0d       	add	r21, r0
     29c:	11 24       	eor	r1, r1
	+ (str[2]-48)*10 + str[3]-48;
     29e:	24 0f       	add	r18, r20
     2a0:	35 1f       	adc	r19, r21
     2a2:	42 81       	ldd	r20, Z+2	; 0x02
     2a4:	50 e0       	ldi	r21, 0x00	; 0
     2a6:	40 53       	subi	r20, 0x30	; 48
     2a8:	51 09       	sbc	r21, r1
     2aa:	6a e0       	ldi	r22, 0x0A	; 10
     2ac:	64 9f       	mul	r22, r20
     2ae:	c0 01       	movw	r24, r0
     2b0:	65 9f       	mul	r22, r21
     2b2:	90 0d       	add	r25, r0
     2b4:	11 24       	eor	r1, r1
	return value;
}
     2b6:	82 0f       	add	r24, r18
     2b8:	93 1f       	adc	r25, r19
     2ba:	08 95       	ret

000002bc <string4Touint8>:

//convert string of 4 characters uint8
uint8 string4Touint8(char* str)
{
     2bc:	fc 01       	movw	r30, r24
	uint8 value;
	value = (uint8) ((str[1]-48)*100 
     2be:	83 81       	ldd	r24, Z+3	; 0x03
     2c0:	80 53       	subi	r24, 0x30	; 48
     2c2:	91 81       	ldd	r25, Z+1	; 0x01
     2c4:	90 53       	subi	r25, 0x30	; 48
     2c6:	24 e6       	ldi	r18, 0x64	; 100
     2c8:	92 9f       	mul	r25, r18
     2ca:	80 0d       	add	r24, r0
     2cc:	11 24       	eor	r1, r1
	+ (str[2]-48)*10 + str[3]-48);
     2ce:	92 81       	ldd	r25, Z+2	; 0x02
     2d0:	99 0f       	add	r25, r25

//convert string of 4 characters uint8
uint8 string4Touint8(char* str)
{
	uint8 value;
	value = (uint8) ((str[1]-48)*100 
     2d2:	90 56       	subi	r25, 0x60	; 96
     2d4:	29 2f       	mov	r18, r25
     2d6:	22 0f       	add	r18, r18
     2d8:	22 0f       	add	r18, r18
     2da:	29 0f       	add	r18, r25
	+ (str[2]-48)*10 + str[3]-48);
	return value;
}
     2dc:	82 0f       	add	r24, r18
     2de:	08 95       	ret

000002e0 <__vector_21>:
		}
	}
}

ISR(ADC_vect)
{
     2e0:	1f 92       	push	r1
     2e2:	0f 92       	push	r0
     2e4:	0f b6       	in	r0, 0x3f	; 63
     2e6:	0f 92       	push	r0
     2e8:	11 24       	eor	r1, r1
     2ea:	2f 93       	push	r18
     2ec:	3f 93       	push	r19
     2ee:	4f 93       	push	r20
     2f0:	5f 93       	push	r21
     2f2:	6f 93       	push	r22
     2f4:	7f 93       	push	r23
     2f6:	8f 93       	push	r24
     2f8:	9f 93       	push	r25
     2fa:	af 93       	push	r26
     2fc:	bf 93       	push	r27
     2fe:	ef 93       	push	r30
     300:	ff 93       	push	r31
	switch (channel)
     302:	80 91 37 01 	lds	r24, 0x0137
     306:	81 30       	cpi	r24, 0x01	; 1
     308:	b1 f1       	breq	.+108    	; 0x376 <__vector_21+0x96>
     30a:	08 f4       	brcc	.+2      	; 0x30e <__vector_21+0x2e>
     30c:	47 c0       	rjmp	.+142    	; 0x39c <__vector_21+0xbc>
     30e:	82 30       	cpi	r24, 0x02	; 2
     310:	21 f1       	breq	.+72     	; 0x35a <__vector_21+0x7a>
     312:	83 30       	cpi	r24, 0x03	; 3
     314:	09 f0       	breq	.+2      	; 0x318 <__vector_21+0x38>
     316:	4a c0       	rjmp	.+148    	; 0x3ac <__vector_21+0xcc>
			if(flags.mode == POT_MODE)
				dcReq = (1023 / 10) - (ADC/10); 		//logica inversa do pot, para desligar em caso de rompimento do cabo
			channel = VOLTAGE_CHANNEL;
			break;
		case VOLTAGE_CHANNEL:
			EMA(status.voltage,(10*ADC)/21,2);			//calculado apartir da relação de media movel
     318:	40 91 78 00 	lds	r20, 0x0078
     31c:	50 91 79 00 	lds	r21, 0x0079
     320:	20 91 3f 01 	lds	r18, 0x013F
     324:	30 91 40 01 	lds	r19, 0x0140
     328:	6a e0       	ldi	r22, 0x0A	; 10
     32a:	64 9f       	mul	r22, r20
     32c:	c0 01       	movw	r24, r0
     32e:	65 9f       	mul	r22, r21
     330:	90 0d       	add	r25, r0
     332:	11 24       	eor	r1, r1
     334:	65 e1       	ldi	r22, 0x15	; 21
     336:	70 e0       	ldi	r23, 0x00	; 0
     338:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <__udivmodhi4>
     33c:	62 1b       	sub	r22, r18
     33e:	73 0b       	sbc	r23, r19
     340:	76 95       	lsr	r23
     342:	67 95       	ror	r22
     344:	76 95       	lsr	r23
     346:	67 95       	ror	r22
     348:	62 0f       	add	r22, r18
     34a:	73 1f       	adc	r23, r19
     34c:	70 93 40 01 	sts	0x0140, r23
     350:	60 93 3f 01 	sts	0x013F, r22
			channel = TEMP_CHANNEL;
     354:	10 92 37 01 	sts	0x0137, r1
			break;
     358:	2c c0       	rjmp	.+88     	; 0x3b2 <__vector_21+0xd2>
ISR(ADC_vect)
{
	switch (channel)
	{
		case CURRENT_CHANNEL:
			status.current = ADC / 5;
     35a:	80 91 78 00 	lds	r24, 0x0078
     35e:	90 91 79 00 	lds	r25, 0x0079
     362:	65 e0       	ldi	r22, 0x05	; 5
     364:	70 e0       	ldi	r23, 0x00	; 0
     366:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <__udivmodhi4>
     36a:	70 93 3c 01 	sts	0x013C, r23
     36e:	60 93 3b 01 	sts	0x013B, r22
			channel = POT_CHANNEL;
     372:	81 e0       	ldi	r24, 0x01	; 1
     374:	1c c0       	rjmp	.+56     	; 0x3ae <__vector_21+0xce>
			break;
		case POT_CHANNEL:
			if(flags.mode == POT_MODE)
     376:	80 91 38 01 	lds	r24, 0x0138
     37a:	8c 70       	andi	r24, 0x0C	; 12
     37c:	88 30       	cpi	r24, 0x08	; 8
     37e:	61 f4       	brne	.+24     	; 0x398 <__vector_21+0xb8>
				dcReq = (1023 / 10) - (ADC/10); 		//logica inversa do pot, para desligar em caso de rompimento do cabo
     380:	80 91 78 00 	lds	r24, 0x0078
     384:	90 91 79 00 	lds	r25, 0x0079
     388:	6a e0       	ldi	r22, 0x0A	; 10
     38a:	70 e0       	ldi	r23, 0x00	; 0
     38c:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <__udivmodhi4>
     390:	86 e6       	ldi	r24, 0x66	; 102
     392:	86 1b       	sub	r24, r22
     394:	80 93 36 01 	sts	0x0136, r24
			channel = VOLTAGE_CHANNEL;
     398:	83 e0       	ldi	r24, 0x03	; 3
     39a:	09 c0       	rjmp	.+18     	; 0x3ae <__vector_21+0xce>
		case VOLTAGE_CHANNEL:
			EMA(status.voltage,(10*ADC)/21,2);			//calculado apartir da relação de media movel
			channel = TEMP_CHANNEL;
			break;
		case TEMP_CHANNEL:
			status.temperature = ADC / 2;
     39c:	80 91 78 00 	lds	r24, 0x0078
     3a0:	90 91 79 00 	lds	r25, 0x0079
     3a4:	96 95       	lsr	r25
     3a6:	87 95       	ror	r24
     3a8:	80 93 3e 01 	sts	0x013E, r24
		default:
			channel = CURRENT_CHANNEL;
     3ac:	82 e0       	ldi	r24, 0x02	; 2
     3ae:	80 93 37 01 	sts	0x0137, r24
			break;
	}
	adcSelectChannel(channel);
     3b2:	80 91 37 01 	lds	r24, 0x0137
     3b6:	0e 94 54 09 	call	0x12a8	; 0x12a8 <adcSelectChannel>
	adcStartConversion();
     3ba:	0e 94 9b 09 	call	0x1336	; 0x1336 <adcStartConversion>
}
     3be:	ff 91       	pop	r31
     3c0:	ef 91       	pop	r30
     3c2:	bf 91       	pop	r27
     3c4:	af 91       	pop	r26
     3c6:	9f 91       	pop	r25
     3c8:	8f 91       	pop	r24
     3ca:	7f 91       	pop	r23
     3cc:	6f 91       	pop	r22
     3ce:	5f 91       	pop	r21
     3d0:	4f 91       	pop	r20
     3d2:	3f 91       	pop	r19
     3d4:	2f 91       	pop	r18
     3d6:	0f 90       	pop	r0
     3d8:	0f be       	out	0x3f, r0	; 63
     3da:	0f 90       	pop	r0
     3dc:	1f 90       	pop	r1
     3de:	18 95       	reti

000003e0 <__vector_11>:

ISR(TIMER1_COMPA_vect)
{
     3e0:	1f 92       	push	r1
     3e2:	0f 92       	push	r0
     3e4:	0f b6       	in	r0, 0x3f	; 63
     3e6:	0f 92       	push	r0
     3e8:	11 24       	eor	r1, r1
     3ea:	8f 93       	push	r24
	if(status.dc != 0 && status.on)
     3ec:	80 91 3d 01 	lds	r24, 0x013D
     3f0:	88 23       	and	r24, r24
     3f2:	21 f0       	breq	.+8      	; 0x3fc <__vector_11+0x1c>
     3f4:	80 91 41 01 	lds	r24, 0x0141
     3f8:	81 11       	cpse	r24, r1
		setBit(PWM_PORT,PWM_BIT);		//Inicia o período em nível alto do PWM
     3fa:	29 9a       	sbi	0x05, 1	; 5
}
     3fc:	8f 91       	pop	r24
     3fe:	0f 90       	pop	r0
     400:	0f be       	out	0x3f, r0	; 63
     402:	0f 90       	pop	r0
     404:	1f 90       	pop	r1
     406:	18 95       	reti

00000408 <__vector_12>:

ISR(TIMER1_COMPB_vect)
{
     408:	1f 92       	push	r1
     40a:	0f 92       	push	r0
     40c:	0f b6       	in	r0, 0x3f	; 63
     40e:	0f 92       	push	r0
     410:	11 24       	eor	r1, r1
     412:	8f 93       	push	r24
	if(status.dc < 100)
     414:	80 91 3d 01 	lds	r24, 0x013D
     418:	84 36       	cpi	r24, 0x64	; 100
     41a:	08 f4       	brcc	.+2      	; 0x41e <__vector_12+0x16>
		clrBit(PWM_PORT,PWM_BIT);		//Inicia o período em nível baixo do PWM
     41c:	29 98       	cbi	0x05, 1	; 5
}
     41e:	8f 91       	pop	r24
     420:	0f 90       	pop	r0
     422:	0f be       	out	0x3f, r0	; 63
     424:	0f 90       	pop	r0
     426:	1f 90       	pop	r1
     428:	18 95       	reti

0000042a <__vector_16>:

//controle 60Hz
ISR(TIMER0_OVF_vect)
{
     42a:	1f 92       	push	r1
     42c:	0f 92       	push	r0
     42e:	0f b6       	in	r0, 0x3f	; 63
     430:	0f 92       	push	r0
     432:	11 24       	eor	r1, r1
     434:	2f 93       	push	r18
     436:	3f 93       	push	r19
     438:	4f 93       	push	r20
     43a:	5f 93       	push	r21
     43c:	6f 93       	push	r22
     43e:	7f 93       	push	r23
     440:	8f 93       	push	r24
     442:	9f 93       	push	r25
     444:	af 93       	push	r26
     446:	bf 93       	push	r27
     448:	ef 93       	push	r30
     44a:	ff 93       	push	r31
	if(flags.mode == POT_MODE)
     44c:	80 91 38 01 	lds	r24, 0x0138
     450:	98 2f       	mov	r25, r24
     452:	9c 70       	andi	r25, 0x0C	; 12
     454:	98 30       	cpi	r25, 0x08	; 8
     456:	89 f4       	brne	.+34     	; 0x47a <__vector_16+0x50>
	{
		flags.on  = isBitClr(ON_PIN ,ON_BIT );
     458:	99 b1       	in	r25, 0x09	; 9
     45a:	95 fb       	bst	r25, 5
     45c:	99 27       	eor	r25, r25
     45e:	90 f9       	bld	r25, 0
     460:	21 e0       	ldi	r18, 0x01	; 1
     462:	92 27       	eor	r25, r18
     464:	90 fb       	bst	r25, 0
     466:	84 f9       	bld	r24, 4
     468:	80 93 38 01 	sts	0x0138, r24
		flags.dms = isBitClr(DMS_PIN,DMS_BIT);
     46c:	99 b1       	in	r25, 0x09	; 9
     46e:	92 95       	swap	r25
     470:	91 70       	andi	r25, 0x01	; 1
     472:	92 27       	eor	r25, r18
     474:	90 fb       	bst	r25, 0
     476:	85 f9       	bld	r24, 5
     478:	14 c0       	rjmp	.+40     	; 0x4a2 <__vector_16+0x78>
	}
	else
		if(flags.mode == CAN_MODE){
     47a:	91 11       	cpse	r25, r1
     47c:	14 c0       	rjmp	.+40     	; 0x4a6 <__vector_16+0x7c>
			if(!--cont_can)//acontece a cada segundo
     47e:	90 91 07 01 	lds	r25, 0x0107
     482:	91 50       	subi	r25, 0x01	; 1
     484:	90 93 07 01 	sts	0x0107, r25
     488:	91 11       	cpse	r25, r1
     48a:	0d c0       	rjmp	.+26     	; 0x4a6 <__vector_16+0x7c>
			{
				cont_can = 60;
     48c:	9c e3       	ldi	r25, 0x3C	; 60
     48e:	90 93 07 01 	sts	0x0107, r25
				if(flags.can_connected == 0)
     492:	86 fd       	sbrc	r24, 6
     494:	05 c0       	rjmp	.+10     	; 0x4a0 <__vector_16+0x76>
				{
					status.on = 0;			//reseta o sistema
     496:	10 92 41 01 	sts	0x0141, r1
					flags.mode = POT_MODE;  
     49a:	83 7f       	andi	r24, 0xF3	; 243
     49c:	88 60       	ori	r24, 0x08	; 8
     49e:	01 c0       	rjmp	.+2      	; 0x4a2 <__vector_16+0x78>
				}
				else
				{
					flags.can_connected = 0;
     4a0:	8f 7b       	andi	r24, 0xBF	; 191
     4a2:	80 93 38 01 	sts	0x0138, r24
				}
			}
		}
	if(!(flags.on && !flags.dms))// || status.temperature > maxTemp)//informa ao sistema para nao acionar o motor caso botão ON e DMS estejam desligados.
     4a6:	80 91 38 01 	lds	r24, 0x0138
     4aa:	80 73       	andi	r24, 0x30	; 48
     4ac:	80 31       	cpi	r24, 0x10	; 16
     4ae:	19 f0       	breq	.+6      	; 0x4b6 <__vector_16+0x8c>
		status.on = 0;
     4b0:	10 92 41 01 	sts	0x0141, r1
     4b4:	0d c0       	rjmp	.+26     	; 0x4d0 <__vector_16+0xa6>
	else
		if(dcReq < minDC && !status.on)		//informa ao sistema para acionar o motor apenas quando botão ON e DMS estejam ligados
     4b6:	90 91 36 01 	lds	r25, 0x0136
     4ba:	80 91 05 01 	lds	r24, 0x0105
     4be:	98 17       	cp	r25, r24
     4c0:	38 f4       	brcc	.+14     	; 0x4d0 <__vector_16+0xa6>
     4c2:	80 91 41 01 	lds	r24, 0x0141
     4c6:	81 11       	cpse	r24, r1
     4c8:	03 c0       	rjmp	.+6      	; 0x4d0 <__vector_16+0xa6>
			status.on = 1;					//e o potenciometro esteja numa posicao correspondente a menos de 10% do DC do PWM.
     4ca:	81 e0       	ldi	r24, 0x01	; 1
     4cc:	80 93 41 01 	sts	0x0141, r24
	if(status.on)		//inicia o acionamento do motor, com os as condições preliminares acima satisfeitas.
     4d0:	80 91 41 01 	lds	r24, 0x0141
     4d4:	90 91 3d 01 	lds	r25, 0x013D
     4d8:	88 23       	and	r24, r24
     4da:	69 f1       	breq	.+90     	; 0x536 <__vector_16+0x10c>
	{
    	if(status.dc != dcReq)
     4dc:	80 91 36 01 	lds	r24, 0x0136
     4e0:	98 17       	cp	r25, r24
     4e2:	71 f1       	breq	.+92     	; 0x540 <__vector_16+0x116>
    	{
    		if(dcReq > status.dc && dcReq > (minDC + 5))//se esta em ascendente
     4e4:	98 17       	cp	r25, r24
     4e6:	20 f5       	brcc	.+72     	; 0x530 <__vector_16+0x106>
     4e8:	60 91 05 01 	lds	r22, 0x0105
     4ec:	48 2f       	mov	r20, r24
     4ee:	50 e0       	ldi	r21, 0x00	; 0
     4f0:	26 2f       	mov	r18, r22
     4f2:	30 e0       	ldi	r19, 0x00	; 0
     4f4:	2b 5f       	subi	r18, 0xFB	; 251
     4f6:	3f 4f       	sbci	r19, 0xFF	; 255
     4f8:	24 17       	cp	r18, r20
     4fa:	35 07       	cpc	r19, r21
     4fc:	cc f4       	brge	.+50     	; 0x530 <__vector_16+0x106>
    		{
    			if(!--cont)
     4fe:	20 91 08 01 	lds	r18, 0x0108
     502:	30 91 09 01 	lds	r19, 0x0109
     506:	21 50       	subi	r18, 0x01	; 1
     508:	31 09       	sbc	r19, r1
     50a:	30 93 09 01 	sts	0x0109, r19
     50e:	20 93 08 01 	sts	0x0108, r18
     512:	23 2b       	or	r18, r19
     514:	a9 f4       	brne	.+42     	; 0x540 <__vector_16+0x116>
    			{
    				cont = maxCont;
     516:	23 e0       	ldi	r18, 0x03	; 3
     518:	30 e0       	ldi	r19, 0x00	; 0
     51a:	30 93 09 01 	sts	0x0109, r19
     51e:	20 93 08 01 	sts	0x0108, r18
    				if(status.dc == 0)
     522:	91 11       	cpse	r25, r1
     524:	02 c0       	rjmp	.+4      	; 0x52a <__vector_16+0x100>
    					seta_dc(minDC);
     526:	86 2f       	mov	r24, r22
     528:	09 c0       	rjmp	.+18     	; 0x53c <__vector_16+0x112>
    				else
    					seta_dc(status.dc+1);
     52a:	81 e0       	ldi	r24, 0x01	; 1
     52c:	89 0f       	add	r24, r25
     52e:	06 c0       	rjmp	.+12     	; 0x53c <__vector_16+0x112>
    			}
    		}
    		else
    			if (dcReq < status.dc)
     530:	89 17       	cp	r24, r25
     532:	30 f4       	brcc	.+12     	; 0x540 <__vector_16+0x116>
     534:	03 c0       	rjmp	.+6      	; 0x53c <__vector_16+0x112>
    				seta_dc(dcReq);			//definição do Duty Cicle do PWM
    	}
	}
	else
	{
		if(status.dc != 0)					//se o sistema ainda nao esta desligado
     536:	99 23       	and	r25, r25
     538:	19 f0       	breq	.+6      	; 0x540 <__vector_16+0x116>
			seta_dc(0);						//desliga o sistema
     53a:	80 e0       	ldi	r24, 0x00	; 0
     53c:	0e 94 8f 00 	call	0x11e	; 0x11e <seta_dc>
	}
	if(status.dc >= minDC && (status.current > maxCurrent || status.voltage < minVoltage))
     540:	80 91 3d 01 	lds	r24, 0x013D
     544:	90 91 05 01 	lds	r25, 0x0105
     548:	89 17       	cp	r24, r25
     54a:	e0 f0       	brcs	.+56     	; 0x584 <__vector_16+0x15a>
     54c:	20 91 06 01 	lds	r18, 0x0106
     550:	30 e0       	ldi	r19, 0x00	; 0
     552:	40 91 3b 01 	lds	r20, 0x013B
     556:	50 91 3c 01 	lds	r21, 0x013C
     55a:	24 17       	cp	r18, r20
     55c:	35 07       	cpc	r19, r21
     55e:	50 f0       	brcs	.+20     	; 0x574 <__vector_16+0x14a>
     560:	20 91 00 01 	lds	r18, 0x0100
     564:	30 e0       	ldi	r19, 0x00	; 0
     566:	40 91 3f 01 	lds	r20, 0x013F
     56a:	50 91 40 01 	lds	r21, 0x0140
     56e:	42 17       	cp	r20, r18
     570:	53 07       	cpc	r21, r19
     572:	40 f4       	brcc	.+16     	; 0x584 <__vector_16+0x15a>
	{
		if(status.dc == 100)
     574:	84 36       	cpi	r24, 0x64	; 100
     576:	19 f4       	brne	.+6      	; 0x57e <__vector_16+0x154>
			seta_dc(maxDC);
     578:	80 91 04 01 	lds	r24, 0x0104
     57c:	01 c0       	rjmp	.+2      	; 0x580 <__vector_16+0x156>
		else
			seta_dc(status.dc-3);
     57e:	83 50       	subi	r24, 0x03	; 3
     580:	0e 94 8f 00 	call	0x11e	; 0x11e <seta_dc>
		{
			flags.warning = 0;
			//clrBit(BUZZER_PORT,BUZZER_BIT);
		}
	*/
}
     584:	ff 91       	pop	r31
     586:	ef 91       	pop	r30
     588:	bf 91       	pop	r27
     58a:	af 91       	pop	r26
     58c:	9f 91       	pop	r25
     58e:	8f 91       	pop	r24
     590:	7f 91       	pop	r23
     592:	6f 91       	pop	r22
     594:	5f 91       	pop	r21
     596:	4f 91       	pop	r20
     598:	3f 91       	pop	r19
     59a:	2f 91       	pop	r18
     59c:	0f 90       	pop	r0
     59e:	0f be       	out	0x3f, r0	; 63
     5a0:	0f 90       	pop	r0
     5a2:	1f 90       	pop	r1
     5a4:	18 95       	reti

000005a6 <__vector_18>:

ISR(USART_RX_vect)
{
     5a6:	1f 92       	push	r1
     5a8:	0f 92       	push	r0
     5aa:	0f b6       	in	r0, 0x3f	; 63
     5ac:	0f 92       	push	r0
     5ae:	11 24       	eor	r1, r1
     5b0:	2f 93       	push	r18
     5b2:	3f 93       	push	r19
     5b4:	4f 93       	push	r20
     5b6:	5f 93       	push	r21
     5b8:	6f 93       	push	r22
     5ba:	7f 93       	push	r23
     5bc:	8f 93       	push	r24
     5be:	9f 93       	push	r25
     5c0:	af 93       	push	r26
     5c2:	bf 93       	push	r27
     5c4:	ef 93       	push	r30
     5c6:	ff 93       	push	r31
	usartAddDataToReceiverBuffer(UDR0);
     5c8:	80 91 c6 00 	lds	r24, 0x00C6
     5cc:	0e 94 03 0b 	call	0x1606	; 0x1606 <usartAddDataToReceiverBuffer>
     5d0:	ff 91       	pop	r31
     5d2:	ef 91       	pop	r30
     5d4:	bf 91       	pop	r27
     5d6:	af 91       	pop	r26
     5d8:	9f 91       	pop	r25
     5da:	8f 91       	pop	r24
     5dc:	7f 91       	pop	r23
     5de:	6f 91       	pop	r22
     5e0:	5f 91       	pop	r21
     5e2:	4f 91       	pop	r20
     5e4:	3f 91       	pop	r19
     5e6:	2f 91       	pop	r18
     5e8:	0f 90       	pop	r0
     5ea:	0f be       	out	0x3f, r0	; 63
     5ec:	0f 90       	pop	r0
     5ee:	1f 90       	pop	r1
     5f0:	18 95       	reti

000005f2 <usartReceiveStd>:
 * Checks if a reception has been completed
 * -------------------------------------------------------------------------- */

bool_t usartIsReceptionComplete(void)
{
	return isBitSet(UCSR0A, RXC0);
     5f2:	80 91 c0 00 	lds	r24, 0x00C0
 * standard input heandler
 * -------------------------------------------------------------------------- */

int16 usartReceiveStd(FILE * stream)
{
	while(!usartIsReceptionComplete())
     5f6:	87 ff       	sbrs	r24, 7
     5f8:	fc cf       	rjmp	.-8      	; 0x5f2 <usartReceiveStd>
		;	// Waits until last reception ends
	return (int16)UDR0;
     5fa:	80 91 c6 00 	lds	r24, 0x00C6
}
     5fe:	90 e0       	ldi	r25, 0x00	; 0
     600:	08 95       	ret

00000602 <globalInterruptEnable>:
 * Enable global interrupts
 * -------------------------------------------------------------------------- */

void globalInterruptEnable(void)
{
	sei();
     602:	78 94       	sei
     604:	08 95       	ret

00000606 <globalInterruptDisable>:
 * Disable global interrupts
 * -------------------------------------------------------------------------- */

void globalInterruptDisable(void)
{
	cli();
     606:	f8 94       	cli
     608:	08 95       	ret

0000060a <systemClockSetPrescaler>:

resultValue_t systemClockSetPrescaler(systemPrescalerValue_t prescaler)
{
	uint8 aux8 = 0;

	switch(prescaler){
     60a:	90 e0       	ldi	r25, 0x00	; 0
     60c:	89 30       	cpi	r24, 0x09	; 9
     60e:	91 05       	cpc	r25, r1
     610:	00 f5       	brcc	.+64     	; 0x652 <systemClockSetPrescaler+0x48>
     612:	fc 01       	movw	r30, r24
     614:	e4 5b       	subi	r30, 0xB4	; 180
     616:	ff 4f       	sbci	r31, 0xFF	; 255
     618:	0c 94 f8 0f 	jmp	0x1ff0	; 0x1ff0 <__tablejump2__>
		case SYSTEM_PRESCALER_OFF:		aux8 = 0;	break;
     61c:	80 e0       	ldi	r24, 0x00	; 0
     61e:	0f c0       	rjmp	.+30     	; 0x63e <systemClockSetPrescaler+0x34>
		case SYSTEM_PRESCALER_2:		aux8 = 1;	break;
		case SYSTEM_PRESCALER_4:		aux8 = 2;	break;
     620:	82 e0       	ldi	r24, 0x02	; 2
     622:	0d c0       	rjmp	.+26     	; 0x63e <systemClockSetPrescaler+0x34>
		case SYSTEM_PRESCALER_8:		aux8 = 3;	break;
     624:	83 e0       	ldi	r24, 0x03	; 3
     626:	0b c0       	rjmp	.+22     	; 0x63e <systemClockSetPrescaler+0x34>
		case SYSTEM_PRESCALER_16:		aux8 = 4;	break;
     628:	84 e0       	ldi	r24, 0x04	; 4
     62a:	09 c0       	rjmp	.+18     	; 0x63e <systemClockSetPrescaler+0x34>
		case SYSTEM_PRESCALER_32:		aux8 = 5;	break;
     62c:	85 e0       	ldi	r24, 0x05	; 5
     62e:	07 c0       	rjmp	.+14     	; 0x63e <systemClockSetPrescaler+0x34>
		case SYSTEM_PRESCALER_64:		aux8 = 6;	break;
     630:	86 e0       	ldi	r24, 0x06	; 6
     632:	05 c0       	rjmp	.+10     	; 0x63e <systemClockSetPrescaler+0x34>
		case SYSTEM_PRESCALER_128:		aux8 = 7;	break;
     634:	87 e0       	ldi	r24, 0x07	; 7
     636:	03 c0       	rjmp	.+6      	; 0x63e <systemClockSetPrescaler+0x34>
		case SYSTEM_PRESCALER_256:		aux8 = 8;	break;
     638:	88 e0       	ldi	r24, 0x08	; 8
     63a:	01 c0       	rjmp	.+2      	; 0x63e <systemClockSetPrescaler+0x34>
{
	uint8 aux8 = 0;

	switch(prescaler){
		case SYSTEM_PRESCALER_OFF:		aux8 = 0;	break;
		case SYSTEM_PRESCALER_2:		aux8 = 1;	break;
     63c:	81 e0       	ldi	r24, 0x01	; 1
		case SYSTEM_PRESCALER_64:		aux8 = 6;	break;
		case SYSTEM_PRESCALER_128:		aux8 = 7;	break;
		case SYSTEM_PRESCALER_256:		aux8 = 8;	break;
		default:						return RESULT_UNSUPPORTED_VALUE;	break;
	}
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
     63e:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     640:	f8 94       	cli
		CLKPR = 0b10000000;
     642:	20 e8       	ldi	r18, 0x80	; 128
     644:	20 93 61 00 	sts	0x0061, r18
		CLKPR = aux8;
     648:	80 93 61 00 	sts	0x0061, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     64c:	9f bf       	out	0x3f, r25	; 63
	}

	return RESULT_OK;
     64e:	80 e0       	ldi	r24, 0x00	; 0
     650:	08 95       	ret
		case SYSTEM_PRESCALER_16:		aux8 = 4;	break;
		case SYSTEM_PRESCALER_32:		aux8 = 5;	break;
		case SYSTEM_PRESCALER_64:		aux8 = 6;	break;
		case SYSTEM_PRESCALER_128:		aux8 = 7;	break;
		case SYSTEM_PRESCALER_256:		aux8 = 8;	break;
		default:						return RESULT_UNSUPPORTED_VALUE;	break;
     652:	87 e0       	ldi	r24, 0x07	; 7
		CLKPR = 0b10000000;
		CLKPR = aux8;
	}

	return RESULT_OK;
}
     654:	08 95       	ret

00000656 <eepromSetOperationMode>:

void eepromSetOperationMode(eepromMode_t mode)
{
	uint8 aux8 = 0;

	aux8 = EECR & ~(0x03 << EEPM0);
     656:	2f b3       	in	r18, 0x1f	; 31
	aux8 |= (mode << EEPM0);
     658:	30 e1       	ldi	r19, 0x10	; 16
     65a:	83 9f       	mul	r24, r19
     65c:	c0 01       	movw	r24, r0
     65e:	11 24       	eor	r1, r1

void eepromSetOperationMode(eepromMode_t mode)
{
	uint8 aux8 = 0;

	aux8 = EECR & ~(0x03 << EEPM0);
     660:	2f 7c       	andi	r18, 0xCF	; 207
	aux8 |= (mode << EEPM0);
     662:	28 2b       	or	r18, r24
	EECR = aux8;
     664:	2f bb       	out	0x1f, r18	; 31
     666:	08 95       	ret

00000668 <eepromReadyActivateInterrupt>:
 * Activates the EEPROM ready interrupt
 * -------------------------------------------------------------------------- */

void eepromReadyActivateInterrupt(void)
{
	setBit(EECR, EERIE);
     668:	fb 9a       	sbi	0x1f, 3	; 31
     66a:	08 95       	ret

0000066c <eepromReadyDeactivateInterrupt>:
 * Deactivates the EEPROM ready interrupt
 * -------------------------------------------------------------------------- */

void eepromReadyDeactivateInterrupt(void)
{
	clrBit(EECR, EERIE);
     66c:	fb 98       	cbi	0x1f, 3	; 31
     66e:	08 95       	ret

00000670 <eepromWrite>:
 * Writes a byte in the specified address in the EEPROM
 * -------------------------------------------------------------------------- */

void eepromWrite(uint16 address, uint8 data)
{
	waitUntilBitIsClear(EECR, EEPE);
     670:	f9 99       	sbic	0x1f, 1	; 31
     672:	fe cf       	rjmp	.-4      	; 0x670 <eepromWrite>
	waitUntilBitIsClear(SPMEN, SPMCSR);
     674:	27 b7       	in	r18, 0x37	; 55
	EEAR = (address & EEPROM_ADDRESS_MASK);
     676:	93 70       	andi	r25, 0x03	; 3
     678:	92 bd       	out	0x22, r25	; 34
     67a:	81 bd       	out	0x21, r24	; 33
	EEDR = data;
     67c:	60 bd       	out	0x20, r22	; 32
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
     67e:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     680:	f8 94       	cli
		setBit(EECR, EEMPE);
     682:	fa 9a       	sbi	0x1f, 2	; 31
		setBit(EECR, EEPE);
     684:	f9 9a       	sbi	0x1f, 1	; 31
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     686:	8f bf       	out	0x3f, r24	; 63
    __asm__ volatile ("" ::: "memory");
     688:	08 95       	ret

0000068a <eepromRead>:
 * Reads a byte from the specified address in the EEPROM
 * -------------------------------------------------------------------------- */

uint8 eepromRead(uint16 address)
{
	waitUntilBitIsClear(EECR, EEPE);
     68a:	f9 99       	sbic	0x1f, 1	; 31
     68c:	fe cf       	rjmp	.-4      	; 0x68a <eepromRead>
	EEAR = (address & EEPROM_ADDRESS_MASK);
     68e:	93 70       	andi	r25, 0x03	; 3
     690:	92 bd       	out	0x22, r25	; 34
     692:	81 bd       	out	0x21, r24	; 33
	setBit(EECR, EERE);
     694:	f8 9a       	sbi	0x1f, 0	; 31
	return EEDR;
     696:	80 b5       	in	r24, 0x20	; 32
}
     698:	08 95       	ret

0000069a <globalPullUpEnable>:
 * Enables the global pull-up
 * -------------------------------------------------------------------------- */

void globalPullUpEnable(void)
{
	clrBit(MCUCR, PUD);
     69a:	85 b7       	in	r24, 0x35	; 53
     69c:	8f 7e       	andi	r24, 0xEF	; 239
     69e:	85 bf       	out	0x35, r24	; 53
     6a0:	08 95       	ret

000006a2 <pullUpDisable>:
 * Disables the global pull-up
 * -------------------------------------------------------------------------- */

void pullUpDisable(void)
{
	setBit(MCUCR, PUD);
     6a2:	85 b7       	in	r24, 0x35	; 53
     6a4:	80 61       	ori	r24, 0x10	; 16
     6a6:	85 bf       	out	0x35, r24	; 53
     6a8:	08 95       	ret

000006aa <int0Config>:

resultValue_t int0Config(portMode_t port, senseMode_t sense)
{
	uint8 aux8 = 0;

	switch(port){
     6aa:	82 30       	cpi	r24, 0x02	; 2
     6ac:	79 f0       	breq	.+30     	; 0x6cc <int0Config+0x22>
     6ae:	30 f4       	brcc	.+12     	; 0x6bc <int0Config+0x12>
     6b0:	88 23       	and	r24, r24
     6b2:	49 f0       	breq	.+18     	; 0x6c6 <int0Config+0x1c>
     6b4:	81 30       	cpi	r24, 0x01	; 1
     6b6:	11 f5       	brne	.+68     	; 0x6fc <int0Config+0x52>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD2); setBit(DDRD, PD2);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD2); setBit(DDRD, PD2);	break;
     6b8:	5a 9a       	sbi	0x0b, 2	; 11
     6ba:	06 c0       	rjmp	.+12     	; 0x6c8 <int0Config+0x1e>

resultValue_t int0Config(portMode_t port, senseMode_t sense)
{
	uint8 aux8 = 0;

	switch(port){
     6bc:	83 30       	cpi	r24, 0x03	; 3
     6be:	41 f0       	breq	.+16     	; 0x6d0 <int0Config+0x26>
     6c0:	8f 3f       	cpi	r24, 0xFF	; 255
     6c2:	41 f0       	breq	.+16     	; 0x6d4 <int0Config+0x2a>
     6c4:	1b c0       	rjmp	.+54     	; 0x6fc <int0Config+0x52>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD2); setBit(DDRD, PD2);	break;
     6c6:	5a 98       	cbi	0x0b, 2	; 11
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD2); setBit(DDRD, PD2);	break;
     6c8:	52 9a       	sbi	0x0a, 2	; 10
     6ca:	04 c0       	rjmp	.+8      	; 0x6d4 <int0Config+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD2); clrBit(DDRD, PD2);	break;
     6cc:	5a 98       	cbi	0x0b, 2	; 11
     6ce:	01 c0       	rjmp	.+2      	; 0x6d2 <int0Config+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD2); clrBit(DDRD, PD2);	break;
     6d0:	5a 9a       	sbi	0x0b, 2	; 11
     6d2:	52 98       	cbi	0x0a, 2	; 10
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}

	if(sense != SENSE_NO_CHANGE){
     6d4:	6f 3f       	cpi	r22, 0xFF	; 255
     6d6:	a1 f0       	breq	.+40     	; 0x700 <int0Config+0x56>
		aux8 = EICRA & ~(0x03 << ISC00);
     6d8:	80 91 69 00 	lds	r24, 0x0069
     6dc:	8c 7f       	andi	r24, 0xFC	; 252
		switch(sense){
     6de:	61 30       	cpi	r22, 0x01	; 1
     6e0:	39 f0       	breq	.+14     	; 0x6f0 <int0Config+0x46>
     6e2:	48 f0       	brcs	.+18     	; 0x6f6 <int0Config+0x4c>
     6e4:	62 30       	cpi	r22, 0x02	; 2
     6e6:	31 f0       	breq	.+12     	; 0x6f4 <int0Config+0x4a>
     6e8:	63 30       	cpi	r22, 0x03	; 3
     6ea:	61 f4       	brne	.+24     	; 0x704 <int0Config+0x5a>
			case SENSE_LOW_LEVEL:		break;
			case SENSE_ANY_EDGE:		aux8 |= (0x01 << ISC00);			break;
			case SENSE_FALLING_EDGE:	aux8 |= (0x02 << ISC00);			break;
			case SENSE_RISING_EDGE:		aux8 |= (0x03 << ISC00);			break;
     6ec:	83 60       	ori	r24, 0x03	; 3
     6ee:	03 c0       	rjmp	.+6      	; 0x6f6 <int0Config+0x4c>

	if(sense != SENSE_NO_CHANGE){
		aux8 = EICRA & ~(0x03 << ISC00);
		switch(sense){
			case SENSE_LOW_LEVEL:		break;
			case SENSE_ANY_EDGE:		aux8 |= (0x01 << ISC00);			break;
     6f0:	81 60       	ori	r24, 0x01	; 1
     6f2:	01 c0       	rjmp	.+2      	; 0x6f6 <int0Config+0x4c>
			case SENSE_FALLING_EDGE:	aux8 |= (0x02 << ISC00);			break;
     6f4:	82 60       	ori	r24, 0x02	; 2
			case SENSE_RISING_EDGE:		aux8 |= (0x03 << ISC00);			break;
			case SENSE_NO_CHANGE:		break;
			default:					return RESULT_INT_SENSE_VALUE_UNSUPPORTED;	break;
		}
		EICRA = aux8;
     6f6:	80 93 69 00 	sts	0x0069, r24
     6fa:	02 c0       	rjmp	.+4      	; 0x700 <int0Config+0x56>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD2); setBit(DDRD, PD2);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD2); setBit(DDRD, PD2);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD2); clrBit(DDRD, PD2);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD2); clrBit(DDRD, PD2);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     6fc:	81 e0       	ldi	r24, 0x01	; 1
     6fe:	08 95       	ret
			default:					return RESULT_INT_SENSE_VALUE_UNSUPPORTED;	break;
		}
		EICRA = aux8;
	}

	return RESULT_OK;
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	08 95       	ret
			case SENSE_LOW_LEVEL:		break;
			case SENSE_ANY_EDGE:		aux8 |= (0x01 << ISC00);			break;
			case SENSE_FALLING_EDGE:	aux8 |= (0x02 << ISC00);			break;
			case SENSE_RISING_EDGE:		aux8 |= (0x03 << ISC00);			break;
			case SENSE_NO_CHANGE:		break;
			default:					return RESULT_INT_SENSE_VALUE_UNSUPPORTED;	break;
     704:	82 e0       	ldi	r24, 0x02	; 2
		}
		EICRA = aux8;
	}

	return RESULT_OK;
}
     706:	08 95       	ret

00000708 <int0ActivateInterrupt>:
 * Activates the external interrupt int0
 * -------------------------------------------------------------------------- */

void int0ActivateInterrupt(void)
{
	setBit(EIMSK, INT0);
     708:	e8 9a       	sbi	0x1d, 0	; 29
     70a:	08 95       	ret

0000070c <int0DeactivateInterrupt>:
 * Deactivates the external interrupt int0
 * -------------------------------------------------------------------------- */

void int0DeactivateInterrupt(void)
{
	clrBit(EIMSK, INT0);
     70c:	e8 98       	cbi	0x1d, 0	; 29
     70e:	08 95       	ret

00000710 <int0ClearInterruptRequest>:
 * Clears the external interrupt int0 request
 * -------------------------------------------------------------------------- */

void int0ClearInterruptRequest(void)
{
	setBit(EIFR, INTF0);
     710:	e0 9a       	sbi	0x1c, 0	; 28
     712:	08 95       	ret

00000714 <int1Config>:

resultValue_t int1Config(portMode_t port, senseMode_t sense)
{
	uint8 aux8 = 0;

	switch(port){
     714:	82 30       	cpi	r24, 0x02	; 2
     716:	79 f0       	breq	.+30     	; 0x736 <int1Config+0x22>
     718:	30 f4       	brcc	.+12     	; 0x726 <int1Config+0x12>
     71a:	88 23       	and	r24, r24
     71c:	49 f0       	breq	.+18     	; 0x730 <int1Config+0x1c>
     71e:	81 30       	cpi	r24, 0x01	; 1
     720:	11 f5       	brne	.+68     	; 0x766 <int1Config+0x52>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD3); setBit(DDRD, PD3);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD3); setBit(DDRD, PD3);	break;
     722:	5b 9a       	sbi	0x0b, 3	; 11
     724:	06 c0       	rjmp	.+12     	; 0x732 <int1Config+0x1e>

resultValue_t int1Config(portMode_t port, senseMode_t sense)
{
	uint8 aux8 = 0;

	switch(port){
     726:	83 30       	cpi	r24, 0x03	; 3
     728:	41 f0       	breq	.+16     	; 0x73a <int1Config+0x26>
     72a:	8f 3f       	cpi	r24, 0xFF	; 255
     72c:	41 f0       	breq	.+16     	; 0x73e <int1Config+0x2a>
     72e:	1b c0       	rjmp	.+54     	; 0x766 <int1Config+0x52>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD3); setBit(DDRD, PD3);	break;
     730:	5b 98       	cbi	0x0b, 3	; 11
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD3); setBit(DDRD, PD3);	break;
     732:	53 9a       	sbi	0x0a, 3	; 10
     734:	04 c0       	rjmp	.+8      	; 0x73e <int1Config+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD3); clrBit(DDRD, PD3);	break;
     736:	5b 98       	cbi	0x0b, 3	; 11
     738:	01 c0       	rjmp	.+2      	; 0x73c <int1Config+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD3); clrBit(DDRD, PD3);	break;
     73a:	5b 9a       	sbi	0x0b, 3	; 11
     73c:	53 98       	cbi	0x0a, 3	; 10
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}

	if(sense != SENSE_NO_CHANGE){
     73e:	6f 3f       	cpi	r22, 0xFF	; 255
     740:	a1 f0       	breq	.+40     	; 0x76a <int1Config+0x56>
		aux8 = EICRA & ~(0x03 << ISC10);
     742:	80 91 69 00 	lds	r24, 0x0069
     746:	83 7f       	andi	r24, 0xF3	; 243
		switch(sense){
     748:	61 30       	cpi	r22, 0x01	; 1
     74a:	39 f0       	breq	.+14     	; 0x75a <int1Config+0x46>
     74c:	48 f0       	brcs	.+18     	; 0x760 <int1Config+0x4c>
     74e:	62 30       	cpi	r22, 0x02	; 2
     750:	31 f0       	breq	.+12     	; 0x75e <int1Config+0x4a>
     752:	63 30       	cpi	r22, 0x03	; 3
     754:	61 f4       	brne	.+24     	; 0x76e <int1Config+0x5a>
			case SENSE_LOW_LEVEL:		break;
			case SENSE_ANY_EDGE:		aux8 |= (0x01 << ISC10);			break;
			case SENSE_FALLING_EDGE:	aux8 |= (0x02 << ISC10);			break;
			case SENSE_RISING_EDGE:		aux8 |= (0x03 << ISC10);			break;
     756:	8c 60       	ori	r24, 0x0C	; 12
     758:	03 c0       	rjmp	.+6      	; 0x760 <int1Config+0x4c>

	if(sense != SENSE_NO_CHANGE){
		aux8 = EICRA & ~(0x03 << ISC10);
		switch(sense){
			case SENSE_LOW_LEVEL:		break;
			case SENSE_ANY_EDGE:		aux8 |= (0x01 << ISC10);			break;
     75a:	84 60       	ori	r24, 0x04	; 4
     75c:	01 c0       	rjmp	.+2      	; 0x760 <int1Config+0x4c>
			case SENSE_FALLING_EDGE:	aux8 |= (0x02 << ISC10);			break;
     75e:	88 60       	ori	r24, 0x08	; 8
			case SENSE_RISING_EDGE:		aux8 |= (0x03 << ISC10);			break;
			case SENSE_NO_CHANGE:		break;
			default:					return RESULT_INT_SENSE_VALUE_UNSUPPORTED;	break;
		}
		EICRA = aux8;
     760:	80 93 69 00 	sts	0x0069, r24
     764:	02 c0       	rjmp	.+4      	; 0x76a <int1Config+0x56>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD3); setBit(DDRD, PD3);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD3); setBit(DDRD, PD3);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD3); clrBit(DDRD, PD3);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD3); clrBit(DDRD, PD3);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     766:	81 e0       	ldi	r24, 0x01	; 1
     768:	08 95       	ret
			default:					return RESULT_INT_SENSE_VALUE_UNSUPPORTED;	break;
		}
		EICRA = aux8;
	}

	return RESULT_OK;
     76a:	80 e0       	ldi	r24, 0x00	; 0
     76c:	08 95       	ret
			case SENSE_LOW_LEVEL:		break;
			case SENSE_ANY_EDGE:		aux8 |= (0x01 << ISC10);			break;
			case SENSE_FALLING_EDGE:	aux8 |= (0x02 << ISC10);			break;
			case SENSE_RISING_EDGE:		aux8 |= (0x03 << ISC10);			break;
			case SENSE_NO_CHANGE:		break;
			default:					return RESULT_INT_SENSE_VALUE_UNSUPPORTED;	break;
     76e:	82 e0       	ldi	r24, 0x02	; 2
		}
		EICRA = aux8;
	}

	return RESULT_OK;
}
     770:	08 95       	ret

00000772 <int1ActivateInterrupt>:
 * Activates the external interrupt int1
 * -------------------------------------------------------------------------- */

void int1ActivateInterrupt(void)
{
	setBit(EIMSK, INT1);
     772:	e9 9a       	sbi	0x1d, 1	; 29
     774:	08 95       	ret

00000776 <int1DeactivateInterrupt>:
 * Deactivates the external interrupt int1
 * -------------------------------------------------------------------------- */

void int1DeactivateInterrupt(void)
{
	clrBit(EIMSK, INT1);
     776:	e9 98       	cbi	0x1d, 1	; 29
     778:	08 95       	ret

0000077a <int1ClearInterruptRequest>:
 * Clears the external interrupt int1 request
 * -------------------------------------------------------------------------- */

void int1ClearInterruptRequest(void)
{
	setBit(EIFR, INTF1);
     77a:	e1 9a       	sbi	0x1c, 1	; 28
     77c:	08 95       	ret

0000077e <pcint7_0Enable>:
 * Enables the external interrupt pcint in port B
 * -------------------------------------------------------------------------- */

void pcint7_0Enable(void)
{
	setBit(PCICR, PCIE0);
     77e:	e8 e6       	ldi	r30, 0x68	; 104
     780:	f0 e0       	ldi	r31, 0x00	; 0
     782:	80 81       	ld	r24, Z
     784:	81 60       	ori	r24, 0x01	; 1
     786:	80 83       	st	Z, r24
     788:	08 95       	ret

0000078a <pcint7_0Disable>:
 * Disables the external interrupt pcint in port B
 * -------------------------------------------------------------------------- */

void pcint7_0Disable(void)
{
	clrBit(PCICR, PCIE0);
     78a:	e8 e6       	ldi	r30, 0x68	; 104
     78c:	f0 e0       	ldi	r31, 0x00	; 0
     78e:	80 81       	ld	r24, Z
     790:	8e 7f       	andi	r24, 0xFE	; 254
     792:	80 83       	st	Z, r24
     794:	08 95       	ret

00000796 <pcint7_0ClearInterruptRequest>:
 * Disables the external interrupt pcint in port B
 * -------------------------------------------------------------------------- */

void pcint7_0ClearInterruptRequest(void)
{
	setBit(PCIFR, PCIF0);
     796:	d8 9a       	sbi	0x1b, 0	; 27
     798:	08 95       	ret

0000079a <pcint0ActivateInterrupt>:
 * Activates the external interrupt pcint0 and configures port mode in PB0
 * -------------------------------------------------------------------------- */

resultValue_t pcint0ActivateInterrupt(portMode_t port)
{
	switch(port){
     79a:	82 30       	cpi	r24, 0x02	; 2
     79c:	79 f0       	breq	.+30     	; 0x7bc <pcint0ActivateInterrupt+0x22>
     79e:	30 f4       	brcc	.+12     	; 0x7ac <pcint0ActivateInterrupt+0x12>
     7a0:	88 23       	and	r24, r24
     7a2:	49 f0       	breq	.+18     	; 0x7b6 <pcint0ActivateInterrupt+0x1c>
     7a4:	81 30       	cpi	r24, 0x01	; 1
     7a6:	a9 f4       	brne	.+42     	; 0x7d2 <pcint0ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB0); setBit(DDRB, PB0);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB0); setBit(DDRB, PB0);	break;
     7a8:	28 9a       	sbi	0x05, 0	; 5
     7aa:	06 c0       	rjmp	.+12     	; 0x7b8 <pcint0ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint0 and configures port mode in PB0
 * -------------------------------------------------------------------------- */

resultValue_t pcint0ActivateInterrupt(portMode_t port)
{
	switch(port){
     7ac:	83 30       	cpi	r24, 0x03	; 3
     7ae:	41 f0       	breq	.+16     	; 0x7c0 <pcint0ActivateInterrupt+0x26>
     7b0:	8f 3f       	cpi	r24, 0xFF	; 255
     7b2:	41 f0       	breq	.+16     	; 0x7c4 <pcint0ActivateInterrupt+0x2a>
     7b4:	0e c0       	rjmp	.+28     	; 0x7d2 <pcint0ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB0); setBit(DDRB, PB0);	break;
     7b6:	28 98       	cbi	0x05, 0	; 5
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB0); setBit(DDRB, PB0);	break;
     7b8:	20 9a       	sbi	0x04, 0	; 4
     7ba:	04 c0       	rjmp	.+8      	; 0x7c4 <pcint0ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB0); clrBit(DDRB, PB0);	break;
     7bc:	28 98       	cbi	0x05, 0	; 5
     7be:	01 c0       	rjmp	.+2      	; 0x7c2 <pcint0ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB0); clrBit(DDRB, PB0);	break;
     7c0:	28 9a       	sbi	0x05, 0	; 5
     7c2:	20 98       	cbi	0x04, 0	; 4
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK0, PCINT0);
     7c4:	80 91 6b 00 	lds	r24, 0x006B
     7c8:	81 60       	ori	r24, 0x01	; 1
     7ca:	80 93 6b 00 	sts	0x006B, r24
	return RESULT_OK;
     7ce:	80 e0       	ldi	r24, 0x00	; 0
     7d0:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB0); setBit(DDRB, PB0);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB0); setBit(DDRB, PB0);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB0); clrBit(DDRB, PB0);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB0); clrBit(DDRB, PB0);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     7d2:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK0, PCINT0);
	return RESULT_OK;
}
     7d4:	08 95       	ret

000007d6 <pcint0DeactivateInterrupt>:
 * Deactivates the external interrupt pcint0 in PB0
 * -------------------------------------------------------------------------- */

void pcint0DeactivateInterrupt(void)
{
	clrBit(PCMSK0, PCINT0);
     7d6:	eb e6       	ldi	r30, 0x6B	; 107
     7d8:	f0 e0       	ldi	r31, 0x00	; 0
     7da:	80 81       	ld	r24, Z
     7dc:	8e 7f       	andi	r24, 0xFE	; 254
     7de:	80 83       	st	Z, r24
     7e0:	08 95       	ret

000007e2 <pcint1ActivateInterrupt>:
 * Activates the external interrupt pcint1 and configures port mode in PB1
 * -------------------------------------------------------------------------- */

resultValue_t pcint1ActivateInterrupt(portMode_t port)
{
	switch(port){
     7e2:	82 30       	cpi	r24, 0x02	; 2
     7e4:	79 f0       	breq	.+30     	; 0x804 <pcint1ActivateInterrupt+0x22>
     7e6:	30 f4       	brcc	.+12     	; 0x7f4 <pcint1ActivateInterrupt+0x12>
     7e8:	88 23       	and	r24, r24
     7ea:	49 f0       	breq	.+18     	; 0x7fe <pcint1ActivateInterrupt+0x1c>
     7ec:	81 30       	cpi	r24, 0x01	; 1
     7ee:	a9 f4       	brne	.+42     	; 0x81a <pcint1ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB1); setBit(DDRB, PB1);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB1); setBit(DDRB, PB1);	break;
     7f0:	29 9a       	sbi	0x05, 1	; 5
     7f2:	06 c0       	rjmp	.+12     	; 0x800 <pcint1ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint1 and configures port mode in PB1
 * -------------------------------------------------------------------------- */

resultValue_t pcint1ActivateInterrupt(portMode_t port)
{
	switch(port){
     7f4:	83 30       	cpi	r24, 0x03	; 3
     7f6:	41 f0       	breq	.+16     	; 0x808 <pcint1ActivateInterrupt+0x26>
     7f8:	8f 3f       	cpi	r24, 0xFF	; 255
     7fa:	41 f0       	breq	.+16     	; 0x80c <pcint1ActivateInterrupt+0x2a>
     7fc:	0e c0       	rjmp	.+28     	; 0x81a <pcint1ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB1); setBit(DDRB, PB1);	break;
     7fe:	29 98       	cbi	0x05, 1	; 5
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB1); setBit(DDRB, PB1);	break;
     800:	21 9a       	sbi	0x04, 1	; 4
     802:	04 c0       	rjmp	.+8      	; 0x80c <pcint1ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB1); clrBit(DDRB, PB1);	break;
     804:	29 98       	cbi	0x05, 1	; 5
     806:	01 c0       	rjmp	.+2      	; 0x80a <pcint1ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB1); clrBit(DDRB, PB1);	break;
     808:	29 9a       	sbi	0x05, 1	; 5
     80a:	21 98       	cbi	0x04, 1	; 4
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK0, PCINT1);
     80c:	80 91 6b 00 	lds	r24, 0x006B
     810:	82 60       	ori	r24, 0x02	; 2
     812:	80 93 6b 00 	sts	0x006B, r24
	return RESULT_OK;
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB1); setBit(DDRB, PB1);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB1); setBit(DDRB, PB1);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB1); clrBit(DDRB, PB1);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB1); clrBit(DDRB, PB1);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     81a:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK0, PCINT1);
	return RESULT_OK;
}
     81c:	08 95       	ret

0000081e <pcint1DeactivateInterrupt>:
 * Deactivates the external interrupt pcint1 in PB1
 * -------------------------------------------------------------------------- */

void pcint1DeactivateInterrupt(void)
{
	clrBit(PCMSK0, PCINT1);
     81e:	eb e6       	ldi	r30, 0x6B	; 107
     820:	f0 e0       	ldi	r31, 0x00	; 0
     822:	80 81       	ld	r24, Z
     824:	8d 7f       	andi	r24, 0xFD	; 253
     826:	80 83       	st	Z, r24
     828:	08 95       	ret

0000082a <pcint2ActivateInterrupt>:
 * Activates the external interrupt pcint2 and configures port mode in PB2
 * -------------------------------------------------------------------------- */

resultValue_t pcint2ActivateInterrupt(portMode_t port)
{
	switch(port){
     82a:	82 30       	cpi	r24, 0x02	; 2
     82c:	79 f0       	breq	.+30     	; 0x84c <pcint2ActivateInterrupt+0x22>
     82e:	30 f4       	brcc	.+12     	; 0x83c <pcint2ActivateInterrupt+0x12>
     830:	88 23       	and	r24, r24
     832:	49 f0       	breq	.+18     	; 0x846 <pcint2ActivateInterrupt+0x1c>
     834:	81 30       	cpi	r24, 0x01	; 1
     836:	a9 f4       	brne	.+42     	; 0x862 <pcint2ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB2); setBit(DDRB, PB2);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB2); setBit(DDRB, PB2);	break;
     838:	2a 9a       	sbi	0x05, 2	; 5
     83a:	06 c0       	rjmp	.+12     	; 0x848 <pcint2ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint2 and configures port mode in PB2
 * -------------------------------------------------------------------------- */

resultValue_t pcint2ActivateInterrupt(portMode_t port)
{
	switch(port){
     83c:	83 30       	cpi	r24, 0x03	; 3
     83e:	41 f0       	breq	.+16     	; 0x850 <pcint2ActivateInterrupt+0x26>
     840:	8f 3f       	cpi	r24, 0xFF	; 255
     842:	41 f0       	breq	.+16     	; 0x854 <pcint2ActivateInterrupt+0x2a>
     844:	0e c0       	rjmp	.+28     	; 0x862 <pcint2ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB2); setBit(DDRB, PB2);	break;
     846:	2a 98       	cbi	0x05, 2	; 5
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB2); setBit(DDRB, PB2);	break;
     848:	22 9a       	sbi	0x04, 2	; 4
     84a:	04 c0       	rjmp	.+8      	; 0x854 <pcint2ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB2); clrBit(DDRB, PB2);	break;
     84c:	2a 98       	cbi	0x05, 2	; 5
     84e:	01 c0       	rjmp	.+2      	; 0x852 <pcint2ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB2); clrBit(DDRB, PB2);	break;
     850:	2a 9a       	sbi	0x05, 2	; 5
     852:	22 98       	cbi	0x04, 2	; 4
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK0, PCINT2);
     854:	80 91 6b 00 	lds	r24, 0x006B
     858:	84 60       	ori	r24, 0x04	; 4
     85a:	80 93 6b 00 	sts	0x006B, r24
	return RESULT_OK;
     85e:	80 e0       	ldi	r24, 0x00	; 0
     860:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB2); setBit(DDRB, PB2);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB2); setBit(DDRB, PB2);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB2); clrBit(DDRB, PB2);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB2); clrBit(DDRB, PB2);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     862:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK0, PCINT2);
	return RESULT_OK;
}
     864:	08 95       	ret

00000866 <pcint2DeactivateInterrupt>:
 * Deactivates the external interrupt pcint2 in PB2
 * -------------------------------------------------------------------------- */

void pcint2DeactivateInterrupt(void)
{
	clrBit(PCMSK0, PCINT2);
     866:	eb e6       	ldi	r30, 0x6B	; 107
     868:	f0 e0       	ldi	r31, 0x00	; 0
     86a:	80 81       	ld	r24, Z
     86c:	8b 7f       	andi	r24, 0xFB	; 251
     86e:	80 83       	st	Z, r24
     870:	08 95       	ret

00000872 <pcint3ActivateInterrupt>:
 * Activates the external interrupt pcint3 and configures port mode in PB3
 * -------------------------------------------------------------------------- */

resultValue_t pcint3ActivateInterrupt(portMode_t port)
{
	switch(port){
     872:	82 30       	cpi	r24, 0x02	; 2
     874:	79 f0       	breq	.+30     	; 0x894 <pcint3ActivateInterrupt+0x22>
     876:	30 f4       	brcc	.+12     	; 0x884 <pcint3ActivateInterrupt+0x12>
     878:	88 23       	and	r24, r24
     87a:	49 f0       	breq	.+18     	; 0x88e <pcint3ActivateInterrupt+0x1c>
     87c:	81 30       	cpi	r24, 0x01	; 1
     87e:	a9 f4       	brne	.+42     	; 0x8aa <pcint3ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB3); setBit(DDRB, PB3);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB3); setBit(DDRB, PB3);	break;
     880:	2b 9a       	sbi	0x05, 3	; 5
     882:	06 c0       	rjmp	.+12     	; 0x890 <pcint3ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint3 and configures port mode in PB3
 * -------------------------------------------------------------------------- */

resultValue_t pcint3ActivateInterrupt(portMode_t port)
{
	switch(port){
     884:	83 30       	cpi	r24, 0x03	; 3
     886:	41 f0       	breq	.+16     	; 0x898 <pcint3ActivateInterrupt+0x26>
     888:	8f 3f       	cpi	r24, 0xFF	; 255
     88a:	41 f0       	breq	.+16     	; 0x89c <pcint3ActivateInterrupt+0x2a>
     88c:	0e c0       	rjmp	.+28     	; 0x8aa <pcint3ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB3); setBit(DDRB, PB3);	break;
     88e:	2b 98       	cbi	0x05, 3	; 5
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB3); setBit(DDRB, PB3);	break;
     890:	23 9a       	sbi	0x04, 3	; 4
     892:	04 c0       	rjmp	.+8      	; 0x89c <pcint3ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB3); clrBit(DDRB, PB3);	break;
     894:	2b 98       	cbi	0x05, 3	; 5
     896:	01 c0       	rjmp	.+2      	; 0x89a <pcint3ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB3); clrBit(DDRB, PB3);	break;
     898:	2b 9a       	sbi	0x05, 3	; 5
     89a:	23 98       	cbi	0x04, 3	; 4
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK0, PCINT3);
     89c:	80 91 6b 00 	lds	r24, 0x006B
     8a0:	88 60       	ori	r24, 0x08	; 8
     8a2:	80 93 6b 00 	sts	0x006B, r24
	return RESULT_OK;
     8a6:	80 e0       	ldi	r24, 0x00	; 0
     8a8:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB3); setBit(DDRB, PB3);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB3); setBit(DDRB, PB3);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB3); clrBit(DDRB, PB3);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB3); clrBit(DDRB, PB3);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     8aa:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK0, PCINT3);
	return RESULT_OK;
}
     8ac:	08 95       	ret

000008ae <pcint3DeactivateInterrupt>:
 * Deactivates the external interrupt pcint3 in PB3
 * -------------------------------------------------------------------------- */

void pcint3DeactivateInterrupt(void)
{
	clrBit(PCMSK0, PCINT3);
     8ae:	eb e6       	ldi	r30, 0x6B	; 107
     8b0:	f0 e0       	ldi	r31, 0x00	; 0
     8b2:	80 81       	ld	r24, Z
     8b4:	87 7f       	andi	r24, 0xF7	; 247
     8b6:	80 83       	st	Z, r24
     8b8:	08 95       	ret

000008ba <pcint4ActivateInterrupt>:
 * Activates the external interrupt pcint4 and configures port mode in PB4
 * -------------------------------------------------------------------------- */

resultValue_t pcint4ActivateInterrupt(portMode_t port)
{
	switch(port){
     8ba:	82 30       	cpi	r24, 0x02	; 2
     8bc:	79 f0       	breq	.+30     	; 0x8dc <pcint4ActivateInterrupt+0x22>
     8be:	30 f4       	brcc	.+12     	; 0x8cc <pcint4ActivateInterrupt+0x12>
     8c0:	88 23       	and	r24, r24
     8c2:	49 f0       	breq	.+18     	; 0x8d6 <pcint4ActivateInterrupt+0x1c>
     8c4:	81 30       	cpi	r24, 0x01	; 1
     8c6:	a9 f4       	brne	.+42     	; 0x8f2 <pcint4ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB4); setBit(DDRB, PB4);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB4); setBit(DDRB, PB4);	break;
     8c8:	2c 9a       	sbi	0x05, 4	; 5
     8ca:	06 c0       	rjmp	.+12     	; 0x8d8 <pcint4ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint4 and configures port mode in PB4
 * -------------------------------------------------------------------------- */

resultValue_t pcint4ActivateInterrupt(portMode_t port)
{
	switch(port){
     8cc:	83 30       	cpi	r24, 0x03	; 3
     8ce:	41 f0       	breq	.+16     	; 0x8e0 <pcint4ActivateInterrupt+0x26>
     8d0:	8f 3f       	cpi	r24, 0xFF	; 255
     8d2:	41 f0       	breq	.+16     	; 0x8e4 <pcint4ActivateInterrupt+0x2a>
     8d4:	0e c0       	rjmp	.+28     	; 0x8f2 <pcint4ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB4); setBit(DDRB, PB4);	break;
     8d6:	2c 98       	cbi	0x05, 4	; 5
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB4); setBit(DDRB, PB4);	break;
     8d8:	24 9a       	sbi	0x04, 4	; 4
     8da:	04 c0       	rjmp	.+8      	; 0x8e4 <pcint4ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB4); clrBit(DDRB, PB4);	break;
     8dc:	2c 98       	cbi	0x05, 4	; 5
     8de:	01 c0       	rjmp	.+2      	; 0x8e2 <pcint4ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB4); clrBit(DDRB, PB4);	break;
     8e0:	2c 9a       	sbi	0x05, 4	; 5
     8e2:	24 98       	cbi	0x04, 4	; 4
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK0, PCINT4);
     8e4:	80 91 6b 00 	lds	r24, 0x006B
     8e8:	80 61       	ori	r24, 0x10	; 16
     8ea:	80 93 6b 00 	sts	0x006B, r24
	return RESULT_OK;
     8ee:	80 e0       	ldi	r24, 0x00	; 0
     8f0:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB4); setBit(DDRB, PB4);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB4); setBit(DDRB, PB4);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB4); clrBit(DDRB, PB4);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB4); clrBit(DDRB, PB4);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     8f2:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK0, PCINT4);
	return RESULT_OK;
}
     8f4:	08 95       	ret

000008f6 <pcint4DeactivateInterrupt>:
 * Deactivates the external interrupt pcint4 in PB4
 * -------------------------------------------------------------------------- */

void pcint4DeactivateInterrupt(void)
{
	clrBit(PCMSK0, PCINT4);
     8f6:	eb e6       	ldi	r30, 0x6B	; 107
     8f8:	f0 e0       	ldi	r31, 0x00	; 0
     8fa:	80 81       	ld	r24, Z
     8fc:	8f 7e       	andi	r24, 0xEF	; 239
     8fe:	80 83       	st	Z, r24
     900:	08 95       	ret

00000902 <pcint5ActivateInterrupt>:
 * Activates the external interrupt pcint5 and configures port mode in PB5
 * -------------------------------------------------------------------------- */

resultValue_t pcint5ActivateInterrupt(portMode_t port)
{
	switch(port){
     902:	82 30       	cpi	r24, 0x02	; 2
     904:	79 f0       	breq	.+30     	; 0x924 <pcint5ActivateInterrupt+0x22>
     906:	30 f4       	brcc	.+12     	; 0x914 <pcint5ActivateInterrupt+0x12>
     908:	88 23       	and	r24, r24
     90a:	49 f0       	breq	.+18     	; 0x91e <pcint5ActivateInterrupt+0x1c>
     90c:	81 30       	cpi	r24, 0x01	; 1
     90e:	a9 f4       	brne	.+42     	; 0x93a <pcint5ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB5); setBit(DDRB, PB5);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB5); setBit(DDRB, PB5);	break;
     910:	2d 9a       	sbi	0x05, 5	; 5
     912:	06 c0       	rjmp	.+12     	; 0x920 <pcint5ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint5 and configures port mode in PB5
 * -------------------------------------------------------------------------- */

resultValue_t pcint5ActivateInterrupt(portMode_t port)
{
	switch(port){
     914:	83 30       	cpi	r24, 0x03	; 3
     916:	41 f0       	breq	.+16     	; 0x928 <pcint5ActivateInterrupt+0x26>
     918:	8f 3f       	cpi	r24, 0xFF	; 255
     91a:	41 f0       	breq	.+16     	; 0x92c <pcint5ActivateInterrupt+0x2a>
     91c:	0e c0       	rjmp	.+28     	; 0x93a <pcint5ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB5); setBit(DDRB, PB5);	break;
     91e:	2d 98       	cbi	0x05, 5	; 5
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB5); setBit(DDRB, PB5);	break;
     920:	25 9a       	sbi	0x04, 5	; 4
     922:	04 c0       	rjmp	.+8      	; 0x92c <pcint5ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB5); clrBit(DDRB, PB5);	break;
     924:	2d 98       	cbi	0x05, 5	; 5
     926:	01 c0       	rjmp	.+2      	; 0x92a <pcint5ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB5); clrBit(DDRB, PB5);	break;
     928:	2d 9a       	sbi	0x05, 5	; 5
     92a:	25 98       	cbi	0x04, 5	; 4
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK0, PCINT5);
     92c:	80 91 6b 00 	lds	r24, 0x006B
     930:	80 62       	ori	r24, 0x20	; 32
     932:	80 93 6b 00 	sts	0x006B, r24
	return RESULT_OK;
     936:	80 e0       	ldi	r24, 0x00	; 0
     938:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB5); setBit(DDRB, PB5);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB5); setBit(DDRB, PB5);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB5); clrBit(DDRB, PB5);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB5); clrBit(DDRB, PB5);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     93a:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK0, PCINT5);
	return RESULT_OK;
}
     93c:	08 95       	ret

0000093e <pcint5DeactivateInterrupt>:
 * Deactivates the external interrupt pcint5 in PB5
 * -------------------------------------------------------------------------- */

void pcint5DeactivateInterrupt(void)
{
	clrBit(PCMSK0, PCINT5);
     93e:	eb e6       	ldi	r30, 0x6B	; 107
     940:	f0 e0       	ldi	r31, 0x00	; 0
     942:	80 81       	ld	r24, Z
     944:	8f 7d       	andi	r24, 0xDF	; 223
     946:	80 83       	st	Z, r24
     948:	08 95       	ret

0000094a <pcint6ActivateInterrupt>:
 * Activates the external interrupt pcint6 and configures port mode in PB6
 * -------------------------------------------------------------------------- */

resultValue_t pcint6ActivateInterrupt(portMode_t port)
{
	switch(port){
     94a:	82 30       	cpi	r24, 0x02	; 2
     94c:	79 f0       	breq	.+30     	; 0x96c <pcint6ActivateInterrupt+0x22>
     94e:	30 f4       	brcc	.+12     	; 0x95c <pcint6ActivateInterrupt+0x12>
     950:	88 23       	and	r24, r24
     952:	49 f0       	breq	.+18     	; 0x966 <pcint6ActivateInterrupt+0x1c>
     954:	81 30       	cpi	r24, 0x01	; 1
     956:	a9 f4       	brne	.+42     	; 0x982 <pcint6ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB6); setBit(DDRB, PB6);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB6); setBit(DDRB, PB6);	break;
     958:	2e 9a       	sbi	0x05, 6	; 5
     95a:	06 c0       	rjmp	.+12     	; 0x968 <pcint6ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint6 and configures port mode in PB6
 * -------------------------------------------------------------------------- */

resultValue_t pcint6ActivateInterrupt(portMode_t port)
{
	switch(port){
     95c:	83 30       	cpi	r24, 0x03	; 3
     95e:	41 f0       	breq	.+16     	; 0x970 <pcint6ActivateInterrupt+0x26>
     960:	8f 3f       	cpi	r24, 0xFF	; 255
     962:	41 f0       	breq	.+16     	; 0x974 <pcint6ActivateInterrupt+0x2a>
     964:	0e c0       	rjmp	.+28     	; 0x982 <pcint6ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB6); setBit(DDRB, PB6);	break;
     966:	2e 98       	cbi	0x05, 6	; 5
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB6); setBit(DDRB, PB6);	break;
     968:	26 9a       	sbi	0x04, 6	; 4
     96a:	04 c0       	rjmp	.+8      	; 0x974 <pcint6ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB6); clrBit(DDRB, PB6);	break;
     96c:	2e 98       	cbi	0x05, 6	; 5
     96e:	01 c0       	rjmp	.+2      	; 0x972 <pcint6ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB6); clrBit(DDRB, PB6);	break;
     970:	2e 9a       	sbi	0x05, 6	; 5
     972:	26 98       	cbi	0x04, 6	; 4
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK0, PCINT6);
     974:	80 91 6b 00 	lds	r24, 0x006B
     978:	80 64       	ori	r24, 0x40	; 64
     97a:	80 93 6b 00 	sts	0x006B, r24
	return RESULT_OK;
     97e:	80 e0       	ldi	r24, 0x00	; 0
     980:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB6); setBit(DDRB, PB6);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB6); setBit(DDRB, PB6);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB6); clrBit(DDRB, PB6);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB6); clrBit(DDRB, PB6);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     982:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK0, PCINT6);
	return RESULT_OK;
}
     984:	08 95       	ret

00000986 <pcint6DeactivateInterrupt>:
 * Deactivates the external interrupt pcint6 in PB6
 * -------------------------------------------------------------------------- */

void pcint6DeactivateInterrupt(void)
{
	clrBit(PCMSK0, PCINT6);
     986:	eb e6       	ldi	r30, 0x6B	; 107
     988:	f0 e0       	ldi	r31, 0x00	; 0
     98a:	80 81       	ld	r24, Z
     98c:	8f 7b       	andi	r24, 0xBF	; 191
     98e:	80 83       	st	Z, r24
     990:	08 95       	ret

00000992 <pcint7ActivateInterrupt>:
 * Activates the external interrupt pcint7 and configures port mode in PB7
 * -------------------------------------------------------------------------- */

resultValue_t pcint7ActivateInterrupt(portMode_t port)
{
	switch(port){
     992:	82 30       	cpi	r24, 0x02	; 2
     994:	79 f0       	breq	.+30     	; 0x9b4 <pcint7ActivateInterrupt+0x22>
     996:	30 f4       	brcc	.+12     	; 0x9a4 <pcint7ActivateInterrupt+0x12>
     998:	88 23       	and	r24, r24
     99a:	49 f0       	breq	.+18     	; 0x9ae <pcint7ActivateInterrupt+0x1c>
     99c:	81 30       	cpi	r24, 0x01	; 1
     99e:	a9 f4       	brne	.+42     	; 0x9ca <pcint7ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB7); setBit(DDRB, PB7);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB7); setBit(DDRB, PB7);	break;
     9a0:	2f 9a       	sbi	0x05, 7	; 5
     9a2:	06 c0       	rjmp	.+12     	; 0x9b0 <pcint7ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint7 and configures port mode in PB7
 * -------------------------------------------------------------------------- */

resultValue_t pcint7ActivateInterrupt(portMode_t port)
{
	switch(port){
     9a4:	83 30       	cpi	r24, 0x03	; 3
     9a6:	41 f0       	breq	.+16     	; 0x9b8 <pcint7ActivateInterrupt+0x26>
     9a8:	8f 3f       	cpi	r24, 0xFF	; 255
     9aa:	41 f0       	breq	.+16     	; 0x9bc <pcint7ActivateInterrupt+0x2a>
     9ac:	0e c0       	rjmp	.+28     	; 0x9ca <pcint7ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB7); setBit(DDRB, PB7);	break;
     9ae:	2f 98       	cbi	0x05, 7	; 5
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB7); setBit(DDRB, PB7);	break;
     9b0:	27 9a       	sbi	0x04, 7	; 4
     9b2:	04 c0       	rjmp	.+8      	; 0x9bc <pcint7ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB7); clrBit(DDRB, PB7);	break;
     9b4:	2f 98       	cbi	0x05, 7	; 5
     9b6:	01 c0       	rjmp	.+2      	; 0x9ba <pcint7ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB7); clrBit(DDRB, PB7);	break;
     9b8:	2f 9a       	sbi	0x05, 7	; 5
     9ba:	27 98       	cbi	0x04, 7	; 4
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK0, PCINT7);
     9bc:	80 91 6b 00 	lds	r24, 0x006B
     9c0:	80 68       	ori	r24, 0x80	; 128
     9c2:	80 93 6b 00 	sts	0x006B, r24
	return RESULT_OK;
     9c6:	80 e0       	ldi	r24, 0x00	; 0
     9c8:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB7); setBit(DDRB, PB7);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB7); setBit(DDRB, PB7);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB7); clrBit(DDRB, PB7);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB7); clrBit(DDRB, PB7);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     9ca:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK0, PCINT7);
	return RESULT_OK;
}
     9cc:	08 95       	ret

000009ce <pcint7DeactivateInterrupt>:
 * Deactivates the external interrupt pcint7 in PB7
 * -------------------------------------------------------------------------- */

void pcint7DeactivateInterrupt(void)
{
	clrBit(PCMSK0, PCINT7);
     9ce:	eb e6       	ldi	r30, 0x6B	; 107
     9d0:	f0 e0       	ldi	r31, 0x00	; 0
     9d2:	80 81       	ld	r24, Z
     9d4:	8f 77       	andi	r24, 0x7F	; 127
     9d6:	80 83       	st	Z, r24
     9d8:	08 95       	ret

000009da <pcint14_8Enable>:
 * Enables the external interrupt pcint in port C
 * -------------------------------------------------------------------------- */

void pcint14_8Enable(void)
{
	setBit(PCICR, PCIE1);
     9da:	e8 e6       	ldi	r30, 0x68	; 104
     9dc:	f0 e0       	ldi	r31, 0x00	; 0
     9de:	80 81       	ld	r24, Z
     9e0:	82 60       	ori	r24, 0x02	; 2
     9e2:	80 83       	st	Z, r24
     9e4:	08 95       	ret

000009e6 <pcint14_8Disable>:
 * Disables the external interrupt pcint in port C
 * -------------------------------------------------------------------------- */

void pcint14_8Disable(void)
{
	clrBit(PCICR, PCIE1);
     9e6:	e8 e6       	ldi	r30, 0x68	; 104
     9e8:	f0 e0       	ldi	r31, 0x00	; 0
     9ea:	80 81       	ld	r24, Z
     9ec:	8d 7f       	andi	r24, 0xFD	; 253
     9ee:	80 83       	st	Z, r24
     9f0:	08 95       	ret

000009f2 <pcint14_8ClearInterruptRequest>:
 * Disables the external interrupt pcint in port C
 * -------------------------------------------------------------------------- */

void pcint14_8ClearInterruptRequest(void)
{
	setBit(PCIFR, PCIF1);
     9f2:	d9 9a       	sbi	0x1b, 1	; 27
     9f4:	08 95       	ret

000009f6 <pcint8ActivateInterrupt>:
 * Activates the external interrupt pcint8 and configures port mode in PC0
 * -------------------------------------------------------------------------- */

resultValue_t pcint8ActivateInterrupt(portMode_t port)
{
	switch(port){
     9f6:	82 30       	cpi	r24, 0x02	; 2
     9f8:	79 f0       	breq	.+30     	; 0xa18 <pcint8ActivateInterrupt+0x22>
     9fa:	30 f4       	brcc	.+12     	; 0xa08 <pcint8ActivateInterrupt+0x12>
     9fc:	88 23       	and	r24, r24
     9fe:	49 f0       	breq	.+18     	; 0xa12 <pcint8ActivateInterrupt+0x1c>
     a00:	81 30       	cpi	r24, 0x01	; 1
     a02:	a9 f4       	brne	.+42     	; 0xa2e <pcint8ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC0); setBit(DDRC, PC0);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC0); setBit(DDRC, PC0);	break;
     a04:	40 9a       	sbi	0x08, 0	; 8
     a06:	06 c0       	rjmp	.+12     	; 0xa14 <pcint8ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint8 and configures port mode in PC0
 * -------------------------------------------------------------------------- */

resultValue_t pcint8ActivateInterrupt(portMode_t port)
{
	switch(port){
     a08:	83 30       	cpi	r24, 0x03	; 3
     a0a:	41 f0       	breq	.+16     	; 0xa1c <pcint8ActivateInterrupt+0x26>
     a0c:	8f 3f       	cpi	r24, 0xFF	; 255
     a0e:	41 f0       	breq	.+16     	; 0xa20 <pcint8ActivateInterrupt+0x2a>
     a10:	0e c0       	rjmp	.+28     	; 0xa2e <pcint8ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC0); setBit(DDRC, PC0);	break;
     a12:	40 98       	cbi	0x08, 0	; 8
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC0); setBit(DDRC, PC0);	break;
     a14:	38 9a       	sbi	0x07, 0	; 7
     a16:	04 c0       	rjmp	.+8      	; 0xa20 <pcint8ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTC, PC0); clrBit(DDRC, PC0);	break;
     a18:	40 98       	cbi	0x08, 0	; 8
     a1a:	01 c0       	rjmp	.+2      	; 0xa1e <pcint8ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTC, PC0); clrBit(DDRC, PC0);	break;
     a1c:	40 9a       	sbi	0x08, 0	; 8
     a1e:	38 98       	cbi	0x07, 0	; 7
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK1, PCINT8);
     a20:	80 91 6c 00 	lds	r24, 0x006C
     a24:	81 60       	ori	r24, 0x01	; 1
     a26:	80 93 6c 00 	sts	0x006C, r24
	return RESULT_OK;
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC0); setBit(DDRC, PC0);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC0); setBit(DDRC, PC0);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTC, PC0); clrBit(DDRC, PC0);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTC, PC0); clrBit(DDRC, PC0);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     a2e:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK1, PCINT8);
	return RESULT_OK;
}
     a30:	08 95       	ret

00000a32 <pcint8DeactivateInterrupt>:
 * Deactivates the external interrupt pcint8 in PC0
 * -------------------------------------------------------------------------- */

void pcint8DeactivateInterrupt(void)
{
	clrBit(PCMSK1, PCINT8);
     a32:	ec e6       	ldi	r30, 0x6C	; 108
     a34:	f0 e0       	ldi	r31, 0x00	; 0
     a36:	80 81       	ld	r24, Z
     a38:	8e 7f       	andi	r24, 0xFE	; 254
     a3a:	80 83       	st	Z, r24
     a3c:	08 95       	ret

00000a3e <pcint9ActivateInterrupt>:
 * Activates the external interrupt pcint9 and configures port mode in PC1
 * -------------------------------------------------------------------------- */

resultValue_t pcint9ActivateInterrupt(portMode_t port)
{
	switch(port){
     a3e:	82 30       	cpi	r24, 0x02	; 2
     a40:	79 f0       	breq	.+30     	; 0xa60 <pcint9ActivateInterrupt+0x22>
     a42:	30 f4       	brcc	.+12     	; 0xa50 <pcint9ActivateInterrupt+0x12>
     a44:	88 23       	and	r24, r24
     a46:	49 f0       	breq	.+18     	; 0xa5a <pcint9ActivateInterrupt+0x1c>
     a48:	81 30       	cpi	r24, 0x01	; 1
     a4a:	a9 f4       	brne	.+42     	; 0xa76 <pcint9ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC1); setBit(DDRC, PC1);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC1); setBit(DDRC, PC1);	break;
     a4c:	41 9a       	sbi	0x08, 1	; 8
     a4e:	06 c0       	rjmp	.+12     	; 0xa5c <pcint9ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint9 and configures port mode in PC1
 * -------------------------------------------------------------------------- */

resultValue_t pcint9ActivateInterrupt(portMode_t port)
{
	switch(port){
     a50:	83 30       	cpi	r24, 0x03	; 3
     a52:	41 f0       	breq	.+16     	; 0xa64 <pcint9ActivateInterrupt+0x26>
     a54:	8f 3f       	cpi	r24, 0xFF	; 255
     a56:	41 f0       	breq	.+16     	; 0xa68 <pcint9ActivateInterrupt+0x2a>
     a58:	0e c0       	rjmp	.+28     	; 0xa76 <pcint9ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC1); setBit(DDRC, PC1);	break;
     a5a:	41 98       	cbi	0x08, 1	; 8
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC1); setBit(DDRC, PC1);	break;
     a5c:	39 9a       	sbi	0x07, 1	; 7
     a5e:	04 c0       	rjmp	.+8      	; 0xa68 <pcint9ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTC, PC1); clrBit(DDRC, PC1);	break;
     a60:	41 98       	cbi	0x08, 1	; 8
     a62:	01 c0       	rjmp	.+2      	; 0xa66 <pcint9ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTC, PC1); clrBit(DDRC, PC1);	break;
     a64:	41 9a       	sbi	0x08, 1	; 8
     a66:	39 98       	cbi	0x07, 1	; 7
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK1, PCINT9);
     a68:	80 91 6c 00 	lds	r24, 0x006C
     a6c:	82 60       	ori	r24, 0x02	; 2
     a6e:	80 93 6c 00 	sts	0x006C, r24
	return RESULT_OK;
     a72:	80 e0       	ldi	r24, 0x00	; 0
     a74:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC1); setBit(DDRC, PC1);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC1); setBit(DDRC, PC1);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTC, PC1); clrBit(DDRC, PC1);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTC, PC1); clrBit(DDRC, PC1);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     a76:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK1, PCINT9);
	return RESULT_OK;
}
     a78:	08 95       	ret

00000a7a <pcint9DeactivateInterrupt>:
 * Deactivates the external interrupt pcint9 in PC1
 * -------------------------------------------------------------------------- */

void pcint9DeactivateInterrupt(void)
{
	clrBit(PCMSK1, PCINT9);
     a7a:	ec e6       	ldi	r30, 0x6C	; 108
     a7c:	f0 e0       	ldi	r31, 0x00	; 0
     a7e:	80 81       	ld	r24, Z
     a80:	8d 7f       	andi	r24, 0xFD	; 253
     a82:	80 83       	st	Z, r24
     a84:	08 95       	ret

00000a86 <pcint10ActivateInterrupt>:
 * Activates the external interrupt pcint10 and configures port mode in PC2
 * -------------------------------------------------------------------------- */

resultValue_t pcint10ActivateInterrupt(portMode_t port)
{
	switch(port){
     a86:	82 30       	cpi	r24, 0x02	; 2
     a88:	79 f0       	breq	.+30     	; 0xaa8 <pcint10ActivateInterrupt+0x22>
     a8a:	30 f4       	brcc	.+12     	; 0xa98 <pcint10ActivateInterrupt+0x12>
     a8c:	88 23       	and	r24, r24
     a8e:	49 f0       	breq	.+18     	; 0xaa2 <pcint10ActivateInterrupt+0x1c>
     a90:	81 30       	cpi	r24, 0x01	; 1
     a92:	a9 f4       	brne	.+42     	; 0xabe <pcint10ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC2); setBit(DDRC, PC2);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC2); setBit(DDRC, PC2);	break;
     a94:	42 9a       	sbi	0x08, 2	; 8
     a96:	06 c0       	rjmp	.+12     	; 0xaa4 <pcint10ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint10 and configures port mode in PC2
 * -------------------------------------------------------------------------- */

resultValue_t pcint10ActivateInterrupt(portMode_t port)
{
	switch(port){
     a98:	83 30       	cpi	r24, 0x03	; 3
     a9a:	41 f0       	breq	.+16     	; 0xaac <pcint10ActivateInterrupt+0x26>
     a9c:	8f 3f       	cpi	r24, 0xFF	; 255
     a9e:	41 f0       	breq	.+16     	; 0xab0 <pcint10ActivateInterrupt+0x2a>
     aa0:	0e c0       	rjmp	.+28     	; 0xabe <pcint10ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC2); setBit(DDRC, PC2);	break;
     aa2:	42 98       	cbi	0x08, 2	; 8
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC2); setBit(DDRC, PC2);	break;
     aa4:	3a 9a       	sbi	0x07, 2	; 7
     aa6:	04 c0       	rjmp	.+8      	; 0xab0 <pcint10ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTC, PC2); clrBit(DDRC, PC2);	break;
     aa8:	42 98       	cbi	0x08, 2	; 8
     aaa:	01 c0       	rjmp	.+2      	; 0xaae <pcint10ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTC, PC2); clrBit(DDRC, PC2);	break;
     aac:	42 9a       	sbi	0x08, 2	; 8
     aae:	3a 98       	cbi	0x07, 2	; 7
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK1, PCINT10);
     ab0:	80 91 6c 00 	lds	r24, 0x006C
     ab4:	84 60       	ori	r24, 0x04	; 4
     ab6:	80 93 6c 00 	sts	0x006C, r24
	return RESULT_OK;
     aba:	80 e0       	ldi	r24, 0x00	; 0
     abc:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC2); setBit(DDRC, PC2);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC2); setBit(DDRC, PC2);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTC, PC2); clrBit(DDRC, PC2);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTC, PC2); clrBit(DDRC, PC2);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     abe:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK1, PCINT10);
	return RESULT_OK;
}
     ac0:	08 95       	ret

00000ac2 <pcint10DeactivateInterrupt>:
 * Deactivates the external interrupt pcint10 in PC2
 * -------------------------------------------------------------------------- */

void pcint10DeactivateInterrupt(void)
{
	clrBit(PCMSK1, PCINT10);
     ac2:	ec e6       	ldi	r30, 0x6C	; 108
     ac4:	f0 e0       	ldi	r31, 0x00	; 0
     ac6:	80 81       	ld	r24, Z
     ac8:	8b 7f       	andi	r24, 0xFB	; 251
     aca:	80 83       	st	Z, r24
     acc:	08 95       	ret

00000ace <pcint11ActivateInterrupt>:
 * Activates the external interrupt pcint11 and configures port mode in PC3
 * -------------------------------------------------------------------------- */

resultValue_t pcint11ActivateInterrupt(portMode_t port)
{
	switch(port){
     ace:	82 30       	cpi	r24, 0x02	; 2
     ad0:	79 f0       	breq	.+30     	; 0xaf0 <pcint11ActivateInterrupt+0x22>
     ad2:	30 f4       	brcc	.+12     	; 0xae0 <pcint11ActivateInterrupt+0x12>
     ad4:	88 23       	and	r24, r24
     ad6:	49 f0       	breq	.+18     	; 0xaea <pcint11ActivateInterrupt+0x1c>
     ad8:	81 30       	cpi	r24, 0x01	; 1
     ada:	a9 f4       	brne	.+42     	; 0xb06 <pcint11ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC3); setBit(DDRC, PC3);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC3); setBit(DDRC, PC3);	break;
     adc:	43 9a       	sbi	0x08, 3	; 8
     ade:	06 c0       	rjmp	.+12     	; 0xaec <pcint11ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint11 and configures port mode in PC3
 * -------------------------------------------------------------------------- */

resultValue_t pcint11ActivateInterrupt(portMode_t port)
{
	switch(port){
     ae0:	83 30       	cpi	r24, 0x03	; 3
     ae2:	41 f0       	breq	.+16     	; 0xaf4 <pcint11ActivateInterrupt+0x26>
     ae4:	8f 3f       	cpi	r24, 0xFF	; 255
     ae6:	41 f0       	breq	.+16     	; 0xaf8 <pcint11ActivateInterrupt+0x2a>
     ae8:	0e c0       	rjmp	.+28     	; 0xb06 <pcint11ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC3); setBit(DDRC, PC3);	break;
     aea:	43 98       	cbi	0x08, 3	; 8
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC3); setBit(DDRC, PC3);	break;
     aec:	3b 9a       	sbi	0x07, 3	; 7
     aee:	04 c0       	rjmp	.+8      	; 0xaf8 <pcint11ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTC, PC3); clrBit(DDRC, PC3);	break;
     af0:	43 98       	cbi	0x08, 3	; 8
     af2:	01 c0       	rjmp	.+2      	; 0xaf6 <pcint11ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTC, PC3); clrBit(DDRC, PC3);	break;
     af4:	43 9a       	sbi	0x08, 3	; 8
     af6:	3b 98       	cbi	0x07, 3	; 7
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK1, PCINT11);
     af8:	80 91 6c 00 	lds	r24, 0x006C
     afc:	88 60       	ori	r24, 0x08	; 8
     afe:	80 93 6c 00 	sts	0x006C, r24
	return RESULT_OK;
     b02:	80 e0       	ldi	r24, 0x00	; 0
     b04:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC3); setBit(DDRC, PC3);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC3); setBit(DDRC, PC3);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTC, PC3); clrBit(DDRC, PC3);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTC, PC3); clrBit(DDRC, PC3);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     b06:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK1, PCINT11);
	return RESULT_OK;
}
     b08:	08 95       	ret

00000b0a <pcint11DeactivateInterrupt>:
 * Deactivates the external interrupt pcint11 in PC3
 * -------------------------------------------------------------------------- */

void pcint11DeactivateInterrupt(void)
{
	clrBit(PCMSK1, PCINT11);
     b0a:	ec e6       	ldi	r30, 0x6C	; 108
     b0c:	f0 e0       	ldi	r31, 0x00	; 0
     b0e:	80 81       	ld	r24, Z
     b10:	87 7f       	andi	r24, 0xF7	; 247
     b12:	80 83       	st	Z, r24
     b14:	08 95       	ret

00000b16 <pcint12ActivateInterrupt>:
 * Activates the external interrupt pcint12 and configures port mode in PC4
 * -------------------------------------------------------------------------- */

resultValue_t pcint12ActivateInterrupt(portMode_t port)
{
	switch(port){
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	79 f0       	breq	.+30     	; 0xb38 <pcint12ActivateInterrupt+0x22>
     b1a:	30 f4       	brcc	.+12     	; 0xb28 <pcint12ActivateInterrupt+0x12>
     b1c:	88 23       	and	r24, r24
     b1e:	49 f0       	breq	.+18     	; 0xb32 <pcint12ActivateInterrupt+0x1c>
     b20:	81 30       	cpi	r24, 0x01	; 1
     b22:	a9 f4       	brne	.+42     	; 0xb4e <pcint12ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC4); setBit(DDRC, PC4);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC4); setBit(DDRC, PC4);	break;
     b24:	44 9a       	sbi	0x08, 4	; 8
     b26:	06 c0       	rjmp	.+12     	; 0xb34 <pcint12ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint12 and configures port mode in PC4
 * -------------------------------------------------------------------------- */

resultValue_t pcint12ActivateInterrupt(portMode_t port)
{
	switch(port){
     b28:	83 30       	cpi	r24, 0x03	; 3
     b2a:	41 f0       	breq	.+16     	; 0xb3c <pcint12ActivateInterrupt+0x26>
     b2c:	8f 3f       	cpi	r24, 0xFF	; 255
     b2e:	41 f0       	breq	.+16     	; 0xb40 <pcint12ActivateInterrupt+0x2a>
     b30:	0e c0       	rjmp	.+28     	; 0xb4e <pcint12ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC4); setBit(DDRC, PC4);	break;
     b32:	44 98       	cbi	0x08, 4	; 8
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC4); setBit(DDRC, PC4);	break;
     b34:	3c 9a       	sbi	0x07, 4	; 7
     b36:	04 c0       	rjmp	.+8      	; 0xb40 <pcint12ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTC, PC4); clrBit(DDRC, PC4);	break;
     b38:	44 98       	cbi	0x08, 4	; 8
     b3a:	01 c0       	rjmp	.+2      	; 0xb3e <pcint12ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTC, PC4); clrBit(DDRC, PC4);	break;
     b3c:	44 9a       	sbi	0x08, 4	; 8
     b3e:	3c 98       	cbi	0x07, 4	; 7
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK1, PCINT12);
     b40:	80 91 6c 00 	lds	r24, 0x006C
     b44:	80 61       	ori	r24, 0x10	; 16
     b46:	80 93 6c 00 	sts	0x006C, r24
	return RESULT_OK;
     b4a:	80 e0       	ldi	r24, 0x00	; 0
     b4c:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC4); setBit(DDRC, PC4);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC4); setBit(DDRC, PC4);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTC, PC4); clrBit(DDRC, PC4);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTC, PC4); clrBit(DDRC, PC4);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     b4e:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK1, PCINT12);
	return RESULT_OK;
}
     b50:	08 95       	ret

00000b52 <pcint12DeactivateInterrupt>:
 * Deactivates the external interrupt pcint12 in PC4
 * -------------------------------------------------------------------------- */

void pcint12DeactivateInterrupt(void)
{
	clrBit(PCMSK1, PCINT12);
     b52:	ec e6       	ldi	r30, 0x6C	; 108
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	8f 7e       	andi	r24, 0xEF	; 239
     b5a:	80 83       	st	Z, r24
     b5c:	08 95       	ret

00000b5e <pcint13ActivateInterrupt>:
 * Activates the external interrupt pcint13 and configures port mode in PC5
 * -------------------------------------------------------------------------- */

resultValue_t pcint13ActivateInterrupt(portMode_t port)
{
	switch(port){
     b5e:	82 30       	cpi	r24, 0x02	; 2
     b60:	79 f0       	breq	.+30     	; 0xb80 <pcint13ActivateInterrupt+0x22>
     b62:	30 f4       	brcc	.+12     	; 0xb70 <pcint13ActivateInterrupt+0x12>
     b64:	88 23       	and	r24, r24
     b66:	49 f0       	breq	.+18     	; 0xb7a <pcint13ActivateInterrupt+0x1c>
     b68:	81 30       	cpi	r24, 0x01	; 1
     b6a:	a9 f4       	brne	.+42     	; 0xb96 <pcint13ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC5); setBit(DDRC, PC5);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC5); setBit(DDRC, PC5);	break;
     b6c:	45 9a       	sbi	0x08, 5	; 8
     b6e:	06 c0       	rjmp	.+12     	; 0xb7c <pcint13ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint13 and configures port mode in PC5
 * -------------------------------------------------------------------------- */

resultValue_t pcint13ActivateInterrupt(portMode_t port)
{
	switch(port){
     b70:	83 30       	cpi	r24, 0x03	; 3
     b72:	41 f0       	breq	.+16     	; 0xb84 <pcint13ActivateInterrupt+0x26>
     b74:	8f 3f       	cpi	r24, 0xFF	; 255
     b76:	41 f0       	breq	.+16     	; 0xb88 <pcint13ActivateInterrupt+0x2a>
     b78:	0e c0       	rjmp	.+28     	; 0xb96 <pcint13ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC5); setBit(DDRC, PC5);	break;
     b7a:	45 98       	cbi	0x08, 5	; 8
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC5); setBit(DDRC, PC5);	break;
     b7c:	3d 9a       	sbi	0x07, 5	; 7
     b7e:	04 c0       	rjmp	.+8      	; 0xb88 <pcint13ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTC, PC5); clrBit(DDRC, PC5);	break;
     b80:	45 98       	cbi	0x08, 5	; 8
     b82:	01 c0       	rjmp	.+2      	; 0xb86 <pcint13ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTC, PC5); clrBit(DDRC, PC5);	break;
     b84:	45 9a       	sbi	0x08, 5	; 8
     b86:	3d 98       	cbi	0x07, 5	; 7
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK1, PCINT13);
     b88:	80 91 6c 00 	lds	r24, 0x006C
     b8c:	80 62       	ori	r24, 0x20	; 32
     b8e:	80 93 6c 00 	sts	0x006C, r24
	return RESULT_OK;
     b92:	80 e0       	ldi	r24, 0x00	; 0
     b94:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC5); setBit(DDRC, PC5);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC5); setBit(DDRC, PC5);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTC, PC5); clrBit(DDRC, PC5);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTC, PC5); clrBit(DDRC, PC5);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     b96:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK1, PCINT13);
	return RESULT_OK;
}
     b98:	08 95       	ret

00000b9a <pcint13DeactivateInterrupt>:
 * Deactivates the external interrupt pcint13 in PC5
 * -------------------------------------------------------------------------- */

void pcint13DeactivateInterrupt(void)
{
	clrBit(PCMSK1, PCINT13);
     b9a:	ec e6       	ldi	r30, 0x6C	; 108
     b9c:	f0 e0       	ldi	r31, 0x00	; 0
     b9e:	80 81       	ld	r24, Z
     ba0:	8f 7d       	andi	r24, 0xDF	; 223
     ba2:	80 83       	st	Z, r24
     ba4:	08 95       	ret

00000ba6 <pcint14ActivateInterrupt>:
 * Activates the external interrupt pcint14 and configures port mode in PC6
 * -------------------------------------------------------------------------- */

resultValue_t pcint14ActivateInterrupt(portMode_t port)
{
	switch(port){
     ba6:	82 30       	cpi	r24, 0x02	; 2
     ba8:	79 f0       	breq	.+30     	; 0xbc8 <pcint14ActivateInterrupt+0x22>
     baa:	30 f4       	brcc	.+12     	; 0xbb8 <pcint14ActivateInterrupt+0x12>
     bac:	88 23       	and	r24, r24
     bae:	49 f0       	breq	.+18     	; 0xbc2 <pcint14ActivateInterrupt+0x1c>
     bb0:	81 30       	cpi	r24, 0x01	; 1
     bb2:	a9 f4       	brne	.+42     	; 0xbde <pcint14ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC6); setBit(DDRC, PC6);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC6); setBit(DDRC, PC6);	break;
     bb4:	46 9a       	sbi	0x08, 6	; 8
     bb6:	06 c0       	rjmp	.+12     	; 0xbc4 <pcint14ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint14 and configures port mode in PC6
 * -------------------------------------------------------------------------- */

resultValue_t pcint14ActivateInterrupt(portMode_t port)
{
	switch(port){
     bb8:	83 30       	cpi	r24, 0x03	; 3
     bba:	41 f0       	breq	.+16     	; 0xbcc <pcint14ActivateInterrupt+0x26>
     bbc:	8f 3f       	cpi	r24, 0xFF	; 255
     bbe:	41 f0       	breq	.+16     	; 0xbd0 <pcint14ActivateInterrupt+0x2a>
     bc0:	0e c0       	rjmp	.+28     	; 0xbde <pcint14ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC6); setBit(DDRC, PC6);	break;
     bc2:	46 98       	cbi	0x08, 6	; 8
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC6); setBit(DDRC, PC6);	break;
     bc4:	3e 9a       	sbi	0x07, 6	; 7
     bc6:	04 c0       	rjmp	.+8      	; 0xbd0 <pcint14ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTC, PC6); clrBit(DDRC, PC6);	break;
     bc8:	46 98       	cbi	0x08, 6	; 8
     bca:	01 c0       	rjmp	.+2      	; 0xbce <pcint14ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTC, PC6); clrBit(DDRC, PC6);	break;
     bcc:	46 9a       	sbi	0x08, 6	; 8
     bce:	3e 98       	cbi	0x07, 6	; 7
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK1, PCINT14);
     bd0:	80 91 6c 00 	lds	r24, 0x006C
     bd4:	80 64       	ori	r24, 0x40	; 64
     bd6:	80 93 6c 00 	sts	0x006C, r24
	return RESULT_OK;
     bda:	80 e0       	ldi	r24, 0x00	; 0
     bdc:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC6); setBit(DDRC, PC6);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC6); setBit(DDRC, PC6);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTC, PC6); clrBit(DDRC, PC6);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTC, PC6); clrBit(DDRC, PC6);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     bde:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK1, PCINT14);
	return RESULT_OK;
}
     be0:	08 95       	ret

00000be2 <pcint14DeactivateInterrupt>:
 * Deactivates the external interrupt pcint14 in PC6
 * -------------------------------------------------------------------------- */

void pcint14DeactivateInterrupt(void)
{
	clrBit(PCMSK1, PCINT14);
     be2:	ec e6       	ldi	r30, 0x6C	; 108
     be4:	f0 e0       	ldi	r31, 0x00	; 0
     be6:	80 81       	ld	r24, Z
     be8:	8f 7b       	andi	r24, 0xBF	; 191
     bea:	80 83       	st	Z, r24
     bec:	08 95       	ret

00000bee <pcint23_16Enable>:
 * Enables the external interrupt pcint in port D
 * -------------------------------------------------------------------------- */

void pcint23_16Enable(void)
{
	setBit(PCICR, PCIE2);
     bee:	e8 e6       	ldi	r30, 0x68	; 104
     bf0:	f0 e0       	ldi	r31, 0x00	; 0
     bf2:	80 81       	ld	r24, Z
     bf4:	84 60       	ori	r24, 0x04	; 4
     bf6:	80 83       	st	Z, r24
     bf8:	08 95       	ret

00000bfa <pcint23_16Disable>:
 * Disables the external interrupt pcint in port D
 * -------------------------------------------------------------------------- */

void pcint23_16Disable(void)
{
	clrBit(PCICR, PCIE2);
     bfa:	e8 e6       	ldi	r30, 0x68	; 104
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	80 81       	ld	r24, Z
     c00:	8b 7f       	andi	r24, 0xFB	; 251
     c02:	80 83       	st	Z, r24
     c04:	08 95       	ret

00000c06 <pcint23_16ClearInterruptRequest>:
 * Disables the external interrupt pcint in port D
 * -------------------------------------------------------------------------- */

void pcint23_16ClearInterruptRequest(void)
{
	setBit(PCIFR, PCIF2);
     c06:	da 9a       	sbi	0x1b, 2	; 27
     c08:	08 95       	ret

00000c0a <pcint16ActivateInterrupt>:
 * Activates the external interrupt pcint16 and configures port mode in PD0
 * -------------------------------------------------------------------------- */

resultValue_t pcint16ActivateInterrupt(portMode_t port)
{
	switch(port){
     c0a:	82 30       	cpi	r24, 0x02	; 2
     c0c:	79 f0       	breq	.+30     	; 0xc2c <pcint16ActivateInterrupt+0x22>
     c0e:	30 f4       	brcc	.+12     	; 0xc1c <pcint16ActivateInterrupt+0x12>
     c10:	88 23       	and	r24, r24
     c12:	49 f0       	breq	.+18     	; 0xc26 <pcint16ActivateInterrupt+0x1c>
     c14:	81 30       	cpi	r24, 0x01	; 1
     c16:	a9 f4       	brne	.+42     	; 0xc42 <pcint16ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD0); setBit(DDRD, PD0);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD0); setBit(DDRD, PD0);	break;
     c18:	58 9a       	sbi	0x0b, 0	; 11
     c1a:	06 c0       	rjmp	.+12     	; 0xc28 <pcint16ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint16 and configures port mode in PD0
 * -------------------------------------------------------------------------- */

resultValue_t pcint16ActivateInterrupt(portMode_t port)
{
	switch(port){
     c1c:	83 30       	cpi	r24, 0x03	; 3
     c1e:	41 f0       	breq	.+16     	; 0xc30 <pcint16ActivateInterrupt+0x26>
     c20:	8f 3f       	cpi	r24, 0xFF	; 255
     c22:	41 f0       	breq	.+16     	; 0xc34 <pcint16ActivateInterrupt+0x2a>
     c24:	0e c0       	rjmp	.+28     	; 0xc42 <pcint16ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD0); setBit(DDRD, PD0);	break;
     c26:	58 98       	cbi	0x0b, 0	; 11
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD0); setBit(DDRD, PD0);	break;
     c28:	50 9a       	sbi	0x0a, 0	; 10
     c2a:	04 c0       	rjmp	.+8      	; 0xc34 <pcint16ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD0); clrBit(DDRD, PD0);	break;
     c2c:	58 98       	cbi	0x0b, 0	; 11
     c2e:	01 c0       	rjmp	.+2      	; 0xc32 <pcint16ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD0); clrBit(DDRD, PD0);	break;
     c30:	58 9a       	sbi	0x0b, 0	; 11
     c32:	50 98       	cbi	0x0a, 0	; 10
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK2, PCINT16);
     c34:	80 91 6d 00 	lds	r24, 0x006D
     c38:	81 60       	ori	r24, 0x01	; 1
     c3a:	80 93 6d 00 	sts	0x006D, r24
	return RESULT_OK;
     c3e:	80 e0       	ldi	r24, 0x00	; 0
     c40:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD0); setBit(DDRD, PD0);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD0); setBit(DDRD, PD0);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD0); clrBit(DDRD, PD0);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD0); clrBit(DDRD, PD0);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     c42:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK2, PCINT16);
	return RESULT_OK;
}
     c44:	08 95       	ret

00000c46 <pcint16DeactivateInterrupt>:
 * Deactivates the external interrupt pcint16 in PD0
 * -------------------------------------------------------------------------- */

void pcint16DeactivateInterrupt(void)
{
	clrBit(PCMSK2, PCINT16);
     c46:	ed e6       	ldi	r30, 0x6D	; 109
     c48:	f0 e0       	ldi	r31, 0x00	; 0
     c4a:	80 81       	ld	r24, Z
     c4c:	8e 7f       	andi	r24, 0xFE	; 254
     c4e:	80 83       	st	Z, r24
     c50:	08 95       	ret

00000c52 <pcint17ActivateInterrupt>:
 * Activates the external interrupt pcint17 and configures port mode in PD1
 * -------------------------------------------------------------------------- */

resultValue_t pcint17ActivateInterrupt(portMode_t port)
{
	switch(port){
     c52:	82 30       	cpi	r24, 0x02	; 2
     c54:	79 f0       	breq	.+30     	; 0xc74 <pcint17ActivateInterrupt+0x22>
     c56:	30 f4       	brcc	.+12     	; 0xc64 <pcint17ActivateInterrupt+0x12>
     c58:	88 23       	and	r24, r24
     c5a:	49 f0       	breq	.+18     	; 0xc6e <pcint17ActivateInterrupt+0x1c>
     c5c:	81 30       	cpi	r24, 0x01	; 1
     c5e:	a9 f4       	brne	.+42     	; 0xc8a <pcint17ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD1); setBit(DDRD, PD1);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD1); setBit(DDRD, PD1);	break;
     c60:	59 9a       	sbi	0x0b, 1	; 11
     c62:	06 c0       	rjmp	.+12     	; 0xc70 <pcint17ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint17 and configures port mode in PD1
 * -------------------------------------------------------------------------- */

resultValue_t pcint17ActivateInterrupt(portMode_t port)
{
	switch(port){
     c64:	83 30       	cpi	r24, 0x03	; 3
     c66:	41 f0       	breq	.+16     	; 0xc78 <pcint17ActivateInterrupt+0x26>
     c68:	8f 3f       	cpi	r24, 0xFF	; 255
     c6a:	41 f0       	breq	.+16     	; 0xc7c <pcint17ActivateInterrupt+0x2a>
     c6c:	0e c0       	rjmp	.+28     	; 0xc8a <pcint17ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD1); setBit(DDRD, PD1);	break;
     c6e:	59 98       	cbi	0x0b, 1	; 11
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD1); setBit(DDRD, PD1);	break;
     c70:	51 9a       	sbi	0x0a, 1	; 10
     c72:	04 c0       	rjmp	.+8      	; 0xc7c <pcint17ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD1); clrBit(DDRD, PD1);	break;
     c74:	59 98       	cbi	0x0b, 1	; 11
     c76:	01 c0       	rjmp	.+2      	; 0xc7a <pcint17ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD1); clrBit(DDRD, PD1);	break;
     c78:	59 9a       	sbi	0x0b, 1	; 11
     c7a:	51 98       	cbi	0x0a, 1	; 10
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK2, PCINT17);
     c7c:	80 91 6d 00 	lds	r24, 0x006D
     c80:	82 60       	ori	r24, 0x02	; 2
     c82:	80 93 6d 00 	sts	0x006D, r24
	return RESULT_OK;
     c86:	80 e0       	ldi	r24, 0x00	; 0
     c88:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD1); setBit(DDRD, PD1);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD1); setBit(DDRD, PD1);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD1); clrBit(DDRD, PD1);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD1); clrBit(DDRD, PD1);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     c8a:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK2, PCINT17);
	return RESULT_OK;
}
     c8c:	08 95       	ret

00000c8e <pcint17DeactivateInterrupt>:
 * Deactivates the external interrupt pcint17 in PD1
 * -------------------------------------------------------------------------- */

void pcint17DeactivateInterrupt(void)
{
	clrBit(PCMSK2, PCINT17);
     c8e:	ed e6       	ldi	r30, 0x6D	; 109
     c90:	f0 e0       	ldi	r31, 0x00	; 0
     c92:	80 81       	ld	r24, Z
     c94:	8d 7f       	andi	r24, 0xFD	; 253
     c96:	80 83       	st	Z, r24
     c98:	08 95       	ret

00000c9a <pcint18ActivateInterrupt>:
 * Activates the external interrupt pcint18 and configures port mode in PD2
 * -------------------------------------------------------------------------- */

resultValue_t pcint18ActivateInterrupt(portMode_t port)
{
	switch(port){
     c9a:	82 30       	cpi	r24, 0x02	; 2
     c9c:	79 f0       	breq	.+30     	; 0xcbc <pcint18ActivateInterrupt+0x22>
     c9e:	30 f4       	brcc	.+12     	; 0xcac <pcint18ActivateInterrupt+0x12>
     ca0:	88 23       	and	r24, r24
     ca2:	49 f0       	breq	.+18     	; 0xcb6 <pcint18ActivateInterrupt+0x1c>
     ca4:	81 30       	cpi	r24, 0x01	; 1
     ca6:	a9 f4       	brne	.+42     	; 0xcd2 <pcint18ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD2); setBit(DDRD, PD2);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD2); setBit(DDRD, PD2);	break;
     ca8:	5a 9a       	sbi	0x0b, 2	; 11
     caa:	06 c0       	rjmp	.+12     	; 0xcb8 <pcint18ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint18 and configures port mode in PD2
 * -------------------------------------------------------------------------- */

resultValue_t pcint18ActivateInterrupt(portMode_t port)
{
	switch(port){
     cac:	83 30       	cpi	r24, 0x03	; 3
     cae:	41 f0       	breq	.+16     	; 0xcc0 <pcint18ActivateInterrupt+0x26>
     cb0:	8f 3f       	cpi	r24, 0xFF	; 255
     cb2:	41 f0       	breq	.+16     	; 0xcc4 <pcint18ActivateInterrupt+0x2a>
     cb4:	0e c0       	rjmp	.+28     	; 0xcd2 <pcint18ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD2); setBit(DDRD, PD2);	break;
     cb6:	5a 98       	cbi	0x0b, 2	; 11
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD2); setBit(DDRD, PD2);	break;
     cb8:	52 9a       	sbi	0x0a, 2	; 10
     cba:	04 c0       	rjmp	.+8      	; 0xcc4 <pcint18ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD2); clrBit(DDRD, PD2);	break;
     cbc:	5a 98       	cbi	0x0b, 2	; 11
     cbe:	01 c0       	rjmp	.+2      	; 0xcc2 <pcint18ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD2); clrBit(DDRD, PD2);	break;
     cc0:	5a 9a       	sbi	0x0b, 2	; 11
     cc2:	52 98       	cbi	0x0a, 2	; 10
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK2, PCINT18);
     cc4:	80 91 6d 00 	lds	r24, 0x006D
     cc8:	84 60       	ori	r24, 0x04	; 4
     cca:	80 93 6d 00 	sts	0x006D, r24
	return RESULT_OK;
     cce:	80 e0       	ldi	r24, 0x00	; 0
     cd0:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD2); setBit(DDRD, PD2);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD2); setBit(DDRD, PD2);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD2); clrBit(DDRD, PD2);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD2); clrBit(DDRD, PD2);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     cd2:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK2, PCINT18);
	return RESULT_OK;
}
     cd4:	08 95       	ret

00000cd6 <pcint18DeactivateInterrupt>:
 * Deactivates the external interrupt pcint18 in PD2
 * -------------------------------------------------------------------------- */

void pcint18DeactivateInterrupt(void)
{
	clrBit(PCMSK2, PCINT18);
     cd6:	ed e6       	ldi	r30, 0x6D	; 109
     cd8:	f0 e0       	ldi	r31, 0x00	; 0
     cda:	80 81       	ld	r24, Z
     cdc:	8b 7f       	andi	r24, 0xFB	; 251
     cde:	80 83       	st	Z, r24
     ce0:	08 95       	ret

00000ce2 <pcint19ActivateInterrupt>:
 * Activates the external interrupt pcint19 and configures port mode in PD3
 * -------------------------------------------------------------------------- */

resultValue_t pcint19ActivateInterrupt(portMode_t port)
{
	switch(port){
     ce2:	82 30       	cpi	r24, 0x02	; 2
     ce4:	79 f0       	breq	.+30     	; 0xd04 <pcint19ActivateInterrupt+0x22>
     ce6:	30 f4       	brcc	.+12     	; 0xcf4 <pcint19ActivateInterrupt+0x12>
     ce8:	88 23       	and	r24, r24
     cea:	49 f0       	breq	.+18     	; 0xcfe <pcint19ActivateInterrupt+0x1c>
     cec:	81 30       	cpi	r24, 0x01	; 1
     cee:	a9 f4       	brne	.+42     	; 0xd1a <pcint19ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD3); setBit(DDRD, PD3);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD3); setBit(DDRD, PD3);	break;
     cf0:	5b 9a       	sbi	0x0b, 3	; 11
     cf2:	06 c0       	rjmp	.+12     	; 0xd00 <pcint19ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint19 and configures port mode in PD3
 * -------------------------------------------------------------------------- */

resultValue_t pcint19ActivateInterrupt(portMode_t port)
{
	switch(port){
     cf4:	83 30       	cpi	r24, 0x03	; 3
     cf6:	41 f0       	breq	.+16     	; 0xd08 <pcint19ActivateInterrupt+0x26>
     cf8:	8f 3f       	cpi	r24, 0xFF	; 255
     cfa:	41 f0       	breq	.+16     	; 0xd0c <pcint19ActivateInterrupt+0x2a>
     cfc:	0e c0       	rjmp	.+28     	; 0xd1a <pcint19ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD3); setBit(DDRD, PD3);	break;
     cfe:	5b 98       	cbi	0x0b, 3	; 11
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD3); setBit(DDRD, PD3);	break;
     d00:	53 9a       	sbi	0x0a, 3	; 10
     d02:	04 c0       	rjmp	.+8      	; 0xd0c <pcint19ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD3); clrBit(DDRD, PD3);	break;
     d04:	5b 98       	cbi	0x0b, 3	; 11
     d06:	01 c0       	rjmp	.+2      	; 0xd0a <pcint19ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD3); clrBit(DDRD, PD3);	break;
     d08:	5b 9a       	sbi	0x0b, 3	; 11
     d0a:	53 98       	cbi	0x0a, 3	; 10
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK2, PCINT19);
     d0c:	80 91 6d 00 	lds	r24, 0x006D
     d10:	88 60       	ori	r24, 0x08	; 8
     d12:	80 93 6d 00 	sts	0x006D, r24
	return RESULT_OK;
     d16:	80 e0       	ldi	r24, 0x00	; 0
     d18:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD3); setBit(DDRD, PD3);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD3); setBit(DDRD, PD3);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD3); clrBit(DDRD, PD3);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD3); clrBit(DDRD, PD3);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     d1a:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK2, PCINT19);
	return RESULT_OK;
}
     d1c:	08 95       	ret

00000d1e <pcint19DeactivateInterrupt>:
 * Deactivates the external interrupt pcint19 in PD3
 * -------------------------------------------------------------------------- */

void pcint19DeactivateInterrupt(void)
{
	clrBit(PCMSK2, PCINT19);
     d1e:	ed e6       	ldi	r30, 0x6D	; 109
     d20:	f0 e0       	ldi	r31, 0x00	; 0
     d22:	80 81       	ld	r24, Z
     d24:	87 7f       	andi	r24, 0xF7	; 247
     d26:	80 83       	st	Z, r24
     d28:	08 95       	ret

00000d2a <pcint20ActivateInterrupt>:
 * Activates the external interrupt pcint20 and configures port mode in PD4
 * -------------------------------------------------------------------------- */

resultValue_t pcint20ActivateInterrupt(portMode_t port)
{
	switch(port){
     d2a:	82 30       	cpi	r24, 0x02	; 2
     d2c:	79 f0       	breq	.+30     	; 0xd4c <pcint20ActivateInterrupt+0x22>
     d2e:	30 f4       	brcc	.+12     	; 0xd3c <pcint20ActivateInterrupt+0x12>
     d30:	88 23       	and	r24, r24
     d32:	49 f0       	breq	.+18     	; 0xd46 <pcint20ActivateInterrupt+0x1c>
     d34:	81 30       	cpi	r24, 0x01	; 1
     d36:	a9 f4       	brne	.+42     	; 0xd62 <pcint20ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD4); setBit(DDRD, PD4);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD4); setBit(DDRD, PD4);	break;
     d38:	5c 9a       	sbi	0x0b, 4	; 11
     d3a:	06 c0       	rjmp	.+12     	; 0xd48 <pcint20ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint20 and configures port mode in PD4
 * -------------------------------------------------------------------------- */

resultValue_t pcint20ActivateInterrupt(portMode_t port)
{
	switch(port){
     d3c:	83 30       	cpi	r24, 0x03	; 3
     d3e:	41 f0       	breq	.+16     	; 0xd50 <pcint20ActivateInterrupt+0x26>
     d40:	8f 3f       	cpi	r24, 0xFF	; 255
     d42:	41 f0       	breq	.+16     	; 0xd54 <pcint20ActivateInterrupt+0x2a>
     d44:	0e c0       	rjmp	.+28     	; 0xd62 <pcint20ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD4); setBit(DDRD, PD4);	break;
     d46:	5c 98       	cbi	0x0b, 4	; 11
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD4); setBit(DDRD, PD4);	break;
     d48:	54 9a       	sbi	0x0a, 4	; 10
     d4a:	04 c0       	rjmp	.+8      	; 0xd54 <pcint20ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD4); clrBit(DDRD, PD4);	break;
     d4c:	5c 98       	cbi	0x0b, 4	; 11
     d4e:	01 c0       	rjmp	.+2      	; 0xd52 <pcint20ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD4); clrBit(DDRD, PD4);	break;
     d50:	5c 9a       	sbi	0x0b, 4	; 11
     d52:	54 98       	cbi	0x0a, 4	; 10
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK2, PCINT20);
     d54:	80 91 6d 00 	lds	r24, 0x006D
     d58:	80 61       	ori	r24, 0x10	; 16
     d5a:	80 93 6d 00 	sts	0x006D, r24
	return RESULT_OK;
     d5e:	80 e0       	ldi	r24, 0x00	; 0
     d60:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD4); setBit(DDRD, PD4);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD4); setBit(DDRD, PD4);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD4); clrBit(DDRD, PD4);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD4); clrBit(DDRD, PD4);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     d62:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK2, PCINT20);
	return RESULT_OK;
}
     d64:	08 95       	ret

00000d66 <pcint20DeactivateInterrupt>:
 * Deactivates the external interrupt pcint20 in PD4
 * -------------------------------------------------------------------------- */

void pcint20DeactivateInterrupt(void)
{
	clrBit(PCMSK2, PCINT20);
     d66:	ed e6       	ldi	r30, 0x6D	; 109
     d68:	f0 e0       	ldi	r31, 0x00	; 0
     d6a:	80 81       	ld	r24, Z
     d6c:	8f 7e       	andi	r24, 0xEF	; 239
     d6e:	80 83       	st	Z, r24
     d70:	08 95       	ret

00000d72 <pcint21ActivateInterrupt>:
 * Activates the external interrupt pcint21 and configures port mode in PD5
 * -------------------------------------------------------------------------- */

resultValue_t pcint21ActivateInterrupt(portMode_t port)
{
	switch(port){
     d72:	82 30       	cpi	r24, 0x02	; 2
     d74:	79 f0       	breq	.+30     	; 0xd94 <pcint21ActivateInterrupt+0x22>
     d76:	30 f4       	brcc	.+12     	; 0xd84 <pcint21ActivateInterrupt+0x12>
     d78:	88 23       	and	r24, r24
     d7a:	49 f0       	breq	.+18     	; 0xd8e <pcint21ActivateInterrupt+0x1c>
     d7c:	81 30       	cpi	r24, 0x01	; 1
     d7e:	a9 f4       	brne	.+42     	; 0xdaa <pcint21ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD5); setBit(DDRD, PD5);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD5); setBit(DDRD, PD5);	break;
     d80:	5d 9a       	sbi	0x0b, 5	; 11
     d82:	06 c0       	rjmp	.+12     	; 0xd90 <pcint21ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint21 and configures port mode in PD5
 * -------------------------------------------------------------------------- */

resultValue_t pcint21ActivateInterrupt(portMode_t port)
{
	switch(port){
     d84:	83 30       	cpi	r24, 0x03	; 3
     d86:	41 f0       	breq	.+16     	; 0xd98 <pcint21ActivateInterrupt+0x26>
     d88:	8f 3f       	cpi	r24, 0xFF	; 255
     d8a:	41 f0       	breq	.+16     	; 0xd9c <pcint21ActivateInterrupt+0x2a>
     d8c:	0e c0       	rjmp	.+28     	; 0xdaa <pcint21ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD5); setBit(DDRD, PD5);	break;
     d8e:	5d 98       	cbi	0x0b, 5	; 11
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD5); setBit(DDRD, PD5);	break;
     d90:	55 9a       	sbi	0x0a, 5	; 10
     d92:	04 c0       	rjmp	.+8      	; 0xd9c <pcint21ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD5); clrBit(DDRD, PD5);	break;
     d94:	5d 98       	cbi	0x0b, 5	; 11
     d96:	01 c0       	rjmp	.+2      	; 0xd9a <pcint21ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD5); clrBit(DDRD, PD5);	break;
     d98:	5d 9a       	sbi	0x0b, 5	; 11
     d9a:	55 98       	cbi	0x0a, 5	; 10
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK2, PCINT21);
     d9c:	80 91 6d 00 	lds	r24, 0x006D
     da0:	80 62       	ori	r24, 0x20	; 32
     da2:	80 93 6d 00 	sts	0x006D, r24
	return RESULT_OK;
     da6:	80 e0       	ldi	r24, 0x00	; 0
     da8:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD5); setBit(DDRD, PD5);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD5); setBit(DDRD, PD5);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD5); clrBit(DDRD, PD5);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD5); clrBit(DDRD, PD5);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     daa:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK2, PCINT21);
	return RESULT_OK;
}
     dac:	08 95       	ret

00000dae <pcint21DeactivateInterrupt>:
 * Deactivates the external interrupt pcint21 in PD5
 * -------------------------------------------------------------------------- */

void pcint21DeactivateInterrupt(void)
{
	clrBit(PCMSK2, PCINT21);
     dae:	ed e6       	ldi	r30, 0x6D	; 109
     db0:	f0 e0       	ldi	r31, 0x00	; 0
     db2:	80 81       	ld	r24, Z
     db4:	8f 7d       	andi	r24, 0xDF	; 223
     db6:	80 83       	st	Z, r24
     db8:	08 95       	ret

00000dba <pcint22ActivateInterrupt>:
 * Activates the external interrupt pcint22 and configures port mode in PD6
 * -------------------------------------------------------------------------- */

resultValue_t pcint22ActivateInterrupt(portMode_t port)
{
	switch(port){
     dba:	82 30       	cpi	r24, 0x02	; 2
     dbc:	79 f0       	breq	.+30     	; 0xddc <pcint22ActivateInterrupt+0x22>
     dbe:	30 f4       	brcc	.+12     	; 0xdcc <pcint22ActivateInterrupt+0x12>
     dc0:	88 23       	and	r24, r24
     dc2:	49 f0       	breq	.+18     	; 0xdd6 <pcint22ActivateInterrupt+0x1c>
     dc4:	81 30       	cpi	r24, 0x01	; 1
     dc6:	a9 f4       	brne	.+42     	; 0xdf2 <pcint22ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD6); setBit(DDRD, PD6);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD6); setBit(DDRD, PD6);	break;
     dc8:	5e 9a       	sbi	0x0b, 6	; 11
     dca:	06 c0       	rjmp	.+12     	; 0xdd8 <pcint22ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint22 and configures port mode in PD6
 * -------------------------------------------------------------------------- */

resultValue_t pcint22ActivateInterrupt(portMode_t port)
{
	switch(port){
     dcc:	83 30       	cpi	r24, 0x03	; 3
     dce:	41 f0       	breq	.+16     	; 0xde0 <pcint22ActivateInterrupt+0x26>
     dd0:	8f 3f       	cpi	r24, 0xFF	; 255
     dd2:	41 f0       	breq	.+16     	; 0xde4 <pcint22ActivateInterrupt+0x2a>
     dd4:	0e c0       	rjmp	.+28     	; 0xdf2 <pcint22ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD6); setBit(DDRD, PD6);	break;
     dd6:	5e 98       	cbi	0x0b, 6	; 11
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD6); setBit(DDRD, PD6);	break;
     dd8:	56 9a       	sbi	0x0a, 6	; 10
     dda:	04 c0       	rjmp	.+8      	; 0xde4 <pcint22ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD6); clrBit(DDRD, PD6);	break;
     ddc:	5e 98       	cbi	0x0b, 6	; 11
     dde:	01 c0       	rjmp	.+2      	; 0xde2 <pcint22ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD6); clrBit(DDRD, PD6);	break;
     de0:	5e 9a       	sbi	0x0b, 6	; 11
     de2:	56 98       	cbi	0x0a, 6	; 10
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK2, PCINT22);
     de4:	80 91 6d 00 	lds	r24, 0x006D
     de8:	80 64       	ori	r24, 0x40	; 64
     dea:	80 93 6d 00 	sts	0x006D, r24
	return RESULT_OK;
     dee:	80 e0       	ldi	r24, 0x00	; 0
     df0:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD6); setBit(DDRD, PD6);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD6); setBit(DDRD, PD6);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD6); clrBit(DDRD, PD6);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD6); clrBit(DDRD, PD6);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     df2:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK2, PCINT22);
	return RESULT_OK;
}
     df4:	08 95       	ret

00000df6 <pcint22DeactivateInterrupt>:
 * Deactivates the external interrupt pcint22 in PD6
 * -------------------------------------------------------------------------- */

void pcint22DeactivateInterrupt(void)
{
	clrBit(PCMSK2, PCINT22);
     df6:	ed e6       	ldi	r30, 0x6D	; 109
     df8:	f0 e0       	ldi	r31, 0x00	; 0
     dfa:	80 81       	ld	r24, Z
     dfc:	8f 7b       	andi	r24, 0xBF	; 191
     dfe:	80 83       	st	Z, r24
     e00:	08 95       	ret

00000e02 <pcint23ActivateInterrupt>:
 * Activates the external interrupt pcint23 and configures port mode in PD7
 * -------------------------------------------------------------------------- */

resultValue_t pcint23ActivateInterrupt(portMode_t port)
{
	switch(port){
     e02:	82 30       	cpi	r24, 0x02	; 2
     e04:	79 f0       	breq	.+30     	; 0xe24 <pcint23ActivateInterrupt+0x22>
     e06:	30 f4       	brcc	.+12     	; 0xe14 <pcint23ActivateInterrupt+0x12>
     e08:	88 23       	and	r24, r24
     e0a:	49 f0       	breq	.+18     	; 0xe1e <pcint23ActivateInterrupt+0x1c>
     e0c:	81 30       	cpi	r24, 0x01	; 1
     e0e:	a9 f4       	brne	.+42     	; 0xe3a <pcint23ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD7); setBit(DDRD, PD7);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD7); setBit(DDRD, PD7);	break;
     e10:	5f 9a       	sbi	0x0b, 7	; 11
     e12:	06 c0       	rjmp	.+12     	; 0xe20 <pcint23ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint23 and configures port mode in PD7
 * -------------------------------------------------------------------------- */

resultValue_t pcint23ActivateInterrupt(portMode_t port)
{
	switch(port){
     e14:	83 30       	cpi	r24, 0x03	; 3
     e16:	41 f0       	breq	.+16     	; 0xe28 <pcint23ActivateInterrupt+0x26>
     e18:	8f 3f       	cpi	r24, 0xFF	; 255
     e1a:	41 f0       	breq	.+16     	; 0xe2c <pcint23ActivateInterrupt+0x2a>
     e1c:	0e c0       	rjmp	.+28     	; 0xe3a <pcint23ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD7); setBit(DDRD, PD7);	break;
     e1e:	5f 98       	cbi	0x0b, 7	; 11
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD7); setBit(DDRD, PD7);	break;
     e20:	57 9a       	sbi	0x0a, 7	; 10
     e22:	04 c0       	rjmp	.+8      	; 0xe2c <pcint23ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD7); clrBit(DDRD, PD7);	break;
     e24:	5f 98       	cbi	0x0b, 7	; 11
     e26:	01 c0       	rjmp	.+2      	; 0xe2a <pcint23ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD7); clrBit(DDRD, PD7);	break;
     e28:	5f 9a       	sbi	0x0b, 7	; 11
     e2a:	57 98       	cbi	0x0a, 7	; 10
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK2, PCINT23);
     e2c:	80 91 6d 00 	lds	r24, 0x006D
     e30:	80 68       	ori	r24, 0x80	; 128
     e32:	80 93 6d 00 	sts	0x006D, r24
	return RESULT_OK;
     e36:	80 e0       	ldi	r24, 0x00	; 0
     e38:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD7); setBit(DDRD, PD7);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD7); setBit(DDRD, PD7);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD7); clrBit(DDRD, PD7);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD7); clrBit(DDRD, PD7);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     e3a:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK2, PCINT23);
	return RESULT_OK;
}
     e3c:	08 95       	ret

00000e3e <pcint23DeactivateInterrupt>:
 * Deactivates the external interrupt pcint23 in PD7
 * -------------------------------------------------------------------------- */

void pcint23DeactivateInterrupt(void)
{
	clrBit(PCMSK2, PCINT23);
     e3e:	ed e6       	ldi	r30, 0x6D	; 109
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	8f 77       	andi	r24, 0x7F	; 127
     e46:	80 83       	st	Z, r24
     e48:	08 95       	ret

00000e4a <timer0Config>:
 * Configures the timer0 mode and prescaler
 * -------------------------------------------------------------------------- */

resultValue_t timer0Config(timerModeA_t mode, timerPrescalerValueA_t prescaler)
{
	uint8 regA = TCCR0A;
     e4a:	24 b5       	in	r18, 0x24	; 36
	uint8 regB = TCCR0B;
     e4c:	95 b5       	in	r25, 0x25	; 37

	if(prescaler != TIMER_A_PRESCALER_NO_CHANGE){
     e4e:	6f 3f       	cpi	r22, 0xFF	; 255
     e50:	c1 f0       	breq	.+48     	; 0xe82 <timer0Config+0x38>
		regB &= ~(0x07 << CS00);
     e52:	98 7f       	andi	r25, 0xF8	; 248
		switch(prescaler){
     e54:	46 2f       	mov	r20, r22
     e56:	50 e0       	ldi	r21, 0x00	; 0
     e58:	48 30       	cpi	r20, 0x08	; 8
     e5a:	51 05       	cpc	r21, r1
     e5c:	80 f5       	brcc	.+96     	; 0xebe <timer0Config+0x74>
     e5e:	fa 01       	movw	r30, r20
     e60:	eb 5a       	subi	r30, 0xAB	; 171
     e62:	ff 4f       	sbci	r31, 0xFF	; 255
     e64:	0c 94 f8 0f 	jmp	0x1ff0	; 0x1ff0 <__tablejump2__>
			case TIMER_A_CLOCK_DISABLE:					break;
			case TIMER_A_PRESCALER_OFF:					regB |= (1 << CS00);	break;
     e68:	91 60       	ori	r25, 0x01	; 1
     e6a:	0b c0       	rjmp	.+22     	; 0xe82 <timer0Config+0x38>
			case TIMER_A_PRESCALER_8:					regB |= (2 << CS00);	break;
     e6c:	92 60       	ori	r25, 0x02	; 2
     e6e:	09 c0       	rjmp	.+18     	; 0xe82 <timer0Config+0x38>
			case TIMER_A_PRESCALER_64:					regB |= (3 << CS00);	break;
     e70:	93 60       	ori	r25, 0x03	; 3
     e72:	07 c0       	rjmp	.+14     	; 0xe82 <timer0Config+0x38>
			case TIMER_A_PRESCALER_256:					regB |= (4 << CS00);	break;
     e74:	94 60       	ori	r25, 0x04	; 4
     e76:	05 c0       	rjmp	.+10     	; 0xe82 <timer0Config+0x38>
			case TIMER_A_PRESCALER_1024:				regB |= (5 << CS00);	break;
     e78:	95 60       	ori	r25, 0x05	; 5
     e7a:	03 c0       	rjmp	.+6      	; 0xe82 <timer0Config+0x38>
			case TIMER_A_PRESCALER_T0_FALLING_EDGE:		regB |= (6 << CS00);	break;
     e7c:	96 60       	ori	r25, 0x06	; 6
     e7e:	01 c0       	rjmp	.+2      	; 0xe82 <timer0Config+0x38>
			case TIMER_A_PRESCALER_T0_RISING_EDGE:		regB |= (7 << CS00);	break;
     e80:	97 60       	ori	r25, 0x07	; 7
			case TIMER_A_PRESCALER_NO_CHANGE:			break;
			default:									return RESULT_TIMER_PRESCALER_VALUE_UNSUPPORTED;	break;
		}
	}

	if(mode != TIMER_A_MODE_NO_CHANGE){
     e82:	8f 3f       	cpi	r24, 0xFF	; 255
     e84:	c1 f0       	breq	.+48     	; 0xeb6 <timer0Config+0x6c>
		regA &= ~(0x03 << WGM00);
     e86:	2c 7f       	andi	r18, 0xFC	; 252
		clrBit(regB, WGM02);
     e88:	97 7f       	andi	r25, 0xF7	; 247
		switch(mode){
     e8a:	82 30       	cpi	r24, 0x02	; 2
     e8c:	69 f0       	breq	.+26     	; 0xea8 <timer0Config+0x5e>
     e8e:	28 f4       	brcc	.+10     	; 0xe9a <timer0Config+0x50>
     e90:	88 23       	and	r24, r24
     e92:	89 f0       	breq	.+34     	; 0xeb6 <timer0Config+0x6c>
     e94:	81 30       	cpi	r24, 0x01	; 1
     e96:	59 f0       	breq	.+22     	; 0xeae <timer0Config+0x64>
     e98:	14 c0       	rjmp	.+40     	; 0xec2 <timer0Config+0x78>
     e9a:	85 30       	cpi	r24, 0x05	; 5
     e9c:	39 f0       	breq	.+14     	; 0xeac <timer0Config+0x62>
     e9e:	87 30       	cpi	r24, 0x07	; 7
     ea0:	41 f0       	breq	.+16     	; 0xeb2 <timer0Config+0x68>
     ea2:	83 30       	cpi	r24, 0x03	; 3
     ea4:	71 f4       	brne	.+28     	; 0xec2 <timer0Config+0x78>
     ea6:	06 c0       	rjmp	.+12     	; 0xeb4 <timer0Config+0x6a>
			case TIMER_A_MODE_NORMAL:						break;
			case TIMER_A_MODE_PWM_PHASE_CORRECTED_MAX:		regA |= (1 << WGM00);	break;
			case TIMER_A_MODE_CTC:							regA |= (2 << WGM00);	break;
     ea8:	22 60       	ori	r18, 0x02	; 2
     eaa:	05 c0       	rjmp	.+10     	; 0xeb6 <timer0Config+0x6c>
			case TIMER_A_MODE_FAST_PWM_MAX:					regA |= (3 << WGM00);	break;
			case TIMER_A_MODE_PWM_PHASE_CORRECTED_OCRA:		setBit(regB, WGM02);regA |= (1 << WGM00);	break;
     eac:	98 60       	ori	r25, 0x08	; 8
     eae:	21 60       	ori	r18, 0x01	; 1
     eb0:	02 c0       	rjmp	.+4      	; 0xeb6 <timer0Config+0x6c>
			case TIMER_A_MODE_FAST_PWM_OCRA:				setBit(regB, WGM02);regA |= (3 << WGM00);	break;
     eb2:	98 60       	ori	r25, 0x08	; 8
     eb4:	23 60       	ori	r18, 0x03	; 3
			case TIMER_A_MODE_NO_CHANGE:					break;
			default:										return RESULT_TIMER_MODE_VALUE_UNSUPPORTED;	break;
		}
	}
	TCCR0A = regA;
     eb6:	24 bd       	out	0x24, r18	; 36
	TCCR0B = regB;
     eb8:	95 bd       	out	0x25, r25	; 37

	return RESULT_OK;
     eba:	80 e0       	ldi	r24, 0x00	; 0
     ebc:	08 95       	ret
			case TIMER_A_PRESCALER_256:					regB |= (4 << CS00);	break;
			case TIMER_A_PRESCALER_1024:				regB |= (5 << CS00);	break;
			case TIMER_A_PRESCALER_T0_FALLING_EDGE:		regB |= (6 << CS00);	break;
			case TIMER_A_PRESCALER_T0_RISING_EDGE:		regB |= (7 << CS00);	break;
			case TIMER_A_PRESCALER_NO_CHANGE:			break;
			default:									return RESULT_TIMER_PRESCALER_VALUE_UNSUPPORTED;	break;
     ebe:	83 e0       	ldi	r24, 0x03	; 3
     ec0:	08 95       	ret
			case TIMER_A_MODE_CTC:							regA |= (2 << WGM00);	break;
			case TIMER_A_MODE_FAST_PWM_MAX:					regA |= (3 << WGM00);	break;
			case TIMER_A_MODE_PWM_PHASE_CORRECTED_OCRA:		setBit(regB, WGM02);regA |= (1 << WGM00);	break;
			case TIMER_A_MODE_FAST_PWM_OCRA:				setBit(regB, WGM02);regA |= (3 << WGM00);	break;
			case TIMER_A_MODE_NO_CHANGE:					break;
			default:										return RESULT_TIMER_MODE_VALUE_UNSUPPORTED;	break;
     ec2:	84 e0       	ldi	r24, 0x04	; 4
	}
	TCCR0A = regA;
	TCCR0B = regB;

	return RESULT_OK;
}
     ec4:	08 95       	ret

00000ec6 <timer0OutputConfig>:
 * Configures the timer0 compare outputs
 * -------------------------------------------------------------------------- */

resultValue_t timer0OutputConfig(timerOutput_t compA, timerOutput_t compB)
{
	uint8 reg = TCCR0A;
     ec6:	94 b5       	in	r25, 0x24	; 36

	if(compA != TIMER_PORT_NO_CHANGE){
     ec8:	8f 3f       	cpi	r24, 0xFF	; 255
     eca:	69 f0       	breq	.+26     	; 0xee6 <timer0OutputConfig+0x20>
		reg &= ~(0x03 << COM0A0);
     ecc:	9f 73       	andi	r25, 0x3F	; 63
		switch(compA){
     ece:	81 30       	cpi	r24, 0x01	; 1
     ed0:	39 f0       	breq	.+14     	; 0xee0 <timer0OutputConfig+0x1a>
     ed2:	48 f0       	brcs	.+18     	; 0xee6 <timer0OutputConfig+0x20>
     ed4:	82 30       	cpi	r24, 0x02	; 2
     ed6:	31 f0       	breq	.+12     	; 0xee4 <timer0OutputConfig+0x1e>
     ed8:	83 30       	cpi	r24, 0x03	; 3
     eda:	e1 f4       	brne	.+56     	; 0xf14 <timer0OutputConfig+0x4e>
			case TIMER_PORT_NORMAL:				break;
			case TIMER_PORT_TOGGLE_ON_COMPARE:	reg |= (1 << COM0A0);	break;
			case TIMER_PORT_CLEAR_ON_COMPARE:	reg |= (2 << COM0A0);	break;
			case TIMER_PORT_SET_ON_COMPARE:		reg |= (3 << COM0A0);	break;
     edc:	90 6c       	ori	r25, 0xC0	; 192
     ede:	03 c0       	rjmp	.+6      	; 0xee6 <timer0OutputConfig+0x20>

	if(compA != TIMER_PORT_NO_CHANGE){
		reg &= ~(0x03 << COM0A0);
		switch(compA){
			case TIMER_PORT_NORMAL:				break;
			case TIMER_PORT_TOGGLE_ON_COMPARE:	reg |= (1 << COM0A0);	break;
     ee0:	90 64       	ori	r25, 0x40	; 64
     ee2:	01 c0       	rjmp	.+2      	; 0xee6 <timer0OutputConfig+0x20>
			case TIMER_PORT_CLEAR_ON_COMPARE:	reg |= (2 << COM0A0);	break;
     ee4:	90 68       	ori	r25, 0x80	; 128
			case TIMER_PORT_SET_ON_COMPARE:		reg |= (3 << COM0A0);	break;
			case TIMER_PORT_NO_CHANGE:			break;
			default:							return RESULT_PORT_VALUE_UNSUPPORTED;	break;
		}
	}
	if(compB != TIMER_PORT_NO_CHANGE){
     ee6:	6f 3f       	cpi	r22, 0xFF	; 255
     ee8:	91 f0       	breq	.+36     	; 0xf0e <timer0OutputConfig+0x48>
		reg &= ~(0x03 << COM0B0);
     eea:	9f 7c       	andi	r25, 0xCF	; 207
		switch(compA){
     eec:	82 30       	cpi	r24, 0x02	; 2
     eee:	61 f0       	breq	.+24     	; 0xf08 <timer0OutputConfig+0x42>
     ef0:	30 f4       	brcc	.+12     	; 0xefe <timer0OutputConfig+0x38>
     ef2:	88 23       	and	r24, r24
     ef4:	61 f0       	breq	.+24     	; 0xf0e <timer0OutputConfig+0x48>
     ef6:	81 30       	cpi	r24, 0x01	; 1
     ef8:	69 f4       	brne	.+26     	; 0xf14 <timer0OutputConfig+0x4e>
			case TIMER_PORT_NORMAL:				break;
			case TIMER_PORT_TOGGLE_ON_COMPARE:	reg |= (1 << COM0B0);	break;
     efa:	90 61       	ori	r25, 0x10	; 16
     efc:	08 c0       	rjmp	.+16     	; 0xf0e <timer0OutputConfig+0x48>
			default:							return RESULT_PORT_VALUE_UNSUPPORTED;	break;
		}
	}
	if(compB != TIMER_PORT_NO_CHANGE){
		reg &= ~(0x03 << COM0B0);
		switch(compA){
     efe:	83 30       	cpi	r24, 0x03	; 3
     f00:	29 f0       	breq	.+10     	; 0xf0c <timer0OutputConfig+0x46>
     f02:	8f 3f       	cpi	r24, 0xFF	; 255
     f04:	21 f0       	breq	.+8      	; 0xf0e <timer0OutputConfig+0x48>
     f06:	06 c0       	rjmp	.+12     	; 0xf14 <timer0OutputConfig+0x4e>
			case TIMER_PORT_NORMAL:				break;
			case TIMER_PORT_TOGGLE_ON_COMPARE:	reg |= (1 << COM0B0);	break;
			case TIMER_PORT_CLEAR_ON_COMPARE:	reg |= (2 << COM0B0);	break;
     f08:	90 62       	ori	r25, 0x20	; 32
     f0a:	01 c0       	rjmp	.+2      	; 0xf0e <timer0OutputConfig+0x48>
			case TIMER_PORT_SET_ON_COMPARE:		reg |= (3 << COM0B0);	break;
     f0c:	90 63       	ori	r25, 0x30	; 48
			case TIMER_PORT_NO_CHANGE:			break;
			default:							return RESULT_PORT_VALUE_UNSUPPORTED;	break;
		}
	}
	TCCR0A = reg;
     f0e:	94 bd       	out	0x24, r25	; 36
	return RESULT_OK;
     f10:	80 e0       	ldi	r24, 0x00	; 0
     f12:	08 95       	ret
			case TIMER_PORT_NORMAL:				break;
			case TIMER_PORT_TOGGLE_ON_COMPARE:	reg |= (1 << COM0B0);	break;
			case TIMER_PORT_CLEAR_ON_COMPARE:	reg |= (2 << COM0B0);	break;
			case TIMER_PORT_SET_ON_COMPARE:		reg |= (3 << COM0B0);	break;
			case TIMER_PORT_NO_CHANGE:			break;
			default:							return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     f14:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	TCCR0A = reg;
	return RESULT_OK;
}
     f16:	08 95       	ret

00000f18 <timer0ActivateOverflowInterrupt>:
 * Activates the timer0 overflow interrupt
 * -------------------------------------------------------------------------- */

void timer0ActivateOverflowInterrupt(void)
{
	setBit(TIMSK0, TOIE0);
     f18:	ee e6       	ldi	r30, 0x6E	; 110
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	80 81       	ld	r24, Z
     f1e:	81 60       	ori	r24, 0x01	; 1
     f20:	80 83       	st	Z, r24
     f22:	08 95       	ret

00000f24 <timer0DeactivateOverflowInterrupt>:
 * Deactivates the timer0 overflow interrupt
 * -------------------------------------------------------------------------- */

void timer0DeactivateOverflowInterrupt(void)
{
	clrBit(TIMSK0, TOIE0);
     f24:	ee e6       	ldi	r30, 0x6E	; 110
     f26:	f0 e0       	ldi	r31, 0x00	; 0
     f28:	80 81       	ld	r24, Z
     f2a:	8e 7f       	andi	r24, 0xFE	; 254
     f2c:	80 83       	st	Z, r24
     f2e:	08 95       	ret

00000f30 <timer0ClearOverflowInterruptRequest>:
 * Clears the timer0 overflow interrupt request
 * -------------------------------------------------------------------------- */

void timer0ClearOverflowInterruptRequest(void)
{
	setBit(TIFR0, TOV0);
     f30:	a8 9a       	sbi	0x15, 0	; 21
     f32:	08 95       	ret

00000f34 <timer0ActivateCompareAInterrupt>:
 * Activates the timer0 compare A interrupt
 * -------------------------------------------------------------------------- */

void timer0ActivateCompareAInterrupt(void)
{
	setBit(TIMSK0, OCIE0A);
     f34:	ee e6       	ldi	r30, 0x6E	; 110
     f36:	f0 e0       	ldi	r31, 0x00	; 0
     f38:	80 81       	ld	r24, Z
     f3a:	82 60       	ori	r24, 0x02	; 2
     f3c:	80 83       	st	Z, r24
     f3e:	08 95       	ret

00000f40 <timer0DeactivateCompareAInterrupt>:
 * Deactivates the timer0 compare A interrupt
 * -------------------------------------------------------------------------- */

void timer0DeactivateCompareAInterrupt(void)
{
	clrBit(TIMSK0, OCIE0A);
     f40:	ee e6       	ldi	r30, 0x6E	; 110
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	80 81       	ld	r24, Z
     f46:	8d 7f       	andi	r24, 0xFD	; 253
     f48:	80 83       	st	Z, r24
     f4a:	08 95       	ret

00000f4c <timer0ClearCompareAInterruptRequest>:
 * Clears the timer0 compare A interrupt request
 * -------------------------------------------------------------------------- */

void timer0ClearCompareAInterruptRequest(void)
{
	setBit(TIFR0, OCF0A);
     f4c:	a9 9a       	sbi	0x15, 1	; 21
     f4e:	08 95       	ret

00000f50 <timer0ActivateCompareBInterrupt>:
 * Activates the timer0 compare B interrupt
 * -------------------------------------------------------------------------- */

void timer0ActivateCompareBInterrupt(void)
{
	setBit(TIMSK0, OCIE0B);
     f50:	ee e6       	ldi	r30, 0x6E	; 110
     f52:	f0 e0       	ldi	r31, 0x00	; 0
     f54:	80 81       	ld	r24, Z
     f56:	84 60       	ori	r24, 0x04	; 4
     f58:	80 83       	st	Z, r24
     f5a:	08 95       	ret

00000f5c <timer0DeactivateCompareBInterrupt>:
 * Deactivates the timer0 compare B interrupt
 * -------------------------------------------------------------------------- */

void timer0DeactivateCompareBInterrupt(void)
{
	clrBit(TIMSK0, OCIE0B);
     f5c:	ee e6       	ldi	r30, 0x6E	; 110
     f5e:	f0 e0       	ldi	r31, 0x00	; 0
     f60:	80 81       	ld	r24, Z
     f62:	8b 7f       	andi	r24, 0xFB	; 251
     f64:	80 83       	st	Z, r24
     f66:	08 95       	ret

00000f68 <timer0ClearCompareBInterruptRequest>:
 * Clears the timer0 compare B interrupt request
 * -------------------------------------------------------------------------- */

void timer0ClearCompareBInterruptRequest(void)
{
	setBit(TIFR0, OCF0B);
     f68:	aa 9a       	sbi	0x15, 2	; 21
     f6a:	08 95       	ret

00000f6c <timer0ForceCompareA>:
 * Forces a comparison on the output compare A of the timer0
 * -------------------------------------------------------------------------- */

void timer0ForceCompareA(void)
{
	setBit(TCCR0B, FOC0A);
     f6c:	85 b5       	in	r24, 0x25	; 37
     f6e:	80 68       	ori	r24, 0x80	; 128
     f70:	85 bd       	out	0x25, r24	; 37
     f72:	08 95       	ret

00000f74 <timer0ForceCompareB>:
 * Forces a comparison on the output compare B of the timer0
 * -------------------------------------------------------------------------- */

void timer0ForceCompareB(void)
{
	setBit(TCCR0B, FOC0B);
     f74:	85 b5       	in	r24, 0x25	; 37
     f76:	80 64       	ori	r24, 0x40	; 64
     f78:	85 bd       	out	0x25, r24	; 37
     f7a:	08 95       	ret

00000f7c <timer0SetCounterValue>:
 * Sets the timer0 counter value
 * -------------------------------------------------------------------------- */

void timer0SetCounterValue(uint8 value)
{
	TCNT0 = value;
     f7c:	86 bd       	out	0x26, r24	; 38
     f7e:	08 95       	ret

00000f80 <timer0GetCounterValue>:
 * Gets the timer0 counter value
 * -------------------------------------------------------------------------- */

uint8 timer0GetCounterValue(void)
{
	return TCNT0;
     f80:	86 b5       	in	r24, 0x26	; 38
}
     f82:	08 95       	ret

00000f84 <timer0SetCompareAValue>:
 * Sets the timer0 compare A value
 * -------------------------------------------------------------------------- */

void timer0SetCompareAValue(uint8 value)
{
	OCR0A = value;
     f84:	87 bd       	out	0x27, r24	; 39
     f86:	08 95       	ret

00000f88 <timer0GetCompareAValue>:
 * Gets the timer0 compare A value
 * -------------------------------------------------------------------------- */

uint8 timer0GetCompareAValue(void)
{
	return OCR0A;
     f88:	87 b5       	in	r24, 0x27	; 39
}
     f8a:	08 95       	ret

00000f8c <timer0SetCompareBValue>:
 * Sets the timer0 compare B value
 * -------------------------------------------------------------------------- */

void timer0SetCompareBValue(uint8 value)
{
	OCR0B = value;
     f8c:	88 bd       	out	0x28, r24	; 40
     f8e:	08 95       	ret

00000f90 <timer0GetCompareBValue>:
 * Gets the timer0 compare B value
 * -------------------------------------------------------------------------- */

uint8 timer0GetCompareBValue(void)
{
	return OCR0B;
     f90:	88 b5       	in	r24, 0x28	; 40
}
     f92:	08 95       	ret

00000f94 <timer1Config>:
 * Configures the timer1 mode and prescaler
 * -------------------------------------------------------------------------- */

resultValue_t timer1Config(timerModeB_t mode, timerPrescalerValueA_t prescaler)
{
	uint8 reg1 = TCCR1A;
     f94:	20 91 80 00 	lds	r18, 0x0080
	uint8 reg2 = TCCR1B;
     f98:	90 91 81 00 	lds	r25, 0x0081

	if(prescaler != TIMER_A_PRESCALER_NO_CHANGE){
     f9c:	6f 3f       	cpi	r22, 0xFF	; 255
     f9e:	11 f0       	breq	.+4      	; 0xfa4 <timer1Config+0x10>
		reg2 &= ~(0x07 << CS10);
     fa0:	98 7f       	andi	r25, 0xF8	; 248
		reg2 |= prescaler;
     fa2:	96 2b       	or	r25, r22
	}

	if(mode != TIMER_B_MODE_NO_CHANGE){
     fa4:	8f 3f       	cpi	r24, 0xFF	; 255
     fa6:	69 f0       	breq	.+26     	; 0xfc2 <timer1Config+0x2e>
		if(isBitSet(mode, 3))
     fa8:	83 ff       	sbrs	r24, 3
     faa:	02 c0       	rjmp	.+4      	; 0xfb0 <timer1Config+0x1c>
			setBit(reg2, WGM13);
     fac:	90 61       	ori	r25, 0x10	; 16
     fae:	01 c0       	rjmp	.+2      	; 0xfb2 <timer1Config+0x1e>
		else
			clrBit(reg2, WGM13);
     fb0:	9f 7e       	andi	r25, 0xEF	; 239
		if(isBitSet(mode, 2))
     fb2:	82 ff       	sbrs	r24, 2
     fb4:	02 c0       	rjmp	.+4      	; 0xfba <timer1Config+0x26>
			setBit(reg2, WGM12);
     fb6:	98 60       	ori	r25, 0x08	; 8
     fb8:	01 c0       	rjmp	.+2      	; 0xfbc <timer1Config+0x28>
		else
			clrBit(reg2, WGM12);
     fba:	97 7f       	andi	r25, 0xF7	; 247
		reg1 &= ~(0x03 << WGM10);
		reg1 |= (mode & 0x03);
     fbc:	83 70       	andi	r24, 0x03	; 3
			clrBit(reg2, WGM13);
		if(isBitSet(mode, 2))
			setBit(reg2, WGM12);
		else
			clrBit(reg2, WGM12);
		reg1 &= ~(0x03 << WGM10);
     fbe:	2c 7f       	andi	r18, 0xFC	; 252
		reg1 |= (mode & 0x03);
     fc0:	28 2b       	or	r18, r24
	}
	TCCR1A = reg1;
     fc2:	20 93 80 00 	sts	0x0080, r18
	TCCR1B = reg2;
     fc6:	90 93 81 00 	sts	0x0081, r25

	return RESULT_OK;
}
     fca:	80 e0       	ldi	r24, 0x00	; 0
     fcc:	08 95       	ret

00000fce <timer1OutputConfig>:
 * Configures the timer1 compare outputs
 * -------------------------------------------------------------------------- */

resultValue_t timer1OutputConfig(timerOutput_t compA, timerOutput_t compB)
{
	uint8 aux8 = TCCR1A;
     fce:	20 91 80 00 	lds	r18, 0x0080

	if(compA != TIMER_PORT_NO_CHANGE){
     fd2:	8f 3f       	cpi	r24, 0xFF	; 255
     fd4:	31 f0       	breq	.+12     	; 0xfe2 <timer1OutputConfig+0x14>
		aux8 &= ~(0x03 << COM1A0);
		aux8 |= (compA << COM1A0); 
     fd6:	30 e4       	ldi	r19, 0x40	; 64
     fd8:	83 9f       	mul	r24, r19
     fda:	c0 01       	movw	r24, r0
     fdc:	11 24       	eor	r1, r1
resultValue_t timer1OutputConfig(timerOutput_t compA, timerOutput_t compB)
{
	uint8 aux8 = TCCR1A;

	if(compA != TIMER_PORT_NO_CHANGE){
		aux8 &= ~(0x03 << COM1A0);
     fde:	2f 73       	andi	r18, 0x3F	; 63
		aux8 |= (compA << COM1A0); 
     fe0:	28 2b       	or	r18, r24
	}
	if(compB != TIMER_PORT_NO_CHANGE){
     fe2:	6f 3f       	cpi	r22, 0xFF	; 255
     fe4:	31 f0       	breq	.+12     	; 0xff2 <timer1OutputConfig+0x24>
		aux8 &= ~(0x03 << COM1B0);
     fe6:	2f 7c       	andi	r18, 0xCF	; 207
		aux8 |= (compB << COM1B0); 
     fe8:	80 e1       	ldi	r24, 0x10	; 16
     fea:	68 9f       	mul	r22, r24
     fec:	b0 01       	movw	r22, r0
     fee:	11 24       	eor	r1, r1
     ff0:	26 2b       	or	r18, r22
	}
	TCCR1A = aux8;
     ff2:	20 93 80 00 	sts	0x0080, r18
	return RESULT_OK;
}
     ff6:	80 e0       	ldi	r24, 0x00	; 0
     ff8:	08 95       	ret

00000ffa <timer1InputCaptureNoiseCancelerConfig>:
 * Configures the noise canceler of input capture of timer1
 * -------------------------------------------------------------------------- */

resultValue_t	timer1InputCaptureNoiseCancelerConfig(timerInputCaptureNoiseCanceler_t mode)
{
	uint8 aux8 = TCCR1B;
     ffa:	e1 e8       	ldi	r30, 0x81	; 129
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	90 81       	ld	r25, Z

	aux8 &= ~(0x03 << ICES1);
    1000:	9f 73       	andi	r25, 0x3F	; 63
	aux8 |= mode;
    1002:	98 2b       	or	r25, r24

	TCCR1B = aux8;
    1004:	90 83       	st	Z, r25
	return RESULT_OK;
}
    1006:	80 e0       	ldi	r24, 0x00	; 0
    1008:	08 95       	ret

0000100a <timer1ActivateOverflowInterrupt>:
 * Activates the timer1 overflow interrupt
 * -------------------------------------------------------------------------- */

resultValue_t timer1ActivateOverflowInterrupt(void)
{
	setBit(TIMSK1, TOIE1);
    100a:	ef e6       	ldi	r30, 0x6F	; 111
    100c:	f0 e0       	ldi	r31, 0x00	; 0
    100e:	80 81       	ld	r24, Z
    1010:	81 60       	ori	r24, 0x01	; 1
    1012:	80 83       	st	Z, r24
	return RESULT_OK;
}
    1014:	80 e0       	ldi	r24, 0x00	; 0
    1016:	08 95       	ret

00001018 <timer1DeactivateOverflowInterrupt>:
 * Deactivates the timer1 overflow interrupt
 * -------------------------------------------------------------------------- */

resultValue_t timer1DeactivateOverflowInterrupt(void)
{
	clrBit(TIMSK1, TOIE1);
    1018:	ef e6       	ldi	r30, 0x6F	; 111
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	80 81       	ld	r24, Z
    101e:	8e 7f       	andi	r24, 0xFE	; 254
    1020:	80 83       	st	Z, r24
	return RESULT_OK;
}
    1022:	80 e0       	ldi	r24, 0x00	; 0
    1024:	08 95       	ret

00001026 <timer1ClearOverflowInterruptRequest>:
 * Clears the timer1 overflow interrupt request
 * -------------------------------------------------------------------------- */

resultValue_t timer1ClearOverflowInterruptRequest(void)
{
	setBit(TIFR1, TOV1);
    1026:	b0 9a       	sbi	0x16, 0	; 22
	return RESULT_OK;
}
    1028:	80 e0       	ldi	r24, 0x00	; 0
    102a:	08 95       	ret

0000102c <timer1ActivateCompareAInterrupt>:
 * Activates the timer1 compare A interrupt
 * -------------------------------------------------------------------------- */

resultValue_t timer1ActivateCompareAInterrupt(void)
{
	setBit(TIMSK1, OCIE1A);
    102c:	ef e6       	ldi	r30, 0x6F	; 111
    102e:	f0 e0       	ldi	r31, 0x00	; 0
    1030:	80 81       	ld	r24, Z
    1032:	82 60       	ori	r24, 0x02	; 2
    1034:	80 83       	st	Z, r24
	return RESULT_OK;
}
    1036:	80 e0       	ldi	r24, 0x00	; 0
    1038:	08 95       	ret

0000103a <timer1DeactivateCompareAInterrupt>:
 * Deactivates the timer1 compare A interrupt
 * -------------------------------------------------------------------------- */

resultValue_t timer1DeactivateCompareAInterrupt(void)
{
	clrBit(TIMSK1, OCIE1A);
    103a:	ef e6       	ldi	r30, 0x6F	; 111
    103c:	f0 e0       	ldi	r31, 0x00	; 0
    103e:	80 81       	ld	r24, Z
    1040:	8d 7f       	andi	r24, 0xFD	; 253
    1042:	80 83       	st	Z, r24
	return RESULT_OK;
}
    1044:	80 e0       	ldi	r24, 0x00	; 0
    1046:	08 95       	ret

00001048 <timer1ClearCompareAInterruptRequest>:
 * Clears the timer1 compare A interrupt request
 * -------------------------------------------------------------------------- */

resultValue_t timer1ClearCompareAInterruptRequest(void)
{
	setBit(TIFR1, OCF1A);
    1048:	b1 9a       	sbi	0x16, 1	; 22
	return RESULT_OK;
}
    104a:	80 e0       	ldi	r24, 0x00	; 0
    104c:	08 95       	ret

0000104e <timer1ActivateCompareBInterrupt>:
 * Activates the timer1 compare B interrupt
 * -------------------------------------------------------------------------- */

resultValue_t timer1ActivateCompareBInterrupt(void)
{
	setBit(TIMSK1, OCIE1B);
    104e:	ef e6       	ldi	r30, 0x6F	; 111
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	80 81       	ld	r24, Z
    1054:	84 60       	ori	r24, 0x04	; 4
    1056:	80 83       	st	Z, r24
	return RESULT_OK;
}
    1058:	80 e0       	ldi	r24, 0x00	; 0
    105a:	08 95       	ret

0000105c <timer1DeactivateCompareBInterrupt>:
 * Deactivates the timer1 compare B interrupt
 * -------------------------------------------------------------------------- */

resultValue_t timer1DeactivateCompareBInterrupt(void)
{
	clrBit(TIMSK1, OCIE1B);
    105c:	ef e6       	ldi	r30, 0x6F	; 111
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	80 81       	ld	r24, Z
    1062:	8b 7f       	andi	r24, 0xFB	; 251
    1064:	80 83       	st	Z, r24
	return RESULT_OK;
}
    1066:	80 e0       	ldi	r24, 0x00	; 0
    1068:	08 95       	ret

0000106a <timer1ClearCompareBInterruptRequest>:
 * Clears the timer1 compare B interrupt request
 * -------------------------------------------------------------------------- */

resultValue_t timer1ClearCompareBInterruptRequest(void)
{
	setBit(TIFR1, OCF1B);
    106a:	b2 9a       	sbi	0x16, 2	; 22
	return RESULT_OK;
}
    106c:	80 e0       	ldi	r24, 0x00	; 0
    106e:	08 95       	ret

00001070 <timer1ActivateInputCaptureInterrupt>:
 * Activates the timer1 input capture interrupt
 * -------------------------------------------------------------------------- */

resultValue_t timer1ActivateInputCaptureInterrupt(void)
{
	setBit(TIMSK1, ICIE1);
    1070:	ef e6       	ldi	r30, 0x6F	; 111
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	80 81       	ld	r24, Z
    1076:	80 62       	ori	r24, 0x20	; 32
    1078:	80 83       	st	Z, r24
	return RESULT_OK;
}
    107a:	80 e0       	ldi	r24, 0x00	; 0
    107c:	08 95       	ret

0000107e <timer1DeactivateInputCaptureInterrupt>:
 * Deactivates the timer1 input capture interrupt
 * -------------------------------------------------------------------------- */

resultValue_t timer1DeactivateInputCaptureInterrupt(void)
{
	clrBit(TIMSK1, ICIE1);
    107e:	ef e6       	ldi	r30, 0x6F	; 111
    1080:	f0 e0       	ldi	r31, 0x00	; 0
    1082:	80 81       	ld	r24, Z
    1084:	8f 7d       	andi	r24, 0xDF	; 223
    1086:	80 83       	st	Z, r24
	return RESULT_OK;
}
    1088:	80 e0       	ldi	r24, 0x00	; 0
    108a:	08 95       	ret

0000108c <timer1ClearInputCaptureInterruptRequest>:
 * Clears the timer1 input capture interrupt request
 * -------------------------------------------------------------------------- */

resultValue_t timer1ClearInputCaptureInterruptRequest(void)
{
	setBit(TIFR1, ICF1);
    108c:	b5 9a       	sbi	0x16, 5	; 22
	return RESULT_OK;
}
    108e:	80 e0       	ldi	r24, 0x00	; 0
    1090:	08 95       	ret

00001092 <timer1ForceCompareA>:
 * Forces a comparison on the output compare A of the timer1
 * -------------------------------------------------------------------------- */

resultValue_t timer1ForceCompareA(void)
{
	setBit(TCCR1C, FOC1A);
    1092:	e2 e8       	ldi	r30, 0x82	; 130
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	80 81       	ld	r24, Z
    1098:	80 68       	ori	r24, 0x80	; 128
    109a:	80 83       	st	Z, r24
	return RESULT_OK;
}
    109c:	80 e0       	ldi	r24, 0x00	; 0
    109e:	08 95       	ret

000010a0 <timer1ForceCompareB>:
 * Forces a comparison on the output compare B of the timer1
 * -------------------------------------------------------------------------- */

resultValue_t timer1ForceCompareB(void)
{
	setBit(TCCR1C, FOC1B);
    10a0:	e2 e8       	ldi	r30, 0x82	; 130
    10a2:	f0 e0       	ldi	r31, 0x00	; 0
    10a4:	80 81       	ld	r24, Z
    10a6:	80 64       	ori	r24, 0x40	; 64
    10a8:	80 83       	st	Z, r24
	return RESULT_OK;
}
    10aa:	80 e0       	ldi	r24, 0x00	; 0
    10ac:	08 95       	ret

000010ae <timer1SetCounterValue>:
 * Sets the timer1 counter value
 * -------------------------------------------------------------------------- */

resultValue_t timer1SetCounterValue(uint16 value)
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    10ae:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    10b0:	f8 94       	cli
		TCNT1 = value;
    10b2:	90 93 85 00 	sts	0x0085, r25
    10b6:	80 93 84 00 	sts	0x0084, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    10ba:	2f bf       	out	0x3f, r18	; 63
	}
	return RESULT_OK;
}
    10bc:	80 e0       	ldi	r24, 0x00	; 0
    10be:	08 95       	ret

000010c0 <timer1GetCounterValue>:
 * Gets the timer1 counter value
 * -------------------------------------------------------------------------- */

uint16 timer1GetCounterValue(void)
{
	return TCNT1;
    10c0:	80 91 84 00 	lds	r24, 0x0084
    10c4:	90 91 85 00 	lds	r25, 0x0085
}
    10c8:	08 95       	ret

000010ca <timer1SetCompareAValue>:
 * Sets the timer1 compare A value
 * -------------------------------------------------------------------------- */

resultValue_t timer1SetCompareAValue(uint16 value)
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    10ca:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    10cc:	f8 94       	cli
		OCR1A = value;
    10ce:	90 93 89 00 	sts	0x0089, r25
    10d2:	80 93 88 00 	sts	0x0088, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    10d6:	2f bf       	out	0x3f, r18	; 63
	}
	return RESULT_OK;
}
    10d8:	80 e0       	ldi	r24, 0x00	; 0
    10da:	08 95       	ret

000010dc <timer1GetCompareAValue>:
 * Gets the timer1 compare A value
 * -------------------------------------------------------------------------- */

uint16 timer1GetCompareAValue(void)
{
	return OCR1A;
    10dc:	80 91 88 00 	lds	r24, 0x0088
    10e0:	90 91 89 00 	lds	r25, 0x0089
}
    10e4:	08 95       	ret

000010e6 <timer1SetCompareBValue>:
 * Sets the timer1 compare B value
 * -------------------------------------------------------------------------- */

resultValue_t timer1SetCompareBValue(uint16 value)
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    10e6:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    10e8:	f8 94       	cli
		OCR1B = value;
    10ea:	90 93 8b 00 	sts	0x008B, r25
    10ee:	80 93 8a 00 	sts	0x008A, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    10f2:	2f bf       	out	0x3f, r18	; 63
	}
	return RESULT_OK;
}
    10f4:	80 e0       	ldi	r24, 0x00	; 0
    10f6:	08 95       	ret

000010f8 <timer1GetCompareBValue>:
 * Gets the timer1 compare B value
 * -------------------------------------------------------------------------- */

uint16 timer1GetCompareBValue(void)
{
	return OCR1B;
    10f8:	80 91 8a 00 	lds	r24, 0x008A
    10fc:	90 91 8b 00 	lds	r25, 0x008B
}
    1100:	08 95       	ret

00001102 <timer1SetInputCaptureValue>:
 * Sets the timer1 input capture value
 * -------------------------------------------------------------------------- */

resultValue_t timer1SetInputCaptureValue(uint16 value)
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    1102:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1104:	f8 94       	cli
		ICR1 = value;
    1106:	90 93 87 00 	sts	0x0087, r25
    110a:	80 93 86 00 	sts	0x0086, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    110e:	2f bf       	out	0x3f, r18	; 63
	}
	return RESULT_OK;
}
    1110:	80 e0       	ldi	r24, 0x00	; 0
    1112:	08 95       	ret

00001114 <timer1GetInputCaptureValue>:
 * Gets the timer1 input capture value
 * -------------------------------------------------------------------------- */

uint16 timer1GetInputCaptureValue(void)
{
	return ICR1;
    1114:	80 91 86 00 	lds	r24, 0x0086
    1118:	90 91 87 00 	lds	r25, 0x0087
}
    111c:	08 95       	ret

0000111e <timer2Config>:
 * Configures the timer2 mode and prescaler
 * -------------------------------------------------------------------------- */

resultValue_t timer2Config(timerModeA_t mode, timerPrescalerValueB_t prescaler)
{
	uint8 reg1 = TCCR2A;
    111e:	20 91 b0 00 	lds	r18, 0x00B0
	uint8 reg2 = TCCR2B;
    1122:	90 91 b1 00 	lds	r25, 0x00B1

	if(prescaler != TIMER_B_PRESCALER_NO_CHANGE){
    1126:	6f 3f       	cpi	r22, 0xFF	; 255
    1128:	11 f0       	breq	.+4      	; 0x112e <timer2Config+0x10>
		reg2 &= ~(0x07 << CS20);
    112a:	98 7f       	andi	r25, 0xF8	; 248
		reg2 |= prescaler;
    112c:	96 2b       	or	r25, r22
	}

	if(mode != TIMER_A_MODE_NO_CHANGE){
    112e:	8f 3f       	cpi	r24, 0xFF	; 255
    1130:	41 f0       	breq	.+16     	; 0x1142 <timer2Config+0x24>
		if(isBitSet(mode, 2))
    1132:	82 ff       	sbrs	r24, 2
    1134:	02 c0       	rjmp	.+4      	; 0x113a <timer2Config+0x1c>
			setBit(reg2, WGM22);
    1136:	98 60       	ori	r25, 0x08	; 8
    1138:	01 c0       	rjmp	.+2      	; 0x113c <timer2Config+0x1e>
		else
			clrBit(reg2, WGM22);
    113a:	97 7f       	andi	r25, 0xF7	; 247
		reg1 &= ~(0x03 << WGM20);
		reg1 |= (mode & 0x03);
    113c:	83 70       	andi	r24, 0x03	; 3
	if(mode != TIMER_A_MODE_NO_CHANGE){
		if(isBitSet(mode, 2))
			setBit(reg2, WGM22);
		else
			clrBit(reg2, WGM22);
		reg1 &= ~(0x03 << WGM20);
    113e:	2c 7f       	andi	r18, 0xFC	; 252
		reg1 |= (mode & 0x03);
    1140:	28 2b       	or	r18, r24
	}
	TCCR2A = reg1;
    1142:	20 93 b0 00 	sts	0x00B0, r18
	TCCR2B = reg2;
    1146:	90 93 b1 00 	sts	0x00B1, r25

	return RESULT_OK;
}
    114a:	80 e0       	ldi	r24, 0x00	; 0
    114c:	08 95       	ret

0000114e <timer2OutputConfig>:
 * Configures the timer2 compare outputs
 * -------------------------------------------------------------------------- */

resultValue_t timer2OutputConfig(timerOutput_t compA, timerOutput_t compB)
{
	uint8 aux8 = TCCR2A;
    114e:	20 91 b0 00 	lds	r18, 0x00B0

	if(compA != TIMER_PORT_NO_CHANGE){
    1152:	8f 3f       	cpi	r24, 0xFF	; 255
    1154:	31 f0       	breq	.+12     	; 0x1162 <timer2OutputConfig+0x14>
		aux8 &= ~(0x03 << COM2A0);
		aux8 |= (compA << COM2A0); 
    1156:	30 e4       	ldi	r19, 0x40	; 64
    1158:	83 9f       	mul	r24, r19
    115a:	c0 01       	movw	r24, r0
    115c:	11 24       	eor	r1, r1
resultValue_t timer2OutputConfig(timerOutput_t compA, timerOutput_t compB)
{
	uint8 aux8 = TCCR2A;

	if(compA != TIMER_PORT_NO_CHANGE){
		aux8 &= ~(0x03 << COM2A0);
    115e:	2f 73       	andi	r18, 0x3F	; 63
		aux8 |= (compA << COM2A0); 
    1160:	28 2b       	or	r18, r24
	}
	if(compB != TIMER_PORT_NO_CHANGE){
    1162:	6f 3f       	cpi	r22, 0xFF	; 255
    1164:	31 f0       	breq	.+12     	; 0x1172 <timer2OutputConfig+0x24>
		aux8 &= ~(0x03 << COM2B0);
    1166:	2f 7c       	andi	r18, 0xCF	; 207
		aux8 |= (compB << COM2B0); 
    1168:	80 e1       	ldi	r24, 0x10	; 16
    116a:	68 9f       	mul	r22, r24
    116c:	b0 01       	movw	r22, r0
    116e:	11 24       	eor	r1, r1
    1170:	26 2b       	or	r18, r22
	}
	TCCR2A = aux8;
    1172:	20 93 b0 00 	sts	0x00B0, r18
	return RESULT_OK;
}
    1176:	80 e0       	ldi	r24, 0x00	; 0
    1178:	08 95       	ret

0000117a <timer2ActivateOverflowInterrupt>:
 * Activates the timer2 overflow interrupt
 * -------------------------------------------------------------------------- */

resultValue_t timer2ActivateOverflowInterrupt(void)
{
	setBit(TIMSK2, TOIE2);
    117a:	e0 e7       	ldi	r30, 0x70	; 112
    117c:	f0 e0       	ldi	r31, 0x00	; 0
    117e:	80 81       	ld	r24, Z
    1180:	81 60       	ori	r24, 0x01	; 1
    1182:	80 83       	st	Z, r24
	return RESULT_OK;
}
    1184:	80 e0       	ldi	r24, 0x00	; 0
    1186:	08 95       	ret

00001188 <timer2DeactivateOverflowInterrupt>:
 * Deactivates the timer2 overflow interrupt
 * -------------------------------------------------------------------------- */

resultValue_t timer2DeactivateOverflowInterrupt(void)
{
	clrBit(TIMSK2, TOIE2);
    1188:	e0 e7       	ldi	r30, 0x70	; 112
    118a:	f0 e0       	ldi	r31, 0x00	; 0
    118c:	80 81       	ld	r24, Z
    118e:	8e 7f       	andi	r24, 0xFE	; 254
    1190:	80 83       	st	Z, r24
	return RESULT_OK;
}
    1192:	80 e0       	ldi	r24, 0x00	; 0
    1194:	08 95       	ret

00001196 <timer2ClearOverflowInterruptRequest>:
 * Clears the timer2 overflow interrupt request
 * -------------------------------------------------------------------------- */

resultValue_t timer2ClearOverflowInterruptRequest(void)
{
	setBit(TIFR2, TOV2);
    1196:	b8 9a       	sbi	0x17, 0	; 23
	return RESULT_OK;
}
    1198:	80 e0       	ldi	r24, 0x00	; 0
    119a:	08 95       	ret

0000119c <timer2ActivateCompareAInterrupt>:
 * Activates the timer2 compare A interrupt
 * -------------------------------------------------------------------------- */

resultValue_t timer2ActivateCompareAInterrupt(void)
{
	setBit(TIMSK2, OCIE2A);
    119c:	e0 e7       	ldi	r30, 0x70	; 112
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	80 81       	ld	r24, Z
    11a2:	82 60       	ori	r24, 0x02	; 2
    11a4:	80 83       	st	Z, r24
	return RESULT_OK;
}
    11a6:	80 e0       	ldi	r24, 0x00	; 0
    11a8:	08 95       	ret

000011aa <timer2DeactivateCompareAInterrupt>:
 * Deactivates the timer2 compare A interrupt
 * -------------------------------------------------------------------------- */

resultValue_t timer2DeactivateCompareAInterrupt(void)
{
	clrBit(TIMSK2, OCIE2A);
    11aa:	e0 e7       	ldi	r30, 0x70	; 112
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	80 81       	ld	r24, Z
    11b0:	8d 7f       	andi	r24, 0xFD	; 253
    11b2:	80 83       	st	Z, r24
	return RESULT_OK;
}
    11b4:	80 e0       	ldi	r24, 0x00	; 0
    11b6:	08 95       	ret

000011b8 <timer2ClearCompareAInterruptRequest>:
 * Clears the timer2 compare A interrupt request
 * -------------------------------------------------------------------------- */

resultValue_t timer2ClearCompareAInterruptRequest(void)
{
	setBit(TIFR2, OCF2A);
    11b8:	b9 9a       	sbi	0x17, 1	; 23
	return RESULT_OK;
}
    11ba:	80 e0       	ldi	r24, 0x00	; 0
    11bc:	08 95       	ret

000011be <timer2ActivateCompareBInterrupt>:
 * Activates the timer2 compare B interrupt
 * -------------------------------------------------------------------------- */

resultValue_t timer2ActivateCompareBInterrupt(void)
{
	setBit(TIMSK2, OCIE2B);
    11be:	e0 e7       	ldi	r30, 0x70	; 112
    11c0:	f0 e0       	ldi	r31, 0x00	; 0
    11c2:	80 81       	ld	r24, Z
    11c4:	84 60       	ori	r24, 0x04	; 4
    11c6:	80 83       	st	Z, r24
	return RESULT_OK;
}
    11c8:	80 e0       	ldi	r24, 0x00	; 0
    11ca:	08 95       	ret

000011cc <timer2DeactivateCompareBInterrupt>:
 * Deactivates the timer2 compare B interrupt
 * -------------------------------------------------------------------------- */

resultValue_t timer2DeactivateCompareBInterrupt(void)
{
	clrBit(TIMSK2, OCIE2B);
    11cc:	e0 e7       	ldi	r30, 0x70	; 112
    11ce:	f0 e0       	ldi	r31, 0x00	; 0
    11d0:	80 81       	ld	r24, Z
    11d2:	8b 7f       	andi	r24, 0xFB	; 251
    11d4:	80 83       	st	Z, r24
	return RESULT_OK;
}
    11d6:	80 e0       	ldi	r24, 0x00	; 0
    11d8:	08 95       	ret

000011da <timer2ClearCompareBInterruptRequest>:
 * Clears the timer2 compare B interrupt request
 * -------------------------------------------------------------------------- */

resultValue_t timer2ClearCompareBInterruptRequest(void)
{
	setBit(TIFR2, OCF2B);
    11da:	ba 9a       	sbi	0x17, 2	; 23
	return RESULT_OK;
}
    11dc:	80 e0       	ldi	r24, 0x00	; 0
    11de:	08 95       	ret

000011e0 <timer2ForceCompareA>:
 * Forces a comparison on the output compare A of the timer2
 * -------------------------------------------------------------------------- */

resultValue_t timer2ForceCompareA(void)
{
	setBit(TCCR2B, FOC2A);
    11e0:	e1 eb       	ldi	r30, 0xB1	; 177
    11e2:	f0 e0       	ldi	r31, 0x00	; 0
    11e4:	80 81       	ld	r24, Z
    11e6:	80 68       	ori	r24, 0x80	; 128
    11e8:	80 83       	st	Z, r24
	return RESULT_OK;
}
    11ea:	80 e0       	ldi	r24, 0x00	; 0
    11ec:	08 95       	ret

000011ee <timer2ForceCompareB>:
 * Forces a comparison on the output compare B of the timer2
 * -------------------------------------------------------------------------- */

resultValue_t timer2ForceCompareB(void)
{
	setBit(TCCR2B, FOC2B);
    11ee:	e1 eb       	ldi	r30, 0xB1	; 177
    11f0:	f0 e0       	ldi	r31, 0x00	; 0
    11f2:	80 81       	ld	r24, Z
    11f4:	80 64       	ori	r24, 0x40	; 64
    11f6:	80 83       	st	Z, r24
	return RESULT_OK;
}
    11f8:	80 e0       	ldi	r24, 0x00	; 0
    11fa:	08 95       	ret

000011fc <timer2SetCounterValue>:
 * Sets the timer2 counter value
 * -------------------------------------------------------------------------- */

resultValue_t timer2SetCounterValue(uint8 value)
{
	TCNT2 = value;
    11fc:	80 93 b2 00 	sts	0x00B2, r24
	return RESULT_OK;
}
    1200:	80 e0       	ldi	r24, 0x00	; 0
    1202:	08 95       	ret

00001204 <timer2GetCounterValue>:
 * Gets the timer2 counter value
 * -------------------------------------------------------------------------- */

uint8 timer2GetCounterValue(void)
{
	return TCNT2;
    1204:	80 91 b2 00 	lds	r24, 0x00B2
}
    1208:	08 95       	ret

0000120a <timer2SetCompareAValue>:
 * Sets the timer2 compare A value
 * -------------------------------------------------------------------------- */

resultValue_t timer2SetCompareAValue(uint8 value)
{
	OCR2A = value;
    120a:	80 93 b3 00 	sts	0x00B3, r24
	return RESULT_OK;
}
    120e:	80 e0       	ldi	r24, 0x00	; 0
    1210:	08 95       	ret

00001212 <timer2GetCompareAValue>:
 * Gets the timer2 compare A value
 * -------------------------------------------------------------------------- */

uint8 timer2GetCompareAValue(void)
{
	return OCR2A;
    1212:	80 91 b3 00 	lds	r24, 0x00B3
}
    1216:	08 95       	ret

00001218 <timer2SetCompareBValue>:
 * Sets the timer2 compare B value
 * -------------------------------------------------------------------------- */

resultValue_t timer2SetCompareBValue(uint8 value)
{
	OCR2B = value;
    1218:	80 93 b4 00 	sts	0x00B4, r24
	return RESULT_OK;
}
    121c:	80 e0       	ldi	r24, 0x00	; 0
    121e:	08 95       	ret

00001220 <timer2GetCompareBValue>:
 * Gets the timer2 compare B value
 * -------------------------------------------------------------------------- */

uint8 timer2GetCompareBValue(void)
{
	return OCR2B;
    1220:	80 91 b4 00 	lds	r24, 0x00B4
}
    1224:	08 95       	ret

00001226 <adcConfig>:

resultValue_t adcConfig(adcMode_t mode, adcReference_t reference, adcPrescaler_t  prescaler)
{
	uint8 reg = 0;

	if(reference != ADC_REFERENCE_NO_CHANGE){
    1226:	6f 3f       	cpi	r22, 0xFF	; 255
    1228:	51 f0       	breq	.+20     	; 0x123e <adcConfig+0x18>
		reg = ADMUX;
    122a:	90 91 7c 00 	lds	r25, 0x007C
		reg &= ~(0x03 << REFS0);
		reg |= reference << REFS0;
    122e:	20 e4       	ldi	r18, 0x40	; 64
    1230:	62 9f       	mul	r22, r18
    1232:	b0 01       	movw	r22, r0
    1234:	11 24       	eor	r1, r1
{
	uint8 reg = 0;

	if(reference != ADC_REFERENCE_NO_CHANGE){
		reg = ADMUX;
		reg &= ~(0x03 << REFS0);
    1236:	9f 73       	andi	r25, 0x3F	; 63
		reg |= reference << REFS0;
    1238:	96 2b       	or	r25, r22
		ADMUX = reg;
    123a:	90 93 7c 00 	sts	0x007C, r25
	}

	if(prescaler != ADC_PRESCALER_NO_CHANGE){
    123e:	4f 3f       	cpi	r20, 0xFF	; 255
    1240:	31 f0       	breq	.+12     	; 0x124e <adcConfig+0x28>
		reg = ADCSRA;
    1242:	90 91 7a 00 	lds	r25, 0x007A
		reg &= ~(0x07 << ADPS0);
    1246:	98 7f       	andi	r25, 0xF8	; 248
		reg |= prescaler << ADPS0;
    1248:	94 2b       	or	r25, r20
		ADCSRA = reg;
    124a:	90 93 7a 00 	sts	0x007A, r25
	}

	if(mode != ADC_MODE_NO_CHANGE){
    124e:	8f 3f       	cpi	r24, 0xFF	; 255
    1250:	39 f1       	breq	.+78     	; 0x12a0 <adcConfig+0x7a>
		if(mode == ADC_MODE_SINGLE_CONVERSION)
    1252:	81 11       	cpse	r24, r1
    1254:	04 c0       	rjmp	.+8      	; 0x125e <adcConfig+0x38>
			clrBit(ADCSRA, ADATE);
    1256:	80 91 7a 00 	lds	r24, 0x007A
    125a:	8f 7d       	andi	r24, 0xDF	; 223
    125c:	1f c0       	rjmp	.+62     	; 0x129c <adcConfig+0x76>
		else{
			reg = ADCSRB;
    125e:	20 91 7b 00 	lds	r18, 0x007B
			reg &= ~(0x07 << ADTS0);
    1262:	28 7f       	andi	r18, 0xF8	; 248
			switch(mode){
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	fc 01       	movw	r30, r24
    1268:	32 97       	sbiw	r30, 0x02	; 2
    126a:	e7 30       	cpi	r30, 0x07	; 7
    126c:	f1 05       	cpc	r31, r1
    126e:	d0 f4       	brcc	.+52     	; 0x12a4 <adcConfig+0x7e>
    1270:	e3 5a       	subi	r30, 0xA3	; 163
    1272:	ff 4f       	sbci	r31, 0xFF	; 255
    1274:	0c 94 f8 0f 	jmp	0x1ff0	; 0x1ff0 <__tablejump2__>
				case ADC_MODE_AUTO_ANALOG_COMP:		reg |= (1 << ADTS0);	break;
    1278:	21 60       	ori	r18, 0x01	; 1
    127a:	0b c0       	rjmp	.+22     	; 0x1292 <adcConfig+0x6c>
				case ADC_MODE_AUTO_INT0:			reg |= (2 << ADTS0);	break;
    127c:	22 60       	ori	r18, 0x02	; 2
    127e:	09 c0       	rjmp	.+18     	; 0x1292 <adcConfig+0x6c>
				case ADC_MODE_AUTO_TIMER0_COMPA:	reg |= (3 << ADTS0);	break;
    1280:	23 60       	ori	r18, 0x03	; 3
    1282:	07 c0       	rjmp	.+14     	; 0x1292 <adcConfig+0x6c>
				case ADC_MODE_AUTO_TIMER0_OVERFLOW:	reg |= (4 << ADTS0);	break;
    1284:	24 60       	ori	r18, 0x04	; 4
    1286:	05 c0       	rjmp	.+10     	; 0x1292 <adcConfig+0x6c>
				case ADC_MODE_AUTO_TIMER1_COMPB:	reg |= (5 << ADTS0);	break;
    1288:	25 60       	ori	r18, 0x05	; 5
    128a:	03 c0       	rjmp	.+6      	; 0x1292 <adcConfig+0x6c>
				case ADC_MODE_AUTO_TIMER1_OVERFLOW:	reg |= (6 << ADTS0);	break;
    128c:	26 60       	ori	r18, 0x06	; 6
    128e:	01 c0       	rjmp	.+2      	; 0x1292 <adcConfig+0x6c>
				case ADC_MODE_AUTO_TIMER1_CAPTURE:	reg |= (7 << ADTS0);	break;
    1290:	27 60       	ori	r18, 0x07	; 7
				default:							return RESULT_UNSUPPORTED_VALUE;	break;
			}
			ADCSRB = reg;
    1292:	20 93 7b 00 	sts	0x007B, r18
			setBit(ADCSRA, ADATE);
    1296:	80 91 7a 00 	lds	r24, 0x007A
    129a:	80 62       	ori	r24, 0x20	; 32
    129c:	80 93 7a 00 	sts	0x007A, r24
		}
	}

	return RESULT_OK;
    12a0:	80 e0       	ldi	r24, 0x00	; 0
    12a2:	08 95       	ret
				case ADC_MODE_AUTO_TIMER0_COMPA:	reg |= (3 << ADTS0);	break;
				case ADC_MODE_AUTO_TIMER0_OVERFLOW:	reg |= (4 << ADTS0);	break;
				case ADC_MODE_AUTO_TIMER1_COMPB:	reg |= (5 << ADTS0);	break;
				case ADC_MODE_AUTO_TIMER1_OVERFLOW:	reg |= (6 << ADTS0);	break;
				case ADC_MODE_AUTO_TIMER1_CAPTURE:	reg |= (7 << ADTS0);	break;
				default:							return RESULT_UNSUPPORTED_VALUE;	break;
    12a4:	87 e0       	ldi	r24, 0x07	; 7
			setBit(ADCSRA, ADATE);
		}
	}

	return RESULT_OK;
 }
    12a6:	08 95       	ret

000012a8 <adcSelectChannel>:
 * Selects the adc channel
 * -------------------------------------------------------------------------- */

resultValue_t adcSelectChannel(adcChannel_t channel)
{
	uint8 reg = ADMUX;
    12a8:	ec e7       	ldi	r30, 0x7C	; 124
    12aa:	f0 e0       	ldi	r31, 0x00	; 0
    12ac:	90 81       	ld	r25, Z

	reg &= ~(0x0F << MUX0);
    12ae:	90 7f       	andi	r25, 0xF0	; 240
	reg |= (channel << MUX0);
    12b0:	98 2b       	or	r25, r24
	ADMUX = reg;
    12b2:	90 83       	st	Z, r25

	return RESULT_OK;
}
    12b4:	80 e0       	ldi	r24, 0x00	; 0
    12b6:	08 95       	ret

000012b8 <adcEnableDigitalInput>:
 * Enable adc digital inputs
 * -------------------------------------------------------------------------- */

resultValue_t adcEnableDigitalInput(uint8 flagInputs)
{
	DIDR0 &= (~flagInputs);
    12b8:	ee e7       	ldi	r30, 0x7E	; 126
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	90 81       	ld	r25, Z
    12be:	80 95       	com	r24
    12c0:	89 23       	and	r24, r25
    12c2:	80 83       	st	Z, r24

	return RESULT_OK;
}
    12c4:	80 e0       	ldi	r24, 0x00	; 0
    12c6:	08 95       	ret

000012c8 <adcDisableDigitalInput>:
 * Enable adc digital inputs
 * -------------------------------------------------------------------------- */

resultValue_t adcDisableDigitalInput(uint8 flagInputs)
{
	DIDR0 |= flagInputs;
    12c8:	ee e7       	ldi	r30, 0x7E	; 126
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	90 81       	ld	r25, Z
    12ce:	98 2b       	or	r25, r24
    12d0:	90 83       	st	Z, r25

	return RESULT_OK;
}
    12d2:	80 e0       	ldi	r24, 0x00	; 0
    12d4:	08 95       	ret

000012d6 <adcDataPresentation>:
 * Sets the adc data presentation
 * -------------------------------------------------------------------------- */

resultValue_t adcDataPresentation(adcDataPresentation_t presentation)
{
	if(presentation == ADC_LEFT_ADJUSTED)
    12d6:	81 11       	cpse	r24, r1
    12d8:	04 c0       	rjmp	.+8      	; 0x12e2 <adcDataPresentation+0xc>
		setBit(ADMUX, ADLAR);
    12da:	80 91 7c 00 	lds	r24, 0x007C
    12de:	80 62       	ori	r24, 0x20	; 32
    12e0:	03 c0       	rjmp	.+6      	; 0x12e8 <adcDataPresentation+0x12>
	else
		clrBit(ADMUX, ADLAR);
    12e2:	80 91 7c 00 	lds	r24, 0x007C
    12e6:	8f 7d       	andi	r24, 0xDF	; 223
    12e8:	80 93 7c 00 	sts	0x007C, r24

	return RESULT_OK;
}
    12ec:	80 e0       	ldi	r24, 0x00	; 0
    12ee:	08 95       	ret

000012f0 <adcEnable>:
 * Enables the adc module
 * -------------------------------------------------------------------------- */

resultValue_t adcEnable(void)
{
	setBit(ADCSRA, ADEN);
    12f0:	ea e7       	ldi	r30, 0x7A	; 122
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	80 81       	ld	r24, Z
    12f6:	80 68       	ori	r24, 0x80	; 128
    12f8:	80 83       	st	Z, r24

	return RESULT_OK;
}
    12fa:	80 e0       	ldi	r24, 0x00	; 0
    12fc:	08 95       	ret

000012fe <adcDisable>:
 * Disables the adc module
 * -------------------------------------------------------------------------- */

resultValue_t adcDisable(void)
{
	clrBit(ADCSRA, ADEN);
    12fe:	ea e7       	ldi	r30, 0x7A	; 122
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	80 81       	ld	r24, Z
    1304:	8f 77       	andi	r24, 0x7F	; 127
    1306:	80 83       	st	Z, r24

	return RESULT_OK;
}
    1308:	80 e0       	ldi	r24, 0x00	; 0
    130a:	08 95       	ret

0000130c <adcClearInterruptRequest>:
 * Clears the adc interrupt request
 * -------------------------------------------------------------------------- */

resultValue_t adcClearInterruptRequest(void)
{
	setBit(ADCSRA, ADIF);
    130c:	ea e7       	ldi	r30, 0x7A	; 122
    130e:	f0 e0       	ldi	r31, 0x00	; 0
    1310:	80 81       	ld	r24, Z
    1312:	80 61       	ori	r24, 0x10	; 16
    1314:	80 83       	st	Z, r24

	return RESULT_OK;
}
    1316:	80 e0       	ldi	r24, 0x00	; 0
    1318:	08 95       	ret

0000131a <adcActivateInterrupt>:
 * Enables the adc interrupt
 * -------------------------------------------------------------------------- */

resultValue_t adcActivateInterrupt(void)
{
	setBit(ADCSRA, ADIE);
    131a:	ea e7       	ldi	r30, 0x7A	; 122
    131c:	f0 e0       	ldi	r31, 0x00	; 0
    131e:	80 81       	ld	r24, Z
    1320:	88 60       	ori	r24, 0x08	; 8
    1322:	80 83       	st	Z, r24

	return RESULT_OK;
}
    1324:	80 e0       	ldi	r24, 0x00	; 0
    1326:	08 95       	ret

00001328 <adcDeactivateInterrupt>:
 * Disables the adc interrupt
 * -------------------------------------------------------------------------- */

resultValue_t adcDeactivateInterrupt(void)
{
	clrBit(ADCSRA, ADIE);
    1328:	ea e7       	ldi	r30, 0x7A	; 122
    132a:	f0 e0       	ldi	r31, 0x00	; 0
    132c:	80 81       	ld	r24, Z
    132e:	87 7f       	andi	r24, 0xF7	; 247
    1330:	80 83       	st	Z, r24

	return RESULT_OK;
}
    1332:	80 e0       	ldi	r24, 0x00	; 0
    1334:	08 95       	ret

00001336 <adcStartConversion>:
 * Starts an adc conversion
 * -------------------------------------------------------------------------- */

resultValue_t adcStartConversion(void)
{
	setBit(ADCSRA, ADSC);
    1336:	ea e7       	ldi	r30, 0x7A	; 122
    1338:	f0 e0       	ldi	r31, 0x00	; 0
    133a:	80 81       	ld	r24, Z
    133c:	80 64       	ori	r24, 0x40	; 64
    133e:	80 83       	st	Z, r24

	return RESULT_OK;
}
    1340:	80 e0       	ldi	r24, 0x00	; 0
    1342:	08 95       	ret

00001344 <adcIsBusy>:
 * Returns if an adc conversion is running
 * -------------------------------------------------------------------------- */

bool_t adcIsBusy(void)
{
	return isBitSet(ADCSRA, ADSC);
    1344:	80 91 7a 00 	lds	r24, 0x007A
}
    1348:	86 fb       	bst	r24, 6
    134a:	88 27       	eor	r24, r24
    134c:	80 f9       	bld	r24, 0
    134e:	08 95       	ret

00001350 <adcWaitUntilConversionFinish>:
 * Waits until the current conversion is finished
 * -------------------------------------------------------------------------- */

resultValue_t adcWaitUntilConversionFinish(void)
{
	waitUntilBitIsClear(ADCSRA, ADSC);
    1350:	80 91 7a 00 	lds	r24, 0x007A
    1354:	86 fd       	sbrc	r24, 6
    1356:	fc cf       	rjmp	.-8      	; 0x1350 <adcWaitUntilConversionFinish>
	return RESULT_OK;
}
    1358:	80 e0       	ldi	r24, 0x00	; 0
    135a:	08 95       	ret

0000135c <usartConfig>:
/* -----------------------------------------------------------------------------
 * Configures the USART controller
 * -------------------------------------------------------------------------- */

resultValue_t usartConfig(usartMode_t mode, usartBaudRate_t baudRate, usartDataBits_t dataBits, usartParity_t parity, usartStopBits_t stopBits)
{
    135c:	8f 92       	push	r8
    135e:	9f 92       	push	r9
    1360:	af 92       	push	r10
    1362:	bf 92       	push	r11
    1364:	cf 92       	push	r12
    1366:	df 92       	push	r13
    1368:	ef 92       	push	r14
    136a:	ff 92       	push	r15
    136c:	0f 93       	push	r16
    136e:	4a 01       	movw	r8, r20
    1370:	5b 01       	movw	r10, r22
    1372:	9e 2d       	mov	r25, r14
	uint8 reg1 = UCSR0A;
    1374:	30 91 c0 00 	lds	r19, 0x00C0
	uint8 reg2 = UCSR0B;
    1378:	30 91 c1 00 	lds	r19, 0x00C1
	uint8 reg3 = UCSR0C;
    137c:	30 91 c2 00 	lds	r19, 0x00C2

	// Clear errors
	reg1 &= ~((1 << FE0) | (1 << DOR0) | (1 << UPE0));

	// USART stop bits
	if(stopBits != USART_STOP_BIT_NO_CHANGE){
    1380:	9f 3f       	cpi	r25, 0xFF	; 255
    1382:	19 f0       	breq	.+6      	; 0x138a <usartConfig+0x2e>
		switch(stopBits){
    1384:	92 30       	cpi	r25, 0x02	; 2
    1386:	08 f0       	brcs	.+2      	; 0x138a <usartConfig+0x2e>
    1388:	5f c0       	rjmp	.+190    	; 0x1448 <usartConfig+0xec>
			default:					return RESULT_UNSUPPORTED_VALUE;	break;
		}
	}

	// USART parity bits
	if(parity != USART_PARITY_NO_CHANGE){
    138a:	0f 3f       	cpi	r16, 0xFF	; 255
    138c:	19 f0       	breq	.+6      	; 0x1394 <usartConfig+0x38>
		reg3 &= ~(0x03 << UPM00);
		switch(parity){
    138e:	03 30       	cpi	r16, 0x03	; 3
    1390:	08 f0       	brcs	.+2      	; 0x1394 <usartConfig+0x38>
    1392:	5c c0       	rjmp	.+184    	; 0x144c <usartConfig+0xf0>
			default:					return RESULT_USART_PARITY_UNSUPORTED;	break;
		}
	}

	// USART data bits
	if(dataBits != USART_DATA_BITS_NO_CHANGE){
    1394:	2f 3f       	cpi	r18, 0xFF	; 255
    1396:	19 f0       	breq	.+6      	; 0x139e <usartConfig+0x42>
		clrBit(reg2, UCSZ02);
		reg3 &= ~(0x03 << UCSZ00);
		switch(dataBits){
    1398:	25 30       	cpi	r18, 0x05	; 5
    139a:	08 f0       	brcs	.+2      	; 0x139e <usartConfig+0x42>
    139c:	57 c0       	rjmp	.+174    	; 0x144c <usartConfig+0xf0>
			break;
		}
	}

	// USART mode
	if(mode != USART_MODE_NO_CHANGE){
    139e:	8f 3f       	cpi	r24, 0xFF	; 255
    13a0:	79 f4       	brne	.+30     	; 0x13c0 <usartConfig+0x64>
			reg3 |= (3 << UMSEL00);		// Synchronous SPI Mode
			setBit(reg3, UCPOL0);		// Polarity
			break;
		}
	}else{
		aux8 = (0x03 & (UCSR0C >> UMSEL00));
    13a2:	80 91 c2 00 	lds	r24, 0x00C2
    13a6:	82 95       	swap	r24
    13a8:	86 95       	lsr	r24
    13aa:	86 95       	lsr	r24
    13ac:	83 70       	andi	r24, 0x03	; 3
		switch(aux8){
    13ae:	21 f0       	breq	.+8      	; 0x13b8 <usartConfig+0x5c>
    13b0:	83 30       	cpi	r24, 0x03	; 3
    13b2:	e9 f0       	breq	.+58     	; 0x13ee <usartConfig+0x92>
resultValue_t usartConfig(usartMode_t mode, usartBaudRate_t baudRate, usartDataBits_t dataBits, usartParity_t parity, usartStopBits_t stopBits)
{
	uint8 reg1 = UCSR0A;
	uint8 reg2 = UCSR0B;
	uint8 reg3 = UCSR0C;
	uint8 modeAux = 0;
    13b4:	80 e0       	ldi	r24, 0x00	; 0
    13b6:	04 c0       	rjmp	.+8      	; 0x13c0 <usartConfig+0x64>
		}
	}else{
		aux8 = (0x03 & (UCSR0C >> UMSEL00));
		switch(aux8){
		case 0:	// Asynchronous mode
			if(isBitClr(UCSR0A, U2X0)){	// Single speed
    13b8:	80 91 c0 00 	lds	r24, 0x00C0
    13bc:	86 95       	lsr	r24
    13be:	81 70       	andi	r24, 0x01	; 1
			modeAux = USART_MODE_SYNCHRONOUS_SPI;
			break;
		}
	}

	if(baudRate != USART_BAUD_NO_CHANGE){
    13c0:	9f ef       	ldi	r25, 0xFF	; 255
    13c2:	89 16       	cp	r8, r25
    13c4:	99 06       	cpc	r9, r25
    13c6:	a9 06       	cpc	r10, r25
    13c8:	b9 06       	cpc	r11, r25
    13ca:	09 f4       	brne	.+2      	; 0x13ce <usartConfig+0x72>
    13cc:	41 c0       	rjmp	.+130    	; 0x1450 <usartConfig+0xf4>
		switch(modeAux){
    13ce:	81 30       	cpi	r24, 0x01	; 1
    13d0:	49 f0       	breq	.+18     	; 0x13e4 <usartConfig+0x88>
    13d2:	18 f0       	brcs	.+6      	; 0x13da <usartConfig+0x7e>
    13d4:	84 30       	cpi	r24, 0x04	; 4
    13d6:	89 f0       	breq	.+34     	; 0x13fa <usartConfig+0x9e>
    13d8:	22 c0       	rjmp	.+68     	; 0x141e <usartConfig+0xc2>
		case USART_MODE_ASYNCHRONOUS:
			aux64 = (F_CPU / 16 / baudRate) - 1;
    13da:	60 e4       	ldi	r22, 0x40	; 64
    13dc:	72 e4       	ldi	r23, 0x42	; 66
    13de:	8f e0       	ldi	r24, 0x0F	; 15
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	0f c0       	rjmp	.+30     	; 0x1402 <usartConfig+0xa6>
			break;
		case USART_MODE_ASYNCHRONOUS_DOUBLE_SPEED:
			aux64 = (F_CPU / 8 / baudRate) - 1;
    13e4:	60 e8       	ldi	r22, 0x80	; 128
    13e6:	74 e8       	ldi	r23, 0x84	; 132
    13e8:	8e e1       	ldi	r24, 0x1E	; 30
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	0a c0       	rjmp	.+20     	; 0x1402 <usartConfig+0xa6>
			modeAux = USART_MODE_SYNCHRONOUS_SPI;
			break;
		}
	}

	if(baudRate != USART_BAUD_NO_CHANGE){
    13ee:	8f ef       	ldi	r24, 0xFF	; 255
    13f0:	88 16       	cp	r8, r24
    13f2:	98 06       	cpc	r9, r24
    13f4:	a8 06       	cpc	r10, r24
    13f6:	b8 06       	cpc	r11, r24
    13f8:	59 f1       	breq	.+86     	; 0x1450 <usartConfig+0xf4>
			break;
		case USART_MODE_ASYNCHRONOUS_DOUBLE_SPEED:
			aux64 = (F_CPU / 8 / baudRate) - 1;
			break;
		case USART_MODE_SYNCHRONOUS_SPI:
			aux64 = (F_CPU / 2 / baudRate) - 1;
    13fa:	60 e0       	ldi	r22, 0x00	; 0
    13fc:	72 e1       	ldi	r23, 0x12	; 18
    13fe:	8a e7       	ldi	r24, 0x7A	; 122
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	a5 01       	movw	r20, r10
    1404:	94 01       	movw	r18, r8
    1406:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <__udivmodsi4>
    140a:	21 50       	subi	r18, 0x01	; 1
    140c:	31 09       	sbc	r19, r1
    140e:	41 09       	sbc	r20, r1
    1410:	51 09       	sbc	r21, r1
    1412:	49 01       	movw	r8, r18
    1414:	5a 01       	movw	r10, r20
    1416:	c1 2c       	mov	r12, r1
    1418:	d1 2c       	mov	r13, r1
    141a:	76 01       	movw	r14, r12
			break;
    141c:	08 c0       	rjmp	.+16     	; 0x142e <usartConfig+0xd2>
	uint8 reg1 = UCSR0A;
	uint8 reg2 = UCSR0B;
	uint8 reg3 = UCSR0C;
	uint8 modeAux = 0;
	uint8 aux8 = 0;
	uint64 aux64 = 0;
    141e:	81 2c       	mov	r8, r1
    1420:	91 2c       	mov	r9, r1
    1422:	a1 2c       	mov	r10, r1
    1424:	b1 2c       	mov	r11, r1
    1426:	c1 2c       	mov	r12, r1
    1428:	d1 2c       	mov	r13, r1
    142a:	e1 2c       	mov	r14, r1
    142c:	f1 2c       	mov	r15, r1
			aux64 = (F_CPU / 2 / baudRate) - 1;
			break;
		}
//		if((aux64 > (1.05 * baudRate)) || (aux64 < (0.95 * baudRate)))
//			return RESULT_USART_BAUD_RATE_UNSUPORTED;
		UBRR0H = 0x0F & (aux64 >> 8);
    142e:	94 01       	movw	r18, r8
    1430:	a5 01       	movw	r20, r10
    1432:	b6 01       	movw	r22, r12
    1434:	c7 01       	movw	r24, r14
    1436:	08 e0       	ldi	r16, 0x08	; 8
    1438:	0e 94 00 10 	call	0x2000	; 0x2000 <__lshrdi3>
    143c:	2f 70       	andi	r18, 0x0F	; 15
    143e:	20 93 c5 00 	sts	0x00C5, r18
		UBRR0L = (0xFF & aux64);
    1442:	80 92 c4 00 	sts	0x00C4, r8
    1446:	04 c0       	rjmp	.+8      	; 0x1450 <usartConfig+0xf4>
	// USART stop bits
	if(stopBits != USART_STOP_BIT_NO_CHANGE){
		switch(stopBits){
			case USART_STOP_BIT_SINGLE:	clrBit(reg3, USBS0);				break;
			case USART_STOP_BIT_DOUBLE:	setBit(reg3, USBS0);				break;
			default:					return RESULT_UNSUPPORTED_VALUE;	break;
    1448:	87 e0       	ldi	r24, 0x07	; 7
    144a:	03 c0       	rjmp	.+6      	; 0x1452 <usartConfig+0xf6>
		case USART_DATA_BITS_9:
			setBit(reg2, UCSZ02);
			reg3 |= (0x03 << UCSZ00);
			break;
		default:
			return RESULT_USART_PARITY_UNSUPORTED;
    144c:	85 e0       	ldi	r24, 0x05	; 5
    144e:	01 c0       	rjmp	.+2      	; 0x1452 <usartConfig+0xf6>
//			return RESULT_USART_BAUD_RATE_UNSUPORTED;
		UBRR0H = 0x0F & (aux64 >> 8);
		UBRR0L = (0xFF & aux64);
	}

	return RESULT_OK;
    1450:	80 e0       	ldi	r24, 0x00	; 0
}
    1452:	0f 91       	pop	r16
    1454:	ff 90       	pop	r15
    1456:	ef 90       	pop	r14
    1458:	df 90       	pop	r13
    145a:	cf 90       	pop	r12
    145c:	bf 90       	pop	r11
    145e:	af 90       	pop	r10
    1460:	9f 90       	pop	r9
    1462:	8f 90       	pop	r8
    1464:	08 95       	ret

00001466 <usartEnableReceiver>:
 * Enables USART reception module
 * -------------------------------------------------------------------------- */

resultValue_t usartEnableReceiver(void)
{
	setBit(UCSR0B, RXEN0);
    1466:	e1 ec       	ldi	r30, 0xC1	; 193
    1468:	f0 e0       	ldi	r31, 0x00	; 0
    146a:	80 81       	ld	r24, Z
    146c:	80 61       	ori	r24, 0x10	; 16
    146e:	80 83       	st	Z, r24
	return RESULT_OK;
}
    1470:	80 e0       	ldi	r24, 0x00	; 0
    1472:	08 95       	ret

00001474 <usartDisableReceiver>:
 * Disables USART reception module
 * -------------------------------------------------------------------------- */

resultValue_t usartDisableReceiver(void)
{
	clrBit(UCSR0B, RXEN0);
    1474:	e1 ec       	ldi	r30, 0xC1	; 193
    1476:	f0 e0       	ldi	r31, 0x00	; 0
    1478:	80 81       	ld	r24, Z
    147a:	8f 7e       	andi	r24, 0xEF	; 239
    147c:	80 83       	st	Z, r24
	return RESULT_OK;
}
    147e:	80 e0       	ldi	r24, 0x00	; 0
    1480:	08 95       	ret

00001482 <usartEnableTransmitter>:
 * Enables USART transmission module
 * -------------------------------------------------------------------------- */

resultValue_t usartEnableTransmitter(void)
{
	setBit(UCSR0B, TXEN0);
    1482:	e1 ec       	ldi	r30, 0xC1	; 193
    1484:	f0 e0       	ldi	r31, 0x00	; 0
    1486:	80 81       	ld	r24, Z
    1488:	88 60       	ori	r24, 0x08	; 8
    148a:	80 83       	st	Z, r24
	return RESULT_OK;
}
    148c:	80 e0       	ldi	r24, 0x00	; 0
    148e:	08 95       	ret

00001490 <usartDisableTransmitter>:
 * Disables USART transmission module
 * -------------------------------------------------------------------------- */

resultValue_t usartDisableTransmitter(void)
{
	clrBit(UCSR0B, TXEN0);
    1490:	e1 ec       	ldi	r30, 0xC1	; 193
    1492:	f0 e0       	ldi	r31, 0x00	; 0
    1494:	80 81       	ld	r24, Z
    1496:	87 7f       	andi	r24, 0xF7	; 247
    1498:	80 83       	st	Z, r24
	return RESULT_OK;
}
    149a:	80 e0       	ldi	r24, 0x00	; 0
    149c:	08 95       	ret

0000149e <usartActivateReceptionCompleteInterrupt>:
 * Activates USART reception complete interrupt
 * -------------------------------------------------------------------------- */

resultValue_t usartActivateReceptionCompleteInterrupt(void)
{
	setBit(UCSR0B, RXCIE0);
    149e:	e1 ec       	ldi	r30, 0xC1	; 193
    14a0:	f0 e0       	ldi	r31, 0x00	; 0
    14a2:	80 81       	ld	r24, Z
    14a4:	80 68       	ori	r24, 0x80	; 128
    14a6:	80 83       	st	Z, r24
	return RESULT_OK;
}
    14a8:	80 e0       	ldi	r24, 0x00	; 0
    14aa:	08 95       	ret

000014ac <usartDeactivateReceptionCompleteInterrupt>:
 * Deactivates USART reception complete interrupt
 * -------------------------------------------------------------------------- */

resultValue_t usartDeactivateReceptionCompleteInterrupt(void)
{
	clrBit(UCSR0B, RXCIE0);
    14ac:	e1 ec       	ldi	r30, 0xC1	; 193
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	80 81       	ld	r24, Z
    14b2:	8f 77       	andi	r24, 0x7F	; 127
    14b4:	80 83       	st	Z, r24
	return RESULT_OK;
}
    14b6:	80 e0       	ldi	r24, 0x00	; 0
    14b8:	08 95       	ret

000014ba <usartActivateTransmissionCompleteInterrupt>:
 * Activates USART transmission complete interrupt
 * -------------------------------------------------------------------------- */

resultValue_t usartActivateTransmissionCompleteInterrupt(void)
{
	setBit(UCSR0B, TXCIE0);
    14ba:	e1 ec       	ldi	r30, 0xC1	; 193
    14bc:	f0 e0       	ldi	r31, 0x00	; 0
    14be:	80 81       	ld	r24, Z
    14c0:	80 64       	ori	r24, 0x40	; 64
    14c2:	80 83       	st	Z, r24
	return RESULT_OK;
}
    14c4:	80 e0       	ldi	r24, 0x00	; 0
    14c6:	08 95       	ret

000014c8 <usartDeactivateTransmissionCompleteInterrupt>:
 * Deactivates USART transmission complete interrupt
 * -------------------------------------------------------------------------- */

resultValue_t usartDeactivateTransmissionCompleteInterrupt(void)
{
	clrBit(UCSR0B, TXCIE0);
    14c8:	e1 ec       	ldi	r30, 0xC1	; 193
    14ca:	f0 e0       	ldi	r31, 0x00	; 0
    14cc:	80 81       	ld	r24, Z
    14ce:	8f 7b       	andi	r24, 0xBF	; 191
    14d0:	80 83       	st	Z, r24
	return RESULT_OK;
}
    14d2:	80 e0       	ldi	r24, 0x00	; 0
    14d4:	08 95       	ret

000014d6 <usartActivateBufferEmptyInterrupt>:
 * Activates USART buffer empty interrupt
 * -------------------------------------------------------------------------- */

resultValue_t usartActivateBufferEmptyInterrupt(void)
{
	setBit(UCSR0B, UDRIE0);
    14d6:	e1 ec       	ldi	r30, 0xC1	; 193
    14d8:	f0 e0       	ldi	r31, 0x00	; 0
    14da:	80 81       	ld	r24, Z
    14dc:	80 62       	ori	r24, 0x20	; 32
    14de:	80 83       	st	Z, r24
	return RESULT_OK;
}
    14e0:	80 e0       	ldi	r24, 0x00	; 0
    14e2:	08 95       	ret

000014e4 <usartDeactivateBufferEmptyInterrupt>:
 * Deactivates USART buffer empty interrupt
 * -------------------------------------------------------------------------- */

resultValue_t usartDeactivateBufferEmptyInterrupt(void)
{
	clrBit(UCSR0B, UDRIE0);
    14e4:	e1 ec       	ldi	r30, 0xC1	; 193
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	80 81       	ld	r24, Z
    14ea:	8f 7d       	andi	r24, 0xDF	; 223
    14ec:	80 83       	st	Z, r24
	return RESULT_OK;
}
    14ee:	80 e0       	ldi	r24, 0x00	; 0
    14f0:	08 95       	ret

000014f2 <usartStdio>:
 * Changes the std handlers to usart module
 * -------------------------------------------------------------------------- */

resultValue_t usartStdio(void)
{
	stdin = stdout = stderr = &usartStream;
    14f2:	8a e0       	ldi	r24, 0x0A	; 10
    14f4:	91 e0       	ldi	r25, 0x01	; 1
    14f6:	90 93 7c 01 	sts	0x017C, r25
    14fa:	80 93 7b 01 	sts	0x017B, r24
    14fe:	90 93 7a 01 	sts	0x017A, r25
    1502:	80 93 79 01 	sts	0x0179, r24
    1506:	90 93 78 01 	sts	0x0178, r25
    150a:	80 93 77 01 	sts	0x0177, r24
	return RESULT_OK;
}
    150e:	80 e0       	ldi	r24, 0x00	; 0
    1510:	08 95       	ret

00001512 <usartIsReceptionComplete>:
 * Checks if a reception has been completed
 * -------------------------------------------------------------------------- */

bool_t usartIsReceptionComplete(void)
{
	return isBitSet(UCSR0A, RXC0);
    1512:	80 91 c0 00 	lds	r24, 0x00C0
}
    1516:	88 1f       	adc	r24, r24
    1518:	88 27       	eor	r24, r24
    151a:	88 1f       	adc	r24, r24
    151c:	08 95       	ret

0000151e <usartIsTransmissionComplete>:
 * Checks if a transmission has been completed
 * -------------------------------------------------------------------------- */

bool_t usartIsTransmissionComplete(void)
{
	return isBitSet(UCSR0A, TXC0);
    151e:	80 91 c0 00 	lds	r24, 0x00C0
}
    1522:	86 fb       	bst	r24, 6
    1524:	88 27       	eor	r24, r24
    1526:	80 f9       	bld	r24, 0
    1528:	08 95       	ret

0000152a <usartIsBufferEmpty>:
 * Checks if the buffer is empty
 * -------------------------------------------------------------------------- */

bool_t usartIsBufferEmpty(void)
{
	return isBitSet(UCSR0A, UDRE0);
    152a:	80 91 c0 00 	lds	r24, 0x00C0
}
    152e:	85 fb       	bst	r24, 5
    1530:	88 27       	eor	r24, r24
    1532:	80 f9       	bld	r24, 0
    1534:	08 95       	ret

00001536 <usartTransmitStd>:
 * Transmits data in 5, 6, 7 or 8 bits modes using the USART controller and
 * standard output heandler
 * -------------------------------------------------------------------------- */

resultValue_t usartTransmitStd(int8 data, FILE * stream)
{
    1536:	cf 93       	push	r28
    1538:	c8 2f       	mov	r28, r24
	while(!usartIsBufferEmpty())
    153a:	0e 94 95 0a 	call	0x152a	; 0x152a <usartIsBufferEmpty>
    153e:	88 23       	and	r24, r24
    1540:	e1 f3       	breq	.-8      	; 0x153a <usartTransmitStd+0x4>
		;	// Waits until last transmission ends
	UDR0 = data;
    1542:	c0 93 c6 00 	sts	0x00C6, r28
	return RESULT_OK;
}
    1546:	80 e0       	ldi	r24, 0x00	; 0
    1548:	cf 91       	pop	r28
    154a:	08 95       	ret

0000154c <usartCheckError>:

usartError_t usartCheckError(void)
{
	usartError_t error = 0;

	if(isBitSet(UCSR0A, FE0))
    154c:	80 91 c0 00 	lds	r24, 0x00C0
    1550:	84 fd       	sbrc	r24, 4
    1552:	02 c0       	rjmp	.+4      	; 0x1558 <usartCheckError+0xc>
 * Checks if an error occurred during transmission or reception
 * -------------------------------------------------------------------------- */

usartError_t usartCheckError(void)
{
	usartError_t error = 0;
    1554:	80 e0       	ldi	r24, 0x00	; 0
    1556:	01 c0       	rjmp	.+2      	; 0x155a <usartCheckError+0xe>

	if(isBitSet(UCSR0A, FE0))
		error |= USART_FRAME_ERROR;
    1558:	82 e0       	ldi	r24, 0x02	; 2
	if(isBitSet(UCSR0A, DOR0))
    155a:	90 91 c0 00 	lds	r25, 0x00C0
    155e:	93 fd       	sbrc	r25, 3
		error |= USART_PARITY_ERROR;
    1560:	84 60       	ori	r24, 0x04	; 4
	if(isBitSet(UCSR0A, UPE0))
    1562:	90 91 c0 00 	lds	r25, 0x00C0
    1566:	92 ff       	sbrs	r25, 2
    1568:	02 c0       	rjmp	.+4      	; 0x156e <usartCheckError+0x22>
		error |= USART_BUFFER_OVERFLOW_ERROR;
    156a:	88 60       	ori	r24, 0x08	; 8
    156c:	08 95       	ret

	if(error == 0)
    156e:	81 11       	cpse	r24, r1
    1570:	01 c0       	rjmp	.+2      	; 0x1574 <usartCheckError+0x28>
		return USART_OK;
    1572:	81 e0       	ldi	r24, 0x01	; 1
	return error;
}
    1574:	08 95       	ret

00001576 <usartTransmit>:
/* -----------------------------------------------------------------------------
 * Transmits data in 5, 6, 7 or 8 bits modes using the USART controller
 * -------------------------------------------------------------------------- */

resultValue_t usartTransmit(int8 data)
{
    1576:	cf 93       	push	r28
    1578:	c8 2f       	mov	r28, r24
	while(!usartIsBufferEmpty())
    157a:	0e 94 95 0a 	call	0x152a	; 0x152a <usartIsBufferEmpty>
    157e:	88 23       	and	r24, r24
    1580:	e1 f3       	breq	.-8      	; 0x157a <usartTransmit+0x4>
		;	// Waits until last transmission ends
	UDR0 = data;
    1582:	c0 93 c6 00 	sts	0x00C6, r28
	return RESULT_OK;
}
    1586:	80 e0       	ldi	r24, 0x00	; 0
    1588:	cf 91       	pop	r28
    158a:	08 95       	ret

0000158c <usartTransmit9bits>:
/* -----------------------------------------------------------------------------
 * Transmits data in 9 bits mode using the USART controller
 * -------------------------------------------------------------------------- */

resultValue_t usartTransmit9bits(uint16 data)
{
    158c:	cf 93       	push	r28
    158e:	df 93       	push	r29
    1590:	ec 01       	movw	r28, r24
	uint8 aux;

	while(!usartIsBufferEmpty())
    1592:	0e 94 95 0a 	call	0x152a	; 0x152a <usartIsBufferEmpty>
    1596:	88 23       	and	r24, r24
    1598:	e1 f3       	breq	.-8      	; 0x1592 <usartTransmit9bits+0x6>
		;	// Waits until last transmission ends
	aux = ((data & 0x100) >> 8);
    159a:	ce 01       	movw	r24, r28
    159c:	88 27       	eor	r24, r24
    159e:	91 70       	andi	r25, 0x01	; 1
	if(aux)
		setBit(UCSR0B, TXB80);
    15a0:	80 91 c1 00 	lds	r24, 0x00C1
	uint8 aux;

	while(!usartIsBufferEmpty())
		;	// Waits until last transmission ends
	aux = ((data & 0x100) >> 8);
	if(aux)
    15a4:	99 23       	and	r25, r25
    15a6:	11 f0       	breq	.+4      	; 0x15ac <usartTransmit9bits+0x20>
		setBit(UCSR0B, TXB80);
    15a8:	81 60       	ori	r24, 0x01	; 1
    15aa:	01 c0       	rjmp	.+2      	; 0x15ae <usartTransmit9bits+0x22>
	else
		clrBit(UCSR0B, TXB80);
    15ac:	8e 7f       	andi	r24, 0xFE	; 254
    15ae:	80 93 c1 00 	sts	0x00C1, r24
	UDR0 = (uint8)data;
    15b2:	c0 93 c6 00 	sts	0x00C6, r28
	return RESULT_OK;
}
    15b6:	80 e0       	ldi	r24, 0x00	; 0
    15b8:	df 91       	pop	r29
    15ba:	cf 91       	pop	r28
    15bc:	08 95       	ret

000015be <usartReceive>:
 * Checks if a reception has been completed
 * -------------------------------------------------------------------------- */

bool_t usartIsReceptionComplete(void)
{
	return isBitSet(UCSR0A, RXC0);
    15be:	80 91 c0 00 	lds	r24, 0x00C0

uint8 usartReceive(void)
{
	uint8 status;

	while(!usartIsReceptionComplete())
    15c2:	87 ff       	sbrs	r24, 7
    15c4:	fc cf       	rjmp	.-8      	; 0x15be <usartReceive>
		;	// Waits until last reception ends
	status = UCSR0A;
    15c6:	80 91 c0 00 	lds	r24, 0x00C0
	return UDR0;
    15ca:	80 91 c6 00 	lds	r24, 0x00C6
}
    15ce:	08 95       	ret

000015d0 <usartReceive9bits>:
 * Checks if a reception has been completed
 * -------------------------------------------------------------------------- */

bool_t usartIsReceptionComplete(void)
{
	return isBitSet(UCSR0A, RXC0);
    15d0:	80 91 c0 00 	lds	r24, 0x00C0
	uint8 status;
	uint8 byteh;
	uint8 bytel;
	uint16 byte;

	while(!usartIsReceptionComplete())
    15d4:	87 ff       	sbrs	r24, 7
    15d6:	fc cf       	rjmp	.-8      	; 0x15d0 <usartReceive9bits>
		;	// Waits until last reception ends
	status = UCSR0A;
    15d8:	80 91 c0 00 	lds	r24, 0x00C0
	byteh = UCSR0B;
    15dc:	80 91 c1 00 	lds	r24, 0x00C1
	bytel = UDR0;
    15e0:	20 91 c6 00 	lds	r18, 0x00C6

	byte = (uint16)(byteh & 0x02) << 7;
    15e4:	82 70       	andi	r24, 0x02	; 2
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	96 95       	lsr	r25
    15ea:	98 2f       	mov	r25, r24
    15ec:	88 27       	eor	r24, r24
    15ee:	97 95       	ror	r25
    15f0:	87 95       	ror	r24
	byte |= bytel;
	return  byte;
}
    15f2:	82 2b       	or	r24, r18
    15f4:	08 95       	ret

000015f6 <usartClearReceptionBuffer>:
 * Checks if a reception has been completed
 * -------------------------------------------------------------------------- */

bool_t usartIsReceptionComplete(void)
{
	return isBitSet(UCSR0A, RXC0);
    15f6:	80 91 c0 00 	lds	r24, 0x00C0
 * -------------------------------------------------------------------------- */

void usartClearReceptionBuffer(void)
{
	uint8 aux;
	while(usartIsReceptionComplete())
    15fa:	87 ff       	sbrs	r24, 7
    15fc:	03 c0       	rjmp	.+6      	; 0x1604 <usartClearReceptionBuffer+0xe>
		aux = UDR0;
    15fe:	80 91 c6 00 	lds	r24, 0x00C6
    1602:	f9 cf       	rjmp	.-14     	; 0x15f6 <usartClearReceptionBuffer>
	return;
}
    1604:	08 95       	ret

00001606 <usartAddDataToReceiverBuffer>:
/* -----------------------------------------------------------------------------
 * Adds data to the reception buffer. The function has NO CONTROL of lost data.
 * -------------------------------------------------------------------------- */

void usartAddDataToReceiverBuffer(uint8 data)
{
    1606:	ff 92       	push	r15
    1608:	0f 93       	push	r16
    160a:	1f 93       	push	r17
    160c:	cf 93       	push	r28
    160e:	df 93       	push	r29
    1610:	f8 2e       	mov	r15, r24
	if(((usartReceiverBufferNextWrite + 1) % USART_RECEIVER_BUFFER_SIZE) != usartReceiverBufferNextRead){
    1612:	c0 91 74 01 	lds	r28, 0x0174
    1616:	d0 e0       	ldi	r29, 0x00	; 0
    1618:	be 01       	movw	r22, r28
    161a:	6f 5f       	subi	r22, 0xFF	; 255
    161c:	7f 4f       	sbci	r23, 0xFF	; 255
    161e:	88 27       	eor	r24, r24
    1620:	77 fd       	sbrc	r23, 7
    1622:	80 95       	com	r24
    1624:	98 2f       	mov	r25, r24
    1626:	22 e3       	ldi	r18, 0x32	; 50
    1628:	30 e0       	ldi	r19, 0x00	; 0
    162a:	40 e0       	ldi	r20, 0x00	; 0
    162c:	50 e0       	ldi	r21, 0x00	; 0
    162e:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <__udivmodsi4>
    1632:	00 91 76 01 	lds	r16, 0x0176
    1636:	10 e0       	ldi	r17, 0x00	; 0
    1638:	20 e0       	ldi	r18, 0x00	; 0
    163a:	30 e0       	ldi	r19, 0x00	; 0
    163c:	60 17       	cp	r22, r16
    163e:	71 07       	cpc	r23, r17
    1640:	82 07       	cpc	r24, r18
    1642:	93 07       	cpc	r25, r19
    1644:	51 f0       	breq	.+20     	; 0x165a <usartAddDataToReceiverBuffer+0x54>
		usartReceiverBuffer[usartReceiverBufferNextWrite] = data;
    1646:	ce 5b       	subi	r28, 0xBE	; 190
    1648:	de 4f       	sbci	r29, 0xFE	; 254
    164a:	f8 82       	st	Y, r15
		usartReceiverBufferNextWrite = (usartReceiverBufferNextWrite + 1) % USART_RECEIVER_BUFFER_SIZE;
    164c:	60 93 74 01 	sts	0x0174, r22
		usartReceiverBufferLength++;
    1650:	80 91 75 01 	lds	r24, 0x0175
    1654:	8f 5f       	subi	r24, 0xFF	; 255
    1656:	80 93 75 01 	sts	0x0175, r24
	}
	return;
}
    165a:	df 91       	pop	r29
    165c:	cf 91       	pop	r28
    165e:	1f 91       	pop	r17
    1660:	0f 91       	pop	r16
    1662:	ff 90       	pop	r15
    1664:	08 95       	ret

00001666 <usartGetDataFromReceiverBuffer>:
 * usartIsReceiverBufferEmpty() function must be called to check if there is new
 * data in the buffer.
 * -------------------------------------------------------------------------- */

uint8 usartGetDataFromReceiverBuffer(void)
{
    1666:	cf 93       	push	r28
    1668:	df 93       	push	r29
	uint8 data = usartReceiverBuffer[usartReceiverBufferNextRead];
    166a:	60 91 76 01 	lds	r22, 0x0176
    166e:	70 e0       	ldi	r23, 0x00	; 0
    1670:	fb 01       	movw	r30, r22
    1672:	ee 5b       	subi	r30, 0xBE	; 190
    1674:	fe 4f       	sbci	r31, 0xFE	; 254
    1676:	d0 81       	ld	r29, Z
	if(usartReceiverBufferLength > 0){
    1678:	c0 91 75 01 	lds	r28, 0x0175
    167c:	cc 23       	and	r28, r28
    167e:	89 f0       	breq	.+34     	; 0x16a2 <usartGetDataFromReceiverBuffer+0x3c>
		usartReceiverBufferNextRead = (usartReceiverBufferNextRead + 1) % USART_RECEIVER_BUFFER_SIZE;
    1680:	6f 5f       	subi	r22, 0xFF	; 255
    1682:	7f 4f       	sbci	r23, 0xFF	; 255
    1684:	88 27       	eor	r24, r24
    1686:	77 fd       	sbrc	r23, 7
    1688:	80 95       	com	r24
    168a:	98 2f       	mov	r25, r24
    168c:	22 e3       	ldi	r18, 0x32	; 50
    168e:	30 e0       	ldi	r19, 0x00	; 0
    1690:	40 e0       	ldi	r20, 0x00	; 0
    1692:	50 e0       	ldi	r21, 0x00	; 0
    1694:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <__udivmodsi4>
    1698:	60 93 76 01 	sts	0x0176, r22
		usartReceiverBufferLength--;
    169c:	c1 50       	subi	r28, 0x01	; 1
    169e:	c0 93 75 01 	sts	0x0175, r28
	}
	return data;
}
    16a2:	8d 2f       	mov	r24, r29
    16a4:	df 91       	pop	r29
    16a6:	cf 91       	pop	r28
    16a8:	08 95       	ret

000016aa <usartIsReceiverBufferEmpty>:
 * reading the buffer.
 * -------------------------------------------------------------------------- */

uint8 usartIsReceiverBufferEmpty(void)
{
	if(usartReceiverBufferLength == 0)
    16aa:	81 e0       	ldi	r24, 0x01	; 1
    16ac:	90 91 75 01 	lds	r25, 0x0175
    16b0:	91 11       	cpse	r25, r1
    16b2:	80 e0       	ldi	r24, 0x00	; 0
		return TRUE;
	return FALSE;
}
    16b4:	08 95       	ret

000016b6 <usartGetCurrentBaudRate>:
//	case 2:
//		aux32 = F_CPU / 2 / (UBRR0 + 1);
//		break;
//	}
	return aux32;
 }
    16b6:	60 e0       	ldi	r22, 0x00	; 0
    16b8:	70 e0       	ldi	r23, 0x00	; 0
    16ba:	cb 01       	movw	r24, r22
    16bc:	08 95       	ret

000016be <spiInit>:
/* -----------------------------------------------------------------------------
 * Configures the SPI controller
 * -------------------------------------------------------------------------- */

void spiInit(void)
{
    16be:	08 95       	ret

000016c0 <spiMasterTransmit>:
 * Transmit data at the SPI bus in master mode
 * -------------------------------------------------------------------------- */

uint8 spiMasterTransmit(uint8 data)
{
	SPDR = data;
    16c0:	8e bd       	out	0x2e, r24	; 46
	waitUntilBitIsClear(SPSR, SPIF);
    16c2:	0d b4       	in	r0, 0x2d	; 45
    16c4:	07 fc       	sbrc	r0, 7
    16c6:	fd cf       	rjmp	.-6      	; 0x16c2 <spiMasterTransmit+0x2>
	return SPDR;
    16c8:	8e b5       	in	r24, 0x2e	; 46
}
    16ca:	08 95       	ret

000016cc <spiSlaveTransmit>:
 * Receives data from the SPI bus
 * -------------------------------------------------------------------------- */

uint8 spiSlaveTransmit(void)
{
	waitUntilBitIsClear(SPSR, SPIF);
    16cc:	0d b4       	in	r0, 0x2d	; 45
    16ce:	07 fc       	sbrc	r0, 7
    16d0:	fd cf       	rjmp	.-6      	; 0x16cc <spiSlaveTransmit>
	return SPDR;
    16d2:	8e b5       	in	r24, 0x2e	; 46
}
    16d4:	08 95       	ret

000016d6 <mcp2515_write_register>:
	#error	invaild value of MCP2515_CLKOUT_PRESCALER
#endif

// -------------------------------------------------------------------------
void mcp2515_write_register( uint8_t adress, uint8_t data )
{
    16d6:	1f 93       	push	r17
    16d8:	cf 93       	push	r28
    16da:	df 93       	push	r29
    16dc:	1f 92       	push	r1
    16de:	cd b7       	in	r28, 0x3d	; 61
    16e0:	de b7       	in	r29, 0x3e	; 62
    16e2:	18 2f       	mov	r17, r24
	RESET(MCP2515_CS);
    16e4:	2a 98       	cbi	0x05, 2	; 5
	
	spi_putc(SPI_WRITE);
    16e6:	82 e0       	ldi	r24, 0x02	; 2
    16e8:	69 83       	std	Y+1, r22	; 0x01
    16ea:	0e 94 30 0c 	call	0x1860	; 0x1860 <spi_putc>
	spi_putc(adress);
    16ee:	81 2f       	mov	r24, r17
    16f0:	0e 94 30 0c 	call	0x1860	; 0x1860 <spi_putc>
	spi_putc(data);
    16f4:	69 81       	ldd	r22, Y+1	; 0x01
    16f6:	86 2f       	mov	r24, r22
    16f8:	0e 94 30 0c 	call	0x1860	; 0x1860 <spi_putc>
	
	SET(MCP2515_CS);
    16fc:	2a 9a       	sbi	0x05, 2	; 5
}
    16fe:	0f 90       	pop	r0
    1700:	df 91       	pop	r29
    1702:	cf 91       	pop	r28
    1704:	1f 91       	pop	r17
    1706:	08 95       	ret

00001708 <mcp2515_read_register>:

// -------------------------------------------------------------------------
uint8_t mcp2515_read_register(uint8_t adress)
{
    1708:	cf 93       	push	r28
    170a:	c8 2f       	mov	r28, r24
	uint8_t data;
	
	RESET(MCP2515_CS);
    170c:	2a 98       	cbi	0x05, 2	; 5
	
	spi_putc(SPI_READ);
    170e:	83 e0       	ldi	r24, 0x03	; 3
    1710:	0e 94 30 0c 	call	0x1860	; 0x1860 <spi_putc>
	spi_putc(adress);
    1714:	8c 2f       	mov	r24, r28
    1716:	0e 94 30 0c 	call	0x1860	; 0x1860 <spi_putc>
	
	data = spi_putc(0xff);	
    171a:	8f ef       	ldi	r24, 0xFF	; 255
    171c:	0e 94 30 0c 	call	0x1860	; 0x1860 <spi_putc>
	
	SET(MCP2515_CS);
    1720:	2a 9a       	sbi	0x05, 2	; 5
	
	return data;
}
    1722:	cf 91       	pop	r28
    1724:	08 95       	ret

00001726 <mcp2515_bit_modify>:

// -------------------------------------------------------------------------
void mcp2515_bit_modify(uint8_t adress, uint8_t mask, uint8_t data)
{
    1726:	1f 93       	push	r17
    1728:	cf 93       	push	r28
    172a:	df 93       	push	r29
    172c:	00 d0       	rcall	.+0      	; 0x172e <mcp2515_bit_modify+0x8>
    172e:	cd b7       	in	r28, 0x3d	; 61
    1730:	de b7       	in	r29, 0x3e	; 62
    1732:	18 2f       	mov	r17, r24
	RESET(MCP2515_CS);
    1734:	2a 98       	cbi	0x05, 2	; 5
	
	spi_putc(SPI_BIT_MODIFY);
    1736:	85 e0       	ldi	r24, 0x05	; 5
    1738:	4a 83       	std	Y+2, r20	; 0x02
    173a:	69 83       	std	Y+1, r22	; 0x01
    173c:	0e 94 30 0c 	call	0x1860	; 0x1860 <spi_putc>
	spi_putc(adress);
    1740:	81 2f       	mov	r24, r17
    1742:	0e 94 30 0c 	call	0x1860	; 0x1860 <spi_putc>
	spi_putc(mask);
    1746:	69 81       	ldd	r22, Y+1	; 0x01
    1748:	86 2f       	mov	r24, r22
    174a:	0e 94 30 0c 	call	0x1860	; 0x1860 <spi_putc>
	spi_putc(data);
    174e:	4a 81       	ldd	r20, Y+2	; 0x02
    1750:	84 2f       	mov	r24, r20
    1752:	0e 94 30 0c 	call	0x1860	; 0x1860 <spi_putc>
	
	SET(MCP2515_CS);
    1756:	2a 9a       	sbi	0x05, 2	; 5
}
    1758:	0f 90       	pop	r0
    175a:	0f 90       	pop	r0
    175c:	df 91       	pop	r29
    175e:	cf 91       	pop	r28
    1760:	1f 91       	pop	r17
    1762:	08 95       	ret

00001764 <mcp2515_read_status>:
// ----------------------------------------------------------------------------
uint8_t mcp2515_read_status(uint8_t type)
{
	uint8_t data;
	
	RESET(MCP2515_CS);
    1764:	2a 98       	cbi	0x05, 2	; 5
	
	spi_putc(type);
    1766:	0e 94 30 0c 	call	0x1860	; 0x1860 <spi_putc>
	data = spi_putc(0xff);
    176a:	8f ef       	ldi	r24, 0xFF	; 255
    176c:	0e 94 30 0c 	call	0x1860	; 0x1860 <spi_putc>
	
	SET(MCP2515_CS);
    1770:	2a 9a       	sbi	0x05, 2	; 5
	
	return data;
}
    1772:	08 95       	ret

00001774 <can_init>:
	}
};

// -------------------------------------------------------------------------
bool mcp2515_init(can_bitrate_t bitrate)
{
    1774:	ef 92       	push	r14
    1776:	ff 92       	push	r15
    1778:	0f 93       	push	r16
    177a:	1f 93       	push	r17
    177c:	cf 93       	push	r28
    177e:	df 93       	push	r29
    1780:	08 2f       	mov	r16, r24
	if (bitrate >= 8)
    1782:	88 30       	cpi	r24, 0x08	; 8
    1784:	10 f0       	brcs	.+4      	; 0x178a <can_init+0x16>
		return false;
    1786:	80 e0       	ldi	r24, 0x00	; 0
    1788:	5f c0       	rjmp	.+190    	; 0x1848 <can_init+0xd4>
	
	SET(MCP2515_CS);
    178a:	2a 9a       	sbi	0x05, 2	; 5
	SET_OUTPUT(MCP2515_CS);
    178c:	22 9a       	sbi	0x04, 2	; 4
	
	// Aktivieren der Pins fuer das SPI Interface
	RESET(P_SCK);
    178e:	2d 98       	cbi	0x05, 5	; 5
	RESET(P_MOSI);
    1790:	2b 98       	cbi	0x05, 3	; 5
	RESET(P_MISO);
    1792:	2c 98       	cbi	0x05, 4	; 5
	
	SET_OUTPUT(P_SCK);
    1794:	25 9a       	sbi	0x04, 5	; 4
	SET_OUTPUT(P_MOSI);
    1796:	23 9a       	sbi	0x04, 3	; 4
	SET_INPUT(P_MISO);
    1798:	24 98       	cbi	0x04, 4	; 4
	
	// SPI Einstellung setzen
	mcp2515_spi_init();
    179a:	0e 94 2b 0c 	call	0x1856	; 0x1856 <mcp2515_spi_init>
	
	// MCP2515 per Software Reset zuruecksetzten,
	// danach ist er automatisch im Konfigurations Modus
	RESET(MCP2515_CS);
    179e:	2a 98       	cbi	0x05, 2	; 5
	spi_putc(SPI_RESET);
    17a0:	80 ec       	ldi	r24, 0xC0	; 192
    17a2:	0e 94 30 0c 	call	0x1860	; 0x1860 <spi_putc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    17a6:	8f e9       	ldi	r24, 0x9F	; 159
    17a8:	9f e0       	ldi	r25, 0x0F	; 15
    17aa:	01 97       	sbiw	r24, 0x01	; 1
    17ac:	f1 f7       	brne	.-4      	; 0x17aa <can_init+0x36>
    17ae:	00 c0       	rjmp	.+0      	; 0x17b0 <can_init+0x3c>
    17b0:	00 00       	nop
	
	_delay_ms(1);
	
	SET(MCP2515_CS);
    17b2:	2a 9a       	sbi	0x05, 2	; 5
    17b4:	8f e3       	ldi	r24, 0x3F	; 63
    17b6:	9c e9       	ldi	r25, 0x9C	; 156
    17b8:	01 97       	sbiw	r24, 0x01	; 1
    17ba:	f1 f7       	brne	.-4      	; 0x17b8 <can_init+0x44>
    17bc:	00 c0       	rjmp	.+0      	; 0x17be <can_init+0x4a>
    17be:	00 00       	nop
	
	// ein bisschen warten bis der MCP2515 sich neu gestartet hat
	_delay_ms(10);
	
	// CNF1..3 Register laden (Bittiming)
	RESET(MCP2515_CS);
    17c0:	2a 98       	cbi	0x05, 2	; 5
	spi_putc(SPI_WRITE);
    17c2:	82 e0       	ldi	r24, 0x02	; 2
    17c4:	0e 94 30 0c 	call	0x1860	; 0x1860 <spi_putc>
	spi_putc(CNF3);
    17c8:	88 e2       	ldi	r24, 0x28	; 40
    17ca:	0e 94 30 0c 	call	0x1860	; 0x1860 <spi_putc>
    17ce:	10 e0       	ldi	r17, 0x00	; 0
    17d0:	e8 01       	movw	r28, r16
    17d2:	cc 0f       	add	r28, r28
    17d4:	dd 1f       	adc	r29, r29
    17d6:	c0 0f       	add	r28, r16
    17d8:	d1 1f       	adc	r29, r17
    17da:	e1 2c       	mov	r14, r1
    17dc:	f1 2c       	mov	r15, r1
    17de:	c8 53       	subi	r28, 0x38	; 56
    17e0:	df 4f       	sbci	r29, 0xFF	; 255
    17e2:	fe 01       	movw	r30, r28
    17e4:	ee 0d       	add	r30, r14
    17e6:	ff 1d       	adc	r31, r15
	for (uint8_t i=0; i<3 ;i++ ) {
		spi_putc(pgm_read_byte(&_mcp2515_cnf[bitrate][i]));
    17e8:	84 91       	lpm	r24, Z
    17ea:	0e 94 30 0c 	call	0x1860	; 0x1860 <spi_putc>
    17ee:	9f ef       	ldi	r25, 0xFF	; 255
    17f0:	e9 1a       	sub	r14, r25
    17f2:	f9 0a       	sbc	r15, r25
	
	// CNF1..3 Register laden (Bittiming)
	RESET(MCP2515_CS);
	spi_putc(SPI_WRITE);
	spi_putc(CNF3);
	for (uint8_t i=0; i<3 ;i++ ) {
    17f4:	83 e0       	ldi	r24, 0x03	; 3
    17f6:	e8 16       	cp	r14, r24
    17f8:	f1 04       	cpc	r15, r1
    17fa:	99 f7       	brne	.-26     	; 0x17e2 <can_init+0x6e>
		spi_putc(pgm_read_byte(&_mcp2515_cnf[bitrate][i]));
	}
	// aktivieren/deaktivieren der Interrupts
	spi_putc(MCP2515_INTERRUPTS);
    17fc:	83 e0       	ldi	r24, 0x03	; 3
    17fe:	0e 94 30 0c 	call	0x1860	; 0x1860 <spi_putc>
	SET(MCP2515_CS);
    1802:	2a 9a       	sbi	0x05, 2	; 5
	
	// TXnRTS Bits als Inputs schalten
	mcp2515_write_register(TXRTSCTRL, 0);
    1804:	60 e0       	ldi	r22, 0x00	; 0
    1806:	8d e0       	ldi	r24, 0x0D	; 13
    1808:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <mcp2515_write_register>
	
	#if defined(MCP2515_INT)
		SET_INPUT(MCP2515_INT);
    180c:	38 98       	cbi	0x07, 0	; 7
		SET(MCP2515_INT);
    180e:	40 9a       	sbi	0x08, 0	; 8
			// activate the pin RX1BF as GPIO which is connected 
			// to RS of MCP2551 and set it to 0
			mcp2515_write_register(BFPCTRL, (1<<B1BFE));
		#else
			// Deaktivieren der Pins RXnBF Pins (High Impedance State)
			mcp2515_write_register(BFPCTRL, 0);
    1810:	60 e0       	ldi	r22, 0x00	; 0
    1812:	8c e0       	ldi	r24, 0x0C	; 12
    1814:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <mcp2515_write_register>
	#endif
	
	// Testen ob das auf die beschreibenen Register zugegriffen werden kann
	// (=> ist der Chip ueberhaupt ansprechbar?)
	bool error = false;
	if (mcp2515_read_register(CNF2) != pgm_read_byte(&_mcp2515_cnf[bitrate][1])) {
    1818:	89 e2       	ldi	r24, 0x29	; 41
    181a:	0e 94 84 0b 	call	0x1708	; 0x1708 <mcp2515_read_register>
    181e:	d8 2f       	mov	r29, r24
    1820:	f8 01       	movw	r30, r16
    1822:	ee 0f       	add	r30, r30
    1824:	ff 1f       	adc	r31, r31
    1826:	e0 0f       	add	r30, r16
    1828:	f1 1f       	adc	r31, r17
    182a:	e7 53       	subi	r30, 0x37	; 55
    182c:	ff 4f       	sbci	r31, 0xFF	; 255
    182e:	c4 91       	lpm	r28, Z
		error = true;
	}
	
	// Device zurueck in den normalen Modus versetzten
	// und aktivieren/deaktivieren des Clkout-Pins
	mcp2515_write_register(CANCTRL, CLKOUT_PRESCALER_);
    1830:	60 e0       	ldi	r22, 0x00	; 0
    1832:	8f e0       	ldi	r24, 0x0F	; 15
    1834:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <mcp2515_write_register>
	
	if (error) {
    1838:	dc 13       	cpse	r29, r28
    183a:	a5 cf       	rjmp	.-182    	; 0x1786 <can_init+0x12>
		return false;
	}
	else
	{
		while ((mcp2515_read_register(CANSTAT) & 0xe0) != 0) {
    183c:	8e e0       	ldi	r24, 0x0E	; 14
    183e:	0e 94 84 0b 	call	0x1708	; 0x1708 <mcp2515_read_register>
    1842:	80 7e       	andi	r24, 0xE0	; 224
    1844:	d9 f7       	brne	.-10     	; 0x183c <can_init+0xc8>
			// warten bis der neue Modus uebernommen wurde
		}
		
		return true;
    1846:	81 e0       	ldi	r24, 0x01	; 1
	}
}
    1848:	df 91       	pop	r29
    184a:	cf 91       	pop	r28
    184c:	1f 91       	pop	r17
    184e:	0f 91       	pop	r16
    1850:	ff 90       	pop	r15
    1852:	ef 90       	pop	r14
    1854:	08 95       	ret

00001856 <mcp2515_spi_init>:
// ----------------------------------------------------------------------------
void mcp2515_spi_init(void)
{
	#ifndef USE_SOFTWARE_SPI
		// Aktivieren des SPI Master Interfaces
		SPCR = (1<<SPE)|(1<<MSTR) | R_SPCR;
    1856:	81 e5       	ldi	r24, 0x51	; 81
    1858:	8c bd       	out	0x2c, r24	; 44
		SPSR = R_SPSR;
    185a:	81 e0       	ldi	r24, 0x01	; 1
    185c:	8d bd       	out	0x2d, r24	; 45
    185e:	08 95       	ret

00001860 <spi_putc>:
	return data_in;
	
	#else
	
	// put byte in send-buffer
	SPDR = data;
    1860:	8e bd       	out	0x2e, r24	; 46
	
	// wait until byte was send
	while( !( SPSR & (1<<SPIF) ) )
    1862:	0d b4       	in	r0, 0x2d	; 45
    1864:	07 fe       	sbrs	r0, 7
    1866:	fd cf       	rjmp	.-6      	; 0x1862 <spi_putc+0x2>
		;
	
	return SPDR;
    1868:	8e b5       	in	r24, 0x2e	; 46
	
	#endif
}
    186a:	08 95       	ret

0000186c <can_set_mode>:
#ifdef	SUPPORT_FOR_MCP2515__

// ----------------------------------------------------------------------------
void
mcp2515_set_mode(can_mode_t mode)
{
    186c:	cf 93       	push	r28
    186e:	df 93       	push	r29
	uint8_t reg = 0;
	
	if (mode == LISTEN_ONLY_MODE) {
    1870:	88 23       	and	r24, r24
    1872:	31 f0       	breq	.+12     	; 0x1880 <can_set_mode+0x14>
		reg = (1<<REQOP1)|(1<<REQOP0);
	}
	else if (mode == LOOPBACK_MODE) {
    1874:	81 30       	cpi	r24, 0x01	; 1
    1876:	31 f0       	breq	.+12     	; 0x1884 <can_set_mode+0x18>
		reg = (1<<REQOP1);
	}
	else if (mode == SLEEP_MODE) {
    1878:	83 30       	cpi	r24, 0x03	; 3
    187a:	31 f0       	breq	.+12     	; 0x1888 <can_set_mode+0x1c>

// ----------------------------------------------------------------------------
void
mcp2515_set_mode(can_mode_t mode)
{
	uint8_t reg = 0;
    187c:	c0 e0       	ldi	r28, 0x00	; 0
    187e:	05 c0       	rjmp	.+10     	; 0x188a <can_set_mode+0x1e>
	
	if (mode == LISTEN_ONLY_MODE) {
		reg = (1<<REQOP1)|(1<<REQOP0);
    1880:	c0 e6       	ldi	r28, 0x60	; 96
    1882:	03 c0       	rjmp	.+6      	; 0x188a <can_set_mode+0x1e>
	}
	else if (mode == LOOPBACK_MODE) {
		reg = (1<<REQOP1);
    1884:	c0 e4       	ldi	r28, 0x40	; 64
    1886:	01 c0       	rjmp	.+2      	; 0x188a <can_set_mode+0x1e>
	}
	else if (mode == SLEEP_MODE) {
		reg = (1<<REQOP0);
    1888:	c0 e2       	ldi	r28, 0x20	; 32
	}
		
	// set the new mode
	mcp2515_bit_modify(CANCTRL, (1<<REQOP2)|(1<<REQOP1)|(1<<REQOP0), reg);
    188a:	4c 2f       	mov	r20, r28
    188c:	60 ee       	ldi	r22, 0xE0	; 224
    188e:	8f e0       	ldi	r24, 0x0F	; 15
    1890:	0e 94 93 0b 	call	0x1726	; 0x1726 <mcp2515_bit_modify>
	while ((mcp2515_read_register(CANSTAT) & 0xe0) != reg) {
    1894:	d0 e0       	ldi	r29, 0x00	; 0
    1896:	8e e0       	ldi	r24, 0x0E	; 14
    1898:	0e 94 84 0b 	call	0x1708	; 0x1708 <mcp2515_read_register>
    189c:	80 7e       	andi	r24, 0xE0	; 224
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	8c 17       	cp	r24, r28
    18a2:	9d 07       	cpc	r25, r29
    18a4:	c1 f7       	brne	.-16     	; 0x1896 <can_set_mode+0x2a>
		// wait for the new mode to become active
	}
}
    18a6:	df 91       	pop	r29
    18a8:	cf 91       	pop	r28
    18aa:	08 95       	ret

000018ac <can_get_message>:
#ifdef	SUPPORT_FOR_MCP2515__

// ----------------------------------------------------------------------------

uint8_t mcp2515_get_message(can_t *msg)
{
    18ac:	df 92       	push	r13
    18ae:	ef 92       	push	r14
    18b0:	ff 92       	push	r15
    18b2:	0f 93       	push	r16
    18b4:	1f 93       	push	r17
    18b6:	cf 93       	push	r28
    18b8:	df 93       	push	r29
    18ba:	ec 01       	movw	r28, r24
			addr = SPI_READ_RX | 0x04;
		else
			return 0;
	#else
		// read status
		uint8_t status = mcp2515_read_status(SPI_RX_STATUS);
    18bc:	80 eb       	ldi	r24, 0xB0	; 176
    18be:	0e 94 b2 0b 	call	0x1764	; 0x1764 <mcp2515_read_status>
    18c2:	e8 2e       	mov	r14, r24
		
		if (_bit_is_set(status,6)) {
    18c4:	80 74       	andi	r24, 0x40	; 64
    18c6:	f8 2e       	mov	r15, r24
    18c8:	e6 fc       	sbrc	r14, 6
    18ca:	04 c0       	rjmp	.+8      	; 0x18d4 <can_get_message+0x28>
			// message in buffer 0
			addr = SPI_READ_RX;
		}
		else if (_bit_is_set(status,7)) {
    18cc:	e7 fe       	sbrs	r14, 7
    18ce:	43 c0       	rjmp	.+134    	; 0x1956 <can_get_message+0xaa>
			// message in buffer 1
			addr = SPI_READ_RX | 0x04;
    18d0:	84 e9       	ldi	r24, 0x94	; 148
    18d2:	01 c0       	rjmp	.+2      	; 0x18d6 <can_get_message+0x2a>
		// read status
		uint8_t status = mcp2515_read_status(SPI_RX_STATUS);
		
		if (_bit_is_set(status,6)) {
			// message in buffer 0
			addr = SPI_READ_RX;
    18d4:	80 e9       	ldi	r24, 0x90	; 144
			// Error: no message available
			return 0;
		}
	#endif
	
	RESET(MCP2515_CS);
    18d6:	2a 98       	cbi	0x05, 2	; 5
	spi_putc(addr);
    18d8:	0e 94 30 0c 	call	0x1860	; 0x1860 <spi_putc>
	
	// CAN ID auslesen und ueberpruefen
	uint8_t tmp = mcp2515_read_id(&msg->id);
    18dc:	ce 01       	movw	r24, r28
    18de:	0e 94 b4 0c 	call	0x1968	; 0x1968 <mcp2515_read_id>
	#if SUPPORT_EXTENDED_CANID
		msg->flags.extended = tmp & 0x01;
	#else
		if (tmp & 0x01) {
    18e2:	80 ff       	sbrs	r24, 0
    18e4:	0f c0       	rjmp	.+30     	; 0x1904 <can_get_message+0x58>
			// Nachrichten mit extended ID verwerfen
			SET(MCP2515_CS);
    18e6:	2a 9a       	sbi	0x05, 2	; 5
			#ifdef	RXnBF_FUNKTION
			if (!IS_SET(MCP2515_RX0BF))
			#else
			if (_bit_is_set(status, 6))
			#endif
				mcp2515_bit_modify(CANINTF, (1<<RX0IF), 0);
    18e8:	40 e0       	ldi	r20, 0x00	; 0
			// Nachrichten mit extended ID verwerfen
			SET(MCP2515_CS);
			#ifdef	RXnBF_FUNKTION
			if (!IS_SET(MCP2515_RX0BF))
			#else
			if (_bit_is_set(status, 6))
    18ea:	ff 20       	and	r15, r15
    18ec:	31 f0       	breq	.+12     	; 0x18fa <can_get_message+0x4e>
			#endif
				mcp2515_bit_modify(CANINTF, (1<<RX0IF), 0);
    18ee:	61 e0       	ldi	r22, 0x01	; 1
    18f0:	8c e2       	ldi	r24, 0x2C	; 44
    18f2:	0e 94 93 0b 	call	0x1726	; 0x1726 <mcp2515_bit_modify>
			else
				mcp2515_bit_modify(CANINTF, (1<<RX1IF), 0);
			
			return 0;
    18f6:	f1 2c       	mov	r15, r1
    18f8:	2e c0       	rjmp	.+92     	; 0x1956 <can_get_message+0xaa>
			#else
			if (_bit_is_set(status, 6))
			#endif
				mcp2515_bit_modify(CANINTF, (1<<RX0IF), 0);
			else
				mcp2515_bit_modify(CANINTF, (1<<RX1IF), 0);
    18fa:	62 e0       	ldi	r22, 0x02	; 2
    18fc:	8c e2       	ldi	r24, 0x2C	; 44
    18fe:	0e 94 93 0b 	call	0x1726	; 0x1726 <mcp2515_bit_modify>
    1902:	29 c0       	rjmp	.+82     	; 0x1956 <can_get_message+0xaa>
			return 0;
		}
	#endif
	
	// read DLC
	uint8_t length = spi_putc(0xff);
    1904:	8f ef       	ldi	r24, 0xFF	; 255
    1906:	0e 94 30 0c 	call	0x1860	; 0x1860 <spi_putc>
		if (!(tmp & 0x01))
			msg->flags.rtr = (tmp & 0x02) ? 1 : 0;
		else
			msg->flags.rtr = (length & (1<<RTR)) ? 1 : 0;
	#else
		msg->flags.rtr = (_bit_is_set(status, 3)) ? 1 : 0;
    190a:	e3 fa       	bst	r14, 3
    190c:	22 27       	eor	r18, r18
    190e:	20 f9       	bld	r18, 0
    1910:	9a 81       	ldd	r25, Y+2	; 0x02
    1912:	20 fb       	bst	r18, 0
    1914:	90 f9       	bld	r25, 0
    1916:	9a 83       	std	Y+2, r25	; 0x02
	#endif
	
	length &= 0x0f;
    1918:	8f 70       	andi	r24, 0x0F	; 15
    191a:	d8 2e       	mov	r13, r24
	msg->length = length;
    191c:	8b 83       	std	Y+3, r24	; 0x03
	// read data
	for (uint8_t i=0;i<length;i++) {
    191e:	00 e0       	ldi	r16, 0x00	; 0
    1920:	10 e0       	ldi	r17, 0x00	; 0
    1922:	0d 15       	cp	r16, r13
    1924:	50 f4       	brcc	.+20     	; 0x193a <can_get_message+0x8e>
		msg->data[i] = spi_putc(0xff);
    1926:	8f ef       	ldi	r24, 0xFF	; 255
    1928:	0e 94 30 0c 	call	0x1860	; 0x1860 <spi_putc>
    192c:	fe 01       	movw	r30, r28
    192e:	e0 0f       	add	r30, r16
    1930:	f1 1f       	adc	r31, r17
    1932:	84 83       	std	Z+4, r24	; 0x04
    1934:	0f 5f       	subi	r16, 0xFF	; 255
    1936:	1f 4f       	sbci	r17, 0xFF	; 255
    1938:	f4 cf       	rjmp	.-24     	; 0x1922 <can_get_message+0x76>
	}
	SET(MCP2515_CS);
    193a:	2a 9a       	sbi	0x05, 2	; 5
	#ifdef RXnBF_FUNKTION
	if (!IS_SET(MCP2515_RX0BF))
	#else
	if (_bit_is_set(status, 6))
	#endif
		mcp2515_bit_modify(CANINTF, (1<<RX0IF), 0);
    193c:	40 e0       	ldi	r20, 0x00	; 0
	
	// clear interrupt flag
	#ifdef RXnBF_FUNKTION
	if (!IS_SET(MCP2515_RX0BF))
	#else
	if (_bit_is_set(status, 6))
    193e:	ff 20       	and	r15, r15
    1940:	11 f0       	breq	.+4      	; 0x1946 <can_get_message+0x9a>
	#endif
		mcp2515_bit_modify(CANINTF, (1<<RX0IF), 0);
    1942:	61 e0       	ldi	r22, 0x01	; 1
    1944:	01 c0       	rjmp	.+2      	; 0x1948 <can_get_message+0x9c>
	else
		mcp2515_bit_modify(CANINTF, (1<<RX1IF), 0);
    1946:	62 e0       	ldi	r22, 0x02	; 2
    1948:	8c e2       	ldi	r24, 0x2C	; 44
    194a:	0e 94 93 0b 	call	0x1726	; 0x1726 <mcp2515_bit_modify>
	CAN_INDICATE_RX_TRAFFIC_FUNCTION;
	
	#ifdef RXnBF_FUNKTION
		return 1;
	#else
		return (status & 0x07) + 1;
    194e:	8e 2d       	mov	r24, r14
    1950:	87 70       	andi	r24, 0x07	; 7
    1952:	f8 2e       	mov	r15, r24
    1954:	f3 94       	inc	r15
	#endif
}
    1956:	8f 2d       	mov	r24, r15
    1958:	df 91       	pop	r29
    195a:	cf 91       	pop	r28
    195c:	1f 91       	pop	r17
    195e:	0f 91       	pop	r16
    1960:	ff 90       	pop	r15
    1962:	ef 90       	pop	r14
    1964:	df 90       	pop	r13
    1966:	08 95       	ret

00001968 <mcp2515_read_id>:
}

#else

uint8_t mcp2515_read_id(uint16_t *id)
{
    1968:	1f 93       	push	r17
    196a:	cf 93       	push	r28
    196c:	df 93       	push	r29
    196e:	ec 01       	movw	r28, r24
	uint8_t first;
	uint8_t tmp;
	
	first = spi_putc(0xff);
    1970:	8f ef       	ldi	r24, 0xFF	; 255
    1972:	0e 94 30 0c 	call	0x1860	; 0x1860 <spi_putc>
    1976:	18 2f       	mov	r17, r24
	tmp   = spi_putc(0xff);
    1978:	8f ef       	ldi	r24, 0xFF	; 255
    197a:	0e 94 30 0c 	call	0x1860	; 0x1860 <spi_putc>
    197e:	98 2f       	mov	r25, r24
	
	if (tmp & (1 << IDE)) {
		spi_putc(0xff);
    1980:	8f ef       	ldi	r24, 0xFF	; 255
	uint8_t tmp;
	
	first = spi_putc(0xff);
	tmp   = spi_putc(0xff);
	
	if (tmp & (1 << IDE)) {
    1982:	93 ff       	sbrs	r25, 3
    1984:	07 c0       	rjmp	.+14     	; 0x1994 <mcp2515_read_id+0x2c>
		spi_putc(0xff);
    1986:	0e 94 30 0c 	call	0x1860	; 0x1860 <spi_putc>
		spi_putc(0xff);
    198a:	8f ef       	ldi	r24, 0xFF	; 255
    198c:	0e 94 30 0c 	call	0x1860	; 0x1860 <spi_putc>
		
		return 1;			// extended-frame
    1990:	81 e0       	ldi	r24, 0x01	; 1
    1992:	1c c0       	rjmp	.+56     	; 0x19cc <mcp2515_read_id+0x64>
}

#else

extern __attribute__ ((gnu_inline)) inline void spi_start(uint8_t data) {
	SPDR = data;
    1994:	8e bd       	out	0x2e, r24	; 46
	}
	else {
		spi_start(0xff);
		
		*id = (uint16_t) first << 3;
    1996:	88 e0       	ldi	r24, 0x08	; 8
    1998:	18 9f       	mul	r17, r24
    199a:	90 01       	movw	r18, r0
    199c:	11 24       	eor	r1, r1
    199e:	39 83       	std	Y+1, r19	; 0x01
    19a0:	28 83       	st	Y, r18
}

extern __attribute__ ((gnu_inline)) inline uint8_t spi_wait(void) {
	// warten bis der vorherige Werte geschrieben wurde
	while(!(SPSR & (1<<SPIF)))
    19a2:	0d b4       	in	r0, 0x2d	; 45
    19a4:	07 fe       	sbrs	r0, 7
    19a6:	fd cf       	rjmp	.-6      	; 0x19a2 <mcp2515_read_id+0x3a>
		;
	
	return SPDR;
    19a8:	8e b5       	in	r24, 0x2e	; 46
}

#else

extern __attribute__ ((gnu_inline)) inline void spi_start(uint8_t data) {
	SPDR = data;
    19aa:	8f ef       	ldi	r24, 0xFF	; 255
    19ac:	8e bd       	out	0x2e, r24	; 46
		
		spi_wait();
		spi_start(0xff);
		
		*((uint8_t *) id) |= tmp >> 5;
    19ae:	88 81       	ld	r24, Y
    19b0:	29 2f       	mov	r18, r25
    19b2:	22 95       	swap	r18
    19b4:	26 95       	lsr	r18
    19b6:	27 70       	andi	r18, 0x07	; 7
    19b8:	82 2b       	or	r24, r18
    19ba:	88 83       	st	Y, r24
}

extern __attribute__ ((gnu_inline)) inline uint8_t spi_wait(void) {
	// warten bis der vorherige Werte geschrieben wurde
	while(!(SPSR & (1<<SPIF)))
    19bc:	0d b4       	in	r0, 0x2d	; 45
    19be:	07 fe       	sbrs	r0, 7
    19c0:	fd cf       	rjmp	.-6      	; 0x19bc <mcp2515_read_id+0x54>
		;
	
	return SPDR;
    19c2:	8e b5       	in	r24, 0x2e	; 46
		
		spi_wait();
		
		if (tmp & (1 << SRR))
    19c4:	89 2f       	mov	r24, r25
    19c6:	80 71       	andi	r24, 0x10	; 16
    19c8:	94 fd       	sbrc	r25, 4
			return 2;		// RTR-frame
    19ca:	82 e0       	ldi	r24, 0x02	; 2
		else
			return 0;		// normal-frame
	}
}
    19cc:	df 91       	pop	r29
    19ce:	cf 91       	pop	r28
    19d0:	1f 91       	pop	r17
    19d2:	08 95       	ret

000019d4 <can_check_message>:
// check if there are any new messages waiting

bool mcp2515_check_message(void)
{
	#if defined(MCP2515_INT)
		return ((!IS_SET(MCP2515_INT)) ? true : false);
    19d4:	86 b1       	in	r24, 0x06	; 6
    19d6:	80 95       	com	r24
				return false;
		#else
			return ((mcp2515_read_status(SPI_RX_STATUS) & 0xC0) ? true : false);
		#endif
	#endif
}
    19d8:	81 70       	andi	r24, 0x01	; 1
    19da:	08 95       	ret

000019dc <can_check_free_buffer>:
// ----------------------------------------------------------------------------
// check if there is a free buffer to send messages

bool mcp2515_check_free_buffer(void)
{
	uint8_t status = mcp2515_read_status(SPI_READ_STATUS);
    19dc:	80 ea       	ldi	r24, 0xA0	; 160
    19de:	0e 94 b2 0b 	call	0x1764	; 0x1764 <mcp2515_read_status>
	
	if ((status & 0x54) == 0x54)
    19e2:	98 2f       	mov	r25, r24
    19e4:	94 75       	andi	r25, 0x54	; 84
    19e6:	81 e0       	ldi	r24, 0x01	; 1
    19e8:	94 35       	cpi	r25, 0x54	; 84
    19ea:	09 f4       	brne	.+2      	; 0x19ee <can_check_free_buffer+0x12>
    19ec:	80 e0       	ldi	r24, 0x00	; 0
		return false;		// all buffers used
	else
		return true;
}
    19ee:	08 95       	ret

000019f0 <mcp2515_write_id>:

void mcp2515_write_id(const uint16_t *id)
{
	uint8_t tmp;
	
	spi_start(*id >> 3);
    19f0:	fc 01       	movw	r30, r24
    19f2:	20 81       	ld	r18, Z
    19f4:	31 81       	ldd	r19, Z+1	; 0x01
    19f6:	83 e0       	ldi	r24, 0x03	; 3
    19f8:	36 95       	lsr	r19
    19fa:	27 95       	ror	r18
    19fc:	8a 95       	dec	r24
    19fe:	e1 f7       	brne	.-8      	; 0x19f8 <mcp2515_write_id+0x8>
}

#else

static void spi_start(uint8_t data) {
	SPDR = data;
    1a00:	2e bd       	out	0x2e, r18	; 46
void mcp2515_write_id(const uint16_t *id)
{
	uint8_t tmp;
	
	spi_start(*id >> 3);
	tmp = *((uint8_t *) id) << 5;
    1a02:	80 81       	ld	r24, Z
    1a04:	82 95       	swap	r24
    1a06:	88 0f       	add	r24, r24
    1a08:	80 7e       	andi	r24, 0xE0	; 224
	SPDR = data;
}

static uint8_t spi_wait(void) {
	// warten bis der vorherige Werte geschrieben wurde
	while(!(SPSR & (1<<SPIF)))
    1a0a:	0d b4       	in	r0, 0x2d	; 45
    1a0c:	07 fe       	sbrs	r0, 7
    1a0e:	fd cf       	rjmp	.-6      	; 0x1a0a <mcp2515_write_id+0x1a>
		;
	
	return SPDR;
    1a10:	9e b5       	in	r25, 0x2e	; 46
	
	spi_start(*id >> 3);
	tmp = *((uint8_t *) id) << 5;
	spi_wait();
	
	spi_putc(tmp);
    1a12:	0e 94 30 0c 	call	0x1860	; 0x1860 <spi_putc>
	spi_putc(0);
    1a16:	80 e0       	ldi	r24, 0x00	; 0
    1a18:	0e 94 30 0c 	call	0x1860	; 0x1860 <spi_putc>
	spi_putc(0);
    1a1c:	80 e0       	ldi	r24, 0x00	; 0
    1a1e:	0c 94 30 0c 	jmp	0x1860	; 0x1860 <spi_putc>

00001a22 <can_send_message>:

#include <util/delay.h>

// ----------------------------------------------------------------------------
uint8_t mcp2515_send_message(const can_t *msg)
{
    1a22:	ef 92       	push	r14
    1a24:	ff 92       	push	r15
    1a26:	0f 93       	push	r16
    1a28:	1f 93       	push	r17
    1a2a:	cf 93       	push	r28
    1a2c:	df 93       	push	r29
    1a2e:	ec 01       	movw	r28, r24
	// Status des MCP2515 auslesen
	uint8_t status = mcp2515_read_status(SPI_READ_STATUS);
    1a30:	80 ea       	ldi	r24, 0xA0	; 160
    1a32:	0e 94 b2 0b 	call	0x1764	; 0x1764 <mcp2515_read_status>
	 *  2	TXB0CNTRL.TXREQ
	 *  4	TXB1CNTRL.TXREQ
	 *  6	TXB2CNTRL.TXREQ
	 */
	uint8_t address;
	if (_bit_is_clear(status, 2)) {
    1a36:	82 ff       	sbrs	r24, 2
    1a38:	07 c0       	rjmp	.+14     	; 0x1a48 <can_send_message+0x26>
		address = 0x00;
	}
	else if (_bit_is_clear(status, 4)) {
    1a3a:	84 ff       	sbrs	r24, 4
    1a3c:	07 c0       	rjmp	.+14     	; 0x1a4c <can_send_message+0x2a>
		address = 0x02;
	} 
	else if (_bit_is_clear(status, 6)) {
    1a3e:	86 fd       	sbrc	r24, 6
    1a40:	3c c0       	rjmp	.+120    	; 0x1aba <can_send_message+0x98>
		address = 0x04;
    1a42:	94 e0       	ldi	r25, 0x04	; 4
    1a44:	f9 2e       	mov	r15, r25
    1a46:	04 c0       	rjmp	.+8      	; 0x1a50 <can_send_message+0x2e>
	 *  4	TXB1CNTRL.TXREQ
	 *  6	TXB2CNTRL.TXREQ
	 */
	uint8_t address;
	if (_bit_is_clear(status, 2)) {
		address = 0x00;
    1a48:	f1 2c       	mov	r15, r1
    1a4a:	02 c0       	rjmp	.+4      	; 0x1a50 <can_send_message+0x2e>
	}
	else if (_bit_is_clear(status, 4)) {
		address = 0x02;
    1a4c:	82 e0       	ldi	r24, 0x02	; 2
    1a4e:	f8 2e       	mov	r15, r24
		// Alle Puffer sind belegt,
		// Nachricht kann nicht verschickt werden
		return 0;
	}
	
	RESET(MCP2515_CS);
    1a50:	2a 98       	cbi	0x05, 2	; 5
	spi_putc(SPI_WRITE_TX | address);
    1a52:	8f 2d       	mov	r24, r15
    1a54:	80 64       	ori	r24, 0x40	; 64
    1a56:	0e 94 30 0c 	call	0x1860	; 0x1860 <spi_putc>
	#if SUPPORT_EXTENDED_CANID
		mcp2515_write_id(&msg->id, msg->flags.extended);
	#else
		mcp2515_write_id(&msg->id);
    1a5a:	ce 01       	movw	r24, r28
    1a5c:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <mcp2515_write_id>
	#endif
	uint8_t length = msg->length & 0x0f;
    1a60:	eb 80       	ldd	r14, Y+3	; 0x03
    1a62:	8e 2d       	mov	r24, r14
    1a64:	8f 70       	andi	r24, 0x0F	; 15
    1a66:	e8 2e       	mov	r14, r24
	
	// Ist die Nachricht ein "Remote Transmit Request" ?
	if (msg->flags.rtr)
    1a68:	8a 81       	ldd	r24, Y+2	; 0x02
    1a6a:	80 ff       	sbrs	r24, 0
    1a6c:	05 c0       	rjmp	.+10     	; 0x1a78 <can_send_message+0x56>
	{
		// Ein RTR hat zwar eine Laenge,
		// enthaelt aber keine Daten
		
		// Nachrichten Laenge + RTR einstellen
		spi_putc((1<<RTR) | length);
    1a6e:	8e 2d       	mov	r24, r14
    1a70:	80 64       	ori	r24, 0x40	; 64
    1a72:	0e 94 30 0c 	call	0x1860	; 0x1860 <spi_putc>
    1a76:	10 c0       	rjmp	.+32     	; 0x1a98 <can_send_message+0x76>
	}
	else
	{
		// Nachrichten Laenge einstellen
		spi_putc(length);
    1a78:	8e 2d       	mov	r24, r14
    1a7a:	0e 94 30 0c 	call	0x1860	; 0x1860 <spi_putc>
		
		// Daten
		for (uint8_t i=0;i<length;i++) {
    1a7e:	00 e0       	ldi	r16, 0x00	; 0
    1a80:	10 e0       	ldi	r17, 0x00	; 0
    1a82:	0e 15       	cp	r16, r14
    1a84:	48 f4       	brcc	.+18     	; 0x1a98 <can_send_message+0x76>
    1a86:	fe 01       	movw	r30, r28
    1a88:	e0 0f       	add	r30, r16
    1a8a:	f1 1f       	adc	r31, r17
			spi_putc(msg->data[i]);
    1a8c:	84 81       	ldd	r24, Z+4	; 0x04
    1a8e:	0e 94 30 0c 	call	0x1860	; 0x1860 <spi_putc>
    1a92:	0f 5f       	subi	r16, 0xFF	; 255
    1a94:	1f 4f       	sbci	r17, 0xFF	; 255
    1a96:	f5 cf       	rjmp	.-22     	; 0x1a82 <can_send_message+0x60>
		}
	}
	SET(MCP2515_CS);
    1a98:	2a 9a       	sbi	0x05, 2	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1a9a:	85 e0       	ldi	r24, 0x05	; 5
    1a9c:	8a 95       	dec	r24
    1a9e:	f1 f7       	brne	.-4      	; 0x1a9c <can_send_message+0x7a>
    1aa0:	00 00       	nop
	_delay_us(1);
	
	// CAN Nachricht verschicken
	// die letzten drei Bit im RTS Kommando geben an welcher
	// Puffer gesendet werden soll.
	RESET(MCP2515_CS);
    1aa2:	2a 98       	cbi	0x05, 2	; 5
	address = (address == 0) ? 1 : address;
    1aa4:	f1 10       	cpse	r15, r1
    1aa6:	02 c0       	rjmp	.+4      	; 0x1aac <can_send_message+0x8a>
    1aa8:	ff 24       	eor	r15, r15
    1aaa:	f3 94       	inc	r15
	spi_putc(SPI_RTS | address);
    1aac:	8f 2d       	mov	r24, r15
    1aae:	80 68       	ori	r24, 0x80	; 128
    1ab0:	0e 94 30 0c 	call	0x1860	; 0x1860 <spi_putc>
	SET(MCP2515_CS);
    1ab4:	2a 9a       	sbi	0x05, 2	; 5
	
	CAN_INDICATE_TX_TRAFFIC_FUNCTION;
	
	return address;
    1ab6:	8f 2d       	mov	r24, r15
    1ab8:	01 c0       	rjmp	.+2      	; 0x1abc <can_send_message+0x9a>
		address = 0x04;
	}
	else {
		// Alle Puffer sind belegt,
		// Nachricht kann nicht verschickt werden
		return 0;
    1aba:	80 e0       	ldi	r24, 0x00	; 0
	SET(MCP2515_CS);
	
	CAN_INDICATE_TX_TRAFFIC_FUNCTION;
	
	return address;
}
    1abc:	df 91       	pop	r29
    1abe:	cf 91       	pop	r28
    1ac0:	1f 91       	pop	r17
    1ac2:	0f 91       	pop	r16
    1ac4:	ff 90       	pop	r15
    1ac6:	ef 90       	pop	r14
    1ac8:	08 95       	ret

00001aca <main>:
	+ (str[2]-48)*10 + str[3]-48);
	return value;
}

int main(void)
{
    1aca:	cf 93       	push	r28
    1acc:	df 93       	push	r29
    1ace:	cd b7       	in	r28, 0x3d	; 61
    1ad0:	de b7       	in	r29, 0x3e	; 62
    1ad2:	ca 5a       	subi	r28, 0xAA	; 170
    1ad4:	d1 09       	sbc	r29, r1
    1ad6:	0f b6       	in	r0, 0x3f	; 63
    1ad8:	f8 94       	cli
    1ada:	de bf       	out	0x3e, r29	; 62
    1adc:	0f be       	out	0x3f, r0	; 63
    1ade:	cd bf       	out	0x3d, r28	; 61
	flags.mode = POT_MODE;
    1ae0:	80 91 38 01 	lds	r24, 0x0138
    1ae4:	83 7f       	andi	r24, 0xF3	; 243
    1ae6:	88 60       	ori	r24, 0x08	; 8
    1ae8:	80 93 38 01 	sts	0x0138, r24
	status.freq = 1000;
    1aec:	88 ee       	ldi	r24, 0xE8	; 232
    1aee:	93 e0       	ldi	r25, 0x03	; 3
    1af0:	90 93 3a 01 	sts	0x013A, r25
    1af4:	80 93 39 01 	sts	0x0139, r24
	status.on = 0;			//indica que o sistema inicia sem acionar o motor
    1af8:	10 92 41 01 	sts	0x0141, r1
	status.dc = 0;
    1afc:	10 92 3d 01 	sts	0x013D, r1
	status.voltage = 0;
    1b00:	10 92 40 01 	sts	0x0140, r1
    1b04:	10 92 3f 01 	sts	0x013F, r1

	// VARIAVEIS LOCAIS;
	char frameData[50];
	uint8 frameIndex = 0;
	char recebido[100] = "";
    1b08:	19 82       	std	Y+1, r1	; 0x01
    1b0a:	1a 82       	std	Y+2, r1	; 0x02
    1b0c:	1b 82       	std	Y+3, r1	; 0x03
    1b0e:	1c 82       	std	Y+4, r1	; 0x04
    1b10:	fe 01       	movw	r30, r28
    1b12:	35 96       	adiw	r30, 0x05	; 5
    1b14:	80 e6       	ldi	r24, 0x60	; 96
    1b16:	df 01       	movw	r26, r30
    1b18:	1d 92       	st	X+, r1
    1b1a:	8a 95       	dec	r24
    1b1c:	e9 f7       	brne	.-6      	; 0x1b18 <main+0x4e>
	char msgToSend[8] = "";
    1b1e:	cd 55       	subi	r28, 0x5D	; 93
    1b20:	df 4f       	sbci	r29, 0xFF	; 255
    1b22:	18 82       	st	Y, r1
    1b24:	19 82       	std	Y+1, r1	; 0x01
    1b26:	1a 82       	std	Y+2, r1	; 0x02
    1b28:	1b 82       	std	Y+3, r1	; 0x03
    1b2a:	c3 5a       	subi	r28, 0xA3	; 163
    1b2c:	d0 40       	sbci	r29, 0x00	; 0
    1b2e:	c9 55       	subi	r28, 0x59	; 89
    1b30:	df 4f       	sbci	r29, 0xFF	; 255
    1b32:	18 82       	st	Y, r1
    1b34:	19 82       	std	Y+1, r1	; 0x01
    1b36:	1a 82       	std	Y+2, r1	; 0x02
    1b38:	1b 82       	std	Y+3, r1	; 0x03
    1b3a:	c7 5a       	subi	r28, 0xA7	; 167
    1b3c:	d0 40       	sbci	r29, 0x00	; 0
	uint8 pos =  0;
	
	// CONFIGURA ADC
	clrBit(DDRC,POT_BIT);		//SETA O PINO DO ADC COMO ENTRADA
    1b3e:	39 98       	cbi	0x07, 1	; 7
	clrBit(DDRD,FAULT_BIT);     //SETA O PINO DO FAULT DO DRIVER COMO ENTRADA
    1b40:	53 98       	cbi	0x0a, 3	; 10
	clrBit(PORTD,FAULT_BIT);	//DESABILITA O PULL-UP NO PINO PD3 DO ATmega328
    1b42:	5b 98       	cbi	0x0b, 3	; 11
	adcConfig(ADC_MODE_SINGLE_CONVERSION, ADC_REFRENCE_POWER_SUPPLY , ADC_PRESCALER_128);
    1b44:	47 e0       	ldi	r20, 0x07	; 7
    1b46:	61 e0       	ldi	r22, 0x01	; 1
    1b48:	80 e0       	ldi	r24, 0x00	; 0
    1b4a:	0e 94 13 09 	call	0x1226	; 0x1226 <adcConfig>
	adcSelectChannel(POT_CHANNEL);
    1b4e:	81 e0       	ldi	r24, 0x01	; 1
    1b50:	0e 94 54 09 	call	0x12a8	; 0x12a8 <adcSelectChannel>
	adcClearInterruptRequest();
    1b54:	0e 94 86 09 	call	0x130c	; 0x130c <adcClearInterruptRequest>
	adcActivateInterrupt();
    1b58:	0e 94 8d 09 	call	0x131a	; 0x131a <adcActivateInterrupt>
	adcEnable();
    1b5c:	0e 94 78 09 	call	0x12f0	; 0x12f0 <adcEnable>
	adcStartConversion();
    1b60:	0e 94 9b 09 	call	0x1336	; 0x1336 <adcStartConversion>
	
	// CONFIGURA PWM
	timer1Config(TIMER_B_MODE_CTC, TIMER_A_PRESCALER_64);
    1b64:	63 e0       	ldi	r22, 0x03	; 3
    1b66:	84 e0       	ldi	r24, 0x04	; 4
    1b68:	0e 94 ca 07 	call	0xf94	; 0xf94 <timer1Config>
	timer1ClearCompareBInterruptRequest();									
    1b6c:	0e 94 35 08 	call	0x106a	; 0x106a <timer1ClearCompareBInterruptRequest>
	timer1ClearCompareAInterruptRequest();
    1b70:	0e 94 24 08 	call	0x1048	; 0x1048 <timer1ClearCompareAInterruptRequest>
	timer1ActivateCompareBInterrupt();									//ativa a interrupcao do compA
    1b74:	0e 94 27 08 	call	0x104e	; 0x104e <timer1ActivateCompareBInterrupt>
	timer1ActivateCompareAInterrupt();									//ativa a interrupcao do compB
    1b78:	0e 94 16 08 	call	0x102c	; 0x102c <timer1ActivateCompareAInterrupt>
	timer1SetCompareAValue((F_CPU/64)/status.freq);							//valor do comparador A,  define a frequencia
    1b7c:	20 91 39 01 	lds	r18, 0x0139
    1b80:	30 91 3a 01 	lds	r19, 0x013A
    1b84:	40 e0       	ldi	r20, 0x00	; 0
    1b86:	50 e0       	ldi	r21, 0x00	; 0
    1b88:	60 e9       	ldi	r22, 0x90	; 144
    1b8a:	70 ed       	ldi	r23, 0xD0	; 208
    1b8c:	83 e0       	ldi	r24, 0x03	; 3
    1b8e:	90 e0       	ldi	r25, 0x00	; 0
    1b90:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <__udivmodsi4>
    1b94:	c9 01       	movw	r24, r18
    1b96:	0e 94 65 08 	call	0x10ca	; 0x10ca <timer1SetCompareAValue>
	timer1SetCompareBValue((status.dc * (timer1GetCompareAValue()))/100);		//valor do comparador B,  define Duty Cicle
    1b9a:	00 91 3d 01 	lds	r16, 0x013D
    1b9e:	10 e0       	ldi	r17, 0x00	; 0
    1ba0:	0e 94 6e 08 	call	0x10dc	; 0x10dc <timer1GetCompareAValue>
    1ba4:	9c 01       	movw	r18, r24
    1ba6:	20 9f       	mul	r18, r16
    1ba8:	c0 01       	movw	r24, r0
    1baa:	21 9f       	mul	r18, r17
    1bac:	90 0d       	add	r25, r0
    1bae:	30 9f       	mul	r19, r16
    1bb0:	90 0d       	add	r25, r0
    1bb2:	11 24       	eor	r1, r1
    1bb4:	64 e6       	ldi	r22, 0x64	; 100
    1bb6:	70 e0       	ldi	r23, 0x00	; 0
    1bb8:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <__udivmodhi4>
    1bbc:	cb 01       	movw	r24, r22
    1bbe:	0e 94 73 08 	call	0x10e6	; 0x10e6 <timer1SetCompareBValue>

	// CONFIGURA A INTERRUPÇÃO DE CONTROLE(60Hz)
	timer0Config(TIMER_A_MODE_NORMAL, TIMER_A_PRESCALER_1024);			
    1bc2:	65 e0       	ldi	r22, 0x05	; 5
    1bc4:	80 e0       	ldi	r24, 0x00	; 0
    1bc6:	0e 94 25 07 	call	0xe4a	; 0xe4a <timer0Config>
	timer0ClearOverflowInterruptRequest();								//limpa a interrupcao de OVF
    1bca:	0e 94 98 07 	call	0xf30	; 0xf30 <timer0ClearOverflowInterruptRequest>
	timer0ActivateOverflowInterrupt();
    1bce:	0e 94 8c 07 	call	0xf18	; 0xf18 <timer0ActivateOverflowInterrupt>
						
	// CONFIGURA A USART
	usartConfig(USART_MODE_ASYNCHRONOUS,USART_BAUD_9600 ,USART_DATA_BITS_8,USART_PARITY_NONE,USART_STOP_BIT_SINGLE);
    1bd2:	e1 2c       	mov	r14, r1
    1bd4:	00 e0       	ldi	r16, 0x00	; 0
    1bd6:	23 e0       	ldi	r18, 0x03	; 3
    1bd8:	40 e8       	ldi	r20, 0x80	; 128
    1bda:	55 e2       	ldi	r21, 0x25	; 37
    1bdc:	60 e0       	ldi	r22, 0x00	; 0
    1bde:	70 e0       	ldi	r23, 0x00	; 0
    1be0:	80 e0       	ldi	r24, 0x00	; 0
    1be2:	0e 94 ae 09 	call	0x135c	; 0x135c <usartConfig>
	usartEnableReceiver();
    1be6:	0e 94 33 0a 	call	0x1466	; 0x1466 <usartEnableReceiver>
	usartEnableTransmitter();
    1bea:	0e 94 41 0a 	call	0x1482	; 0x1482 <usartEnableTransmitter>
	usartActivateReceptionCompleteInterrupt();
    1bee:	0e 94 4f 0a 	call	0x149e	; 0x149e <usartActivateReceptionCompleteInterrupt>

	// Initializa MCP2515
	can_init(BITRATE_125_KBPS);
    1bf2:	84 e0       	ldi	r24, 0x04	; 4
    1bf4:	0e 94 ba 0b 	call	0x1774	; 0x1774 <can_init>
	can_set_mode(NORMAL_MODE);
    1bf8:	82 e0       	ldi	r24, 0x02	; 2
    1bfa:	0e 94 36 0c 	call	0x186c	; 0x186c <can_set_mode>

	setBit(PWM_DDR,PWM_BIT);			//define o pino do pwm como saída
    1bfe:	21 9a       	sbi	0x04, 1	; 4

	setBit(ON_PORT,ON_BIT);				//habilita o pull-up da chave on
    1c00:	5d 9a       	sbi	0x0b, 5	; 11
	setBit(DMS_PORT,DMS_BIT);			//habilita o pull-up da chave dms
    1c02:	5c 9a       	sbi	0x0b, 4	; 11

	setBit(PORTC,POT_BIT);				//habilita o pull-up do potenciometro
    1c04:	41 9a       	sbi	0x08, 1	; 8

	//configura o led e liga ele
	setBit(LED_DDR,LED_BIT);			
    1c06:	3d 9a       	sbi	0x07, 5	; 7
	setBit(LED_PORT,LED_BIT);
    1c08:	45 9a       	sbi	0x08, 5	; 8

	//configura o buzzer e da sinal de alerta de ligação
	setBit(BUZZER_DDR,BUZZER_BIT);			
    1c0a:	3c 9a       	sbi	0x07, 4	; 7
	setBit(BUZZER_PORT,BUZZER_BIT);
    1c0c:	44 9a       	sbi	0x08, 4	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1c0e:	3f ef       	ldi	r19, 0xFF	; 255
    1c10:	83 ed       	ldi	r24, 0xD3	; 211
    1c12:	90 e3       	ldi	r25, 0x30	; 48
    1c14:	31 50       	subi	r19, 0x01	; 1
    1c16:	80 40       	sbci	r24, 0x00	; 0
    1c18:	90 40       	sbci	r25, 0x00	; 0
    1c1a:	e1 f7       	brne	.-8      	; 0x1c14 <main+0x14a>
    1c1c:	00 c0       	rjmp	.+0      	; 0x1c1e <main+0x154>
    1c1e:	00 00       	nop
	_delay_ms(1000);
	clrBit(BUZZER_PORT,BUZZER_BIT);
    1c20:	44 98       	cbi	0x08, 4	; 8
	
	sei();
    1c22:	78 94       	sei
	status.dc = 0;
	status.voltage = 0;

	// VARIAVEIS LOCAIS;
	char frameData[50];
	uint8 frameIndex = 0;
    1c24:	91 2c       	mov	r9, r1
    				flags.mode = CAN_MODE;
    			}
    			flags.can_connected = 1;
    			flags.dms = msg.data[1] | 1 << CAN_DMS_BIT;
    			flags.on = msg.data[1] | 1 << CAN_ON_BIT;
    			dcReq = (1023 - (((msg.data[1] & 0b00000011 ) << 8) | msg.data[0]))/10;
    1c26:	0f ef       	ldi	r16, 0xFF	; 255
    1c28:	13 e0       	ldi	r17, 0x03	; 3
			status.freq = MAX_FREQ;
		else
			status.freq = freqReq;
	}
	seta_dc(0);//faz com que o dc va a 0 na mudanca de frequencia
	timer1SetCompareAValue((F_CPU/1024)/status.freq);
    1c2a:	39 e0       	ldi	r19, 0x09	; 9
    1c2c:	e3 2e       	mov	r14, r19
    1c2e:	3d e3       	ldi	r19, 0x3D	; 61
    1c30:	f3 2e       	mov	r15, r19
	
	sei();

    for(;;)
    {
    	if (can_check_message()){//se chegou uma msg pelo protocolo CAN
    1c32:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <can_check_message>
    1c36:	88 23       	and	r24, r24
    1c38:	09 f4       	brne	.+2      	; 0x1c3c <main+0x172>
    1c3a:	43 c0       	rjmp	.+134    	; 0x1cc2 <main+0x1f8>
    		can_t msg;
    		can_get_message(&msg);
    1c3c:	ce 01       	movw	r24, r28
    1c3e:	89 56       	subi	r24, 0x69	; 105
    1c40:	9f 4f       	sbci	r25, 0xFF	; 255
    1c42:	0e 94 56 0c 	call	0x18ac	; 0x18ac <can_get_message>
    		if(msg.id == ID_MI_CHOPPER){
    1c46:	c9 56       	subi	r28, 0x69	; 105
    1c48:	df 4f       	sbci	r29, 0xFF	; 255
    1c4a:	88 81       	ld	r24, Y
    1c4c:	99 81       	ldd	r25, Y+1	; 0x01
    1c4e:	c7 59       	subi	r28, 0x97	; 151
    1c50:	d0 40       	sbci	r29, 0x00	; 0
    1c52:	81 15       	cp	r24, r1
    1c54:	90 43       	sbci	r25, 0x30	; 48
    1c56:	a9 f5       	brne	.+106    	; 0x1cc2 <main+0x1f8>
    			if(flags.mode != CAN_MODE)
    1c58:	80 91 38 01 	lds	r24, 0x0138
    1c5c:	98 2f       	mov	r25, r24
    1c5e:	9c 70       	andi	r25, 0x0C	; 12
    1c60:	29 f0       	breq	.+10     	; 0x1c6c <main+0x1a2>
    			{ 
    				status.on = 0;			//reseta o sistema
    1c62:	10 92 41 01 	sts	0x0141, r1
    				flags.mode = CAN_MODE;
    1c66:	83 7f       	andi	r24, 0xF3	; 243
    1c68:	80 93 38 01 	sts	0x0138, r24
    			}
    			flags.can_connected = 1;
    1c6c:	90 91 38 01 	lds	r25, 0x0138
    			flags.dms = msg.data[1] | 1 << CAN_DMS_BIT;
    1c70:	c4 56       	subi	r28, 0x64	; 100
    1c72:	df 4f       	sbci	r29, 0xFF	; 255
    1c74:	88 81       	ld	r24, Y
    1c76:	cc 59       	subi	r28, 0x9C	; 156
    1c78:	d0 40       	sbci	r29, 0x00	; 0
    1c7a:	28 2f       	mov	r18, r24
    1c7c:	20 64       	ori	r18, 0x40	; 64
    1c7e:	90 64       	ori	r25, 0x40	; 64
    1c80:	20 fb       	bst	r18, 0
    1c82:	95 f9       	bld	r25, 5
    			flags.on = msg.data[1] | 1 << CAN_ON_BIT;
    1c84:	28 2f       	mov	r18, r24
    1c86:	20 62       	ori	r18, 0x20	; 32
    1c88:	20 fb       	bst	r18, 0
    1c8a:	94 f9       	bld	r25, 4
    1c8c:	90 93 38 01 	sts	0x0138, r25
    			dcReq = (1023 - (((msg.data[1] & 0b00000011 ) << 8) | msg.data[0]))/10;
    1c90:	83 70       	andi	r24, 0x03	; 3
    1c92:	90 e0       	ldi	r25, 0x00	; 0
    1c94:	98 2f       	mov	r25, r24
    1c96:	88 27       	eor	r24, r24
    1c98:	c5 56       	subi	r28, 0x65	; 101
    1c9a:	df 4f       	sbci	r29, 0xFF	; 255
    1c9c:	28 81       	ld	r18, Y
    1c9e:	cb 59       	subi	r28, 0x9B	; 155
    1ca0:	d0 40       	sbci	r29, 0x00	; 0
    1ca2:	82 2b       	or	r24, r18
    1ca4:	98 01       	movw	r18, r16
    1ca6:	28 1b       	sub	r18, r24
    1ca8:	39 0b       	sbc	r19, r25
    1caa:	c9 01       	movw	r24, r18
    1cac:	6a e0       	ldi	r22, 0x0A	; 10
    1cae:	70 e0       	ldi	r23, 0x00	; 0
    1cb0:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <__divmodhi4>
    1cb4:	60 93 36 01 	sts	0x0136, r22
    			can_send_message(&msg);
    1cb8:	ce 01       	movw	r24, r28
    1cba:	89 56       	subi	r24, 0x69	; 105
    1cbc:	9f 4f       	sbci	r25, 0xFF	; 255
    1cbe:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <can_send_message>
{
	if(freqReq < MIN_FREQ)
		status.freq = MIN_FREQ;
	else{
		if(freqReq > MAX_FREQ)
			status.freq = MAX_FREQ;
    1cc2:	88 ee       	ldi	r24, 0xE8	; 232
    1cc4:	c8 2e       	mov	r12, r24
    1cc6:	83 e0       	ldi	r24, 0x03	; 3
    1cc8:	d8 2e       	mov	r13, r24
}

inline void seta_freq(uint16 freqReq)		//função para definição da frequencia do PWM
{
	if(freqReq < MIN_FREQ)
		status.freq = MIN_FREQ;
    1cca:	94 ef       	ldi	r25, 0xF4	; 244
    1ccc:	a9 2e       	mov	r10, r25
    1cce:	bb 24       	eor	r11, r11
    1cd0:	b3 94       	inc	r11
    			flags.on = msg.data[1] | 1 << CAN_ON_BIT;
    			dcReq = (1023 - (((msg.data[1] & 0b00000011 ) << 8) | msg.data[0]))/10;
    			can_send_message(&msg);
    		}
    	}
    	while(!usartIsReceiverBufferEmpty())
    1cd2:	0e 94 55 0b 	call	0x16aa	; 0x16aa <usartIsReceiverBufferEmpty>
    1cd6:	81 11       	cpse	r24, r1
    1cd8:	ac cf       	rjmp	.-168    	; 0x1c32 <main+0x168>
    	{
			frameData[frameIndex++] = usartGetDataFromReceiverBuffer();
    1cda:	88 24       	eor	r8, r8
    1cdc:	83 94       	inc	r8
    1cde:	89 0c       	add	r8, r9
    1ce0:	0e 94 33 0b 	call	0x1666	; 0x1666 <usartGetDataFromReceiverBuffer>
    1ce4:	e5 e6       	ldi	r30, 0x65	; 101
    1ce6:	f0 e0       	ldi	r31, 0x00	; 0
    1ce8:	ec 0f       	add	r30, r28
    1cea:	fd 1f       	adc	r31, r29
    1cec:	e9 0d       	add	r30, r9
    1cee:	f1 1d       	adc	r31, r1
    1cf0:	80 83       	st	Z, r24
			if ((frameData[frameIndex-1] == FINALDOPACOTE))
    1cf2:	e5 e6       	ldi	r30, 0x65	; 101
    1cf4:	f0 e0       	ldi	r31, 0x00	; 0
    1cf6:	ec 0f       	add	r30, r28
    1cf8:	fd 1f       	adc	r31, r29
    1cfa:	e8 0d       	add	r30, r8
    1cfc:	f1 1d       	adc	r31, r1
    1cfe:	31 97       	sbiw	r30, 0x01	; 1
    1d00:	80 81       	ld	r24, Z
    1d02:	8a 32       	cpi	r24, 0x2A	; 42
    1d04:	11 f0       	breq	.+4      	; 0x1d0a <main+0x240>
    			can_send_message(&msg);
    		}
    	}
    	while(!usartIsReceiverBufferEmpty())
    	{
			frameData[frameIndex++] = usartGetDataFromReceiverBuffer();
    1d06:	98 2c       	mov	r9, r8
    1d08:	e4 cf       	rjmp	.-56     	; 0x1cd2 <main+0x208>
			if ((frameData[frameIndex-1] == FINALDOPACOTE))
			{//se esta no final da palavra
				if(frameData[0] == INICIODOPACOTE )
    1d0a:	a6 96       	adiw	r28, 0x26	; 38
    1d0c:	8f ad       	ldd	r24, Y+63	; 0x3f
    1d0e:	a6 97       	sbiw	r28, 0x26	; 38
    1d10:	80 34       	cpi	r24, 0x40	; 64
    1d12:	09 f0       	breq	.+2      	; 0x1d16 <main+0x24c>
    1d14:	1f c1       	rjmp	.+574    	; 0x1f54 <main+0x48a>
				{//verifica se o inicio da palavra esta correto
					strcpy(recebido,frameData);
    1d16:	be 01       	movw	r22, r28
    1d18:	6b 59       	subi	r22, 0x9B	; 155
    1d1a:	7f 4f       	sbci	r23, 0xFF	; 255
    1d1c:	ce 01       	movw	r24, r28
    1d1e:	01 96       	adiw	r24, 0x01	; 1
    1d20:	0e 94 27 10 	call	0x204e	; 0x204e <strcpy>
					pos = (recebido[2]-48) + (recebido[1] - 48)*10;
    1d24:	8b 81       	ldd	r24, Y+3	; 0x03
    1d26:	80 53       	subi	r24, 0x30	; 48
    1d28:	9a 81       	ldd	r25, Y+2	; 0x02
    1d2a:	99 0f       	add	r25, r25
    1d2c:	90 56       	subi	r25, 0x60	; 96
    1d2e:	29 2f       	mov	r18, r25
    1d30:	22 0f       	add	r18, r18
    1d32:	22 0f       	add	r18, r18
    1d34:	29 0f       	add	r18, r25
    1d36:	82 0f       	add	r24, r18
					if(frameIndex == GETWORDSIZE)
    1d38:	34 e0       	ldi	r19, 0x04	; 4
    1d3a:	83 12       	cpse	r8, r19
    1d3c:	6c c0       	rjmp	.+216    	; 0x1e16 <main+0x34c>
					{
						memcpy( recebido,  (recebido+1), 2);
    1d3e:	2a 81       	ldd	r18, Y+2	; 0x02
    1d40:	3b 81       	ldd	r19, Y+3	; 0x03
    1d42:	3a 83       	std	Y+2, r19	; 0x02
    1d44:	29 83       	std	Y+1, r18	; 0x01
						recebido[2] = '\0';//isola o id
    1d46:	1b 82       	std	Y+3, r1	; 0x03
						switch (pos)
    1d48:	90 e0       	ldi	r25, 0x00	; 0
    1d4a:	8e 30       	cpi	r24, 0x0E	; 14
    1d4c:	91 05       	cpc	r25, r1
    1d4e:	08 f0       	brcs	.+2      	; 0x1d52 <main+0x288>
    1d50:	48 c0       	rjmp	.+144    	; 0x1de2 <main+0x318>
    1d52:	fc 01       	movw	r30, r24
    1d54:	ec 5c       	subi	r30, 0xCC	; 204
    1d56:	ff 4f       	sbci	r31, 0xFF	; 255
    1d58:	0c 94 f8 0f 	jmp	0x1ff0	; 0x1ff0 <__tablejump2__>
						{
							case 0:
								strcpy(msgToSend,"OK");
    1d5c:	68 e1       	ldi	r22, 0x18	; 24
    1d5e:	71 e0       	ldi	r23, 0x01	; 1
    1d60:	42 c0       	rjmp	.+132    	; 0x1de6 <main+0x31c>
								break;
							case 1:
								uint16ToString4(msgToSend,status.freq);
    1d62:	60 91 39 01 	lds	r22, 0x0139
    1d66:	70 91 3a 01 	lds	r23, 0x013A
    1d6a:	ce 01       	movw	r24, r28
    1d6c:	8d 55       	subi	r24, 0x5D	; 93
    1d6e:	9f 4f       	sbci	r25, 0xFF	; 255
    1d70:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <uint16ToString4>
								break;
    1d74:	3d c0       	rjmp	.+122    	; 0x1df0 <main+0x326>
							case 2:
								uint8ToString4(msgToSend,maxCurrent);
    1d76:	60 91 06 01 	lds	r22, 0x0106
    1d7a:	22 c0       	rjmp	.+68     	; 0x1dc0 <main+0x2f6>
								break;
							case 3:
								uint8ToString4(msgToSend,maxDC);
    1d7c:	60 91 04 01 	lds	r22, 0x0104
    1d80:	1f c0       	rjmp	.+62     	; 0x1dc0 <main+0x2f6>
								break;
							case 4:
								uint8ToString4(msgToSend,minDC);
    1d82:	60 91 05 01 	lds	r22, 0x0105
    1d86:	1c c0       	rjmp	.+56     	; 0x1dc0 <main+0x2f6>
								break;
							case 5:
								uint8ToString4(msgToSend,maxDV);
    1d88:	60 91 03 01 	lds	r22, 0x0103
    1d8c:	19 c0       	rjmp	.+50     	; 0x1dc0 <main+0x2f6>
								break;
							case 6 :
								if(flags.on)
    1d8e:	80 91 38 01 	lds	r24, 0x0138
    1d92:	84 ff       	sbrs	r24, 4
    1d94:	07 c0       	rjmp	.+14     	; 0x1da4 <main+0x2da>
									strcpy(msgToSend, "0001");
    1d96:	6b e1       	ldi	r22, 0x1B	; 27
    1d98:	71 e0       	ldi	r23, 0x01	; 1
    1d9a:	25 c0       	rjmp	.+74     	; 0x1de6 <main+0x31c>
								else
									strcpy(msgToSend, "0000");
								break;
							case 7:
								if(flags.dms)
    1d9c:	80 91 38 01 	lds	r24, 0x0138
    1da0:	85 fd       	sbrc	r24, 5
    1da2:	f9 cf       	rjmp	.-14     	; 0x1d96 <main+0x2cc>
								break;
							case 6 :
								if(flags.on)
									strcpy(msgToSend, "0001");
								else
									strcpy(msgToSend, "0000");
    1da4:	60 e2       	ldi	r22, 0x20	; 32
    1da6:	71 e0       	ldi	r23, 0x01	; 1
    1da8:	1e c0       	rjmp	.+60     	; 0x1de6 <main+0x31c>
									strcpy(msgToSend, "0001");
								else
									strcpy(msgToSend, "0000");
								break;
							case 8:
								uint8ToString4(msgToSend,maxTemp);
    1daa:	60 91 02 01 	lds	r22, 0x0102
    1dae:	08 c0       	rjmp	.+16     	; 0x1dc0 <main+0x2f6>
								break;
							case 9:
								uint8ToString4(msgToSend,minVoltage);
    1db0:	60 91 00 01 	lds	r22, 0x0100
    1db4:	05 c0       	rjmp	.+10     	; 0x1dc0 <main+0x2f6>
								break;
							case 10:
								uint8ToString4(msgToSend,status.dc);
    1db6:	60 91 3d 01 	lds	r22, 0x013D
    1dba:	02 c0       	rjmp	.+4      	; 0x1dc0 <main+0x2f6>
								break;
							case 11:
								uint8ToString4(msgToSend,status.temperature);
    1dbc:	60 91 3e 01 	lds	r22, 0x013E
    1dc0:	70 e0       	ldi	r23, 0x00	; 0
    1dc2:	09 c0       	rjmp	.+18     	; 0x1dd6 <main+0x30c>
								break;
							case 12:
								uint8ToString4(msgToSend,status.current);
    1dc4:	60 91 3b 01 	lds	r22, 0x013B
    1dc8:	70 91 3c 01 	lds	r23, 0x013C
    1dcc:	04 c0       	rjmp	.+8      	; 0x1dd6 <main+0x30c>
								break;
							case 13:
								uint8ToString4(msgToSend,status.voltage);
    1dce:	60 91 3f 01 	lds	r22, 0x013F
    1dd2:	70 91 40 01 	lds	r23, 0x0140
    1dd6:	ce 01       	movw	r24, r28
    1dd8:	8d 55       	subi	r24, 0x5D	; 93
    1dda:	9f 4f       	sbci	r25, 0xFF	; 255
    1ddc:	0e 94 08 01 	call	0x210	; 0x210 <uint8ToString4>
								break;
    1de0:	07 c0       	rjmp	.+14     	; 0x1df0 <main+0x326>
							default:
								strcpy(msgToSend,"ERRO");
    1de2:	65 e2       	ldi	r22, 0x25	; 37
    1de4:	71 e0       	ldi	r23, 0x01	; 1
    1de6:	ce 01       	movw	r24, r28
    1de8:	8d 55       	subi	r24, 0x5D	; 93
    1dea:	9f 4f       	sbci	r25, 0xFF	; 255
    1dec:	0e 94 27 10 	call	0x204e	; 0x204e <strcpy>
						}
						strcat(recebido,msgToSend);
    1df0:	be 01       	movw	r22, r28
    1df2:	6d 55       	subi	r22, 0x5D	; 93
    1df4:	7f 4f       	sbci	r23, 0xFF	; 255
    1df6:	ce 01       	movw	r24, r28
    1df8:	01 96       	adiw	r24, 0x01	; 1
    1dfa:	0e 94 1c 10 	call	0x2038	; 0x2038 <strcat>
						strcpy(msgToSend,recebido);
    1dfe:	be 01       	movw	r22, r28
    1e00:	6f 5f       	subi	r22, 0xFF	; 255
    1e02:	7f 4f       	sbci	r23, 0xFF	; 255
    1e04:	ce 01       	movw	r24, r28
    1e06:	8d 55       	subi	r24, 0x5D	; 93
    1e08:	9f 4f       	sbci	r25, 0xFF	; 255
    1e0a:	0e 94 27 10 	call	0x204e	; 0x204e <strcpy>

						stringTransmit(msgToSend);
    1e0e:	ce 01       	movw	r24, r28
    1e10:	8d 55       	subi	r24, 0x5D	; 93
    1e12:	9f 4f       	sbci	r25, 0xFF	; 255
    1e14:	98 c0       	rjmp	.+304    	; 0x1f46 <main+0x47c>
					}
					else
					{
						if(frameIndex == SETWORDSIZE)
    1e16:	98 e0       	ldi	r25, 0x08	; 8
    1e18:	89 12       	cpse	r8, r25
    1e1a:	98 c0       	rjmp	.+304    	; 0x1f4c <main+0x482>
						{
							if(flags.mode == SERIAL_MODE){
    1e1c:	90 91 38 01 	lds	r25, 0x0138
    1e20:	9c 70       	andi	r25, 0x0C	; 12
    1e22:	94 30       	cpi	r25, 0x04	; 4
    1e24:	09 f0       	breq	.+2      	; 0x1e28 <main+0x35e>
    1e26:	98 c0       	rjmp	.+304    	; 0x1f58 <main+0x48e>
								memcpy((void *) recebido, (void *) (recebido+3), 4);//isola somente o valor, usando 4 caracteres
    1e28:	4c 81       	ldd	r20, Y+4	; 0x04
    1e2a:	5d 81       	ldd	r21, Y+5	; 0x05
    1e2c:	6e 81       	ldd	r22, Y+6	; 0x06
    1e2e:	7f 81       	ldd	r23, Y+7	; 0x07
    1e30:	49 83       	std	Y+1, r20	; 0x01
    1e32:	5a 83       	std	Y+2, r21	; 0x02
    1e34:	6b 83       	std	Y+3, r22	; 0x03
    1e36:	7c 83       	std	Y+4, r23	; 0x04
								recebido[4] = '\0';
    1e38:	1d 82       	std	Y+5, r1	; 0x05

								switch (pos)
    1e3a:	90 e0       	ldi	r25, 0x00	; 0
    1e3c:	fc 01       	movw	r30, r24
    1e3e:	31 97       	sbiw	r30, 0x01	; 1
    1e40:	ea 30       	cpi	r30, 0x0A	; 10
    1e42:	f1 05       	cpc	r31, r1
    1e44:	08 f0       	brcs	.+2      	; 0x1e48 <main+0x37e>
    1e46:	7d c0       	rjmp	.+250    	; 0x1f42 <main+0x478>
    1e48:	ee 5b       	subi	r30, 0xBE	; 190
    1e4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e4c:	0c 94 f8 0f 	jmp	0x1ff0	; 0x1ff0 <__tablejump2__>
								{
									case 1:
										seta_freq(string4ToUint16(recebido));
    1e50:	ce 01       	movw	r24, r28
    1e52:	01 96       	adiw	r24, 0x01	; 1
    1e54:	0e 94 33 01 	call	0x266	; 0x266 <string4ToUint16>
	}
}

inline void seta_freq(uint16 freqReq)		//função para definição da frequencia do PWM
{
	if(freqReq < MIN_FREQ)
    1e58:	84 3f       	cpi	r24, 0xF4	; 244
    1e5a:	a1 e0       	ldi	r26, 0x01	; 1
    1e5c:	9a 07       	cpc	r25, r26
    1e5e:	28 f4       	brcc	.+10     	; 0x1e6a <main+0x3a0>
		status.freq = MIN_FREQ;
    1e60:	b0 92 3a 01 	sts	0x013A, r11
    1e64:	a0 92 39 01 	sts	0x0139, r10
    1e68:	0d c0       	rjmp	.+26     	; 0x1e84 <main+0x3ba>
	else{
		if(freqReq > MAX_FREQ)
    1e6a:	89 3e       	cpi	r24, 0xE9	; 233
    1e6c:	b3 e0       	ldi	r27, 0x03	; 3
    1e6e:	9b 07       	cpc	r25, r27
    1e70:	28 f0       	brcs	.+10     	; 0x1e7c <main+0x3b2>
			status.freq = MAX_FREQ;
    1e72:	d0 92 3a 01 	sts	0x013A, r13
    1e76:	c0 92 39 01 	sts	0x0139, r12
    1e7a:	04 c0       	rjmp	.+8      	; 0x1e84 <main+0x3ba>
		else
			status.freq = freqReq;
    1e7c:	90 93 3a 01 	sts	0x013A, r25
    1e80:	80 93 39 01 	sts	0x0139, r24
	}
	seta_dc(0);//faz com que o dc va a 0 na mudanca de frequencia
    1e84:	80 e0       	ldi	r24, 0x00	; 0
    1e86:	0e 94 8f 00 	call	0x11e	; 0x11e <seta_dc>
	timer1SetCompareAValue((F_CPU/1024)/status.freq);
    1e8a:	60 91 39 01 	lds	r22, 0x0139
    1e8e:	70 91 3a 01 	lds	r23, 0x013A
    1e92:	c7 01       	movw	r24, r14
    1e94:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <__udivmodhi4>
    1e98:	cb 01       	movw	r24, r22
    1e9a:	0e 94 65 08 	call	0x10ca	; 0x10ca <timer1SetCompareAValue>
    1e9e:	5c c0       	rjmp	.+184    	; 0x1f58 <main+0x48e>
								{
									case 1:
										seta_freq(string4ToUint16(recebido));
										break;
									case 2:
										maxCurrent = string4Touint8(recebido);
    1ea0:	ce 01       	movw	r24, r28
    1ea2:	01 96       	adiw	r24, 0x01	; 1
    1ea4:	0e 94 5e 01 	call	0x2bc	; 0x2bc <string4Touint8>
    1ea8:	80 93 06 01 	sts	0x0106, r24
										break;
    1eac:	55 c0       	rjmp	.+170    	; 0x1f58 <main+0x48e>
									case 3:
										maxDC = string4Touint8(recebido);
    1eae:	ce 01       	movw	r24, r28
    1eb0:	01 96       	adiw	r24, 0x01	; 1
    1eb2:	0e 94 5e 01 	call	0x2bc	; 0x2bc <string4Touint8>
    1eb6:	80 93 04 01 	sts	0x0104, r24
										break;
    1eba:	4e c0       	rjmp	.+156    	; 0x1f58 <main+0x48e>
									case 4:
										minDC = string4Touint8(recebido);
    1ebc:	ce 01       	movw	r24, r28
    1ebe:	01 96       	adiw	r24, 0x01	; 1
    1ec0:	0e 94 5e 01 	call	0x2bc	; 0x2bc <string4Touint8>
    1ec4:	80 93 05 01 	sts	0x0105, r24
										seta_dc(dcReq);
    1ec8:	80 91 36 01 	lds	r24, 0x0136
    1ecc:	0e 94 8f 00 	call	0x11e	; 0x11e <seta_dc>
										break;
    1ed0:	43 c0       	rjmp	.+134    	; 0x1f58 <main+0x48e>
									case 5:
										maxDV = string4Touint8(recebido);
    1ed2:	ce 01       	movw	r24, r28
    1ed4:	01 96       	adiw	r24, 0x01	; 1
    1ed6:	0e 94 5e 01 	call	0x2bc	; 0x2bc <string4Touint8>
    1eda:	80 93 03 01 	sts	0x0103, r24
										break;
    1ede:	3c c0       	rjmp	.+120    	; 0x1f58 <main+0x48e>
									case 6 :
										if(recebido[3] == '1')
    1ee0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ee2:	81 33       	cpi	r24, 0x31	; 49
    1ee4:	21 f4       	brne	.+8      	; 0x1eee <main+0x424>
											flags.on = 1;
    1ee6:	80 91 38 01 	lds	r24, 0x0138
    1eea:	80 61       	ori	r24, 0x10	; 16
    1eec:	0c c0       	rjmp	.+24     	; 0x1f06 <main+0x43c>
										if(recebido[3] == '0')
    1eee:	80 33       	cpi	r24, 0x30	; 48
    1ef0:	99 f5       	brne	.+102    	; 0x1f58 <main+0x48e>
											flags.on = 0;
    1ef2:	80 91 38 01 	lds	r24, 0x0138
    1ef6:	8f 7e       	andi	r24, 0xEF	; 239
    1ef8:	06 c0       	rjmp	.+12     	; 0x1f06 <main+0x43c>
										break;
									case 7:
										if(recebido[3] == '1')
    1efa:	8c 81       	ldd	r24, Y+4	; 0x04
    1efc:	81 33       	cpi	r24, 0x31	; 49
    1efe:	31 f4       	brne	.+12     	; 0x1f0c <main+0x442>
											flags.dms = 1;
    1f00:	80 91 38 01 	lds	r24, 0x0138
    1f04:	80 62       	ori	r24, 0x20	; 32
    1f06:	80 93 38 01 	sts	0x0138, r24
    1f0a:	26 c0       	rjmp	.+76     	; 0x1f58 <main+0x48e>
										if(recebido[3] == '0')
    1f0c:	80 33       	cpi	r24, 0x30	; 48
    1f0e:	21 f5       	brne	.+72     	; 0x1f58 <main+0x48e>
											flags.dms = 0;
    1f10:	80 91 38 01 	lds	r24, 0x0138
    1f14:	8f 7d       	andi	r24, 0xDF	; 223
    1f16:	f7 cf       	rjmp	.-18     	; 0x1f06 <main+0x43c>
										break;
									case 8:
										maxTemp = string4Touint8(recebido);
    1f18:	ce 01       	movw	r24, r28
    1f1a:	01 96       	adiw	r24, 0x01	; 1
    1f1c:	0e 94 5e 01 	call	0x2bc	; 0x2bc <string4Touint8>
    1f20:	80 93 02 01 	sts	0x0102, r24
										break;
    1f24:	19 c0       	rjmp	.+50     	; 0x1f58 <main+0x48e>
									case 9:
										minVoltage = string4Touint8(recebido);
    1f26:	ce 01       	movw	r24, r28
    1f28:	01 96       	adiw	r24, 0x01	; 1
    1f2a:	0e 94 5e 01 	call	0x2bc	; 0x2bc <string4Touint8>
    1f2e:	80 93 00 01 	sts	0x0100, r24
										break;
    1f32:	12 c0       	rjmp	.+36     	; 0x1f58 <main+0x48e>
									case 10:
										//seta_dc(string4Touint8(recebido));
										dcReq = string4Touint8(recebido);
    1f34:	ce 01       	movw	r24, r28
    1f36:	01 96       	adiw	r24, 0x01	; 1
    1f38:	0e 94 5e 01 	call	0x2bc	; 0x2bc <string4Touint8>
    1f3c:	80 93 36 01 	sts	0x0136, r24
										break;
    1f40:	0b c0       	rjmp	.+22     	; 0x1f58 <main+0x48e>
									case 11:
									case 12:
									case 13:

									default:
										stringTransmit("ERRO");
    1f42:	85 e2       	ldi	r24, 0x25	; 37
    1f44:	91 e0       	ldi	r25, 0x01	; 1
    1f46:	0e 94 bc 00 	call	0x178	; 0x178 <stringTransmit>
    1f4a:	06 c0       	rjmp	.+12     	; 0x1f58 <main+0x48e>
								}
							}
						}
						else
						{
							stringTransmit("wrong size");	
    1f4c:	8a e2       	ldi	r24, 0x2A	; 42
    1f4e:	91 e0       	ldi	r25, 0x01	; 1
    1f50:	0e 94 bc 00 	call	0x178	; 0x178 <stringTransmit>
						}
					}
				}
				else
				{//se o inicio da palavra nao esta correto
					esvaziaBuffer();
    1f54:	0e 94 b4 00 	call	0x168	; 0x168 <esvaziaBuffer>
    1f58:	91 2c       	mov	r9, r1
    1f5a:	bb ce       	rjmp	.-650    	; 0x1cd2 <main+0x208>

00001f5c <__udivmodhi4>:
    1f5c:	aa 1b       	sub	r26, r26
    1f5e:	bb 1b       	sub	r27, r27
    1f60:	51 e1       	ldi	r21, 0x11	; 17
    1f62:	07 c0       	rjmp	.+14     	; 0x1f72 <__udivmodhi4_ep>

00001f64 <__udivmodhi4_loop>:
    1f64:	aa 1f       	adc	r26, r26
    1f66:	bb 1f       	adc	r27, r27
    1f68:	a6 17       	cp	r26, r22
    1f6a:	b7 07       	cpc	r27, r23
    1f6c:	10 f0       	brcs	.+4      	; 0x1f72 <__udivmodhi4_ep>
    1f6e:	a6 1b       	sub	r26, r22
    1f70:	b7 0b       	sbc	r27, r23

00001f72 <__udivmodhi4_ep>:
    1f72:	88 1f       	adc	r24, r24
    1f74:	99 1f       	adc	r25, r25
    1f76:	5a 95       	dec	r21
    1f78:	a9 f7       	brne	.-22     	; 0x1f64 <__udivmodhi4_loop>
    1f7a:	80 95       	com	r24
    1f7c:	90 95       	com	r25
    1f7e:	bc 01       	movw	r22, r24
    1f80:	cd 01       	movw	r24, r26
    1f82:	08 95       	ret

00001f84 <__divmodhi4>:
    1f84:	97 fb       	bst	r25, 7
    1f86:	07 2e       	mov	r0, r23
    1f88:	16 f4       	brtc	.+4      	; 0x1f8e <__divmodhi4+0xa>
    1f8a:	00 94       	com	r0
    1f8c:	07 d0       	rcall	.+14     	; 0x1f9c <__divmodhi4_neg1>
    1f8e:	77 fd       	sbrc	r23, 7
    1f90:	09 d0       	rcall	.+18     	; 0x1fa4 <__divmodhi4_neg2>
    1f92:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <__udivmodhi4>
    1f96:	07 fc       	sbrc	r0, 7
    1f98:	05 d0       	rcall	.+10     	; 0x1fa4 <__divmodhi4_neg2>
    1f9a:	3e f4       	brtc	.+14     	; 0x1faa <__divmodhi4_exit>

00001f9c <__divmodhi4_neg1>:
    1f9c:	90 95       	com	r25
    1f9e:	81 95       	neg	r24
    1fa0:	9f 4f       	sbci	r25, 0xFF	; 255
    1fa2:	08 95       	ret

00001fa4 <__divmodhi4_neg2>:
    1fa4:	70 95       	com	r23
    1fa6:	61 95       	neg	r22
    1fa8:	7f 4f       	sbci	r23, 0xFF	; 255

00001faa <__divmodhi4_exit>:
    1faa:	08 95       	ret

00001fac <__udivmodsi4>:
    1fac:	a1 e2       	ldi	r26, 0x21	; 33
    1fae:	1a 2e       	mov	r1, r26
    1fb0:	aa 1b       	sub	r26, r26
    1fb2:	bb 1b       	sub	r27, r27
    1fb4:	fd 01       	movw	r30, r26
    1fb6:	0d c0       	rjmp	.+26     	; 0x1fd2 <__udivmodsi4_ep>

00001fb8 <__udivmodsi4_loop>:
    1fb8:	aa 1f       	adc	r26, r26
    1fba:	bb 1f       	adc	r27, r27
    1fbc:	ee 1f       	adc	r30, r30
    1fbe:	ff 1f       	adc	r31, r31
    1fc0:	a2 17       	cp	r26, r18
    1fc2:	b3 07       	cpc	r27, r19
    1fc4:	e4 07       	cpc	r30, r20
    1fc6:	f5 07       	cpc	r31, r21
    1fc8:	20 f0       	brcs	.+8      	; 0x1fd2 <__udivmodsi4_ep>
    1fca:	a2 1b       	sub	r26, r18
    1fcc:	b3 0b       	sbc	r27, r19
    1fce:	e4 0b       	sbc	r30, r20
    1fd0:	f5 0b       	sbc	r31, r21

00001fd2 <__udivmodsi4_ep>:
    1fd2:	66 1f       	adc	r22, r22
    1fd4:	77 1f       	adc	r23, r23
    1fd6:	88 1f       	adc	r24, r24
    1fd8:	99 1f       	adc	r25, r25
    1fda:	1a 94       	dec	r1
    1fdc:	69 f7       	brne	.-38     	; 0x1fb8 <__udivmodsi4_loop>
    1fde:	60 95       	com	r22
    1fe0:	70 95       	com	r23
    1fe2:	80 95       	com	r24
    1fe4:	90 95       	com	r25
    1fe6:	9b 01       	movw	r18, r22
    1fe8:	ac 01       	movw	r20, r24
    1fea:	bd 01       	movw	r22, r26
    1fec:	cf 01       	movw	r24, r30
    1fee:	08 95       	ret

00001ff0 <__tablejump2__>:
    1ff0:	ee 0f       	add	r30, r30
    1ff2:	ff 1f       	adc	r31, r31

00001ff4 <__tablejump__>:
    1ff4:	05 90       	lpm	r0, Z+
    1ff6:	f4 91       	lpm	r31, Z
    1ff8:	e0 2d       	mov	r30, r0
    1ffa:	09 94       	ijmp

00001ffc <__ashrdi3>:
    1ffc:	97 fb       	bst	r25, 7
    1ffe:	10 f8       	bld	r1, 0

00002000 <__lshrdi3>:
    2000:	16 94       	lsr	r1
    2002:	00 08       	sbc	r0, r0
    2004:	0f 93       	push	r16
    2006:	08 30       	cpi	r16, 0x08	; 8
    2008:	98 f0       	brcs	.+38     	; 0x2030 <__lshrdi3+0x30>
    200a:	08 50       	subi	r16, 0x08	; 8
    200c:	23 2f       	mov	r18, r19
    200e:	34 2f       	mov	r19, r20
    2010:	45 2f       	mov	r20, r21
    2012:	56 2f       	mov	r21, r22
    2014:	67 2f       	mov	r22, r23
    2016:	78 2f       	mov	r23, r24
    2018:	89 2f       	mov	r24, r25
    201a:	90 2d       	mov	r25, r0
    201c:	f4 cf       	rjmp	.-24     	; 0x2006 <__lshrdi3+0x6>
    201e:	05 94       	asr	r0
    2020:	97 95       	ror	r25
    2022:	87 95       	ror	r24
    2024:	77 95       	ror	r23
    2026:	67 95       	ror	r22
    2028:	57 95       	ror	r21
    202a:	47 95       	ror	r20
    202c:	37 95       	ror	r19
    202e:	27 95       	ror	r18
    2030:	0a 95       	dec	r16
    2032:	aa f7       	brpl	.-22     	; 0x201e <__lshrdi3+0x1e>
    2034:	0f 91       	pop	r16
    2036:	08 95       	ret

00002038 <strcat>:
    2038:	fb 01       	movw	r30, r22
    203a:	dc 01       	movw	r26, r24
    203c:	0d 90       	ld	r0, X+
    203e:	00 20       	and	r0, r0
    2040:	e9 f7       	brne	.-6      	; 0x203c <strcat+0x4>
    2042:	11 97       	sbiw	r26, 0x01	; 1
    2044:	01 90       	ld	r0, Z+
    2046:	0d 92       	st	X+, r0
    2048:	00 20       	and	r0, r0
    204a:	e1 f7       	brne	.-8      	; 0x2044 <strcat+0xc>
    204c:	08 95       	ret

0000204e <strcpy>:
    204e:	fb 01       	movw	r30, r22
    2050:	dc 01       	movw	r26, r24
    2052:	01 90       	ld	r0, Z+
    2054:	0d 92       	st	X+, r0
    2056:	00 20       	and	r0, r0
    2058:	e1 f7       	brne	.-8      	; 0x2052 <strcpy+0x4>
    205a:	08 95       	ret

0000205c <_exit>:
    205c:	f8 94       	cli

0000205e <__stop_program>:
    205e:	ff cf       	rjmp	.-2      	; 0x205e <__stop_program>
