
placaAdicionalChopper.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  00001588  0000161c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001588  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000043  00800118  00800118  00001634  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00001634  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00001645  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002c6e  00000000  00000000  0000168d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005cd  00000000  00000000  000042fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000753  00000000  00000000  000048c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000ce4  00000000  00000000  0000501c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000024bb  00000000  00000000  00005d00  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000156b  00000000  00000000  000081bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00009726  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4c 00 	jmp	0x98	; 0x98 <__ctors_end>
       4:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
       8:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
       c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      10:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      14:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      18:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      1c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      20:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      24:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      28:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      2c:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__vector_11>
      30:	0c 94 07 01 	jmp	0x20e	; 0x20e <__vector_12>
      34:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      38:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      3c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      40:	0c 94 18 01 	jmp	0x230	; 0x230 <__vector_16>
      44:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      48:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      4c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      50:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      54:	0c 94 92 00 	jmp	0x124	; 0x124 <__vector_21>
      58:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      5c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      60:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      64:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      68:	b2 01       	movw	r22, r4
      6a:	c2 01       	movw	r24, r4
      6c:	b4 01       	movw	r22, r8
      6e:	b6 01       	movw	r22, r12
      70:	b8 01       	movw	r22, r16
      72:	ba 01       	movw	r22, r20
      74:	bc 01       	movw	r22, r24
      76:	be 01       	movw	r22, r28
      78:	c0 01       	movw	r24, r0
      7a:	e5 05       	cpc	r30, r5
      7c:	d8 05       	cpc	r29, r8
      7e:	da 05       	cpc	r29, r10
      80:	dc 05       	cpc	r29, r12
      82:	de 05       	cpc	r29, r14
      84:	e0 05       	cpc	r30, r0
      86:	e2 05       	cpc	r30, r2
      88:	e4 05       	cpc	r30, r4
      8a:	e0 07       	cpc	r30, r16
      8c:	e2 07       	cpc	r30, r18
      8e:	e4 07       	cpc	r30, r20
      90:	e6 07       	cpc	r30, r22
      92:	e8 07       	cpc	r30, r24
      94:	ea 07       	cpc	r30, r26
      96:	ec 07       	cpc	r30, r28

00000098 <__ctors_end>:
      98:	11 24       	eor	r1, r1
      9a:	1f be       	out	0x3f, r1	; 63
      9c:	cf ef       	ldi	r28, 0xFF	; 255
      9e:	d8 e0       	ldi	r29, 0x08	; 8
      a0:	de bf       	out	0x3e, r29	; 62
      a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
      a4:	11 e0       	ldi	r17, 0x01	; 1
      a6:	a0 e0       	ldi	r26, 0x00	; 0
      a8:	b1 e0       	ldi	r27, 0x01	; 1
      aa:	e8 e8       	ldi	r30, 0x88	; 136
      ac:	f5 e1       	ldi	r31, 0x15	; 21
      ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x10>
      b0:	05 90       	lpm	r0, Z+
      b2:	0d 92       	st	X+, r0
      b4:	a8 31       	cpi	r26, 0x18	; 24
      b6:	b1 07       	cpc	r27, r17
      b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0xc>

000000ba <__do_clear_bss>:
      ba:	21 e0       	ldi	r18, 0x01	; 1
      bc:	a8 e1       	ldi	r26, 0x18	; 24
      be:	b1 e0       	ldi	r27, 0x01	; 1
      c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
      c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
      c4:	ab 35       	cpi	r26, 0x5B	; 91
      c6:	b2 07       	cpc	r27, r18
      c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
      ca:	0e 94 0f 0a 	call	0x141e	; 0x141e <main>
      ce:	0c 94 c2 0a 	jmp	0x1584	; 0x1584 <_exit>

000000d2 <__bad_interrupt>:
      d2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d6 <seta_dc>:
uint8 criticalTemp = 60;		//temperatura critica
uint8 voltage = 0;
uint8 minVotage = 30;

void seta_dc(uint8 d_cycle)		//função para definição do Duty Cicle do PWM
{
      d6:	cf 93       	push	r28
      d8:	c8 2f       	mov	r28, r24
	dcReq = d_cycle;
      da:	80 93 1a 01 	sts	0x011A, r24
	if(dcReq < minDC)				// Comparação com o valor mínimo de Duty Cicle
      de:	80 91 05 01 	lds	r24, 0x0105
      e2:	c8 17       	cp	r28, r24
      e4:	18 f4       	brcc	.+6      	; 0xec <seta_dc+0x16>
		dc = 0;
      e6:	10 92 1b 01 	sts	0x011B, r1
      ea:	1a c0       	rjmp	.+52     	; 0x120 <seta_dc+0x4a>
	else
	{
		if(dcReq > maxDC)			//Comparação com o valor máximo de Duty Cicle
      ec:	80 91 04 01 	lds	r24, 0x0104
      f0:	8c 17       	cp	r24, r28
      f2:	20 f4       	brcc	.+8      	; 0xfc <seta_dc+0x26>
			dc = 100;
      f4:	84 e6       	ldi	r24, 0x64	; 100
      f6:	80 93 1b 01 	sts	0x011B, r24
      fa:	12 c0       	rjmp	.+36     	; 0x120 <seta_dc+0x4a>
		else
		{
			dc = dcReq;
      fc:	c0 93 1b 01 	sts	0x011B, r28
			timer1SetCompareBValue((dc * (timer1GetCompareAValue()))/100);		//seta o valor do comparador B para gerar o DC requerido
     100:	0e 94 12 07 	call	0xe24	; 0xe24 <timer1GetCompareAValue>
     104:	9c 01       	movw	r18, r24
     106:	c2 9f       	mul	r28, r18
     108:	c0 01       	movw	r24, r0
     10a:	c3 9f       	mul	r28, r19
     10c:	90 0d       	add	r25, r0
     10e:	11 24       	eor	r1, r1
     110:	64 e6       	ldi	r22, 0x64	; 100
     112:	70 e0       	ldi	r23, 0x00	; 0
     114:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <__udivmodhi4>
     118:	cb 01       	movw	r24, r22
		}
	}
}
     11a:	cf 91       	pop	r28
		if(dcReq > maxDC)			//Comparação com o valor máximo de Duty Cicle
			dc = 100;
		else
		{
			dc = dcReq;
			timer1SetCompareBValue((dc * (timer1GetCompareAValue()))/100);		//seta o valor do comparador B para gerar o DC requerido
     11c:	0c 94 17 07 	jmp	0xe2e	; 0xe2e <timer1SetCompareBValue>
		}
	}
}
     120:	cf 91       	pop	r28
     122:	08 95       	ret

00000124 <__vector_21>:
    {

    }
}

ISR(ADC_vect){
     124:	1f 92       	push	r1
     126:	0f 92       	push	r0
     128:	0f b6       	in	r0, 0x3f	; 63
     12a:	0f 92       	push	r0
     12c:	11 24       	eor	r1, r1
     12e:	2f 93       	push	r18
     130:	3f 93       	push	r19
     132:	4f 93       	push	r20
     134:	5f 93       	push	r21
     136:	6f 93       	push	r22
     138:	7f 93       	push	r23
     13a:	8f 93       	push	r24
     13c:	9f 93       	push	r25
     13e:	af 93       	push	r26
     140:	bf 93       	push	r27
     142:	ef 93       	push	r30
     144:	ff 93       	push	r31
	switch (channel)
     146:	80 91 09 01 	lds	r24, 0x0109
     14a:	81 30       	cpi	r24, 0x01	; 1
     14c:	d1 f0       	breq	.+52     	; 0x182 <__vector_21+0x5e>
     14e:	70 f0       	brcs	.+28     	; 0x16c <__vector_21+0x48>
     150:	82 30       	cpi	r24, 0x02	; 2
     152:	19 f1       	breq	.+70     	; 0x19a <__vector_21+0x76>
     154:	83 30       	cpi	r24, 0x03	; 3
     156:	71 f5       	brne	.+92     	; 0x1b4 <__vector_21+0x90>
			break;
		case VOLTAGE_CHANNEL:
			voltage = ADC / 30;
			break;
		case TEMP_CHANNEL:
			temperature = ADC / 2;
     158:	80 91 78 00 	lds	r24, 0x0078
     15c:	90 91 79 00 	lds	r25, 0x0079
     160:	96 95       	lsr	r25
     162:	87 95       	ror	r24
     164:	80 93 19 01 	sts	0x0119, r24
			channel = POT_CHANNEL;
     168:	81 e0       	ldi	r24, 0x01	; 1
     16a:	22 c0       	rjmp	.+68     	; 0x1b0 <__vector_21+0x8c>

ISR(ADC_vect){
	switch (channel)
	{
		case CURRENT_CHANNEL:
			current = ADC / 5;
     16c:	80 91 78 00 	lds	r24, 0x0078
     170:	90 91 79 00 	lds	r25, 0x0079
     174:	65 e0       	ldi	r22, 0x05	; 5
     176:	70 e0       	ldi	r23, 0x00	; 0
     178:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <__udivmodhi4>
     17c:	60 93 1c 01 	sts	0x011C, r22
			break;
     180:	19 c0       	rjmp	.+50     	; 0x1b4 <__vector_21+0x90>
		case POT_CHANNEL:
			dcReq = ADC / 10;
     182:	80 91 78 00 	lds	r24, 0x0078
     186:	90 91 79 00 	lds	r25, 0x0079
     18a:	6a e0       	ldi	r22, 0x0A	; 10
     18c:	70 e0       	ldi	r23, 0x00	; 0
     18e:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <__udivmodhi4>
     192:	60 93 1a 01 	sts	0x011A, r22
			channel = TEMP_CHANNEL;
     196:	83 e0       	ldi	r24, 0x03	; 3
     198:	0b c0       	rjmp	.+22     	; 0x1b0 <__vector_21+0x8c>
			break;
		case VOLTAGE_CHANNEL:
			voltage = ADC / 30;
     19a:	80 91 78 00 	lds	r24, 0x0078
     19e:	90 91 79 00 	lds	r25, 0x0079
     1a2:	6e e1       	ldi	r22, 0x1E	; 30
     1a4:	70 e0       	ldi	r23, 0x00	; 0
     1a6:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <__udivmodhi4>
     1aa:	60 93 18 01 	sts	0x0118, r22
			break;
     1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <__vector_21+0x90>
		case TEMP_CHANNEL:
			temperature = ADC / 2;
			channel = POT_CHANNEL;
     1b0:	80 93 09 01 	sts	0x0109, r24
	/*if(channel == LAST_CHANNEL)
		channel = FIRST_CHANNEL;
	else
		channel ++;
	*/
	adcSelectChannel(channel);
     1b4:	80 91 09 01 	lds	r24, 0x0109
     1b8:	0e 94 f8 07 	call	0xff0	; 0xff0 <adcSelectChannel>
	adcStartConversion();
     1bc:	0e 94 3f 08 	call	0x107e	; 0x107e <adcStartConversion>
}
     1c0:	ff 91       	pop	r31
     1c2:	ef 91       	pop	r30
     1c4:	bf 91       	pop	r27
     1c6:	af 91       	pop	r26
     1c8:	9f 91       	pop	r25
     1ca:	8f 91       	pop	r24
     1cc:	7f 91       	pop	r23
     1ce:	6f 91       	pop	r22
     1d0:	5f 91       	pop	r21
     1d2:	4f 91       	pop	r20
     1d4:	3f 91       	pop	r19
     1d6:	2f 91       	pop	r18
     1d8:	0f 90       	pop	r0
     1da:	0f be       	out	0x3f, r0	; 63
     1dc:	0f 90       	pop	r0
     1de:	1f 90       	pop	r1
     1e0:	18 95       	reti

000001e2 <__vector_11>:

ISR(TIMER1_COMPA_vect)
{
     1e2:	1f 92       	push	r1
     1e4:	0f 92       	push	r0
     1e6:	0f b6       	in	r0, 0x3f	; 63
     1e8:	0f 92       	push	r0
     1ea:	11 24       	eor	r1, r1
     1ec:	8f 93       	push	r24
	if(dc > 0 && flags.on && flags.dms)
     1ee:	80 91 1b 01 	lds	r24, 0x011B
     1f2:	88 23       	and	r24, r24
     1f4:	31 f0       	breq	.+12     	; 0x202 <__vector_11+0x20>
     1f6:	80 91 1f 01 	lds	r24, 0x011F
     1fa:	80 73       	andi	r24, 0x30	; 48
     1fc:	80 33       	cpi	r24, 0x30	; 48
     1fe:	09 f4       	brne	.+2      	; 0x202 <__vector_11+0x20>
		setBit(PWM_PORT,PWM_BIT);		//Inicia o período em nível alto do PWM
     200:	29 9a       	sbi	0x05, 1	; 5
}
     202:	8f 91       	pop	r24
     204:	0f 90       	pop	r0
     206:	0f be       	out	0x3f, r0	; 63
     208:	0f 90       	pop	r0
     20a:	1f 90       	pop	r1
     20c:	18 95       	reti

0000020e <__vector_12>:

ISR(TIMER1_COMPB_vect)
{
     20e:	1f 92       	push	r1
     210:	0f 92       	push	r0
     212:	0f b6       	in	r0, 0x3f	; 63
     214:	0f 92       	push	r0
     216:	11 24       	eor	r1, r1
     218:	8f 93       	push	r24
	if(dc < 100)
     21a:	80 91 1b 01 	lds	r24, 0x011B
     21e:	84 36       	cpi	r24, 0x64	; 100
     220:	08 f4       	brcc	.+2      	; 0x224 <__vector_12+0x16>
		clrBit(PWM_PORT,PWM_BIT);		//Inicia o período em nível baixo do PWM
     222:	29 98       	cbi	0x05, 1	; 5
}
     224:	8f 91       	pop	r24
     226:	0f 90       	pop	r0
     228:	0f be       	out	0x3f, r0	; 63
     22a:	0f 90       	pop	r0
     22c:	1f 90       	pop	r1
     22e:	18 95       	reti

00000230 <__vector_16>:

//60Hz
ISR(TIMER0_OVF_vect)
{
     230:	1f 92       	push	r1
     232:	0f 92       	push	r0
     234:	0f b6       	in	r0, 0x3f	; 63
     236:	0f 92       	push	r0
     238:	11 24       	eor	r1, r1
     23a:	2f 93       	push	r18
     23c:	3f 93       	push	r19
     23e:	4f 93       	push	r20
     240:	5f 93       	push	r21
     242:	6f 93       	push	r22
     244:	7f 93       	push	r23
     246:	8f 93       	push	r24
     248:	9f 93       	push	r25
     24a:	af 93       	push	r26
     24c:	bf 93       	push	r27
     24e:	ef 93       	push	r30
     250:	ff 93       	push	r31
	//setBit(PIND,PD0);
	flags.on = isBitClr(ON_PIN,ON_BIT);
     252:	99 b1       	in	r25, 0x09	; 9
     254:	95 fb       	bst	r25, 5
     256:	99 27       	eor	r25, r25
     258:	90 f9       	bld	r25, 0
     25a:	21 e0       	ldi	r18, 0x01	; 1
     25c:	92 27       	eor	r25, r18
     25e:	80 91 1f 01 	lds	r24, 0x011F
     262:	90 fb       	bst	r25, 0
     264:	84 f9       	bld	r24, 4
     266:	80 93 1f 01 	sts	0x011F, r24
	flags.dms = isBitClr(DMS_PIN,DMS_BIT);
     26a:	99 b1       	in	r25, 0x09	; 9
     26c:	92 95       	swap	r25
     26e:	91 70       	andi	r25, 0x01	; 1
     270:	92 27       	eor	r25, r18
     272:	90 fb       	bst	r25, 0
     274:	85 f9       	bld	r24, 5
     276:	80 93 1f 01 	sts	0x011F, r24
	if(flags.on && flags.dms)
     27a:	80 73       	andi	r24, 0x30	; 48
     27c:	90 91 1b 01 	lds	r25, 0x011B
     280:	80 33       	cpi	r24, 0x30	; 48
     282:	79 f5       	brne	.+94     	; 0x2e2 <__vector_16+0xb2>
	{
    	if(dc != dcReq)
     284:	80 91 1a 01 	lds	r24, 0x011A
     288:	98 17       	cp	r25, r24
     28a:	81 f1       	breq	.+96     	; 0x2ec <__vector_16+0xbc>
    	{
    		if(dcReq > dc && dcReq > (minDC + 5))
     28c:	98 17       	cp	r25, r24
     28e:	30 f5       	brcc	.+76     	; 0x2dc <__vector_16+0xac>
     290:	60 91 05 01 	lds	r22, 0x0105
     294:	48 2f       	mov	r20, r24
     296:	50 e0       	ldi	r21, 0x00	; 0
     298:	26 2f       	mov	r18, r22
     29a:	30 e0       	ldi	r19, 0x00	; 0
     29c:	2b 5f       	subi	r18, 0xFB	; 251
     29e:	3f 4f       	sbci	r19, 0xFF	; 255
     2a0:	24 17       	cp	r18, r20
     2a2:	35 07       	cpc	r19, r21
     2a4:	dc f4       	brge	.+54     	; 0x2dc <__vector_16+0xac>
    		{
    			if(cont == maxCont)
     2a6:	20 91 1d 01 	lds	r18, 0x011D
     2aa:	30 91 1e 01 	lds	r19, 0x011E
     2ae:	23 30       	cpi	r18, 0x03	; 3
     2b0:	31 05       	cpc	r19, r1
     2b2:	69 f4       	brne	.+26     	; 0x2ce <__vector_16+0x9e>
    			{
    				if(dc == 0)
     2b4:	91 11       	cpse	r25, r1
     2b6:	02 c0       	rjmp	.+4      	; 0x2bc <__vector_16+0x8c>
    					seta_dc(minDC);
     2b8:	86 2f       	mov	r24, r22
     2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <__vector_16+0x90>
    				else
    					seta_dc(dc+1);
     2bc:	81 e0       	ldi	r24, 0x01	; 1
     2be:	89 0f       	add	r24, r25
     2c0:	0e 94 6b 00 	call	0xd6	; 0xd6 <seta_dc>
    				cont = 0;
     2c4:	10 92 1e 01 	sts	0x011E, r1
     2c8:	10 92 1d 01 	sts	0x011D, r1
     2cc:	0f c0       	rjmp	.+30     	; 0x2ec <__vector_16+0xbc>
    			}
    			else
    				cont++;
     2ce:	2f 5f       	subi	r18, 0xFF	; 255
     2d0:	3f 4f       	sbci	r19, 0xFF	; 255
     2d2:	30 93 1e 01 	sts	0x011E, r19
     2d6:	20 93 1d 01 	sts	0x011D, r18
     2da:	08 c0       	rjmp	.+16     	; 0x2ec <__vector_16+0xbc>
    		}
    		else
    			if (dcReq < dc)
     2dc:	89 17       	cp	r24, r25
     2de:	30 f4       	brcc	.+12     	; 0x2ec <__vector_16+0xbc>
     2e0:	03 c0       	rjmp	.+6      	; 0x2e8 <__vector_16+0xb8>
    				seta_dc(dcReq);			//definição do Duty Cicle do PWM
    	}
	}
	else
	{
		if(dc != 0)					//se o sistema ainda nao esta desligado
     2e2:	99 23       	and	r25, r25
     2e4:	19 f0       	breq	.+6      	; 0x2ec <__vector_16+0xbc>
			seta_dc(0);				//desliga o sistema
     2e6:	80 e0       	ldi	r24, 0x00	; 0
     2e8:	0e 94 6b 00 	call	0xd6	; 0xd6 <seta_dc>
	}
	if(temperature > criticalTemp && !flags.warnnig)
     2ec:	90 91 19 01 	lds	r25, 0x0119
     2f0:	80 91 01 01 	lds	r24, 0x0101
     2f4:	89 17       	cp	r24, r25
     2f6:	38 f4       	brcc	.+14     	; 0x306 <__vector_16+0xd6>
     2f8:	20 91 1f 01 	lds	r18, 0x011F
     2fc:	20 fd       	sbrc	r18, 0
     2fe:	03 c0       	rjmp	.+6      	; 0x306 <__vector_16+0xd6>
		flags.warnnig = 1;
     300:	82 2f       	mov	r24, r18
     302:	81 60       	ori	r24, 0x01	; 1
     304:	07 c0       	rjmp	.+14     	; 0x314 <__vector_16+0xe4>
	else
		if(temperature < criticalTemp && flags.warnnig)
     306:	98 17       	cp	r25, r24
     308:	38 f4       	brcc	.+14     	; 0x318 <__vector_16+0xe8>
     30a:	80 91 1f 01 	lds	r24, 0x011F
     30e:	80 ff       	sbrs	r24, 0
     310:	03 c0       	rjmp	.+6      	; 0x318 <__vector_16+0xe8>
			flags.warnnig = 0;
     312:	8e 7f       	andi	r24, 0xFE	; 254
     314:	80 93 1f 01 	sts	0x011F, r24
}
     318:	ff 91       	pop	r31
     31a:	ef 91       	pop	r30
     31c:	bf 91       	pop	r27
     31e:	af 91       	pop	r26
     320:	9f 91       	pop	r25
     322:	8f 91       	pop	r24
     324:	7f 91       	pop	r23
     326:	6f 91       	pop	r22
     328:	5f 91       	pop	r21
     32a:	4f 91       	pop	r20
     32c:	3f 91       	pop	r19
     32e:	2f 91       	pop	r18
     330:	0f 90       	pop	r0
     332:	0f be       	out	0x3f, r0	; 63
     334:	0f 90       	pop	r0
     336:	1f 90       	pop	r1
     338:	18 95       	reti

0000033a <usartReceiveStd>:
 * Checks if a reception has been completed
 * -------------------------------------------------------------------------- */

bool_t usartIsReceptionComplete(void)
{
	return isBitSet(UCSR0A, RXC0);
     33a:	80 91 c0 00 	lds	r24, 0x00C0
 * standard input heandler
 * -------------------------------------------------------------------------- */

int16 usartReceiveStd(FILE * stream)
{
	while(!usartIsReceptionComplete())
     33e:	87 ff       	sbrs	r24, 7
     340:	fc cf       	rjmp	.-8      	; 0x33a <usartReceiveStd>
		;	// Waits until last reception ends
	return (int16)UDR0;
     342:	80 91 c6 00 	lds	r24, 0x00C6
}
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	08 95       	ret

0000034a <globalInterruptEnable>:
 * Enable global interrupts
 * -------------------------------------------------------------------------- */

void globalInterruptEnable(void)
{
	sei();
     34a:	78 94       	sei
     34c:	08 95       	ret

0000034e <globalInterruptDisable>:
 * Disable global interrupts
 * -------------------------------------------------------------------------- */

void globalInterruptDisable(void)
{
	cli();
     34e:	f8 94       	cli
     350:	08 95       	ret

00000352 <systemClockSetPrescaler>:

resultValue_t systemClockSetPrescaler(systemPrescalerValue_t prescaler)
{
	uint8 aux8 = 0;

	switch(prescaler){
     352:	90 e0       	ldi	r25, 0x00	; 0
     354:	89 30       	cpi	r24, 0x09	; 9
     356:	91 05       	cpc	r25, r1
     358:	00 f5       	brcc	.+64     	; 0x39a <systemClockSetPrescaler+0x48>
     35a:	fc 01       	movw	r30, r24
     35c:	ec 5c       	subi	r30, 0xCC	; 204
     35e:	ff 4f       	sbci	r31, 0xFF	; 255
     360:	0c 94 9e 0a 	jmp	0x153c	; 0x153c <__tablejump2__>
		case SYSTEM_PRESCALER_OFF:		aux8 = 0;	break;
     364:	80 e0       	ldi	r24, 0x00	; 0
     366:	0f c0       	rjmp	.+30     	; 0x386 <systemClockSetPrescaler+0x34>
		case SYSTEM_PRESCALER_2:		aux8 = 1;	break;
		case SYSTEM_PRESCALER_4:		aux8 = 2;	break;
     368:	82 e0       	ldi	r24, 0x02	; 2
     36a:	0d c0       	rjmp	.+26     	; 0x386 <systemClockSetPrescaler+0x34>
		case SYSTEM_PRESCALER_8:		aux8 = 3;	break;
     36c:	83 e0       	ldi	r24, 0x03	; 3
     36e:	0b c0       	rjmp	.+22     	; 0x386 <systemClockSetPrescaler+0x34>
		case SYSTEM_PRESCALER_16:		aux8 = 4;	break;
     370:	84 e0       	ldi	r24, 0x04	; 4
     372:	09 c0       	rjmp	.+18     	; 0x386 <systemClockSetPrescaler+0x34>
		case SYSTEM_PRESCALER_32:		aux8 = 5;	break;
     374:	85 e0       	ldi	r24, 0x05	; 5
     376:	07 c0       	rjmp	.+14     	; 0x386 <systemClockSetPrescaler+0x34>
		case SYSTEM_PRESCALER_64:		aux8 = 6;	break;
     378:	86 e0       	ldi	r24, 0x06	; 6
     37a:	05 c0       	rjmp	.+10     	; 0x386 <systemClockSetPrescaler+0x34>
		case SYSTEM_PRESCALER_128:		aux8 = 7;	break;
     37c:	87 e0       	ldi	r24, 0x07	; 7
     37e:	03 c0       	rjmp	.+6      	; 0x386 <systemClockSetPrescaler+0x34>
		case SYSTEM_PRESCALER_256:		aux8 = 8;	break;
     380:	88 e0       	ldi	r24, 0x08	; 8
     382:	01 c0       	rjmp	.+2      	; 0x386 <systemClockSetPrescaler+0x34>
{
	uint8 aux8 = 0;

	switch(prescaler){
		case SYSTEM_PRESCALER_OFF:		aux8 = 0;	break;
		case SYSTEM_PRESCALER_2:		aux8 = 1;	break;
     384:	81 e0       	ldi	r24, 0x01	; 1
		case SYSTEM_PRESCALER_64:		aux8 = 6;	break;
		case SYSTEM_PRESCALER_128:		aux8 = 7;	break;
		case SYSTEM_PRESCALER_256:		aux8 = 8;	break;
		default:						return RESULT_UNSUPPORTED_VALUE;	break;
	}
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
     386:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     388:	f8 94       	cli
		CLKPR = 0b10000000;
     38a:	20 e8       	ldi	r18, 0x80	; 128
     38c:	20 93 61 00 	sts	0x0061, r18
		CLKPR = aux8;
     390:	80 93 61 00 	sts	0x0061, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     394:	9f bf       	out	0x3f, r25	; 63
	}

	return RESULT_OK;
     396:	80 e0       	ldi	r24, 0x00	; 0
     398:	08 95       	ret
		case SYSTEM_PRESCALER_16:		aux8 = 4;	break;
		case SYSTEM_PRESCALER_32:		aux8 = 5;	break;
		case SYSTEM_PRESCALER_64:		aux8 = 6;	break;
		case SYSTEM_PRESCALER_128:		aux8 = 7;	break;
		case SYSTEM_PRESCALER_256:		aux8 = 8;	break;
		default:						return RESULT_UNSUPPORTED_VALUE;	break;
     39a:	87 e0       	ldi	r24, 0x07	; 7
		CLKPR = 0b10000000;
		CLKPR = aux8;
	}

	return RESULT_OK;
}
     39c:	08 95       	ret

0000039e <eepromSetOperationMode>:

void eepromSetOperationMode(eepromMode_t mode)
{
	uint8 aux8 = 0;

	aux8 = EECR & ~(0x03 << EEPM0);
     39e:	2f b3       	in	r18, 0x1f	; 31
	aux8 |= (mode << EEPM0);
     3a0:	30 e1       	ldi	r19, 0x10	; 16
     3a2:	83 9f       	mul	r24, r19
     3a4:	c0 01       	movw	r24, r0
     3a6:	11 24       	eor	r1, r1

void eepromSetOperationMode(eepromMode_t mode)
{
	uint8 aux8 = 0;

	aux8 = EECR & ~(0x03 << EEPM0);
     3a8:	2f 7c       	andi	r18, 0xCF	; 207
	aux8 |= (mode << EEPM0);
     3aa:	28 2b       	or	r18, r24
	EECR = aux8;
     3ac:	2f bb       	out	0x1f, r18	; 31
     3ae:	08 95       	ret

000003b0 <eepromReadyActivateInterrupt>:
 * Activates the EEPROM ready interrupt
 * -------------------------------------------------------------------------- */

void eepromReadyActivateInterrupt(void)
{
	setBit(EECR, EERIE);
     3b0:	fb 9a       	sbi	0x1f, 3	; 31
     3b2:	08 95       	ret

000003b4 <eepromReadyDeactivateInterrupt>:
 * Deactivates the EEPROM ready interrupt
 * -------------------------------------------------------------------------- */

void eepromReadyDeactivateInterrupt(void)
{
	clrBit(EECR, EERIE);
     3b4:	fb 98       	cbi	0x1f, 3	; 31
     3b6:	08 95       	ret

000003b8 <eepromWrite>:
 * Writes a byte in the specified address in the EEPROM
 * -------------------------------------------------------------------------- */

void eepromWrite(uint16 address, uint8 data)
{
	waitUntilBitIsClear(EECR, EEPE);
     3b8:	f9 99       	sbic	0x1f, 1	; 31
     3ba:	fe cf       	rjmp	.-4      	; 0x3b8 <eepromWrite>
	waitUntilBitIsClear(SPMEN, SPMCSR);
     3bc:	27 b7       	in	r18, 0x37	; 55
	EEAR = (address & EEPROM_ADDRESS_MASK);
     3be:	93 70       	andi	r25, 0x03	; 3
     3c0:	92 bd       	out	0x22, r25	; 34
     3c2:	81 bd       	out	0x21, r24	; 33
	EEDR = data;
     3c4:	60 bd       	out	0x20, r22	; 32
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
     3c6:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     3c8:	f8 94       	cli
		setBit(EECR, EEMPE);
     3ca:	fa 9a       	sbi	0x1f, 2	; 31
		setBit(EECR, EEPE);
     3cc:	f9 9a       	sbi	0x1f, 1	; 31
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     3ce:	8f bf       	out	0x3f, r24	; 63
    __asm__ volatile ("" ::: "memory");
     3d0:	08 95       	ret

000003d2 <eepromRead>:
 * Reads a byte from the specified address in the EEPROM
 * -------------------------------------------------------------------------- */

uint8 eepromRead(uint16 address)
{
	waitUntilBitIsClear(EECR, EEPE);
     3d2:	f9 99       	sbic	0x1f, 1	; 31
     3d4:	fe cf       	rjmp	.-4      	; 0x3d2 <eepromRead>
	EEAR = (address & EEPROM_ADDRESS_MASK);
     3d6:	93 70       	andi	r25, 0x03	; 3
     3d8:	92 bd       	out	0x22, r25	; 34
     3da:	81 bd       	out	0x21, r24	; 33
	setBit(EECR, EERE);
     3dc:	f8 9a       	sbi	0x1f, 0	; 31
	return EEDR;
     3de:	80 b5       	in	r24, 0x20	; 32
}
     3e0:	08 95       	ret

000003e2 <globalPullUpEnable>:
 * Enables the global pull-up
 * -------------------------------------------------------------------------- */

void globalPullUpEnable(void)
{
	clrBit(MCUCR, PUD);
     3e2:	85 b7       	in	r24, 0x35	; 53
     3e4:	8f 7e       	andi	r24, 0xEF	; 239
     3e6:	85 bf       	out	0x35, r24	; 53
     3e8:	08 95       	ret

000003ea <pullUpDisable>:
 * Disables the global pull-up
 * -------------------------------------------------------------------------- */

void pullUpDisable(void)
{
	setBit(MCUCR, PUD);
     3ea:	85 b7       	in	r24, 0x35	; 53
     3ec:	80 61       	ori	r24, 0x10	; 16
     3ee:	85 bf       	out	0x35, r24	; 53
     3f0:	08 95       	ret

000003f2 <int0Config>:

resultValue_t int0Config(portMode_t port, senseMode_t sense)
{
	uint8 aux8 = 0;

	switch(port){
     3f2:	82 30       	cpi	r24, 0x02	; 2
     3f4:	79 f0       	breq	.+30     	; 0x414 <int0Config+0x22>
     3f6:	30 f4       	brcc	.+12     	; 0x404 <int0Config+0x12>
     3f8:	88 23       	and	r24, r24
     3fa:	49 f0       	breq	.+18     	; 0x40e <int0Config+0x1c>
     3fc:	81 30       	cpi	r24, 0x01	; 1
     3fe:	11 f5       	brne	.+68     	; 0x444 <int0Config+0x52>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD2); setBit(DDRD, PD2);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD2); setBit(DDRD, PD2);	break;
     400:	5a 9a       	sbi	0x0b, 2	; 11
     402:	06 c0       	rjmp	.+12     	; 0x410 <int0Config+0x1e>

resultValue_t int0Config(portMode_t port, senseMode_t sense)
{
	uint8 aux8 = 0;

	switch(port){
     404:	83 30       	cpi	r24, 0x03	; 3
     406:	41 f0       	breq	.+16     	; 0x418 <int0Config+0x26>
     408:	8f 3f       	cpi	r24, 0xFF	; 255
     40a:	41 f0       	breq	.+16     	; 0x41c <int0Config+0x2a>
     40c:	1b c0       	rjmp	.+54     	; 0x444 <int0Config+0x52>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD2); setBit(DDRD, PD2);	break;
     40e:	5a 98       	cbi	0x0b, 2	; 11
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD2); setBit(DDRD, PD2);	break;
     410:	52 9a       	sbi	0x0a, 2	; 10
     412:	04 c0       	rjmp	.+8      	; 0x41c <int0Config+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD2); clrBit(DDRD, PD2);	break;
     414:	5a 98       	cbi	0x0b, 2	; 11
     416:	01 c0       	rjmp	.+2      	; 0x41a <int0Config+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD2); clrBit(DDRD, PD2);	break;
     418:	5a 9a       	sbi	0x0b, 2	; 11
     41a:	52 98       	cbi	0x0a, 2	; 10
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}

	if(sense != SENSE_NO_CHANGE){
     41c:	6f 3f       	cpi	r22, 0xFF	; 255
     41e:	a1 f0       	breq	.+40     	; 0x448 <int0Config+0x56>
		aux8 = EICRA & ~(0x03 << ISC00);
     420:	80 91 69 00 	lds	r24, 0x0069
     424:	8c 7f       	andi	r24, 0xFC	; 252
		switch(sense){
     426:	61 30       	cpi	r22, 0x01	; 1
     428:	39 f0       	breq	.+14     	; 0x438 <int0Config+0x46>
     42a:	48 f0       	brcs	.+18     	; 0x43e <int0Config+0x4c>
     42c:	62 30       	cpi	r22, 0x02	; 2
     42e:	31 f0       	breq	.+12     	; 0x43c <int0Config+0x4a>
     430:	63 30       	cpi	r22, 0x03	; 3
     432:	61 f4       	brne	.+24     	; 0x44c <int0Config+0x5a>
			case SENSE_LOW_LEVEL:		break;
			case SENSE_ANY_EDGE:		aux8 |= (0x01 << ISC00);			break;
			case SENSE_FALLING_EDGE:	aux8 |= (0x02 << ISC00);			break;
			case SENSE_RISING_EDGE:		aux8 |= (0x03 << ISC00);			break;
     434:	83 60       	ori	r24, 0x03	; 3
     436:	03 c0       	rjmp	.+6      	; 0x43e <int0Config+0x4c>

	if(sense != SENSE_NO_CHANGE){
		aux8 = EICRA & ~(0x03 << ISC00);
		switch(sense){
			case SENSE_LOW_LEVEL:		break;
			case SENSE_ANY_EDGE:		aux8 |= (0x01 << ISC00);			break;
     438:	81 60       	ori	r24, 0x01	; 1
     43a:	01 c0       	rjmp	.+2      	; 0x43e <int0Config+0x4c>
			case SENSE_FALLING_EDGE:	aux8 |= (0x02 << ISC00);			break;
     43c:	82 60       	ori	r24, 0x02	; 2
			case SENSE_RISING_EDGE:		aux8 |= (0x03 << ISC00);			break;
			case SENSE_NO_CHANGE:		break;
			default:					return RESULT_INT_SENSE_VALUE_UNSUPPORTED;	break;
		}
		EICRA = aux8;
     43e:	80 93 69 00 	sts	0x0069, r24
     442:	02 c0       	rjmp	.+4      	; 0x448 <int0Config+0x56>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD2); setBit(DDRD, PD2);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD2); setBit(DDRD, PD2);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD2); clrBit(DDRD, PD2);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD2); clrBit(DDRD, PD2);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     444:	81 e0       	ldi	r24, 0x01	; 1
     446:	08 95       	ret
			default:					return RESULT_INT_SENSE_VALUE_UNSUPPORTED;	break;
		}
		EICRA = aux8;
	}

	return RESULT_OK;
     448:	80 e0       	ldi	r24, 0x00	; 0
     44a:	08 95       	ret
			case SENSE_LOW_LEVEL:		break;
			case SENSE_ANY_EDGE:		aux8 |= (0x01 << ISC00);			break;
			case SENSE_FALLING_EDGE:	aux8 |= (0x02 << ISC00);			break;
			case SENSE_RISING_EDGE:		aux8 |= (0x03 << ISC00);			break;
			case SENSE_NO_CHANGE:		break;
			default:					return RESULT_INT_SENSE_VALUE_UNSUPPORTED;	break;
     44c:	82 e0       	ldi	r24, 0x02	; 2
		}
		EICRA = aux8;
	}

	return RESULT_OK;
}
     44e:	08 95       	ret

00000450 <int0ActivateInterrupt>:
 * Activates the external interrupt int0
 * -------------------------------------------------------------------------- */

void int0ActivateInterrupt(void)
{
	setBit(EIMSK, INT0);
     450:	e8 9a       	sbi	0x1d, 0	; 29
     452:	08 95       	ret

00000454 <int0DeactivateInterrupt>:
 * Deactivates the external interrupt int0
 * -------------------------------------------------------------------------- */

void int0DeactivateInterrupt(void)
{
	clrBit(EIMSK, INT0);
     454:	e8 98       	cbi	0x1d, 0	; 29
     456:	08 95       	ret

00000458 <int0ClearInterruptRequest>:
 * Clears the external interrupt int0 request
 * -------------------------------------------------------------------------- */

void int0ClearInterruptRequest(void)
{
	setBit(EIFR, INTF0);
     458:	e0 9a       	sbi	0x1c, 0	; 28
     45a:	08 95       	ret

0000045c <int1Config>:

resultValue_t int1Config(portMode_t port, senseMode_t sense)
{
	uint8 aux8 = 0;

	switch(port){
     45c:	82 30       	cpi	r24, 0x02	; 2
     45e:	79 f0       	breq	.+30     	; 0x47e <int1Config+0x22>
     460:	30 f4       	brcc	.+12     	; 0x46e <int1Config+0x12>
     462:	88 23       	and	r24, r24
     464:	49 f0       	breq	.+18     	; 0x478 <int1Config+0x1c>
     466:	81 30       	cpi	r24, 0x01	; 1
     468:	11 f5       	brne	.+68     	; 0x4ae <int1Config+0x52>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD3); setBit(DDRD, PD3);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD3); setBit(DDRD, PD3);	break;
     46a:	5b 9a       	sbi	0x0b, 3	; 11
     46c:	06 c0       	rjmp	.+12     	; 0x47a <int1Config+0x1e>

resultValue_t int1Config(portMode_t port, senseMode_t sense)
{
	uint8 aux8 = 0;

	switch(port){
     46e:	83 30       	cpi	r24, 0x03	; 3
     470:	41 f0       	breq	.+16     	; 0x482 <int1Config+0x26>
     472:	8f 3f       	cpi	r24, 0xFF	; 255
     474:	41 f0       	breq	.+16     	; 0x486 <int1Config+0x2a>
     476:	1b c0       	rjmp	.+54     	; 0x4ae <int1Config+0x52>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD3); setBit(DDRD, PD3);	break;
     478:	5b 98       	cbi	0x0b, 3	; 11
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD3); setBit(DDRD, PD3);	break;
     47a:	53 9a       	sbi	0x0a, 3	; 10
     47c:	04 c0       	rjmp	.+8      	; 0x486 <int1Config+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD3); clrBit(DDRD, PD3);	break;
     47e:	5b 98       	cbi	0x0b, 3	; 11
     480:	01 c0       	rjmp	.+2      	; 0x484 <int1Config+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD3); clrBit(DDRD, PD3);	break;
     482:	5b 9a       	sbi	0x0b, 3	; 11
     484:	53 98       	cbi	0x0a, 3	; 10
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}

	if(sense != SENSE_NO_CHANGE){
     486:	6f 3f       	cpi	r22, 0xFF	; 255
     488:	a1 f0       	breq	.+40     	; 0x4b2 <int1Config+0x56>
		aux8 = EICRA & ~(0x03 << ISC10);
     48a:	80 91 69 00 	lds	r24, 0x0069
     48e:	83 7f       	andi	r24, 0xF3	; 243
		switch(sense){
     490:	61 30       	cpi	r22, 0x01	; 1
     492:	39 f0       	breq	.+14     	; 0x4a2 <int1Config+0x46>
     494:	48 f0       	brcs	.+18     	; 0x4a8 <int1Config+0x4c>
     496:	62 30       	cpi	r22, 0x02	; 2
     498:	31 f0       	breq	.+12     	; 0x4a6 <int1Config+0x4a>
     49a:	63 30       	cpi	r22, 0x03	; 3
     49c:	61 f4       	brne	.+24     	; 0x4b6 <int1Config+0x5a>
			case SENSE_LOW_LEVEL:		break;
			case SENSE_ANY_EDGE:		aux8 |= (0x01 << ISC10);			break;
			case SENSE_FALLING_EDGE:	aux8 |= (0x02 << ISC10);			break;
			case SENSE_RISING_EDGE:		aux8 |= (0x03 << ISC10);			break;
     49e:	8c 60       	ori	r24, 0x0C	; 12
     4a0:	03 c0       	rjmp	.+6      	; 0x4a8 <int1Config+0x4c>

	if(sense != SENSE_NO_CHANGE){
		aux8 = EICRA & ~(0x03 << ISC10);
		switch(sense){
			case SENSE_LOW_LEVEL:		break;
			case SENSE_ANY_EDGE:		aux8 |= (0x01 << ISC10);			break;
     4a2:	84 60       	ori	r24, 0x04	; 4
     4a4:	01 c0       	rjmp	.+2      	; 0x4a8 <int1Config+0x4c>
			case SENSE_FALLING_EDGE:	aux8 |= (0x02 << ISC10);			break;
     4a6:	88 60       	ori	r24, 0x08	; 8
			case SENSE_RISING_EDGE:		aux8 |= (0x03 << ISC10);			break;
			case SENSE_NO_CHANGE:		break;
			default:					return RESULT_INT_SENSE_VALUE_UNSUPPORTED;	break;
		}
		EICRA = aux8;
     4a8:	80 93 69 00 	sts	0x0069, r24
     4ac:	02 c0       	rjmp	.+4      	; 0x4b2 <int1Config+0x56>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD3); setBit(DDRD, PD3);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD3); setBit(DDRD, PD3);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD3); clrBit(DDRD, PD3);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD3); clrBit(DDRD, PD3);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     4ae:	81 e0       	ldi	r24, 0x01	; 1
     4b0:	08 95       	ret
			default:					return RESULT_INT_SENSE_VALUE_UNSUPPORTED;	break;
		}
		EICRA = aux8;
	}

	return RESULT_OK;
     4b2:	80 e0       	ldi	r24, 0x00	; 0
     4b4:	08 95       	ret
			case SENSE_LOW_LEVEL:		break;
			case SENSE_ANY_EDGE:		aux8 |= (0x01 << ISC10);			break;
			case SENSE_FALLING_EDGE:	aux8 |= (0x02 << ISC10);			break;
			case SENSE_RISING_EDGE:		aux8 |= (0x03 << ISC10);			break;
			case SENSE_NO_CHANGE:		break;
			default:					return RESULT_INT_SENSE_VALUE_UNSUPPORTED;	break;
     4b6:	82 e0       	ldi	r24, 0x02	; 2
		}
		EICRA = aux8;
	}

	return RESULT_OK;
}
     4b8:	08 95       	ret

000004ba <int1ActivateInterrupt>:
 * Activates the external interrupt int1
 * -------------------------------------------------------------------------- */

void int1ActivateInterrupt(void)
{
	setBit(EIMSK, INT1);
     4ba:	e9 9a       	sbi	0x1d, 1	; 29
     4bc:	08 95       	ret

000004be <int1DeactivateInterrupt>:
 * Deactivates the external interrupt int1
 * -------------------------------------------------------------------------- */

void int1DeactivateInterrupt(void)
{
	clrBit(EIMSK, INT1);
     4be:	e9 98       	cbi	0x1d, 1	; 29
     4c0:	08 95       	ret

000004c2 <int1ClearInterruptRequest>:
 * Clears the external interrupt int1 request
 * -------------------------------------------------------------------------- */

void int1ClearInterruptRequest(void)
{
	setBit(EIFR, INTF1);
     4c2:	e1 9a       	sbi	0x1c, 1	; 28
     4c4:	08 95       	ret

000004c6 <pcint7_0Enable>:
 * Enables the external interrupt pcint in port B
 * -------------------------------------------------------------------------- */

void pcint7_0Enable(void)
{
	setBit(PCICR, PCIE0);
     4c6:	e8 e6       	ldi	r30, 0x68	; 104
     4c8:	f0 e0       	ldi	r31, 0x00	; 0
     4ca:	80 81       	ld	r24, Z
     4cc:	81 60       	ori	r24, 0x01	; 1
     4ce:	80 83       	st	Z, r24
     4d0:	08 95       	ret

000004d2 <pcint7_0Disable>:
 * Disables the external interrupt pcint in port B
 * -------------------------------------------------------------------------- */

void pcint7_0Disable(void)
{
	clrBit(PCICR, PCIE0);
     4d2:	e8 e6       	ldi	r30, 0x68	; 104
     4d4:	f0 e0       	ldi	r31, 0x00	; 0
     4d6:	80 81       	ld	r24, Z
     4d8:	8e 7f       	andi	r24, 0xFE	; 254
     4da:	80 83       	st	Z, r24
     4dc:	08 95       	ret

000004de <pcint7_0ClearInterruptRequest>:
 * Disables the external interrupt pcint in port B
 * -------------------------------------------------------------------------- */

void pcint7_0ClearInterruptRequest(void)
{
	setBit(PCIFR, PCIF0);
     4de:	d8 9a       	sbi	0x1b, 0	; 27
     4e0:	08 95       	ret

000004e2 <pcint0ActivateInterrupt>:
 * Activates the external interrupt pcint0 and configures port mode in PB0
 * -------------------------------------------------------------------------- */

resultValue_t pcint0ActivateInterrupt(portMode_t port)
{
	switch(port){
     4e2:	82 30       	cpi	r24, 0x02	; 2
     4e4:	79 f0       	breq	.+30     	; 0x504 <pcint0ActivateInterrupt+0x22>
     4e6:	30 f4       	brcc	.+12     	; 0x4f4 <pcint0ActivateInterrupt+0x12>
     4e8:	88 23       	and	r24, r24
     4ea:	49 f0       	breq	.+18     	; 0x4fe <pcint0ActivateInterrupt+0x1c>
     4ec:	81 30       	cpi	r24, 0x01	; 1
     4ee:	a9 f4       	brne	.+42     	; 0x51a <pcint0ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB0); setBit(DDRB, PB0);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB0); setBit(DDRB, PB0);	break;
     4f0:	28 9a       	sbi	0x05, 0	; 5
     4f2:	06 c0       	rjmp	.+12     	; 0x500 <pcint0ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint0 and configures port mode in PB0
 * -------------------------------------------------------------------------- */

resultValue_t pcint0ActivateInterrupt(portMode_t port)
{
	switch(port){
     4f4:	83 30       	cpi	r24, 0x03	; 3
     4f6:	41 f0       	breq	.+16     	; 0x508 <pcint0ActivateInterrupt+0x26>
     4f8:	8f 3f       	cpi	r24, 0xFF	; 255
     4fa:	41 f0       	breq	.+16     	; 0x50c <pcint0ActivateInterrupt+0x2a>
     4fc:	0e c0       	rjmp	.+28     	; 0x51a <pcint0ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB0); setBit(DDRB, PB0);	break;
     4fe:	28 98       	cbi	0x05, 0	; 5
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB0); setBit(DDRB, PB0);	break;
     500:	20 9a       	sbi	0x04, 0	; 4
     502:	04 c0       	rjmp	.+8      	; 0x50c <pcint0ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB0); clrBit(DDRB, PB0);	break;
     504:	28 98       	cbi	0x05, 0	; 5
     506:	01 c0       	rjmp	.+2      	; 0x50a <pcint0ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB0); clrBit(DDRB, PB0);	break;
     508:	28 9a       	sbi	0x05, 0	; 5
     50a:	20 98       	cbi	0x04, 0	; 4
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK0, PCINT0);
     50c:	80 91 6b 00 	lds	r24, 0x006B
     510:	81 60       	ori	r24, 0x01	; 1
     512:	80 93 6b 00 	sts	0x006B, r24
	return RESULT_OK;
     516:	80 e0       	ldi	r24, 0x00	; 0
     518:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB0); setBit(DDRB, PB0);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB0); setBit(DDRB, PB0);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB0); clrBit(DDRB, PB0);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB0); clrBit(DDRB, PB0);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     51a:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK0, PCINT0);
	return RESULT_OK;
}
     51c:	08 95       	ret

0000051e <pcint0DeactivateInterrupt>:
 * Deactivates the external interrupt pcint0 in PB0
 * -------------------------------------------------------------------------- */

void pcint0DeactivateInterrupt(void)
{
	clrBit(PCMSK0, PCINT0);
     51e:	eb e6       	ldi	r30, 0x6B	; 107
     520:	f0 e0       	ldi	r31, 0x00	; 0
     522:	80 81       	ld	r24, Z
     524:	8e 7f       	andi	r24, 0xFE	; 254
     526:	80 83       	st	Z, r24
     528:	08 95       	ret

0000052a <pcint1ActivateInterrupt>:
 * Activates the external interrupt pcint1 and configures port mode in PB1
 * -------------------------------------------------------------------------- */

resultValue_t pcint1ActivateInterrupt(portMode_t port)
{
	switch(port){
     52a:	82 30       	cpi	r24, 0x02	; 2
     52c:	79 f0       	breq	.+30     	; 0x54c <pcint1ActivateInterrupt+0x22>
     52e:	30 f4       	brcc	.+12     	; 0x53c <pcint1ActivateInterrupt+0x12>
     530:	88 23       	and	r24, r24
     532:	49 f0       	breq	.+18     	; 0x546 <pcint1ActivateInterrupt+0x1c>
     534:	81 30       	cpi	r24, 0x01	; 1
     536:	a9 f4       	brne	.+42     	; 0x562 <pcint1ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB1); setBit(DDRB, PB1);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB1); setBit(DDRB, PB1);	break;
     538:	29 9a       	sbi	0x05, 1	; 5
     53a:	06 c0       	rjmp	.+12     	; 0x548 <pcint1ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint1 and configures port mode in PB1
 * -------------------------------------------------------------------------- */

resultValue_t pcint1ActivateInterrupt(portMode_t port)
{
	switch(port){
     53c:	83 30       	cpi	r24, 0x03	; 3
     53e:	41 f0       	breq	.+16     	; 0x550 <pcint1ActivateInterrupt+0x26>
     540:	8f 3f       	cpi	r24, 0xFF	; 255
     542:	41 f0       	breq	.+16     	; 0x554 <pcint1ActivateInterrupt+0x2a>
     544:	0e c0       	rjmp	.+28     	; 0x562 <pcint1ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB1); setBit(DDRB, PB1);	break;
     546:	29 98       	cbi	0x05, 1	; 5
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB1); setBit(DDRB, PB1);	break;
     548:	21 9a       	sbi	0x04, 1	; 4
     54a:	04 c0       	rjmp	.+8      	; 0x554 <pcint1ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB1); clrBit(DDRB, PB1);	break;
     54c:	29 98       	cbi	0x05, 1	; 5
     54e:	01 c0       	rjmp	.+2      	; 0x552 <pcint1ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB1); clrBit(DDRB, PB1);	break;
     550:	29 9a       	sbi	0x05, 1	; 5
     552:	21 98       	cbi	0x04, 1	; 4
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK0, PCINT1);
     554:	80 91 6b 00 	lds	r24, 0x006B
     558:	82 60       	ori	r24, 0x02	; 2
     55a:	80 93 6b 00 	sts	0x006B, r24
	return RESULT_OK;
     55e:	80 e0       	ldi	r24, 0x00	; 0
     560:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB1); setBit(DDRB, PB1);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB1); setBit(DDRB, PB1);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB1); clrBit(DDRB, PB1);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB1); clrBit(DDRB, PB1);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     562:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK0, PCINT1);
	return RESULT_OK;
}
     564:	08 95       	ret

00000566 <pcint1DeactivateInterrupt>:
 * Deactivates the external interrupt pcint1 in PB1
 * -------------------------------------------------------------------------- */

void pcint1DeactivateInterrupt(void)
{
	clrBit(PCMSK0, PCINT1);
     566:	eb e6       	ldi	r30, 0x6B	; 107
     568:	f0 e0       	ldi	r31, 0x00	; 0
     56a:	80 81       	ld	r24, Z
     56c:	8d 7f       	andi	r24, 0xFD	; 253
     56e:	80 83       	st	Z, r24
     570:	08 95       	ret

00000572 <pcint2ActivateInterrupt>:
 * Activates the external interrupt pcint2 and configures port mode in PB2
 * -------------------------------------------------------------------------- */

resultValue_t pcint2ActivateInterrupt(portMode_t port)
{
	switch(port){
     572:	82 30       	cpi	r24, 0x02	; 2
     574:	79 f0       	breq	.+30     	; 0x594 <pcint2ActivateInterrupt+0x22>
     576:	30 f4       	brcc	.+12     	; 0x584 <pcint2ActivateInterrupt+0x12>
     578:	88 23       	and	r24, r24
     57a:	49 f0       	breq	.+18     	; 0x58e <pcint2ActivateInterrupt+0x1c>
     57c:	81 30       	cpi	r24, 0x01	; 1
     57e:	a9 f4       	brne	.+42     	; 0x5aa <pcint2ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB2); setBit(DDRB, PB2);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB2); setBit(DDRB, PB2);	break;
     580:	2a 9a       	sbi	0x05, 2	; 5
     582:	06 c0       	rjmp	.+12     	; 0x590 <pcint2ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint2 and configures port mode in PB2
 * -------------------------------------------------------------------------- */

resultValue_t pcint2ActivateInterrupt(portMode_t port)
{
	switch(port){
     584:	83 30       	cpi	r24, 0x03	; 3
     586:	41 f0       	breq	.+16     	; 0x598 <pcint2ActivateInterrupt+0x26>
     588:	8f 3f       	cpi	r24, 0xFF	; 255
     58a:	41 f0       	breq	.+16     	; 0x59c <pcint2ActivateInterrupt+0x2a>
     58c:	0e c0       	rjmp	.+28     	; 0x5aa <pcint2ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB2); setBit(DDRB, PB2);	break;
     58e:	2a 98       	cbi	0x05, 2	; 5
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB2); setBit(DDRB, PB2);	break;
     590:	22 9a       	sbi	0x04, 2	; 4
     592:	04 c0       	rjmp	.+8      	; 0x59c <pcint2ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB2); clrBit(DDRB, PB2);	break;
     594:	2a 98       	cbi	0x05, 2	; 5
     596:	01 c0       	rjmp	.+2      	; 0x59a <pcint2ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB2); clrBit(DDRB, PB2);	break;
     598:	2a 9a       	sbi	0x05, 2	; 5
     59a:	22 98       	cbi	0x04, 2	; 4
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK0, PCINT2);
     59c:	80 91 6b 00 	lds	r24, 0x006B
     5a0:	84 60       	ori	r24, 0x04	; 4
     5a2:	80 93 6b 00 	sts	0x006B, r24
	return RESULT_OK;
     5a6:	80 e0       	ldi	r24, 0x00	; 0
     5a8:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB2); setBit(DDRB, PB2);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB2); setBit(DDRB, PB2);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB2); clrBit(DDRB, PB2);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB2); clrBit(DDRB, PB2);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     5aa:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK0, PCINT2);
	return RESULT_OK;
}
     5ac:	08 95       	ret

000005ae <pcint2DeactivateInterrupt>:
 * Deactivates the external interrupt pcint2 in PB2
 * -------------------------------------------------------------------------- */

void pcint2DeactivateInterrupt(void)
{
	clrBit(PCMSK0, PCINT2);
     5ae:	eb e6       	ldi	r30, 0x6B	; 107
     5b0:	f0 e0       	ldi	r31, 0x00	; 0
     5b2:	80 81       	ld	r24, Z
     5b4:	8b 7f       	andi	r24, 0xFB	; 251
     5b6:	80 83       	st	Z, r24
     5b8:	08 95       	ret

000005ba <pcint3ActivateInterrupt>:
 * Activates the external interrupt pcint3 and configures port mode in PB3
 * -------------------------------------------------------------------------- */

resultValue_t pcint3ActivateInterrupt(portMode_t port)
{
	switch(port){
     5ba:	82 30       	cpi	r24, 0x02	; 2
     5bc:	79 f0       	breq	.+30     	; 0x5dc <pcint3ActivateInterrupt+0x22>
     5be:	30 f4       	brcc	.+12     	; 0x5cc <pcint3ActivateInterrupt+0x12>
     5c0:	88 23       	and	r24, r24
     5c2:	49 f0       	breq	.+18     	; 0x5d6 <pcint3ActivateInterrupt+0x1c>
     5c4:	81 30       	cpi	r24, 0x01	; 1
     5c6:	a9 f4       	brne	.+42     	; 0x5f2 <pcint3ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB3); setBit(DDRB, PB3);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB3); setBit(DDRB, PB3);	break;
     5c8:	2b 9a       	sbi	0x05, 3	; 5
     5ca:	06 c0       	rjmp	.+12     	; 0x5d8 <pcint3ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint3 and configures port mode in PB3
 * -------------------------------------------------------------------------- */

resultValue_t pcint3ActivateInterrupt(portMode_t port)
{
	switch(port){
     5cc:	83 30       	cpi	r24, 0x03	; 3
     5ce:	41 f0       	breq	.+16     	; 0x5e0 <pcint3ActivateInterrupt+0x26>
     5d0:	8f 3f       	cpi	r24, 0xFF	; 255
     5d2:	41 f0       	breq	.+16     	; 0x5e4 <pcint3ActivateInterrupt+0x2a>
     5d4:	0e c0       	rjmp	.+28     	; 0x5f2 <pcint3ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB3); setBit(DDRB, PB3);	break;
     5d6:	2b 98       	cbi	0x05, 3	; 5
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB3); setBit(DDRB, PB3);	break;
     5d8:	23 9a       	sbi	0x04, 3	; 4
     5da:	04 c0       	rjmp	.+8      	; 0x5e4 <pcint3ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB3); clrBit(DDRB, PB3);	break;
     5dc:	2b 98       	cbi	0x05, 3	; 5
     5de:	01 c0       	rjmp	.+2      	; 0x5e2 <pcint3ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB3); clrBit(DDRB, PB3);	break;
     5e0:	2b 9a       	sbi	0x05, 3	; 5
     5e2:	23 98       	cbi	0x04, 3	; 4
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK0, PCINT3);
     5e4:	80 91 6b 00 	lds	r24, 0x006B
     5e8:	88 60       	ori	r24, 0x08	; 8
     5ea:	80 93 6b 00 	sts	0x006B, r24
	return RESULT_OK;
     5ee:	80 e0       	ldi	r24, 0x00	; 0
     5f0:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB3); setBit(DDRB, PB3);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB3); setBit(DDRB, PB3);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB3); clrBit(DDRB, PB3);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB3); clrBit(DDRB, PB3);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     5f2:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK0, PCINT3);
	return RESULT_OK;
}
     5f4:	08 95       	ret

000005f6 <pcint3DeactivateInterrupt>:
 * Deactivates the external interrupt pcint3 in PB3
 * -------------------------------------------------------------------------- */

void pcint3DeactivateInterrupt(void)
{
	clrBit(PCMSK0, PCINT3);
     5f6:	eb e6       	ldi	r30, 0x6B	; 107
     5f8:	f0 e0       	ldi	r31, 0x00	; 0
     5fa:	80 81       	ld	r24, Z
     5fc:	87 7f       	andi	r24, 0xF7	; 247
     5fe:	80 83       	st	Z, r24
     600:	08 95       	ret

00000602 <pcint4ActivateInterrupt>:
 * Activates the external interrupt pcint4 and configures port mode in PB4
 * -------------------------------------------------------------------------- */

resultValue_t pcint4ActivateInterrupt(portMode_t port)
{
	switch(port){
     602:	82 30       	cpi	r24, 0x02	; 2
     604:	79 f0       	breq	.+30     	; 0x624 <pcint4ActivateInterrupt+0x22>
     606:	30 f4       	brcc	.+12     	; 0x614 <pcint4ActivateInterrupt+0x12>
     608:	88 23       	and	r24, r24
     60a:	49 f0       	breq	.+18     	; 0x61e <pcint4ActivateInterrupt+0x1c>
     60c:	81 30       	cpi	r24, 0x01	; 1
     60e:	a9 f4       	brne	.+42     	; 0x63a <pcint4ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB4); setBit(DDRB, PB4);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB4); setBit(DDRB, PB4);	break;
     610:	2c 9a       	sbi	0x05, 4	; 5
     612:	06 c0       	rjmp	.+12     	; 0x620 <pcint4ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint4 and configures port mode in PB4
 * -------------------------------------------------------------------------- */

resultValue_t pcint4ActivateInterrupt(portMode_t port)
{
	switch(port){
     614:	83 30       	cpi	r24, 0x03	; 3
     616:	41 f0       	breq	.+16     	; 0x628 <pcint4ActivateInterrupt+0x26>
     618:	8f 3f       	cpi	r24, 0xFF	; 255
     61a:	41 f0       	breq	.+16     	; 0x62c <pcint4ActivateInterrupt+0x2a>
     61c:	0e c0       	rjmp	.+28     	; 0x63a <pcint4ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB4); setBit(DDRB, PB4);	break;
     61e:	2c 98       	cbi	0x05, 4	; 5
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB4); setBit(DDRB, PB4);	break;
     620:	24 9a       	sbi	0x04, 4	; 4
     622:	04 c0       	rjmp	.+8      	; 0x62c <pcint4ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB4); clrBit(DDRB, PB4);	break;
     624:	2c 98       	cbi	0x05, 4	; 5
     626:	01 c0       	rjmp	.+2      	; 0x62a <pcint4ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB4); clrBit(DDRB, PB4);	break;
     628:	2c 9a       	sbi	0x05, 4	; 5
     62a:	24 98       	cbi	0x04, 4	; 4
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK0, PCINT4);
     62c:	80 91 6b 00 	lds	r24, 0x006B
     630:	80 61       	ori	r24, 0x10	; 16
     632:	80 93 6b 00 	sts	0x006B, r24
	return RESULT_OK;
     636:	80 e0       	ldi	r24, 0x00	; 0
     638:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB4); setBit(DDRB, PB4);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB4); setBit(DDRB, PB4);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB4); clrBit(DDRB, PB4);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB4); clrBit(DDRB, PB4);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     63a:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK0, PCINT4);
	return RESULT_OK;
}
     63c:	08 95       	ret

0000063e <pcint4DeactivateInterrupt>:
 * Deactivates the external interrupt pcint4 in PB4
 * -------------------------------------------------------------------------- */

void pcint4DeactivateInterrupt(void)
{
	clrBit(PCMSK0, PCINT4);
     63e:	eb e6       	ldi	r30, 0x6B	; 107
     640:	f0 e0       	ldi	r31, 0x00	; 0
     642:	80 81       	ld	r24, Z
     644:	8f 7e       	andi	r24, 0xEF	; 239
     646:	80 83       	st	Z, r24
     648:	08 95       	ret

0000064a <pcint5ActivateInterrupt>:
 * Activates the external interrupt pcint5 and configures port mode in PB5
 * -------------------------------------------------------------------------- */

resultValue_t pcint5ActivateInterrupt(portMode_t port)
{
	switch(port){
     64a:	82 30       	cpi	r24, 0x02	; 2
     64c:	79 f0       	breq	.+30     	; 0x66c <pcint5ActivateInterrupt+0x22>
     64e:	30 f4       	brcc	.+12     	; 0x65c <pcint5ActivateInterrupt+0x12>
     650:	88 23       	and	r24, r24
     652:	49 f0       	breq	.+18     	; 0x666 <pcint5ActivateInterrupt+0x1c>
     654:	81 30       	cpi	r24, 0x01	; 1
     656:	a9 f4       	brne	.+42     	; 0x682 <pcint5ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB5); setBit(DDRB, PB5);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB5); setBit(DDRB, PB5);	break;
     658:	2d 9a       	sbi	0x05, 5	; 5
     65a:	06 c0       	rjmp	.+12     	; 0x668 <pcint5ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint5 and configures port mode in PB5
 * -------------------------------------------------------------------------- */

resultValue_t pcint5ActivateInterrupt(portMode_t port)
{
	switch(port){
     65c:	83 30       	cpi	r24, 0x03	; 3
     65e:	41 f0       	breq	.+16     	; 0x670 <pcint5ActivateInterrupt+0x26>
     660:	8f 3f       	cpi	r24, 0xFF	; 255
     662:	41 f0       	breq	.+16     	; 0x674 <pcint5ActivateInterrupt+0x2a>
     664:	0e c0       	rjmp	.+28     	; 0x682 <pcint5ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB5); setBit(DDRB, PB5);	break;
     666:	2d 98       	cbi	0x05, 5	; 5
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB5); setBit(DDRB, PB5);	break;
     668:	25 9a       	sbi	0x04, 5	; 4
     66a:	04 c0       	rjmp	.+8      	; 0x674 <pcint5ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB5); clrBit(DDRB, PB5);	break;
     66c:	2d 98       	cbi	0x05, 5	; 5
     66e:	01 c0       	rjmp	.+2      	; 0x672 <pcint5ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB5); clrBit(DDRB, PB5);	break;
     670:	2d 9a       	sbi	0x05, 5	; 5
     672:	25 98       	cbi	0x04, 5	; 4
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK0, PCINT5);
     674:	80 91 6b 00 	lds	r24, 0x006B
     678:	80 62       	ori	r24, 0x20	; 32
     67a:	80 93 6b 00 	sts	0x006B, r24
	return RESULT_OK;
     67e:	80 e0       	ldi	r24, 0x00	; 0
     680:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB5); setBit(DDRB, PB5);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB5); setBit(DDRB, PB5);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB5); clrBit(DDRB, PB5);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB5); clrBit(DDRB, PB5);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     682:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK0, PCINT5);
	return RESULT_OK;
}
     684:	08 95       	ret

00000686 <pcint5DeactivateInterrupt>:
 * Deactivates the external interrupt pcint5 in PB5
 * -------------------------------------------------------------------------- */

void pcint5DeactivateInterrupt(void)
{
	clrBit(PCMSK0, PCINT5);
     686:	eb e6       	ldi	r30, 0x6B	; 107
     688:	f0 e0       	ldi	r31, 0x00	; 0
     68a:	80 81       	ld	r24, Z
     68c:	8f 7d       	andi	r24, 0xDF	; 223
     68e:	80 83       	st	Z, r24
     690:	08 95       	ret

00000692 <pcint6ActivateInterrupt>:
 * Activates the external interrupt pcint6 and configures port mode in PB6
 * -------------------------------------------------------------------------- */

resultValue_t pcint6ActivateInterrupt(portMode_t port)
{
	switch(port){
     692:	82 30       	cpi	r24, 0x02	; 2
     694:	79 f0       	breq	.+30     	; 0x6b4 <pcint6ActivateInterrupt+0x22>
     696:	30 f4       	brcc	.+12     	; 0x6a4 <pcint6ActivateInterrupt+0x12>
     698:	88 23       	and	r24, r24
     69a:	49 f0       	breq	.+18     	; 0x6ae <pcint6ActivateInterrupt+0x1c>
     69c:	81 30       	cpi	r24, 0x01	; 1
     69e:	a9 f4       	brne	.+42     	; 0x6ca <pcint6ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB6); setBit(DDRB, PB6);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB6); setBit(DDRB, PB6);	break;
     6a0:	2e 9a       	sbi	0x05, 6	; 5
     6a2:	06 c0       	rjmp	.+12     	; 0x6b0 <pcint6ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint6 and configures port mode in PB6
 * -------------------------------------------------------------------------- */

resultValue_t pcint6ActivateInterrupt(portMode_t port)
{
	switch(port){
     6a4:	83 30       	cpi	r24, 0x03	; 3
     6a6:	41 f0       	breq	.+16     	; 0x6b8 <pcint6ActivateInterrupt+0x26>
     6a8:	8f 3f       	cpi	r24, 0xFF	; 255
     6aa:	41 f0       	breq	.+16     	; 0x6bc <pcint6ActivateInterrupt+0x2a>
     6ac:	0e c0       	rjmp	.+28     	; 0x6ca <pcint6ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB6); setBit(DDRB, PB6);	break;
     6ae:	2e 98       	cbi	0x05, 6	; 5
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB6); setBit(DDRB, PB6);	break;
     6b0:	26 9a       	sbi	0x04, 6	; 4
     6b2:	04 c0       	rjmp	.+8      	; 0x6bc <pcint6ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB6); clrBit(DDRB, PB6);	break;
     6b4:	2e 98       	cbi	0x05, 6	; 5
     6b6:	01 c0       	rjmp	.+2      	; 0x6ba <pcint6ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB6); clrBit(DDRB, PB6);	break;
     6b8:	2e 9a       	sbi	0x05, 6	; 5
     6ba:	26 98       	cbi	0x04, 6	; 4
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK0, PCINT6);
     6bc:	80 91 6b 00 	lds	r24, 0x006B
     6c0:	80 64       	ori	r24, 0x40	; 64
     6c2:	80 93 6b 00 	sts	0x006B, r24
	return RESULT_OK;
     6c6:	80 e0       	ldi	r24, 0x00	; 0
     6c8:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB6); setBit(DDRB, PB6);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB6); setBit(DDRB, PB6);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB6); clrBit(DDRB, PB6);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB6); clrBit(DDRB, PB6);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     6ca:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK0, PCINT6);
	return RESULT_OK;
}
     6cc:	08 95       	ret

000006ce <pcint6DeactivateInterrupt>:
 * Deactivates the external interrupt pcint6 in PB6
 * -------------------------------------------------------------------------- */

void pcint6DeactivateInterrupt(void)
{
	clrBit(PCMSK0, PCINT6);
     6ce:	eb e6       	ldi	r30, 0x6B	; 107
     6d0:	f0 e0       	ldi	r31, 0x00	; 0
     6d2:	80 81       	ld	r24, Z
     6d4:	8f 7b       	andi	r24, 0xBF	; 191
     6d6:	80 83       	st	Z, r24
     6d8:	08 95       	ret

000006da <pcint7ActivateInterrupt>:
 * Activates the external interrupt pcint7 and configures port mode in PB7
 * -------------------------------------------------------------------------- */

resultValue_t pcint7ActivateInterrupt(portMode_t port)
{
	switch(port){
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	79 f0       	breq	.+30     	; 0x6fc <pcint7ActivateInterrupt+0x22>
     6de:	30 f4       	brcc	.+12     	; 0x6ec <pcint7ActivateInterrupt+0x12>
     6e0:	88 23       	and	r24, r24
     6e2:	49 f0       	breq	.+18     	; 0x6f6 <pcint7ActivateInterrupt+0x1c>
     6e4:	81 30       	cpi	r24, 0x01	; 1
     6e6:	a9 f4       	brne	.+42     	; 0x712 <pcint7ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB7); setBit(DDRB, PB7);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB7); setBit(DDRB, PB7);	break;
     6e8:	2f 9a       	sbi	0x05, 7	; 5
     6ea:	06 c0       	rjmp	.+12     	; 0x6f8 <pcint7ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint7 and configures port mode in PB7
 * -------------------------------------------------------------------------- */

resultValue_t pcint7ActivateInterrupt(portMode_t port)
{
	switch(port){
     6ec:	83 30       	cpi	r24, 0x03	; 3
     6ee:	41 f0       	breq	.+16     	; 0x700 <pcint7ActivateInterrupt+0x26>
     6f0:	8f 3f       	cpi	r24, 0xFF	; 255
     6f2:	41 f0       	breq	.+16     	; 0x704 <pcint7ActivateInterrupt+0x2a>
     6f4:	0e c0       	rjmp	.+28     	; 0x712 <pcint7ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB7); setBit(DDRB, PB7);	break;
     6f6:	2f 98       	cbi	0x05, 7	; 5
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB7); setBit(DDRB, PB7);	break;
     6f8:	27 9a       	sbi	0x04, 7	; 4
     6fa:	04 c0       	rjmp	.+8      	; 0x704 <pcint7ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB7); clrBit(DDRB, PB7);	break;
     6fc:	2f 98       	cbi	0x05, 7	; 5
     6fe:	01 c0       	rjmp	.+2      	; 0x702 <pcint7ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB7); clrBit(DDRB, PB7);	break;
     700:	2f 9a       	sbi	0x05, 7	; 5
     702:	27 98       	cbi	0x04, 7	; 4
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK0, PCINT7);
     704:	80 91 6b 00 	lds	r24, 0x006B
     708:	80 68       	ori	r24, 0x80	; 128
     70a:	80 93 6b 00 	sts	0x006B, r24
	return RESULT_OK;
     70e:	80 e0       	ldi	r24, 0x00	; 0
     710:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB7); setBit(DDRB, PB7);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB7); setBit(DDRB, PB7);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB7); clrBit(DDRB, PB7);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB7); clrBit(DDRB, PB7);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     712:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK0, PCINT7);
	return RESULT_OK;
}
     714:	08 95       	ret

00000716 <pcint7DeactivateInterrupt>:
 * Deactivates the external interrupt pcint7 in PB7
 * -------------------------------------------------------------------------- */

void pcint7DeactivateInterrupt(void)
{
	clrBit(PCMSK0, PCINT7);
     716:	eb e6       	ldi	r30, 0x6B	; 107
     718:	f0 e0       	ldi	r31, 0x00	; 0
     71a:	80 81       	ld	r24, Z
     71c:	8f 77       	andi	r24, 0x7F	; 127
     71e:	80 83       	st	Z, r24
     720:	08 95       	ret

00000722 <pcint14_8Enable>:
 * Enables the external interrupt pcint in port C
 * -------------------------------------------------------------------------- */

void pcint14_8Enable(void)
{
	setBit(PCICR, PCIE1);
     722:	e8 e6       	ldi	r30, 0x68	; 104
     724:	f0 e0       	ldi	r31, 0x00	; 0
     726:	80 81       	ld	r24, Z
     728:	82 60       	ori	r24, 0x02	; 2
     72a:	80 83       	st	Z, r24
     72c:	08 95       	ret

0000072e <pcint14_8Disable>:
 * Disables the external interrupt pcint in port C
 * -------------------------------------------------------------------------- */

void pcint14_8Disable(void)
{
	clrBit(PCICR, PCIE1);
     72e:	e8 e6       	ldi	r30, 0x68	; 104
     730:	f0 e0       	ldi	r31, 0x00	; 0
     732:	80 81       	ld	r24, Z
     734:	8d 7f       	andi	r24, 0xFD	; 253
     736:	80 83       	st	Z, r24
     738:	08 95       	ret

0000073a <pcint14_8ClearInterruptRequest>:
 * Disables the external interrupt pcint in port C
 * -------------------------------------------------------------------------- */

void pcint14_8ClearInterruptRequest(void)
{
	setBit(PCIFR, PCIF1);
     73a:	d9 9a       	sbi	0x1b, 1	; 27
     73c:	08 95       	ret

0000073e <pcint8ActivateInterrupt>:
 * Activates the external interrupt pcint8 and configures port mode in PC0
 * -------------------------------------------------------------------------- */

resultValue_t pcint8ActivateInterrupt(portMode_t port)
{
	switch(port){
     73e:	82 30       	cpi	r24, 0x02	; 2
     740:	79 f0       	breq	.+30     	; 0x760 <pcint8ActivateInterrupt+0x22>
     742:	30 f4       	brcc	.+12     	; 0x750 <pcint8ActivateInterrupt+0x12>
     744:	88 23       	and	r24, r24
     746:	49 f0       	breq	.+18     	; 0x75a <pcint8ActivateInterrupt+0x1c>
     748:	81 30       	cpi	r24, 0x01	; 1
     74a:	a9 f4       	brne	.+42     	; 0x776 <pcint8ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC0); setBit(DDRC, PC0);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC0); setBit(DDRC, PC0);	break;
     74c:	40 9a       	sbi	0x08, 0	; 8
     74e:	06 c0       	rjmp	.+12     	; 0x75c <pcint8ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint8 and configures port mode in PC0
 * -------------------------------------------------------------------------- */

resultValue_t pcint8ActivateInterrupt(portMode_t port)
{
	switch(port){
     750:	83 30       	cpi	r24, 0x03	; 3
     752:	41 f0       	breq	.+16     	; 0x764 <pcint8ActivateInterrupt+0x26>
     754:	8f 3f       	cpi	r24, 0xFF	; 255
     756:	41 f0       	breq	.+16     	; 0x768 <pcint8ActivateInterrupt+0x2a>
     758:	0e c0       	rjmp	.+28     	; 0x776 <pcint8ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC0); setBit(DDRC, PC0);	break;
     75a:	40 98       	cbi	0x08, 0	; 8
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC0); setBit(DDRC, PC0);	break;
     75c:	38 9a       	sbi	0x07, 0	; 7
     75e:	04 c0       	rjmp	.+8      	; 0x768 <pcint8ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTC, PC0); clrBit(DDRC, PC0);	break;
     760:	40 98       	cbi	0x08, 0	; 8
     762:	01 c0       	rjmp	.+2      	; 0x766 <pcint8ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTC, PC0); clrBit(DDRC, PC0);	break;
     764:	40 9a       	sbi	0x08, 0	; 8
     766:	38 98       	cbi	0x07, 0	; 7
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK1, PCINT8);
     768:	80 91 6c 00 	lds	r24, 0x006C
     76c:	81 60       	ori	r24, 0x01	; 1
     76e:	80 93 6c 00 	sts	0x006C, r24
	return RESULT_OK;
     772:	80 e0       	ldi	r24, 0x00	; 0
     774:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC0); setBit(DDRC, PC0);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC0); setBit(DDRC, PC0);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTC, PC0); clrBit(DDRC, PC0);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTC, PC0); clrBit(DDRC, PC0);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     776:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK1, PCINT8);
	return RESULT_OK;
}
     778:	08 95       	ret

0000077a <pcint8DeactivateInterrupt>:
 * Deactivates the external interrupt pcint8 in PC0
 * -------------------------------------------------------------------------- */

void pcint8DeactivateInterrupt(void)
{
	clrBit(PCMSK1, PCINT8);
     77a:	ec e6       	ldi	r30, 0x6C	; 108
     77c:	f0 e0       	ldi	r31, 0x00	; 0
     77e:	80 81       	ld	r24, Z
     780:	8e 7f       	andi	r24, 0xFE	; 254
     782:	80 83       	st	Z, r24
     784:	08 95       	ret

00000786 <pcint9ActivateInterrupt>:
 * Activates the external interrupt pcint9 and configures port mode in PC1
 * -------------------------------------------------------------------------- */

resultValue_t pcint9ActivateInterrupt(portMode_t port)
{
	switch(port){
     786:	82 30       	cpi	r24, 0x02	; 2
     788:	79 f0       	breq	.+30     	; 0x7a8 <pcint9ActivateInterrupt+0x22>
     78a:	30 f4       	brcc	.+12     	; 0x798 <pcint9ActivateInterrupt+0x12>
     78c:	88 23       	and	r24, r24
     78e:	49 f0       	breq	.+18     	; 0x7a2 <pcint9ActivateInterrupt+0x1c>
     790:	81 30       	cpi	r24, 0x01	; 1
     792:	a9 f4       	brne	.+42     	; 0x7be <pcint9ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC1); setBit(DDRC, PC1);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC1); setBit(DDRC, PC1);	break;
     794:	41 9a       	sbi	0x08, 1	; 8
     796:	06 c0       	rjmp	.+12     	; 0x7a4 <pcint9ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint9 and configures port mode in PC1
 * -------------------------------------------------------------------------- */

resultValue_t pcint9ActivateInterrupt(portMode_t port)
{
	switch(port){
     798:	83 30       	cpi	r24, 0x03	; 3
     79a:	41 f0       	breq	.+16     	; 0x7ac <pcint9ActivateInterrupt+0x26>
     79c:	8f 3f       	cpi	r24, 0xFF	; 255
     79e:	41 f0       	breq	.+16     	; 0x7b0 <pcint9ActivateInterrupt+0x2a>
     7a0:	0e c0       	rjmp	.+28     	; 0x7be <pcint9ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC1); setBit(DDRC, PC1);	break;
     7a2:	41 98       	cbi	0x08, 1	; 8
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC1); setBit(DDRC, PC1);	break;
     7a4:	39 9a       	sbi	0x07, 1	; 7
     7a6:	04 c0       	rjmp	.+8      	; 0x7b0 <pcint9ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTC, PC1); clrBit(DDRC, PC1);	break;
     7a8:	41 98       	cbi	0x08, 1	; 8
     7aa:	01 c0       	rjmp	.+2      	; 0x7ae <pcint9ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTC, PC1); clrBit(DDRC, PC1);	break;
     7ac:	41 9a       	sbi	0x08, 1	; 8
     7ae:	39 98       	cbi	0x07, 1	; 7
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK1, PCINT9);
     7b0:	80 91 6c 00 	lds	r24, 0x006C
     7b4:	82 60       	ori	r24, 0x02	; 2
     7b6:	80 93 6c 00 	sts	0x006C, r24
	return RESULT_OK;
     7ba:	80 e0       	ldi	r24, 0x00	; 0
     7bc:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC1); setBit(DDRC, PC1);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC1); setBit(DDRC, PC1);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTC, PC1); clrBit(DDRC, PC1);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTC, PC1); clrBit(DDRC, PC1);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     7be:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK1, PCINT9);
	return RESULT_OK;
}
     7c0:	08 95       	ret

000007c2 <pcint9DeactivateInterrupt>:
 * Deactivates the external interrupt pcint9 in PC1
 * -------------------------------------------------------------------------- */

void pcint9DeactivateInterrupt(void)
{
	clrBit(PCMSK1, PCINT9);
     7c2:	ec e6       	ldi	r30, 0x6C	; 108
     7c4:	f0 e0       	ldi	r31, 0x00	; 0
     7c6:	80 81       	ld	r24, Z
     7c8:	8d 7f       	andi	r24, 0xFD	; 253
     7ca:	80 83       	st	Z, r24
     7cc:	08 95       	ret

000007ce <pcint10ActivateInterrupt>:
 * Activates the external interrupt pcint10 and configures port mode in PC2
 * -------------------------------------------------------------------------- */

resultValue_t pcint10ActivateInterrupt(portMode_t port)
{
	switch(port){
     7ce:	82 30       	cpi	r24, 0x02	; 2
     7d0:	79 f0       	breq	.+30     	; 0x7f0 <pcint10ActivateInterrupt+0x22>
     7d2:	30 f4       	brcc	.+12     	; 0x7e0 <pcint10ActivateInterrupt+0x12>
     7d4:	88 23       	and	r24, r24
     7d6:	49 f0       	breq	.+18     	; 0x7ea <pcint10ActivateInterrupt+0x1c>
     7d8:	81 30       	cpi	r24, 0x01	; 1
     7da:	a9 f4       	brne	.+42     	; 0x806 <pcint10ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC2); setBit(DDRC, PC2);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC2); setBit(DDRC, PC2);	break;
     7dc:	42 9a       	sbi	0x08, 2	; 8
     7de:	06 c0       	rjmp	.+12     	; 0x7ec <pcint10ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint10 and configures port mode in PC2
 * -------------------------------------------------------------------------- */

resultValue_t pcint10ActivateInterrupt(portMode_t port)
{
	switch(port){
     7e0:	83 30       	cpi	r24, 0x03	; 3
     7e2:	41 f0       	breq	.+16     	; 0x7f4 <pcint10ActivateInterrupt+0x26>
     7e4:	8f 3f       	cpi	r24, 0xFF	; 255
     7e6:	41 f0       	breq	.+16     	; 0x7f8 <pcint10ActivateInterrupt+0x2a>
     7e8:	0e c0       	rjmp	.+28     	; 0x806 <pcint10ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC2); setBit(DDRC, PC2);	break;
     7ea:	42 98       	cbi	0x08, 2	; 8
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC2); setBit(DDRC, PC2);	break;
     7ec:	3a 9a       	sbi	0x07, 2	; 7
     7ee:	04 c0       	rjmp	.+8      	; 0x7f8 <pcint10ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTC, PC2); clrBit(DDRC, PC2);	break;
     7f0:	42 98       	cbi	0x08, 2	; 8
     7f2:	01 c0       	rjmp	.+2      	; 0x7f6 <pcint10ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTC, PC2); clrBit(DDRC, PC2);	break;
     7f4:	42 9a       	sbi	0x08, 2	; 8
     7f6:	3a 98       	cbi	0x07, 2	; 7
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK1, PCINT10);
     7f8:	80 91 6c 00 	lds	r24, 0x006C
     7fc:	84 60       	ori	r24, 0x04	; 4
     7fe:	80 93 6c 00 	sts	0x006C, r24
	return RESULT_OK;
     802:	80 e0       	ldi	r24, 0x00	; 0
     804:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC2); setBit(DDRC, PC2);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC2); setBit(DDRC, PC2);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTC, PC2); clrBit(DDRC, PC2);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTC, PC2); clrBit(DDRC, PC2);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     806:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK1, PCINT10);
	return RESULT_OK;
}
     808:	08 95       	ret

0000080a <pcint10DeactivateInterrupt>:
 * Deactivates the external interrupt pcint10 in PC2
 * -------------------------------------------------------------------------- */

void pcint10DeactivateInterrupt(void)
{
	clrBit(PCMSK1, PCINT10);
     80a:	ec e6       	ldi	r30, 0x6C	; 108
     80c:	f0 e0       	ldi	r31, 0x00	; 0
     80e:	80 81       	ld	r24, Z
     810:	8b 7f       	andi	r24, 0xFB	; 251
     812:	80 83       	st	Z, r24
     814:	08 95       	ret

00000816 <pcint11ActivateInterrupt>:
 * Activates the external interrupt pcint11 and configures port mode in PC3
 * -------------------------------------------------------------------------- */

resultValue_t pcint11ActivateInterrupt(portMode_t port)
{
	switch(port){
     816:	82 30       	cpi	r24, 0x02	; 2
     818:	79 f0       	breq	.+30     	; 0x838 <pcint11ActivateInterrupt+0x22>
     81a:	30 f4       	brcc	.+12     	; 0x828 <pcint11ActivateInterrupt+0x12>
     81c:	88 23       	and	r24, r24
     81e:	49 f0       	breq	.+18     	; 0x832 <pcint11ActivateInterrupt+0x1c>
     820:	81 30       	cpi	r24, 0x01	; 1
     822:	a9 f4       	brne	.+42     	; 0x84e <pcint11ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC3); setBit(DDRC, PC3);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC3); setBit(DDRC, PC3);	break;
     824:	43 9a       	sbi	0x08, 3	; 8
     826:	06 c0       	rjmp	.+12     	; 0x834 <pcint11ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint11 and configures port mode in PC3
 * -------------------------------------------------------------------------- */

resultValue_t pcint11ActivateInterrupt(portMode_t port)
{
	switch(port){
     828:	83 30       	cpi	r24, 0x03	; 3
     82a:	41 f0       	breq	.+16     	; 0x83c <pcint11ActivateInterrupt+0x26>
     82c:	8f 3f       	cpi	r24, 0xFF	; 255
     82e:	41 f0       	breq	.+16     	; 0x840 <pcint11ActivateInterrupt+0x2a>
     830:	0e c0       	rjmp	.+28     	; 0x84e <pcint11ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC3); setBit(DDRC, PC3);	break;
     832:	43 98       	cbi	0x08, 3	; 8
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC3); setBit(DDRC, PC3);	break;
     834:	3b 9a       	sbi	0x07, 3	; 7
     836:	04 c0       	rjmp	.+8      	; 0x840 <pcint11ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTC, PC3); clrBit(DDRC, PC3);	break;
     838:	43 98       	cbi	0x08, 3	; 8
     83a:	01 c0       	rjmp	.+2      	; 0x83e <pcint11ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTC, PC3); clrBit(DDRC, PC3);	break;
     83c:	43 9a       	sbi	0x08, 3	; 8
     83e:	3b 98       	cbi	0x07, 3	; 7
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK1, PCINT11);
     840:	80 91 6c 00 	lds	r24, 0x006C
     844:	88 60       	ori	r24, 0x08	; 8
     846:	80 93 6c 00 	sts	0x006C, r24
	return RESULT_OK;
     84a:	80 e0       	ldi	r24, 0x00	; 0
     84c:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC3); setBit(DDRC, PC3);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC3); setBit(DDRC, PC3);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTC, PC3); clrBit(DDRC, PC3);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTC, PC3); clrBit(DDRC, PC3);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     84e:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK1, PCINT11);
	return RESULT_OK;
}
     850:	08 95       	ret

00000852 <pcint11DeactivateInterrupt>:
 * Deactivates the external interrupt pcint11 in PC3
 * -------------------------------------------------------------------------- */

void pcint11DeactivateInterrupt(void)
{
	clrBit(PCMSK1, PCINT11);
     852:	ec e6       	ldi	r30, 0x6C	; 108
     854:	f0 e0       	ldi	r31, 0x00	; 0
     856:	80 81       	ld	r24, Z
     858:	87 7f       	andi	r24, 0xF7	; 247
     85a:	80 83       	st	Z, r24
     85c:	08 95       	ret

0000085e <pcint12ActivateInterrupt>:
 * Activates the external interrupt pcint12 and configures port mode in PC4
 * -------------------------------------------------------------------------- */

resultValue_t pcint12ActivateInterrupt(portMode_t port)
{
	switch(port){
     85e:	82 30       	cpi	r24, 0x02	; 2
     860:	79 f0       	breq	.+30     	; 0x880 <pcint12ActivateInterrupt+0x22>
     862:	30 f4       	brcc	.+12     	; 0x870 <pcint12ActivateInterrupt+0x12>
     864:	88 23       	and	r24, r24
     866:	49 f0       	breq	.+18     	; 0x87a <pcint12ActivateInterrupt+0x1c>
     868:	81 30       	cpi	r24, 0x01	; 1
     86a:	a9 f4       	brne	.+42     	; 0x896 <pcint12ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC4); setBit(DDRC, PC4);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC4); setBit(DDRC, PC4);	break;
     86c:	44 9a       	sbi	0x08, 4	; 8
     86e:	06 c0       	rjmp	.+12     	; 0x87c <pcint12ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint12 and configures port mode in PC4
 * -------------------------------------------------------------------------- */

resultValue_t pcint12ActivateInterrupt(portMode_t port)
{
	switch(port){
     870:	83 30       	cpi	r24, 0x03	; 3
     872:	41 f0       	breq	.+16     	; 0x884 <pcint12ActivateInterrupt+0x26>
     874:	8f 3f       	cpi	r24, 0xFF	; 255
     876:	41 f0       	breq	.+16     	; 0x888 <pcint12ActivateInterrupt+0x2a>
     878:	0e c0       	rjmp	.+28     	; 0x896 <pcint12ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC4); setBit(DDRC, PC4);	break;
     87a:	44 98       	cbi	0x08, 4	; 8
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC4); setBit(DDRC, PC4);	break;
     87c:	3c 9a       	sbi	0x07, 4	; 7
     87e:	04 c0       	rjmp	.+8      	; 0x888 <pcint12ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTC, PC4); clrBit(DDRC, PC4);	break;
     880:	44 98       	cbi	0x08, 4	; 8
     882:	01 c0       	rjmp	.+2      	; 0x886 <pcint12ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTC, PC4); clrBit(DDRC, PC4);	break;
     884:	44 9a       	sbi	0x08, 4	; 8
     886:	3c 98       	cbi	0x07, 4	; 7
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK1, PCINT12);
     888:	80 91 6c 00 	lds	r24, 0x006C
     88c:	80 61       	ori	r24, 0x10	; 16
     88e:	80 93 6c 00 	sts	0x006C, r24
	return RESULT_OK;
     892:	80 e0       	ldi	r24, 0x00	; 0
     894:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC4); setBit(DDRC, PC4);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC4); setBit(DDRC, PC4);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTC, PC4); clrBit(DDRC, PC4);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTC, PC4); clrBit(DDRC, PC4);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     896:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK1, PCINT12);
	return RESULT_OK;
}
     898:	08 95       	ret

0000089a <pcint12DeactivateInterrupt>:
 * Deactivates the external interrupt pcint12 in PC4
 * -------------------------------------------------------------------------- */

void pcint12DeactivateInterrupt(void)
{
	clrBit(PCMSK1, PCINT12);
     89a:	ec e6       	ldi	r30, 0x6C	; 108
     89c:	f0 e0       	ldi	r31, 0x00	; 0
     89e:	80 81       	ld	r24, Z
     8a0:	8f 7e       	andi	r24, 0xEF	; 239
     8a2:	80 83       	st	Z, r24
     8a4:	08 95       	ret

000008a6 <pcint13ActivateInterrupt>:
 * Activates the external interrupt pcint13 and configures port mode in PC5
 * -------------------------------------------------------------------------- */

resultValue_t pcint13ActivateInterrupt(portMode_t port)
{
	switch(port){
     8a6:	82 30       	cpi	r24, 0x02	; 2
     8a8:	79 f0       	breq	.+30     	; 0x8c8 <pcint13ActivateInterrupt+0x22>
     8aa:	30 f4       	brcc	.+12     	; 0x8b8 <pcint13ActivateInterrupt+0x12>
     8ac:	88 23       	and	r24, r24
     8ae:	49 f0       	breq	.+18     	; 0x8c2 <pcint13ActivateInterrupt+0x1c>
     8b0:	81 30       	cpi	r24, 0x01	; 1
     8b2:	a9 f4       	brne	.+42     	; 0x8de <pcint13ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC5); setBit(DDRC, PC5);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC5); setBit(DDRC, PC5);	break;
     8b4:	45 9a       	sbi	0x08, 5	; 8
     8b6:	06 c0       	rjmp	.+12     	; 0x8c4 <pcint13ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint13 and configures port mode in PC5
 * -------------------------------------------------------------------------- */

resultValue_t pcint13ActivateInterrupt(portMode_t port)
{
	switch(port){
     8b8:	83 30       	cpi	r24, 0x03	; 3
     8ba:	41 f0       	breq	.+16     	; 0x8cc <pcint13ActivateInterrupt+0x26>
     8bc:	8f 3f       	cpi	r24, 0xFF	; 255
     8be:	41 f0       	breq	.+16     	; 0x8d0 <pcint13ActivateInterrupt+0x2a>
     8c0:	0e c0       	rjmp	.+28     	; 0x8de <pcint13ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC5); setBit(DDRC, PC5);	break;
     8c2:	45 98       	cbi	0x08, 5	; 8
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC5); setBit(DDRC, PC5);	break;
     8c4:	3d 9a       	sbi	0x07, 5	; 7
     8c6:	04 c0       	rjmp	.+8      	; 0x8d0 <pcint13ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTC, PC5); clrBit(DDRC, PC5);	break;
     8c8:	45 98       	cbi	0x08, 5	; 8
     8ca:	01 c0       	rjmp	.+2      	; 0x8ce <pcint13ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTC, PC5); clrBit(DDRC, PC5);	break;
     8cc:	45 9a       	sbi	0x08, 5	; 8
     8ce:	3d 98       	cbi	0x07, 5	; 7
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK1, PCINT13);
     8d0:	80 91 6c 00 	lds	r24, 0x006C
     8d4:	80 62       	ori	r24, 0x20	; 32
     8d6:	80 93 6c 00 	sts	0x006C, r24
	return RESULT_OK;
     8da:	80 e0       	ldi	r24, 0x00	; 0
     8dc:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC5); setBit(DDRC, PC5);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC5); setBit(DDRC, PC5);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTC, PC5); clrBit(DDRC, PC5);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTC, PC5); clrBit(DDRC, PC5);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     8de:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK1, PCINT13);
	return RESULT_OK;
}
     8e0:	08 95       	ret

000008e2 <pcint13DeactivateInterrupt>:
 * Deactivates the external interrupt pcint13 in PC5
 * -------------------------------------------------------------------------- */

void pcint13DeactivateInterrupt(void)
{
	clrBit(PCMSK1, PCINT13);
     8e2:	ec e6       	ldi	r30, 0x6C	; 108
     8e4:	f0 e0       	ldi	r31, 0x00	; 0
     8e6:	80 81       	ld	r24, Z
     8e8:	8f 7d       	andi	r24, 0xDF	; 223
     8ea:	80 83       	st	Z, r24
     8ec:	08 95       	ret

000008ee <pcint14ActivateInterrupt>:
 * Activates the external interrupt pcint14 and configures port mode in PC6
 * -------------------------------------------------------------------------- */

resultValue_t pcint14ActivateInterrupt(portMode_t port)
{
	switch(port){
     8ee:	82 30       	cpi	r24, 0x02	; 2
     8f0:	79 f0       	breq	.+30     	; 0x910 <__stack+0x11>
     8f2:	30 f4       	brcc	.+12     	; 0x900 <__stack+0x1>
     8f4:	88 23       	and	r24, r24
     8f6:	49 f0       	breq	.+18     	; 0x90a <__stack+0xb>
     8f8:	81 30       	cpi	r24, 0x01	; 1
     8fa:	a9 f4       	brne	.+42     	; 0x926 <__stack+0x27>
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC6); setBit(DDRC, PC6);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC6); setBit(DDRC, PC6);	break;
     8fc:	46 9a       	sbi	0x08, 6	; 8
     8fe:	06 c0       	rjmp	.+12     	; 0x90c <__stack+0xd>
 * Activates the external interrupt pcint14 and configures port mode in PC6
 * -------------------------------------------------------------------------- */

resultValue_t pcint14ActivateInterrupt(portMode_t port)
{
	switch(port){
     900:	83 30       	cpi	r24, 0x03	; 3
     902:	41 f0       	breq	.+16     	; 0x914 <__stack+0x15>
     904:	8f 3f       	cpi	r24, 0xFF	; 255
     906:	41 f0       	breq	.+16     	; 0x918 <__stack+0x19>
     908:	0e c0       	rjmp	.+28     	; 0x926 <__stack+0x27>
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC6); setBit(DDRC, PC6);	break;
     90a:	46 98       	cbi	0x08, 6	; 8
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC6); setBit(DDRC, PC6);	break;
     90c:	3e 9a       	sbi	0x07, 6	; 7
     90e:	04 c0       	rjmp	.+8      	; 0x918 <__stack+0x19>
		case PORT_INPUT_TRISTATE:	clrBit(PORTC, PC6); clrBit(DDRC, PC6);	break;
     910:	46 98       	cbi	0x08, 6	; 8
     912:	01 c0       	rjmp	.+2      	; 0x916 <__stack+0x17>
		case PORT_INPUT_PULL_UP:	setBit(PORTC, PC6); clrBit(DDRC, PC6);	break;
     914:	46 9a       	sbi	0x08, 6	; 8
     916:	3e 98       	cbi	0x07, 6	; 7
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK1, PCINT14);
     918:	80 91 6c 00 	lds	r24, 0x006C
     91c:	80 64       	ori	r24, 0x40	; 64
     91e:	80 93 6c 00 	sts	0x006C, r24
	return RESULT_OK;
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC6); setBit(DDRC, PC6);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC6); setBit(DDRC, PC6);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTC, PC6); clrBit(DDRC, PC6);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTC, PC6); clrBit(DDRC, PC6);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     926:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK1, PCINT14);
	return RESULT_OK;
}
     928:	08 95       	ret

0000092a <pcint14DeactivateInterrupt>:
 * Deactivates the external interrupt pcint14 in PC6
 * -------------------------------------------------------------------------- */

void pcint14DeactivateInterrupt(void)
{
	clrBit(PCMSK1, PCINT14);
     92a:	ec e6       	ldi	r30, 0x6C	; 108
     92c:	f0 e0       	ldi	r31, 0x00	; 0
     92e:	80 81       	ld	r24, Z
     930:	8f 7b       	andi	r24, 0xBF	; 191
     932:	80 83       	st	Z, r24
     934:	08 95       	ret

00000936 <pcint23_16Enable>:
 * Enables the external interrupt pcint in port D
 * -------------------------------------------------------------------------- */

void pcint23_16Enable(void)
{
	setBit(PCICR, PCIE2);
     936:	e8 e6       	ldi	r30, 0x68	; 104
     938:	f0 e0       	ldi	r31, 0x00	; 0
     93a:	80 81       	ld	r24, Z
     93c:	84 60       	ori	r24, 0x04	; 4
     93e:	80 83       	st	Z, r24
     940:	08 95       	ret

00000942 <pcint23_16Disable>:
 * Disables the external interrupt pcint in port D
 * -------------------------------------------------------------------------- */

void pcint23_16Disable(void)
{
	clrBit(PCICR, PCIE2);
     942:	e8 e6       	ldi	r30, 0x68	; 104
     944:	f0 e0       	ldi	r31, 0x00	; 0
     946:	80 81       	ld	r24, Z
     948:	8b 7f       	andi	r24, 0xFB	; 251
     94a:	80 83       	st	Z, r24
     94c:	08 95       	ret

0000094e <pcint23_16ClearInterruptRequest>:
 * Disables the external interrupt pcint in port D
 * -------------------------------------------------------------------------- */

void pcint23_16ClearInterruptRequest(void)
{
	setBit(PCIFR, PCIF2);
     94e:	da 9a       	sbi	0x1b, 2	; 27
     950:	08 95       	ret

00000952 <pcint16ActivateInterrupt>:
 * Activates the external interrupt pcint16 and configures port mode in PD0
 * -------------------------------------------------------------------------- */

resultValue_t pcint16ActivateInterrupt(portMode_t port)
{
	switch(port){
     952:	82 30       	cpi	r24, 0x02	; 2
     954:	79 f0       	breq	.+30     	; 0x974 <pcint16ActivateInterrupt+0x22>
     956:	30 f4       	brcc	.+12     	; 0x964 <pcint16ActivateInterrupt+0x12>
     958:	88 23       	and	r24, r24
     95a:	49 f0       	breq	.+18     	; 0x96e <pcint16ActivateInterrupt+0x1c>
     95c:	81 30       	cpi	r24, 0x01	; 1
     95e:	a9 f4       	brne	.+42     	; 0x98a <pcint16ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD0); setBit(DDRD, PD0);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD0); setBit(DDRD, PD0);	break;
     960:	58 9a       	sbi	0x0b, 0	; 11
     962:	06 c0       	rjmp	.+12     	; 0x970 <pcint16ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint16 and configures port mode in PD0
 * -------------------------------------------------------------------------- */

resultValue_t pcint16ActivateInterrupt(portMode_t port)
{
	switch(port){
     964:	83 30       	cpi	r24, 0x03	; 3
     966:	41 f0       	breq	.+16     	; 0x978 <pcint16ActivateInterrupt+0x26>
     968:	8f 3f       	cpi	r24, 0xFF	; 255
     96a:	41 f0       	breq	.+16     	; 0x97c <pcint16ActivateInterrupt+0x2a>
     96c:	0e c0       	rjmp	.+28     	; 0x98a <pcint16ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD0); setBit(DDRD, PD0);	break;
     96e:	58 98       	cbi	0x0b, 0	; 11
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD0); setBit(DDRD, PD0);	break;
     970:	50 9a       	sbi	0x0a, 0	; 10
     972:	04 c0       	rjmp	.+8      	; 0x97c <pcint16ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD0); clrBit(DDRD, PD0);	break;
     974:	58 98       	cbi	0x0b, 0	; 11
     976:	01 c0       	rjmp	.+2      	; 0x97a <pcint16ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD0); clrBit(DDRD, PD0);	break;
     978:	58 9a       	sbi	0x0b, 0	; 11
     97a:	50 98       	cbi	0x0a, 0	; 10
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK2, PCINT16);
     97c:	80 91 6d 00 	lds	r24, 0x006D
     980:	81 60       	ori	r24, 0x01	; 1
     982:	80 93 6d 00 	sts	0x006D, r24
	return RESULT_OK;
     986:	80 e0       	ldi	r24, 0x00	; 0
     988:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD0); setBit(DDRD, PD0);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD0); setBit(DDRD, PD0);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD0); clrBit(DDRD, PD0);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD0); clrBit(DDRD, PD0);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     98a:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK2, PCINT16);
	return RESULT_OK;
}
     98c:	08 95       	ret

0000098e <pcint16DeactivateInterrupt>:
 * Deactivates the external interrupt pcint16 in PD0
 * -------------------------------------------------------------------------- */

void pcint16DeactivateInterrupt(void)
{
	clrBit(PCMSK2, PCINT16);
     98e:	ed e6       	ldi	r30, 0x6D	; 109
     990:	f0 e0       	ldi	r31, 0x00	; 0
     992:	80 81       	ld	r24, Z
     994:	8e 7f       	andi	r24, 0xFE	; 254
     996:	80 83       	st	Z, r24
     998:	08 95       	ret

0000099a <pcint17ActivateInterrupt>:
 * Activates the external interrupt pcint17 and configures port mode in PD1
 * -------------------------------------------------------------------------- */

resultValue_t pcint17ActivateInterrupt(portMode_t port)
{
	switch(port){
     99a:	82 30       	cpi	r24, 0x02	; 2
     99c:	79 f0       	breq	.+30     	; 0x9bc <pcint17ActivateInterrupt+0x22>
     99e:	30 f4       	brcc	.+12     	; 0x9ac <pcint17ActivateInterrupt+0x12>
     9a0:	88 23       	and	r24, r24
     9a2:	49 f0       	breq	.+18     	; 0x9b6 <pcint17ActivateInterrupt+0x1c>
     9a4:	81 30       	cpi	r24, 0x01	; 1
     9a6:	a9 f4       	brne	.+42     	; 0x9d2 <pcint17ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD1); setBit(DDRD, PD1);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD1); setBit(DDRD, PD1);	break;
     9a8:	59 9a       	sbi	0x0b, 1	; 11
     9aa:	06 c0       	rjmp	.+12     	; 0x9b8 <pcint17ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint17 and configures port mode in PD1
 * -------------------------------------------------------------------------- */

resultValue_t pcint17ActivateInterrupt(portMode_t port)
{
	switch(port){
     9ac:	83 30       	cpi	r24, 0x03	; 3
     9ae:	41 f0       	breq	.+16     	; 0x9c0 <pcint17ActivateInterrupt+0x26>
     9b0:	8f 3f       	cpi	r24, 0xFF	; 255
     9b2:	41 f0       	breq	.+16     	; 0x9c4 <pcint17ActivateInterrupt+0x2a>
     9b4:	0e c0       	rjmp	.+28     	; 0x9d2 <pcint17ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD1); setBit(DDRD, PD1);	break;
     9b6:	59 98       	cbi	0x0b, 1	; 11
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD1); setBit(DDRD, PD1);	break;
     9b8:	51 9a       	sbi	0x0a, 1	; 10
     9ba:	04 c0       	rjmp	.+8      	; 0x9c4 <pcint17ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD1); clrBit(DDRD, PD1);	break;
     9bc:	59 98       	cbi	0x0b, 1	; 11
     9be:	01 c0       	rjmp	.+2      	; 0x9c2 <pcint17ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD1); clrBit(DDRD, PD1);	break;
     9c0:	59 9a       	sbi	0x0b, 1	; 11
     9c2:	51 98       	cbi	0x0a, 1	; 10
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK2, PCINT17);
     9c4:	80 91 6d 00 	lds	r24, 0x006D
     9c8:	82 60       	ori	r24, 0x02	; 2
     9ca:	80 93 6d 00 	sts	0x006D, r24
	return RESULT_OK;
     9ce:	80 e0       	ldi	r24, 0x00	; 0
     9d0:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD1); setBit(DDRD, PD1);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD1); setBit(DDRD, PD1);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD1); clrBit(DDRD, PD1);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD1); clrBit(DDRD, PD1);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     9d2:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK2, PCINT17);
	return RESULT_OK;
}
     9d4:	08 95       	ret

000009d6 <pcint17DeactivateInterrupt>:
 * Deactivates the external interrupt pcint17 in PD1
 * -------------------------------------------------------------------------- */

void pcint17DeactivateInterrupt(void)
{
	clrBit(PCMSK2, PCINT17);
     9d6:	ed e6       	ldi	r30, 0x6D	; 109
     9d8:	f0 e0       	ldi	r31, 0x00	; 0
     9da:	80 81       	ld	r24, Z
     9dc:	8d 7f       	andi	r24, 0xFD	; 253
     9de:	80 83       	st	Z, r24
     9e0:	08 95       	ret

000009e2 <pcint18ActivateInterrupt>:
 * Activates the external interrupt pcint18 and configures port mode in PD2
 * -------------------------------------------------------------------------- */

resultValue_t pcint18ActivateInterrupt(portMode_t port)
{
	switch(port){
     9e2:	82 30       	cpi	r24, 0x02	; 2
     9e4:	79 f0       	breq	.+30     	; 0xa04 <pcint18ActivateInterrupt+0x22>
     9e6:	30 f4       	brcc	.+12     	; 0x9f4 <pcint18ActivateInterrupt+0x12>
     9e8:	88 23       	and	r24, r24
     9ea:	49 f0       	breq	.+18     	; 0x9fe <pcint18ActivateInterrupt+0x1c>
     9ec:	81 30       	cpi	r24, 0x01	; 1
     9ee:	a9 f4       	brne	.+42     	; 0xa1a <pcint18ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD2); setBit(DDRD, PD2);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD2); setBit(DDRD, PD2);	break;
     9f0:	5a 9a       	sbi	0x0b, 2	; 11
     9f2:	06 c0       	rjmp	.+12     	; 0xa00 <pcint18ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint18 and configures port mode in PD2
 * -------------------------------------------------------------------------- */

resultValue_t pcint18ActivateInterrupt(portMode_t port)
{
	switch(port){
     9f4:	83 30       	cpi	r24, 0x03	; 3
     9f6:	41 f0       	breq	.+16     	; 0xa08 <pcint18ActivateInterrupt+0x26>
     9f8:	8f 3f       	cpi	r24, 0xFF	; 255
     9fa:	41 f0       	breq	.+16     	; 0xa0c <pcint18ActivateInterrupt+0x2a>
     9fc:	0e c0       	rjmp	.+28     	; 0xa1a <pcint18ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD2); setBit(DDRD, PD2);	break;
     9fe:	5a 98       	cbi	0x0b, 2	; 11
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD2); setBit(DDRD, PD2);	break;
     a00:	52 9a       	sbi	0x0a, 2	; 10
     a02:	04 c0       	rjmp	.+8      	; 0xa0c <pcint18ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD2); clrBit(DDRD, PD2);	break;
     a04:	5a 98       	cbi	0x0b, 2	; 11
     a06:	01 c0       	rjmp	.+2      	; 0xa0a <pcint18ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD2); clrBit(DDRD, PD2);	break;
     a08:	5a 9a       	sbi	0x0b, 2	; 11
     a0a:	52 98       	cbi	0x0a, 2	; 10
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK2, PCINT18);
     a0c:	80 91 6d 00 	lds	r24, 0x006D
     a10:	84 60       	ori	r24, 0x04	; 4
     a12:	80 93 6d 00 	sts	0x006D, r24
	return RESULT_OK;
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD2); setBit(DDRD, PD2);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD2); setBit(DDRD, PD2);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD2); clrBit(DDRD, PD2);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD2); clrBit(DDRD, PD2);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     a1a:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK2, PCINT18);
	return RESULT_OK;
}
     a1c:	08 95       	ret

00000a1e <pcint18DeactivateInterrupt>:
 * Deactivates the external interrupt pcint18 in PD2
 * -------------------------------------------------------------------------- */

void pcint18DeactivateInterrupt(void)
{
	clrBit(PCMSK2, PCINT18);
     a1e:	ed e6       	ldi	r30, 0x6D	; 109
     a20:	f0 e0       	ldi	r31, 0x00	; 0
     a22:	80 81       	ld	r24, Z
     a24:	8b 7f       	andi	r24, 0xFB	; 251
     a26:	80 83       	st	Z, r24
     a28:	08 95       	ret

00000a2a <pcint19ActivateInterrupt>:
 * Activates the external interrupt pcint19 and configures port mode in PD3
 * -------------------------------------------------------------------------- */

resultValue_t pcint19ActivateInterrupt(portMode_t port)
{
	switch(port){
     a2a:	82 30       	cpi	r24, 0x02	; 2
     a2c:	79 f0       	breq	.+30     	; 0xa4c <pcint19ActivateInterrupt+0x22>
     a2e:	30 f4       	brcc	.+12     	; 0xa3c <pcint19ActivateInterrupt+0x12>
     a30:	88 23       	and	r24, r24
     a32:	49 f0       	breq	.+18     	; 0xa46 <pcint19ActivateInterrupt+0x1c>
     a34:	81 30       	cpi	r24, 0x01	; 1
     a36:	a9 f4       	brne	.+42     	; 0xa62 <pcint19ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD3); setBit(DDRD, PD3);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD3); setBit(DDRD, PD3);	break;
     a38:	5b 9a       	sbi	0x0b, 3	; 11
     a3a:	06 c0       	rjmp	.+12     	; 0xa48 <pcint19ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint19 and configures port mode in PD3
 * -------------------------------------------------------------------------- */

resultValue_t pcint19ActivateInterrupt(portMode_t port)
{
	switch(port){
     a3c:	83 30       	cpi	r24, 0x03	; 3
     a3e:	41 f0       	breq	.+16     	; 0xa50 <pcint19ActivateInterrupt+0x26>
     a40:	8f 3f       	cpi	r24, 0xFF	; 255
     a42:	41 f0       	breq	.+16     	; 0xa54 <pcint19ActivateInterrupt+0x2a>
     a44:	0e c0       	rjmp	.+28     	; 0xa62 <pcint19ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD3); setBit(DDRD, PD3);	break;
     a46:	5b 98       	cbi	0x0b, 3	; 11
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD3); setBit(DDRD, PD3);	break;
     a48:	53 9a       	sbi	0x0a, 3	; 10
     a4a:	04 c0       	rjmp	.+8      	; 0xa54 <pcint19ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD3); clrBit(DDRD, PD3);	break;
     a4c:	5b 98       	cbi	0x0b, 3	; 11
     a4e:	01 c0       	rjmp	.+2      	; 0xa52 <pcint19ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD3); clrBit(DDRD, PD3);	break;
     a50:	5b 9a       	sbi	0x0b, 3	; 11
     a52:	53 98       	cbi	0x0a, 3	; 10
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK2, PCINT19);
     a54:	80 91 6d 00 	lds	r24, 0x006D
     a58:	88 60       	ori	r24, 0x08	; 8
     a5a:	80 93 6d 00 	sts	0x006D, r24
	return RESULT_OK;
     a5e:	80 e0       	ldi	r24, 0x00	; 0
     a60:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD3); setBit(DDRD, PD3);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD3); setBit(DDRD, PD3);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD3); clrBit(DDRD, PD3);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD3); clrBit(DDRD, PD3);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     a62:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK2, PCINT19);
	return RESULT_OK;
}
     a64:	08 95       	ret

00000a66 <pcint19DeactivateInterrupt>:
 * Deactivates the external interrupt pcint19 in PD3
 * -------------------------------------------------------------------------- */

void pcint19DeactivateInterrupt(void)
{
	clrBit(PCMSK2, PCINT19);
     a66:	ed e6       	ldi	r30, 0x6D	; 109
     a68:	f0 e0       	ldi	r31, 0x00	; 0
     a6a:	80 81       	ld	r24, Z
     a6c:	87 7f       	andi	r24, 0xF7	; 247
     a6e:	80 83       	st	Z, r24
     a70:	08 95       	ret

00000a72 <pcint20ActivateInterrupt>:
 * Activates the external interrupt pcint20 and configures port mode in PD4
 * -------------------------------------------------------------------------- */

resultValue_t pcint20ActivateInterrupt(portMode_t port)
{
	switch(port){
     a72:	82 30       	cpi	r24, 0x02	; 2
     a74:	79 f0       	breq	.+30     	; 0xa94 <pcint20ActivateInterrupt+0x22>
     a76:	30 f4       	brcc	.+12     	; 0xa84 <pcint20ActivateInterrupt+0x12>
     a78:	88 23       	and	r24, r24
     a7a:	49 f0       	breq	.+18     	; 0xa8e <pcint20ActivateInterrupt+0x1c>
     a7c:	81 30       	cpi	r24, 0x01	; 1
     a7e:	a9 f4       	brne	.+42     	; 0xaaa <pcint20ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD4); setBit(DDRD, PD4);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD4); setBit(DDRD, PD4);	break;
     a80:	5c 9a       	sbi	0x0b, 4	; 11
     a82:	06 c0       	rjmp	.+12     	; 0xa90 <pcint20ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint20 and configures port mode in PD4
 * -------------------------------------------------------------------------- */

resultValue_t pcint20ActivateInterrupt(portMode_t port)
{
	switch(port){
     a84:	83 30       	cpi	r24, 0x03	; 3
     a86:	41 f0       	breq	.+16     	; 0xa98 <pcint20ActivateInterrupt+0x26>
     a88:	8f 3f       	cpi	r24, 0xFF	; 255
     a8a:	41 f0       	breq	.+16     	; 0xa9c <pcint20ActivateInterrupt+0x2a>
     a8c:	0e c0       	rjmp	.+28     	; 0xaaa <pcint20ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD4); setBit(DDRD, PD4);	break;
     a8e:	5c 98       	cbi	0x0b, 4	; 11
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD4); setBit(DDRD, PD4);	break;
     a90:	54 9a       	sbi	0x0a, 4	; 10
     a92:	04 c0       	rjmp	.+8      	; 0xa9c <pcint20ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD4); clrBit(DDRD, PD4);	break;
     a94:	5c 98       	cbi	0x0b, 4	; 11
     a96:	01 c0       	rjmp	.+2      	; 0xa9a <pcint20ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD4); clrBit(DDRD, PD4);	break;
     a98:	5c 9a       	sbi	0x0b, 4	; 11
     a9a:	54 98       	cbi	0x0a, 4	; 10
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK2, PCINT20);
     a9c:	80 91 6d 00 	lds	r24, 0x006D
     aa0:	80 61       	ori	r24, 0x10	; 16
     aa2:	80 93 6d 00 	sts	0x006D, r24
	return RESULT_OK;
     aa6:	80 e0       	ldi	r24, 0x00	; 0
     aa8:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD4); setBit(DDRD, PD4);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD4); setBit(DDRD, PD4);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD4); clrBit(DDRD, PD4);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD4); clrBit(DDRD, PD4);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     aaa:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK2, PCINT20);
	return RESULT_OK;
}
     aac:	08 95       	ret

00000aae <pcint20DeactivateInterrupt>:
 * Deactivates the external interrupt pcint20 in PD4
 * -------------------------------------------------------------------------- */

void pcint20DeactivateInterrupt(void)
{
	clrBit(PCMSK2, PCINT20);
     aae:	ed e6       	ldi	r30, 0x6D	; 109
     ab0:	f0 e0       	ldi	r31, 0x00	; 0
     ab2:	80 81       	ld	r24, Z
     ab4:	8f 7e       	andi	r24, 0xEF	; 239
     ab6:	80 83       	st	Z, r24
     ab8:	08 95       	ret

00000aba <pcint21ActivateInterrupt>:
 * Activates the external interrupt pcint21 and configures port mode in PD5
 * -------------------------------------------------------------------------- */

resultValue_t pcint21ActivateInterrupt(portMode_t port)
{
	switch(port){
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	79 f0       	breq	.+30     	; 0xadc <pcint21ActivateInterrupt+0x22>
     abe:	30 f4       	brcc	.+12     	; 0xacc <pcint21ActivateInterrupt+0x12>
     ac0:	88 23       	and	r24, r24
     ac2:	49 f0       	breq	.+18     	; 0xad6 <pcint21ActivateInterrupt+0x1c>
     ac4:	81 30       	cpi	r24, 0x01	; 1
     ac6:	a9 f4       	brne	.+42     	; 0xaf2 <pcint21ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD5); setBit(DDRD, PD5);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD5); setBit(DDRD, PD5);	break;
     ac8:	5d 9a       	sbi	0x0b, 5	; 11
     aca:	06 c0       	rjmp	.+12     	; 0xad8 <pcint21ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint21 and configures port mode in PD5
 * -------------------------------------------------------------------------- */

resultValue_t pcint21ActivateInterrupt(portMode_t port)
{
	switch(port){
     acc:	83 30       	cpi	r24, 0x03	; 3
     ace:	41 f0       	breq	.+16     	; 0xae0 <pcint21ActivateInterrupt+0x26>
     ad0:	8f 3f       	cpi	r24, 0xFF	; 255
     ad2:	41 f0       	breq	.+16     	; 0xae4 <pcint21ActivateInterrupt+0x2a>
     ad4:	0e c0       	rjmp	.+28     	; 0xaf2 <pcint21ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD5); setBit(DDRD, PD5);	break;
     ad6:	5d 98       	cbi	0x0b, 5	; 11
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD5); setBit(DDRD, PD5);	break;
     ad8:	55 9a       	sbi	0x0a, 5	; 10
     ada:	04 c0       	rjmp	.+8      	; 0xae4 <pcint21ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD5); clrBit(DDRD, PD5);	break;
     adc:	5d 98       	cbi	0x0b, 5	; 11
     ade:	01 c0       	rjmp	.+2      	; 0xae2 <pcint21ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD5); clrBit(DDRD, PD5);	break;
     ae0:	5d 9a       	sbi	0x0b, 5	; 11
     ae2:	55 98       	cbi	0x0a, 5	; 10
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK2, PCINT21);
     ae4:	80 91 6d 00 	lds	r24, 0x006D
     ae8:	80 62       	ori	r24, 0x20	; 32
     aea:	80 93 6d 00 	sts	0x006D, r24
	return RESULT_OK;
     aee:	80 e0       	ldi	r24, 0x00	; 0
     af0:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD5); setBit(DDRD, PD5);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD5); setBit(DDRD, PD5);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD5); clrBit(DDRD, PD5);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD5); clrBit(DDRD, PD5);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     af2:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK2, PCINT21);
	return RESULT_OK;
}
     af4:	08 95       	ret

00000af6 <pcint21DeactivateInterrupt>:
 * Deactivates the external interrupt pcint21 in PD5
 * -------------------------------------------------------------------------- */

void pcint21DeactivateInterrupt(void)
{
	clrBit(PCMSK2, PCINT21);
     af6:	ed e6       	ldi	r30, 0x6D	; 109
     af8:	f0 e0       	ldi	r31, 0x00	; 0
     afa:	80 81       	ld	r24, Z
     afc:	8f 7d       	andi	r24, 0xDF	; 223
     afe:	80 83       	st	Z, r24
     b00:	08 95       	ret

00000b02 <pcint22ActivateInterrupt>:
 * Activates the external interrupt pcint22 and configures port mode in PD6
 * -------------------------------------------------------------------------- */

resultValue_t pcint22ActivateInterrupt(portMode_t port)
{
	switch(port){
     b02:	82 30       	cpi	r24, 0x02	; 2
     b04:	79 f0       	breq	.+30     	; 0xb24 <pcint22ActivateInterrupt+0x22>
     b06:	30 f4       	brcc	.+12     	; 0xb14 <pcint22ActivateInterrupt+0x12>
     b08:	88 23       	and	r24, r24
     b0a:	49 f0       	breq	.+18     	; 0xb1e <pcint22ActivateInterrupt+0x1c>
     b0c:	81 30       	cpi	r24, 0x01	; 1
     b0e:	a9 f4       	brne	.+42     	; 0xb3a <pcint22ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD6); setBit(DDRD, PD6);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD6); setBit(DDRD, PD6);	break;
     b10:	5e 9a       	sbi	0x0b, 6	; 11
     b12:	06 c0       	rjmp	.+12     	; 0xb20 <pcint22ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint22 and configures port mode in PD6
 * -------------------------------------------------------------------------- */

resultValue_t pcint22ActivateInterrupt(portMode_t port)
{
	switch(port){
     b14:	83 30       	cpi	r24, 0x03	; 3
     b16:	41 f0       	breq	.+16     	; 0xb28 <pcint22ActivateInterrupt+0x26>
     b18:	8f 3f       	cpi	r24, 0xFF	; 255
     b1a:	41 f0       	breq	.+16     	; 0xb2c <pcint22ActivateInterrupt+0x2a>
     b1c:	0e c0       	rjmp	.+28     	; 0xb3a <pcint22ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD6); setBit(DDRD, PD6);	break;
     b1e:	5e 98       	cbi	0x0b, 6	; 11
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD6); setBit(DDRD, PD6);	break;
     b20:	56 9a       	sbi	0x0a, 6	; 10
     b22:	04 c0       	rjmp	.+8      	; 0xb2c <pcint22ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD6); clrBit(DDRD, PD6);	break;
     b24:	5e 98       	cbi	0x0b, 6	; 11
     b26:	01 c0       	rjmp	.+2      	; 0xb2a <pcint22ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD6); clrBit(DDRD, PD6);	break;
     b28:	5e 9a       	sbi	0x0b, 6	; 11
     b2a:	56 98       	cbi	0x0a, 6	; 10
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK2, PCINT22);
     b2c:	80 91 6d 00 	lds	r24, 0x006D
     b30:	80 64       	ori	r24, 0x40	; 64
     b32:	80 93 6d 00 	sts	0x006D, r24
	return RESULT_OK;
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD6); setBit(DDRD, PD6);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD6); setBit(DDRD, PD6);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD6); clrBit(DDRD, PD6);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD6); clrBit(DDRD, PD6);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     b3a:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK2, PCINT22);
	return RESULT_OK;
}
     b3c:	08 95       	ret

00000b3e <pcint22DeactivateInterrupt>:
 * Deactivates the external interrupt pcint22 in PD6
 * -------------------------------------------------------------------------- */

void pcint22DeactivateInterrupt(void)
{
	clrBit(PCMSK2, PCINT22);
     b3e:	ed e6       	ldi	r30, 0x6D	; 109
     b40:	f0 e0       	ldi	r31, 0x00	; 0
     b42:	80 81       	ld	r24, Z
     b44:	8f 7b       	andi	r24, 0xBF	; 191
     b46:	80 83       	st	Z, r24
     b48:	08 95       	ret

00000b4a <pcint23ActivateInterrupt>:
 * Activates the external interrupt pcint23 and configures port mode in PD7
 * -------------------------------------------------------------------------- */

resultValue_t pcint23ActivateInterrupt(portMode_t port)
{
	switch(port){
     b4a:	82 30       	cpi	r24, 0x02	; 2
     b4c:	79 f0       	breq	.+30     	; 0xb6c <pcint23ActivateInterrupt+0x22>
     b4e:	30 f4       	brcc	.+12     	; 0xb5c <pcint23ActivateInterrupt+0x12>
     b50:	88 23       	and	r24, r24
     b52:	49 f0       	breq	.+18     	; 0xb66 <pcint23ActivateInterrupt+0x1c>
     b54:	81 30       	cpi	r24, 0x01	; 1
     b56:	a9 f4       	brne	.+42     	; 0xb82 <pcint23ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD7); setBit(DDRD, PD7);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD7); setBit(DDRD, PD7);	break;
     b58:	5f 9a       	sbi	0x0b, 7	; 11
     b5a:	06 c0       	rjmp	.+12     	; 0xb68 <pcint23ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint23 and configures port mode in PD7
 * -------------------------------------------------------------------------- */

resultValue_t pcint23ActivateInterrupt(portMode_t port)
{
	switch(port){
     b5c:	83 30       	cpi	r24, 0x03	; 3
     b5e:	41 f0       	breq	.+16     	; 0xb70 <pcint23ActivateInterrupt+0x26>
     b60:	8f 3f       	cpi	r24, 0xFF	; 255
     b62:	41 f0       	breq	.+16     	; 0xb74 <pcint23ActivateInterrupt+0x2a>
     b64:	0e c0       	rjmp	.+28     	; 0xb82 <pcint23ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD7); setBit(DDRD, PD7);	break;
     b66:	5f 98       	cbi	0x0b, 7	; 11
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD7); setBit(DDRD, PD7);	break;
     b68:	57 9a       	sbi	0x0a, 7	; 10
     b6a:	04 c0       	rjmp	.+8      	; 0xb74 <pcint23ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD7); clrBit(DDRD, PD7);	break;
     b6c:	5f 98       	cbi	0x0b, 7	; 11
     b6e:	01 c0       	rjmp	.+2      	; 0xb72 <pcint23ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD7); clrBit(DDRD, PD7);	break;
     b70:	5f 9a       	sbi	0x0b, 7	; 11
     b72:	57 98       	cbi	0x0a, 7	; 10
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK2, PCINT23);
     b74:	80 91 6d 00 	lds	r24, 0x006D
     b78:	80 68       	ori	r24, 0x80	; 128
     b7a:	80 93 6d 00 	sts	0x006D, r24
	return RESULT_OK;
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD7); setBit(DDRD, PD7);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD7); setBit(DDRD, PD7);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD7); clrBit(DDRD, PD7);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD7); clrBit(DDRD, PD7);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     b82:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK2, PCINT23);
	return RESULT_OK;
}
     b84:	08 95       	ret

00000b86 <pcint23DeactivateInterrupt>:
 * Deactivates the external interrupt pcint23 in PD7
 * -------------------------------------------------------------------------- */

void pcint23DeactivateInterrupt(void)
{
	clrBit(PCMSK2, PCINT23);
     b86:	ed e6       	ldi	r30, 0x6D	; 109
     b88:	f0 e0       	ldi	r31, 0x00	; 0
     b8a:	80 81       	ld	r24, Z
     b8c:	8f 77       	andi	r24, 0x7F	; 127
     b8e:	80 83       	st	Z, r24
     b90:	08 95       	ret

00000b92 <timer0Config>:
 * Configures the timer0 mode and prescaler
 * -------------------------------------------------------------------------- */

resultValue_t timer0Config(timerModeA_t mode, timerPrescalerValueA_t prescaler)
{
	uint8 regA = TCCR0A;
     b92:	24 b5       	in	r18, 0x24	; 36
	uint8 regB = TCCR0B;
     b94:	95 b5       	in	r25, 0x25	; 37

	if(prescaler != TIMER_A_PRESCALER_NO_CHANGE){
     b96:	6f 3f       	cpi	r22, 0xFF	; 255
     b98:	c1 f0       	breq	.+48     	; 0xbca <timer0Config+0x38>
		regB &= ~(0x07 << CS00);
     b9a:	98 7f       	andi	r25, 0xF8	; 248
		switch(prescaler){
     b9c:	46 2f       	mov	r20, r22
     b9e:	50 e0       	ldi	r21, 0x00	; 0
     ba0:	48 30       	cpi	r20, 0x08	; 8
     ba2:	51 05       	cpc	r21, r1
     ba4:	80 f5       	brcc	.+96     	; 0xc06 <timer0Config+0x74>
     ba6:	fa 01       	movw	r30, r20
     ba8:	e3 5c       	subi	r30, 0xC3	; 195
     baa:	ff 4f       	sbci	r31, 0xFF	; 255
     bac:	0c 94 9e 0a 	jmp	0x153c	; 0x153c <__tablejump2__>
			case TIMER_A_CLOCK_DISABLE:					break;
			case TIMER_A_PRESCALER_OFF:					regB |= (1 << CS00);	break;
     bb0:	91 60       	ori	r25, 0x01	; 1
     bb2:	0b c0       	rjmp	.+22     	; 0xbca <timer0Config+0x38>
			case TIMER_A_PRESCALER_8:					regB |= (2 << CS00);	break;
     bb4:	92 60       	ori	r25, 0x02	; 2
     bb6:	09 c0       	rjmp	.+18     	; 0xbca <timer0Config+0x38>
			case TIMER_A_PRESCALER_64:					regB |= (3 << CS00);	break;
     bb8:	93 60       	ori	r25, 0x03	; 3
     bba:	07 c0       	rjmp	.+14     	; 0xbca <timer0Config+0x38>
			case TIMER_A_PRESCALER_256:					regB |= (4 << CS00);	break;
     bbc:	94 60       	ori	r25, 0x04	; 4
     bbe:	05 c0       	rjmp	.+10     	; 0xbca <timer0Config+0x38>
			case TIMER_A_PRESCALER_1024:				regB |= (5 << CS00);	break;
     bc0:	95 60       	ori	r25, 0x05	; 5
     bc2:	03 c0       	rjmp	.+6      	; 0xbca <timer0Config+0x38>
			case TIMER_A_PRESCALER_T0_FALLING_EDGE:		regB |= (6 << CS00);	break;
     bc4:	96 60       	ori	r25, 0x06	; 6
     bc6:	01 c0       	rjmp	.+2      	; 0xbca <timer0Config+0x38>
			case TIMER_A_PRESCALER_T0_RISING_EDGE:		regB |= (7 << CS00);	break;
     bc8:	97 60       	ori	r25, 0x07	; 7
			case TIMER_A_PRESCALER_NO_CHANGE:			break;
			default:									return RESULT_TIMER_PRESCALER_VALUE_UNSUPPORTED;	break;
		}
	}

	if(mode != TIMER_A_MODE_NO_CHANGE){
     bca:	8f 3f       	cpi	r24, 0xFF	; 255
     bcc:	c1 f0       	breq	.+48     	; 0xbfe <timer0Config+0x6c>
		regA &= ~(0x03 << WGM00);
     bce:	2c 7f       	andi	r18, 0xFC	; 252
		clrBit(regB, WGM02);
     bd0:	97 7f       	andi	r25, 0xF7	; 247
		switch(mode){
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	69 f0       	breq	.+26     	; 0xbf0 <timer0Config+0x5e>
     bd6:	28 f4       	brcc	.+10     	; 0xbe2 <timer0Config+0x50>
     bd8:	88 23       	and	r24, r24
     bda:	89 f0       	breq	.+34     	; 0xbfe <timer0Config+0x6c>
     bdc:	81 30       	cpi	r24, 0x01	; 1
     bde:	59 f0       	breq	.+22     	; 0xbf6 <timer0Config+0x64>
     be0:	14 c0       	rjmp	.+40     	; 0xc0a <timer0Config+0x78>
     be2:	85 30       	cpi	r24, 0x05	; 5
     be4:	39 f0       	breq	.+14     	; 0xbf4 <timer0Config+0x62>
     be6:	87 30       	cpi	r24, 0x07	; 7
     be8:	41 f0       	breq	.+16     	; 0xbfa <timer0Config+0x68>
     bea:	83 30       	cpi	r24, 0x03	; 3
     bec:	71 f4       	brne	.+28     	; 0xc0a <timer0Config+0x78>
     bee:	06 c0       	rjmp	.+12     	; 0xbfc <timer0Config+0x6a>
			case TIMER_A_MODE_NORMAL:						break;
			case TIMER_A_MODE_PWM_PHASE_CORRECTED_MAX:		regA |= (1 << WGM00);	break;
			case TIMER_A_MODE_CTC:							regA |= (2 << WGM00);	break;
     bf0:	22 60       	ori	r18, 0x02	; 2
     bf2:	05 c0       	rjmp	.+10     	; 0xbfe <timer0Config+0x6c>
			case TIMER_A_MODE_FAST_PWM_MAX:					regA |= (3 << WGM00);	break;
			case TIMER_A_MODE_PWM_PHASE_CORRECTED_OCRA:		setBit(regB, WGM02);regA |= (1 << WGM00);	break;
     bf4:	98 60       	ori	r25, 0x08	; 8
     bf6:	21 60       	ori	r18, 0x01	; 1
     bf8:	02 c0       	rjmp	.+4      	; 0xbfe <timer0Config+0x6c>
			case TIMER_A_MODE_FAST_PWM_OCRA:				setBit(regB, WGM02);regA |= (3 << WGM00);	break;
     bfa:	98 60       	ori	r25, 0x08	; 8
     bfc:	23 60       	ori	r18, 0x03	; 3
			case TIMER_A_MODE_NO_CHANGE:					break;
			default:										return RESULT_TIMER_MODE_VALUE_UNSUPPORTED;	break;
		}
	}
	TCCR0A = regA;
     bfe:	24 bd       	out	0x24, r18	; 36
	TCCR0B = regB;
     c00:	95 bd       	out	0x25, r25	; 37

	return RESULT_OK;
     c02:	80 e0       	ldi	r24, 0x00	; 0
     c04:	08 95       	ret
			case TIMER_A_PRESCALER_256:					regB |= (4 << CS00);	break;
			case TIMER_A_PRESCALER_1024:				regB |= (5 << CS00);	break;
			case TIMER_A_PRESCALER_T0_FALLING_EDGE:		regB |= (6 << CS00);	break;
			case TIMER_A_PRESCALER_T0_RISING_EDGE:		regB |= (7 << CS00);	break;
			case TIMER_A_PRESCALER_NO_CHANGE:			break;
			default:									return RESULT_TIMER_PRESCALER_VALUE_UNSUPPORTED;	break;
     c06:	83 e0       	ldi	r24, 0x03	; 3
     c08:	08 95       	ret
			case TIMER_A_MODE_CTC:							regA |= (2 << WGM00);	break;
			case TIMER_A_MODE_FAST_PWM_MAX:					regA |= (3 << WGM00);	break;
			case TIMER_A_MODE_PWM_PHASE_CORRECTED_OCRA:		setBit(regB, WGM02);regA |= (1 << WGM00);	break;
			case TIMER_A_MODE_FAST_PWM_OCRA:				setBit(regB, WGM02);regA |= (3 << WGM00);	break;
			case TIMER_A_MODE_NO_CHANGE:					break;
			default:										return RESULT_TIMER_MODE_VALUE_UNSUPPORTED;	break;
     c0a:	84 e0       	ldi	r24, 0x04	; 4
	}
	TCCR0A = regA;
	TCCR0B = regB;

	return RESULT_OK;
}
     c0c:	08 95       	ret

00000c0e <timer0OutputConfig>:
 * Configures the timer0 compare outputs
 * -------------------------------------------------------------------------- */

resultValue_t timer0OutputConfig(timerOutput_t compA, timerOutput_t compB)
{
	uint8 reg = TCCR0A;
     c0e:	94 b5       	in	r25, 0x24	; 36

	if(compA != TIMER_PORT_NO_CHANGE){
     c10:	8f 3f       	cpi	r24, 0xFF	; 255
     c12:	69 f0       	breq	.+26     	; 0xc2e <timer0OutputConfig+0x20>
		reg &= ~(0x03 << COM0A0);
     c14:	9f 73       	andi	r25, 0x3F	; 63
		switch(compA){
     c16:	81 30       	cpi	r24, 0x01	; 1
     c18:	39 f0       	breq	.+14     	; 0xc28 <timer0OutputConfig+0x1a>
     c1a:	48 f0       	brcs	.+18     	; 0xc2e <timer0OutputConfig+0x20>
     c1c:	82 30       	cpi	r24, 0x02	; 2
     c1e:	31 f0       	breq	.+12     	; 0xc2c <timer0OutputConfig+0x1e>
     c20:	83 30       	cpi	r24, 0x03	; 3
     c22:	e1 f4       	brne	.+56     	; 0xc5c <timer0OutputConfig+0x4e>
			case TIMER_PORT_NORMAL:				break;
			case TIMER_PORT_TOGGLE_ON_COMPARE:	reg |= (1 << COM0A0);	break;
			case TIMER_PORT_CLEAR_ON_COMPARE:	reg |= (2 << COM0A0);	break;
			case TIMER_PORT_SET_ON_COMPARE:		reg |= (3 << COM0A0);	break;
     c24:	90 6c       	ori	r25, 0xC0	; 192
     c26:	03 c0       	rjmp	.+6      	; 0xc2e <timer0OutputConfig+0x20>

	if(compA != TIMER_PORT_NO_CHANGE){
		reg &= ~(0x03 << COM0A0);
		switch(compA){
			case TIMER_PORT_NORMAL:				break;
			case TIMER_PORT_TOGGLE_ON_COMPARE:	reg |= (1 << COM0A0);	break;
     c28:	90 64       	ori	r25, 0x40	; 64
     c2a:	01 c0       	rjmp	.+2      	; 0xc2e <timer0OutputConfig+0x20>
			case TIMER_PORT_CLEAR_ON_COMPARE:	reg |= (2 << COM0A0);	break;
     c2c:	90 68       	ori	r25, 0x80	; 128
			case TIMER_PORT_SET_ON_COMPARE:		reg |= (3 << COM0A0);	break;
			case TIMER_PORT_NO_CHANGE:			break;
			default:							return RESULT_PORT_VALUE_UNSUPPORTED;	break;
		}
	}
	if(compB != TIMER_PORT_NO_CHANGE){
     c2e:	6f 3f       	cpi	r22, 0xFF	; 255
     c30:	91 f0       	breq	.+36     	; 0xc56 <timer0OutputConfig+0x48>
		reg &= ~(0x03 << COM0B0);
     c32:	9f 7c       	andi	r25, 0xCF	; 207
		switch(compA){
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	61 f0       	breq	.+24     	; 0xc50 <timer0OutputConfig+0x42>
     c38:	30 f4       	brcc	.+12     	; 0xc46 <timer0OutputConfig+0x38>
     c3a:	88 23       	and	r24, r24
     c3c:	61 f0       	breq	.+24     	; 0xc56 <timer0OutputConfig+0x48>
     c3e:	81 30       	cpi	r24, 0x01	; 1
     c40:	69 f4       	brne	.+26     	; 0xc5c <timer0OutputConfig+0x4e>
			case TIMER_PORT_NORMAL:				break;
			case TIMER_PORT_TOGGLE_ON_COMPARE:	reg |= (1 << COM0B0);	break;
     c42:	90 61       	ori	r25, 0x10	; 16
     c44:	08 c0       	rjmp	.+16     	; 0xc56 <timer0OutputConfig+0x48>
			default:							return RESULT_PORT_VALUE_UNSUPPORTED;	break;
		}
	}
	if(compB != TIMER_PORT_NO_CHANGE){
		reg &= ~(0x03 << COM0B0);
		switch(compA){
     c46:	83 30       	cpi	r24, 0x03	; 3
     c48:	29 f0       	breq	.+10     	; 0xc54 <timer0OutputConfig+0x46>
     c4a:	8f 3f       	cpi	r24, 0xFF	; 255
     c4c:	21 f0       	breq	.+8      	; 0xc56 <timer0OutputConfig+0x48>
     c4e:	06 c0       	rjmp	.+12     	; 0xc5c <timer0OutputConfig+0x4e>
			case TIMER_PORT_NORMAL:				break;
			case TIMER_PORT_TOGGLE_ON_COMPARE:	reg |= (1 << COM0B0);	break;
			case TIMER_PORT_CLEAR_ON_COMPARE:	reg |= (2 << COM0B0);	break;
     c50:	90 62       	ori	r25, 0x20	; 32
     c52:	01 c0       	rjmp	.+2      	; 0xc56 <timer0OutputConfig+0x48>
			case TIMER_PORT_SET_ON_COMPARE:		reg |= (3 << COM0B0);	break;
     c54:	90 63       	ori	r25, 0x30	; 48
			case TIMER_PORT_NO_CHANGE:			break;
			default:							return RESULT_PORT_VALUE_UNSUPPORTED;	break;
		}
	}
	TCCR0A = reg;
     c56:	94 bd       	out	0x24, r25	; 36
	return RESULT_OK;
     c58:	80 e0       	ldi	r24, 0x00	; 0
     c5a:	08 95       	ret
			case TIMER_PORT_NORMAL:				break;
			case TIMER_PORT_TOGGLE_ON_COMPARE:	reg |= (1 << COM0B0);	break;
			case TIMER_PORT_CLEAR_ON_COMPARE:	reg |= (2 << COM0B0);	break;
			case TIMER_PORT_SET_ON_COMPARE:		reg |= (3 << COM0B0);	break;
			case TIMER_PORT_NO_CHANGE:			break;
			default:							return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     c5c:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	TCCR0A = reg;
	return RESULT_OK;
}
     c5e:	08 95       	ret

00000c60 <timer0ActivateOverflowInterrupt>:
 * Activates the timer0 overflow interrupt
 * -------------------------------------------------------------------------- */

void timer0ActivateOverflowInterrupt(void)
{
	setBit(TIMSK0, TOIE0);
     c60:	ee e6       	ldi	r30, 0x6E	; 110
     c62:	f0 e0       	ldi	r31, 0x00	; 0
     c64:	80 81       	ld	r24, Z
     c66:	81 60       	ori	r24, 0x01	; 1
     c68:	80 83       	st	Z, r24
     c6a:	08 95       	ret

00000c6c <timer0DeactivateOverflowInterrupt>:
 * Deactivates the timer0 overflow interrupt
 * -------------------------------------------------------------------------- */

void timer0DeactivateOverflowInterrupt(void)
{
	clrBit(TIMSK0, TOIE0);
     c6c:	ee e6       	ldi	r30, 0x6E	; 110
     c6e:	f0 e0       	ldi	r31, 0x00	; 0
     c70:	80 81       	ld	r24, Z
     c72:	8e 7f       	andi	r24, 0xFE	; 254
     c74:	80 83       	st	Z, r24
     c76:	08 95       	ret

00000c78 <timer0ClearOverflowInterruptRequest>:
 * Clears the timer0 overflow interrupt request
 * -------------------------------------------------------------------------- */

void timer0ClearOverflowInterruptRequest(void)
{
	setBit(TIFR0, TOV0);
     c78:	a8 9a       	sbi	0x15, 0	; 21
     c7a:	08 95       	ret

00000c7c <timer0ActivateCompareAInterrupt>:
 * Activates the timer0 compare A interrupt
 * -------------------------------------------------------------------------- */

void timer0ActivateCompareAInterrupt(void)
{
	setBit(TIMSK0, OCIE0A);
     c7c:	ee e6       	ldi	r30, 0x6E	; 110
     c7e:	f0 e0       	ldi	r31, 0x00	; 0
     c80:	80 81       	ld	r24, Z
     c82:	82 60       	ori	r24, 0x02	; 2
     c84:	80 83       	st	Z, r24
     c86:	08 95       	ret

00000c88 <timer0DeactivateCompareAInterrupt>:
 * Deactivates the timer0 compare A interrupt
 * -------------------------------------------------------------------------- */

void timer0DeactivateCompareAInterrupt(void)
{
	clrBit(TIMSK0, OCIE0A);
     c88:	ee e6       	ldi	r30, 0x6E	; 110
     c8a:	f0 e0       	ldi	r31, 0x00	; 0
     c8c:	80 81       	ld	r24, Z
     c8e:	8d 7f       	andi	r24, 0xFD	; 253
     c90:	80 83       	st	Z, r24
     c92:	08 95       	ret

00000c94 <timer0ClearCompareAInterruptRequest>:
 * Clears the timer0 compare A interrupt request
 * -------------------------------------------------------------------------- */

void timer0ClearCompareAInterruptRequest(void)
{
	setBit(TIFR0, OCF0A);
     c94:	a9 9a       	sbi	0x15, 1	; 21
     c96:	08 95       	ret

00000c98 <timer0ActivateCompareBInterrupt>:
 * Activates the timer0 compare B interrupt
 * -------------------------------------------------------------------------- */

void timer0ActivateCompareBInterrupt(void)
{
	setBit(TIMSK0, OCIE0B);
     c98:	ee e6       	ldi	r30, 0x6E	; 110
     c9a:	f0 e0       	ldi	r31, 0x00	; 0
     c9c:	80 81       	ld	r24, Z
     c9e:	84 60       	ori	r24, 0x04	; 4
     ca0:	80 83       	st	Z, r24
     ca2:	08 95       	ret

00000ca4 <timer0DeactivateCompareBInterrupt>:
 * Deactivates the timer0 compare B interrupt
 * -------------------------------------------------------------------------- */

void timer0DeactivateCompareBInterrupt(void)
{
	clrBit(TIMSK0, OCIE0B);
     ca4:	ee e6       	ldi	r30, 0x6E	; 110
     ca6:	f0 e0       	ldi	r31, 0x00	; 0
     ca8:	80 81       	ld	r24, Z
     caa:	8b 7f       	andi	r24, 0xFB	; 251
     cac:	80 83       	st	Z, r24
     cae:	08 95       	ret

00000cb0 <timer0ClearCompareBInterruptRequest>:
 * Clears the timer0 compare B interrupt request
 * -------------------------------------------------------------------------- */

void timer0ClearCompareBInterruptRequest(void)
{
	setBit(TIFR0, OCF0B);
     cb0:	aa 9a       	sbi	0x15, 2	; 21
     cb2:	08 95       	ret

00000cb4 <timer0ForceCompareA>:
 * Forces a comparison on the output compare A of the timer0
 * -------------------------------------------------------------------------- */

void timer0ForceCompareA(void)
{
	setBit(TCCR0B, FOC0A);
     cb4:	85 b5       	in	r24, 0x25	; 37
     cb6:	80 68       	ori	r24, 0x80	; 128
     cb8:	85 bd       	out	0x25, r24	; 37
     cba:	08 95       	ret

00000cbc <timer0ForceCompareB>:
 * Forces a comparison on the output compare B of the timer0
 * -------------------------------------------------------------------------- */

void timer0ForceCompareB(void)
{
	setBit(TCCR0B, FOC0B);
     cbc:	85 b5       	in	r24, 0x25	; 37
     cbe:	80 64       	ori	r24, 0x40	; 64
     cc0:	85 bd       	out	0x25, r24	; 37
     cc2:	08 95       	ret

00000cc4 <timer0SetCounterValue>:
 * Sets the timer0 counter value
 * -------------------------------------------------------------------------- */

void timer0SetCounterValue(uint8 value)
{
	TCNT0 = value;
     cc4:	86 bd       	out	0x26, r24	; 38
     cc6:	08 95       	ret

00000cc8 <timer0GetCounterValue>:
 * Gets the timer0 counter value
 * -------------------------------------------------------------------------- */

uint8 timer0GetCounterValue(void)
{
	return TCNT0;
     cc8:	86 b5       	in	r24, 0x26	; 38
}
     cca:	08 95       	ret

00000ccc <timer0SetCompareAValue>:
 * Sets the timer0 compare A value
 * -------------------------------------------------------------------------- */

void timer0SetCompareAValue(uint8 value)
{
	OCR0A = value;
     ccc:	87 bd       	out	0x27, r24	; 39
     cce:	08 95       	ret

00000cd0 <timer0GetCompareAValue>:
 * Gets the timer0 compare A value
 * -------------------------------------------------------------------------- */

uint8 timer0GetCompareAValue(void)
{
	return OCR0A;
     cd0:	87 b5       	in	r24, 0x27	; 39
}
     cd2:	08 95       	ret

00000cd4 <timer0SetCompareBValue>:
 * Sets the timer0 compare B value
 * -------------------------------------------------------------------------- */

void timer0SetCompareBValue(uint8 value)
{
	OCR0B = value;
     cd4:	88 bd       	out	0x28, r24	; 40
     cd6:	08 95       	ret

00000cd8 <timer0GetCompareBValue>:
 * Gets the timer0 compare B value
 * -------------------------------------------------------------------------- */

uint8 timer0GetCompareBValue(void)
{
	return OCR0B;
     cd8:	88 b5       	in	r24, 0x28	; 40
}
     cda:	08 95       	ret

00000cdc <timer1Config>:
 * Configures the timer1 mode and prescaler
 * -------------------------------------------------------------------------- */

resultValue_t timer1Config(timerModeB_t mode, timerPrescalerValueA_t prescaler)
{
	uint8 reg1 = TCCR1A;
     cdc:	20 91 80 00 	lds	r18, 0x0080
	uint8 reg2 = TCCR1B;
     ce0:	90 91 81 00 	lds	r25, 0x0081

	if(prescaler != TIMER_A_PRESCALER_NO_CHANGE){
     ce4:	6f 3f       	cpi	r22, 0xFF	; 255
     ce6:	11 f0       	breq	.+4      	; 0xcec <timer1Config+0x10>
		reg2 &= ~(0x07 << CS10);
     ce8:	98 7f       	andi	r25, 0xF8	; 248
		reg2 |= prescaler;
     cea:	96 2b       	or	r25, r22
	}

	if(mode != TIMER_B_MODE_NO_CHANGE){
     cec:	8f 3f       	cpi	r24, 0xFF	; 255
     cee:	69 f0       	breq	.+26     	; 0xd0a <timer1Config+0x2e>
		if(isBitSet(mode, 3))
     cf0:	83 ff       	sbrs	r24, 3
     cf2:	02 c0       	rjmp	.+4      	; 0xcf8 <timer1Config+0x1c>
			setBit(reg2, WGM13);
     cf4:	90 61       	ori	r25, 0x10	; 16
     cf6:	01 c0       	rjmp	.+2      	; 0xcfa <timer1Config+0x1e>
		else
			clrBit(reg2, WGM13);
     cf8:	9f 7e       	andi	r25, 0xEF	; 239
		if(isBitSet(mode, 2))
     cfa:	82 ff       	sbrs	r24, 2
     cfc:	02 c0       	rjmp	.+4      	; 0xd02 <timer1Config+0x26>
			setBit(reg2, WGM12);
     cfe:	98 60       	ori	r25, 0x08	; 8
     d00:	01 c0       	rjmp	.+2      	; 0xd04 <timer1Config+0x28>
		else
			clrBit(reg2, WGM12);
     d02:	97 7f       	andi	r25, 0xF7	; 247
		reg1 &= ~(0x03 << WGM10);
		reg1 |= (mode & 0x03);
     d04:	83 70       	andi	r24, 0x03	; 3
			clrBit(reg2, WGM13);
		if(isBitSet(mode, 2))
			setBit(reg2, WGM12);
		else
			clrBit(reg2, WGM12);
		reg1 &= ~(0x03 << WGM10);
     d06:	2c 7f       	andi	r18, 0xFC	; 252
		reg1 |= (mode & 0x03);
     d08:	28 2b       	or	r18, r24
	}
	TCCR1A = reg1;
     d0a:	20 93 80 00 	sts	0x0080, r18
	TCCR1B = reg2;
     d0e:	90 93 81 00 	sts	0x0081, r25

	return RESULT_OK;
}
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	08 95       	ret

00000d16 <timer1OutputConfig>:
 * Configures the timer1 compare outputs
 * -------------------------------------------------------------------------- */

resultValue_t timer1OutputConfig(timerOutput_t compA, timerOutput_t compB)
{
	uint8 aux8 = TCCR1A;
     d16:	20 91 80 00 	lds	r18, 0x0080

	if(compA != TIMER_PORT_NO_CHANGE){
     d1a:	8f 3f       	cpi	r24, 0xFF	; 255
     d1c:	31 f0       	breq	.+12     	; 0xd2a <timer1OutputConfig+0x14>
		aux8 &= ~(0x03 << COM1A0);
		aux8 |= (compA << COM1A0); 
     d1e:	30 e4       	ldi	r19, 0x40	; 64
     d20:	83 9f       	mul	r24, r19
     d22:	c0 01       	movw	r24, r0
     d24:	11 24       	eor	r1, r1
resultValue_t timer1OutputConfig(timerOutput_t compA, timerOutput_t compB)
{
	uint8 aux8 = TCCR1A;

	if(compA != TIMER_PORT_NO_CHANGE){
		aux8 &= ~(0x03 << COM1A0);
     d26:	2f 73       	andi	r18, 0x3F	; 63
		aux8 |= (compA << COM1A0); 
     d28:	28 2b       	or	r18, r24
	}
	if(compB != TIMER_PORT_NO_CHANGE){
     d2a:	6f 3f       	cpi	r22, 0xFF	; 255
     d2c:	31 f0       	breq	.+12     	; 0xd3a <timer1OutputConfig+0x24>
		aux8 &= ~(0x03 << COM1B0);
     d2e:	2f 7c       	andi	r18, 0xCF	; 207
		aux8 |= (compB << COM1B0); 
     d30:	80 e1       	ldi	r24, 0x10	; 16
     d32:	68 9f       	mul	r22, r24
     d34:	b0 01       	movw	r22, r0
     d36:	11 24       	eor	r1, r1
     d38:	26 2b       	or	r18, r22
	}
	TCCR1A = aux8;
     d3a:	20 93 80 00 	sts	0x0080, r18
	return RESULT_OK;
}
     d3e:	80 e0       	ldi	r24, 0x00	; 0
     d40:	08 95       	ret

00000d42 <timer1InputCaptureNoiseCancelerConfig>:
 * Configures the noise canceler of input capture of timer1
 * -------------------------------------------------------------------------- */

resultValue_t	timer1InputCaptureNoiseCancelerConfig(timerInputCaptureNoiseCanceler_t mode)
{
	uint8 aux8 = TCCR1B;
     d42:	e1 e8       	ldi	r30, 0x81	; 129
     d44:	f0 e0       	ldi	r31, 0x00	; 0
     d46:	90 81       	ld	r25, Z

	aux8 &= ~(0x03 << ICES1);
     d48:	9f 73       	andi	r25, 0x3F	; 63
	aux8 |= mode;
     d4a:	98 2b       	or	r25, r24

	TCCR1B = aux8;
     d4c:	90 83       	st	Z, r25
	return RESULT_OK;
}
     d4e:	80 e0       	ldi	r24, 0x00	; 0
     d50:	08 95       	ret

00000d52 <timer1ActivateOverflowInterrupt>:
 * Activates the timer1 overflow interrupt
 * -------------------------------------------------------------------------- */

resultValue_t timer1ActivateOverflowInterrupt(void)
{
	setBit(TIMSK1, TOIE1);
     d52:	ef e6       	ldi	r30, 0x6F	; 111
     d54:	f0 e0       	ldi	r31, 0x00	; 0
     d56:	80 81       	ld	r24, Z
     d58:	81 60       	ori	r24, 0x01	; 1
     d5a:	80 83       	st	Z, r24
	return RESULT_OK;
}
     d5c:	80 e0       	ldi	r24, 0x00	; 0
     d5e:	08 95       	ret

00000d60 <timer1DeactivateOverflowInterrupt>:
 * Deactivates the timer1 overflow interrupt
 * -------------------------------------------------------------------------- */

resultValue_t timer1DeactivateOverflowInterrupt(void)
{
	clrBit(TIMSK1, TOIE1);
     d60:	ef e6       	ldi	r30, 0x6F	; 111
     d62:	f0 e0       	ldi	r31, 0x00	; 0
     d64:	80 81       	ld	r24, Z
     d66:	8e 7f       	andi	r24, 0xFE	; 254
     d68:	80 83       	st	Z, r24
	return RESULT_OK;
}
     d6a:	80 e0       	ldi	r24, 0x00	; 0
     d6c:	08 95       	ret

00000d6e <timer1ClearOverflowInterruptRequest>:
 * Clears the timer1 overflow interrupt request
 * -------------------------------------------------------------------------- */

resultValue_t timer1ClearOverflowInterruptRequest(void)
{
	setBit(TIFR1, TOV1);
     d6e:	b0 9a       	sbi	0x16, 0	; 22
	return RESULT_OK;
}
     d70:	80 e0       	ldi	r24, 0x00	; 0
     d72:	08 95       	ret

00000d74 <timer1ActivateCompareAInterrupt>:
 * Activates the timer1 compare A interrupt
 * -------------------------------------------------------------------------- */

resultValue_t timer1ActivateCompareAInterrupt(void)
{
	setBit(TIMSK1, OCIE1A);
     d74:	ef e6       	ldi	r30, 0x6F	; 111
     d76:	f0 e0       	ldi	r31, 0x00	; 0
     d78:	80 81       	ld	r24, Z
     d7a:	82 60       	ori	r24, 0x02	; 2
     d7c:	80 83       	st	Z, r24
	return RESULT_OK;
}
     d7e:	80 e0       	ldi	r24, 0x00	; 0
     d80:	08 95       	ret

00000d82 <timer1DeactivateCompareAInterrupt>:
 * Deactivates the timer1 compare A interrupt
 * -------------------------------------------------------------------------- */

resultValue_t timer1DeactivateCompareAInterrupt(void)
{
	clrBit(TIMSK1, OCIE1A);
     d82:	ef e6       	ldi	r30, 0x6F	; 111
     d84:	f0 e0       	ldi	r31, 0x00	; 0
     d86:	80 81       	ld	r24, Z
     d88:	8d 7f       	andi	r24, 0xFD	; 253
     d8a:	80 83       	st	Z, r24
	return RESULT_OK;
}
     d8c:	80 e0       	ldi	r24, 0x00	; 0
     d8e:	08 95       	ret

00000d90 <timer1ClearCompareAInterruptRequest>:
 * Clears the timer1 compare A interrupt request
 * -------------------------------------------------------------------------- */

resultValue_t timer1ClearCompareAInterruptRequest(void)
{
	setBit(TIFR1, OCF1A);
     d90:	b1 9a       	sbi	0x16, 1	; 22
	return RESULT_OK;
}
     d92:	80 e0       	ldi	r24, 0x00	; 0
     d94:	08 95       	ret

00000d96 <timer1ActivateCompareBInterrupt>:
 * Activates the timer1 compare B interrupt
 * -------------------------------------------------------------------------- */

resultValue_t timer1ActivateCompareBInterrupt(void)
{
	setBit(TIMSK1, OCIE1B);
     d96:	ef e6       	ldi	r30, 0x6F	; 111
     d98:	f0 e0       	ldi	r31, 0x00	; 0
     d9a:	80 81       	ld	r24, Z
     d9c:	84 60       	ori	r24, 0x04	; 4
     d9e:	80 83       	st	Z, r24
	return RESULT_OK;
}
     da0:	80 e0       	ldi	r24, 0x00	; 0
     da2:	08 95       	ret

00000da4 <timer1DeactivateCompareBInterrupt>:
 * Deactivates the timer1 compare B interrupt
 * -------------------------------------------------------------------------- */

resultValue_t timer1DeactivateCompareBInterrupt(void)
{
	clrBit(TIMSK1, OCIE1B);
     da4:	ef e6       	ldi	r30, 0x6F	; 111
     da6:	f0 e0       	ldi	r31, 0x00	; 0
     da8:	80 81       	ld	r24, Z
     daa:	8b 7f       	andi	r24, 0xFB	; 251
     dac:	80 83       	st	Z, r24
	return RESULT_OK;
}
     dae:	80 e0       	ldi	r24, 0x00	; 0
     db0:	08 95       	ret

00000db2 <timer1ClearCompareBInterruptRequest>:
 * Clears the timer1 compare B interrupt request
 * -------------------------------------------------------------------------- */

resultValue_t timer1ClearCompareBInterruptRequest(void)
{
	setBit(TIFR1, OCF1B);
     db2:	b2 9a       	sbi	0x16, 2	; 22
	return RESULT_OK;
}
     db4:	80 e0       	ldi	r24, 0x00	; 0
     db6:	08 95       	ret

00000db8 <timer1ActivateInputCaptureInterrupt>:
 * Activates the timer1 input capture interrupt
 * -------------------------------------------------------------------------- */

resultValue_t timer1ActivateInputCaptureInterrupt(void)
{
	setBit(TIMSK1, ICIE1);
     db8:	ef e6       	ldi	r30, 0x6F	; 111
     dba:	f0 e0       	ldi	r31, 0x00	; 0
     dbc:	80 81       	ld	r24, Z
     dbe:	80 62       	ori	r24, 0x20	; 32
     dc0:	80 83       	st	Z, r24
	return RESULT_OK;
}
     dc2:	80 e0       	ldi	r24, 0x00	; 0
     dc4:	08 95       	ret

00000dc6 <timer1DeactivateInputCaptureInterrupt>:
 * Deactivates the timer1 input capture interrupt
 * -------------------------------------------------------------------------- */

resultValue_t timer1DeactivateInputCaptureInterrupt(void)
{
	clrBit(TIMSK1, ICIE1);
     dc6:	ef e6       	ldi	r30, 0x6F	; 111
     dc8:	f0 e0       	ldi	r31, 0x00	; 0
     dca:	80 81       	ld	r24, Z
     dcc:	8f 7d       	andi	r24, 0xDF	; 223
     dce:	80 83       	st	Z, r24
	return RESULT_OK;
}
     dd0:	80 e0       	ldi	r24, 0x00	; 0
     dd2:	08 95       	ret

00000dd4 <timer1ClearInputCaptureInterruptRequest>:
 * Clears the timer1 input capture interrupt request
 * -------------------------------------------------------------------------- */

resultValue_t timer1ClearInputCaptureInterruptRequest(void)
{
	setBit(TIFR1, ICF1);
     dd4:	b5 9a       	sbi	0x16, 5	; 22
	return RESULT_OK;
}
     dd6:	80 e0       	ldi	r24, 0x00	; 0
     dd8:	08 95       	ret

00000dda <timer1ForceCompareA>:
 * Forces a comparison on the output compare A of the timer1
 * -------------------------------------------------------------------------- */

resultValue_t timer1ForceCompareA(void)
{
	setBit(TCCR1C, FOC1A);
     dda:	e2 e8       	ldi	r30, 0x82	; 130
     ddc:	f0 e0       	ldi	r31, 0x00	; 0
     dde:	80 81       	ld	r24, Z
     de0:	80 68       	ori	r24, 0x80	; 128
     de2:	80 83       	st	Z, r24
	return RESULT_OK;
}
     de4:	80 e0       	ldi	r24, 0x00	; 0
     de6:	08 95       	ret

00000de8 <timer1ForceCompareB>:
 * Forces a comparison on the output compare B of the timer1
 * -------------------------------------------------------------------------- */

resultValue_t timer1ForceCompareB(void)
{
	setBit(TCCR1C, FOC1B);
     de8:	e2 e8       	ldi	r30, 0x82	; 130
     dea:	f0 e0       	ldi	r31, 0x00	; 0
     dec:	80 81       	ld	r24, Z
     dee:	80 64       	ori	r24, 0x40	; 64
     df0:	80 83       	st	Z, r24
	return RESULT_OK;
}
     df2:	80 e0       	ldi	r24, 0x00	; 0
     df4:	08 95       	ret

00000df6 <timer1SetCounterValue>:
 * Sets the timer1 counter value
 * -------------------------------------------------------------------------- */

resultValue_t timer1SetCounterValue(uint16 value)
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
     df6:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     df8:	f8 94       	cli
		TCNT1 = value;
     dfa:	90 93 85 00 	sts	0x0085, r25
     dfe:	80 93 84 00 	sts	0x0084, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     e02:	2f bf       	out	0x3f, r18	; 63
	}
	return RESULT_OK;
}
     e04:	80 e0       	ldi	r24, 0x00	; 0
     e06:	08 95       	ret

00000e08 <timer1GetCounterValue>:
 * Gets the timer1 counter value
 * -------------------------------------------------------------------------- */

uint16 timer1GetCounterValue(void)
{
	return TCNT1;
     e08:	80 91 84 00 	lds	r24, 0x0084
     e0c:	90 91 85 00 	lds	r25, 0x0085
}
     e10:	08 95       	ret

00000e12 <timer1SetCompareAValue>:
 * Sets the timer1 compare A value
 * -------------------------------------------------------------------------- */

resultValue_t timer1SetCompareAValue(uint16 value)
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
     e12:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     e14:	f8 94       	cli
		OCR1A = value;
     e16:	90 93 89 00 	sts	0x0089, r25
     e1a:	80 93 88 00 	sts	0x0088, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     e1e:	2f bf       	out	0x3f, r18	; 63
	}
	return RESULT_OK;
}
     e20:	80 e0       	ldi	r24, 0x00	; 0
     e22:	08 95       	ret

00000e24 <timer1GetCompareAValue>:
 * Gets the timer1 compare A value
 * -------------------------------------------------------------------------- */

uint16 timer1GetCompareAValue(void)
{
	return OCR1A;
     e24:	80 91 88 00 	lds	r24, 0x0088
     e28:	90 91 89 00 	lds	r25, 0x0089
}
     e2c:	08 95       	ret

00000e2e <timer1SetCompareBValue>:
 * Sets the timer1 compare B value
 * -------------------------------------------------------------------------- */

resultValue_t timer1SetCompareBValue(uint16 value)
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
     e2e:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     e30:	f8 94       	cli
		OCR1B = value;
     e32:	90 93 8b 00 	sts	0x008B, r25
     e36:	80 93 8a 00 	sts	0x008A, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     e3a:	2f bf       	out	0x3f, r18	; 63
	}
	return RESULT_OK;
}
     e3c:	80 e0       	ldi	r24, 0x00	; 0
     e3e:	08 95       	ret

00000e40 <timer1GetCompareBValue>:
 * Gets the timer1 compare B value
 * -------------------------------------------------------------------------- */

uint16 timer1GetCompareBValue(void)
{
	return OCR1B;
     e40:	80 91 8a 00 	lds	r24, 0x008A
     e44:	90 91 8b 00 	lds	r25, 0x008B
}
     e48:	08 95       	ret

00000e4a <timer1SetInputCaptureValue>:
 * Sets the timer1 input capture value
 * -------------------------------------------------------------------------- */

resultValue_t timer1SetInputCaptureValue(uint16 value)
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
     e4a:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     e4c:	f8 94       	cli
		ICR1 = value;
     e4e:	90 93 87 00 	sts	0x0087, r25
     e52:	80 93 86 00 	sts	0x0086, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     e56:	2f bf       	out	0x3f, r18	; 63
	}
	return RESULT_OK;
}
     e58:	80 e0       	ldi	r24, 0x00	; 0
     e5a:	08 95       	ret

00000e5c <timer1GetInputCaptureValue>:
 * Gets the timer1 input capture value
 * -------------------------------------------------------------------------- */

uint16 timer1GetInputCaptureValue(void)
{
	return ICR1;
     e5c:	80 91 86 00 	lds	r24, 0x0086
     e60:	90 91 87 00 	lds	r25, 0x0087
}
     e64:	08 95       	ret

00000e66 <timer2Config>:
 * Configures the timer2 mode and prescaler
 * -------------------------------------------------------------------------- */

resultValue_t timer2Config(timerModeA_t mode, timerPrescalerValueB_t prescaler)
{
	uint8 reg1 = TCCR2A;
     e66:	20 91 b0 00 	lds	r18, 0x00B0
	uint8 reg2 = TCCR2B;
     e6a:	90 91 b1 00 	lds	r25, 0x00B1

	if(prescaler != TIMER_B_PRESCALER_NO_CHANGE){
     e6e:	6f 3f       	cpi	r22, 0xFF	; 255
     e70:	11 f0       	breq	.+4      	; 0xe76 <timer2Config+0x10>
		reg2 &= ~(0x07 << CS20);
     e72:	98 7f       	andi	r25, 0xF8	; 248
		reg2 |= prescaler;
     e74:	96 2b       	or	r25, r22
	}

	if(mode != TIMER_A_MODE_NO_CHANGE){
     e76:	8f 3f       	cpi	r24, 0xFF	; 255
     e78:	41 f0       	breq	.+16     	; 0xe8a <timer2Config+0x24>
		if(isBitSet(mode, 2))
     e7a:	82 ff       	sbrs	r24, 2
     e7c:	02 c0       	rjmp	.+4      	; 0xe82 <timer2Config+0x1c>
			setBit(reg2, WGM22);
     e7e:	98 60       	ori	r25, 0x08	; 8
     e80:	01 c0       	rjmp	.+2      	; 0xe84 <timer2Config+0x1e>
		else
			clrBit(reg2, WGM22);
     e82:	97 7f       	andi	r25, 0xF7	; 247
		reg1 &= ~(0x03 << WGM20);
		reg1 |= (mode & 0x03);
     e84:	83 70       	andi	r24, 0x03	; 3
	if(mode != TIMER_A_MODE_NO_CHANGE){
		if(isBitSet(mode, 2))
			setBit(reg2, WGM22);
		else
			clrBit(reg2, WGM22);
		reg1 &= ~(0x03 << WGM20);
     e86:	2c 7f       	andi	r18, 0xFC	; 252
		reg1 |= (mode & 0x03);
     e88:	28 2b       	or	r18, r24
	}
	TCCR2A = reg1;
     e8a:	20 93 b0 00 	sts	0x00B0, r18
	TCCR2B = reg2;
     e8e:	90 93 b1 00 	sts	0x00B1, r25

	return RESULT_OK;
}
     e92:	80 e0       	ldi	r24, 0x00	; 0
     e94:	08 95       	ret

00000e96 <timer2OutputConfig>:
 * Configures the timer2 compare outputs
 * -------------------------------------------------------------------------- */

resultValue_t timer2OutputConfig(timerOutput_t compA, timerOutput_t compB)
{
	uint8 aux8 = TCCR2A;
     e96:	20 91 b0 00 	lds	r18, 0x00B0

	if(compA != TIMER_PORT_NO_CHANGE){
     e9a:	8f 3f       	cpi	r24, 0xFF	; 255
     e9c:	31 f0       	breq	.+12     	; 0xeaa <timer2OutputConfig+0x14>
		aux8 &= ~(0x03 << COM2A0);
		aux8 |= (compA << COM2A0); 
     e9e:	30 e4       	ldi	r19, 0x40	; 64
     ea0:	83 9f       	mul	r24, r19
     ea2:	c0 01       	movw	r24, r0
     ea4:	11 24       	eor	r1, r1
resultValue_t timer2OutputConfig(timerOutput_t compA, timerOutput_t compB)
{
	uint8 aux8 = TCCR2A;

	if(compA != TIMER_PORT_NO_CHANGE){
		aux8 &= ~(0x03 << COM2A0);
     ea6:	2f 73       	andi	r18, 0x3F	; 63
		aux8 |= (compA << COM2A0); 
     ea8:	28 2b       	or	r18, r24
	}
	if(compB != TIMER_PORT_NO_CHANGE){
     eaa:	6f 3f       	cpi	r22, 0xFF	; 255
     eac:	31 f0       	breq	.+12     	; 0xeba <timer2OutputConfig+0x24>
		aux8 &= ~(0x03 << COM2B0);
     eae:	2f 7c       	andi	r18, 0xCF	; 207
		aux8 |= (compB << COM2B0); 
     eb0:	80 e1       	ldi	r24, 0x10	; 16
     eb2:	68 9f       	mul	r22, r24
     eb4:	b0 01       	movw	r22, r0
     eb6:	11 24       	eor	r1, r1
     eb8:	26 2b       	or	r18, r22
	}
	TCCR2A = aux8;
     eba:	20 93 b0 00 	sts	0x00B0, r18
	return RESULT_OK;
}
     ebe:	80 e0       	ldi	r24, 0x00	; 0
     ec0:	08 95       	ret

00000ec2 <timer2ActivateOverflowInterrupt>:
 * Activates the timer2 overflow interrupt
 * -------------------------------------------------------------------------- */

resultValue_t timer2ActivateOverflowInterrupt(void)
{
	setBit(TIMSK2, TOIE2);
     ec2:	e0 e7       	ldi	r30, 0x70	; 112
     ec4:	f0 e0       	ldi	r31, 0x00	; 0
     ec6:	80 81       	ld	r24, Z
     ec8:	81 60       	ori	r24, 0x01	; 1
     eca:	80 83       	st	Z, r24
	return RESULT_OK;
}
     ecc:	80 e0       	ldi	r24, 0x00	; 0
     ece:	08 95       	ret

00000ed0 <timer2DeactivateOverflowInterrupt>:
 * Deactivates the timer2 overflow interrupt
 * -------------------------------------------------------------------------- */

resultValue_t timer2DeactivateOverflowInterrupt(void)
{
	clrBit(TIMSK2, TOIE2);
     ed0:	e0 e7       	ldi	r30, 0x70	; 112
     ed2:	f0 e0       	ldi	r31, 0x00	; 0
     ed4:	80 81       	ld	r24, Z
     ed6:	8e 7f       	andi	r24, 0xFE	; 254
     ed8:	80 83       	st	Z, r24
	return RESULT_OK;
}
     eda:	80 e0       	ldi	r24, 0x00	; 0
     edc:	08 95       	ret

00000ede <timer2ClearOverflowInterruptRequest>:
 * Clears the timer2 overflow interrupt request
 * -------------------------------------------------------------------------- */

resultValue_t timer2ClearOverflowInterruptRequest(void)
{
	setBit(TIFR2, TOV2);
     ede:	b8 9a       	sbi	0x17, 0	; 23
	return RESULT_OK;
}
     ee0:	80 e0       	ldi	r24, 0x00	; 0
     ee2:	08 95       	ret

00000ee4 <timer2ActivateCompareAInterrupt>:
 * Activates the timer2 compare A interrupt
 * -------------------------------------------------------------------------- */

resultValue_t timer2ActivateCompareAInterrupt(void)
{
	setBit(TIMSK2, OCIE2A);
     ee4:	e0 e7       	ldi	r30, 0x70	; 112
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
     ee8:	80 81       	ld	r24, Z
     eea:	82 60       	ori	r24, 0x02	; 2
     eec:	80 83       	st	Z, r24
	return RESULT_OK;
}
     eee:	80 e0       	ldi	r24, 0x00	; 0
     ef0:	08 95       	ret

00000ef2 <timer2DeactivateCompareAInterrupt>:
 * Deactivates the timer2 compare A interrupt
 * -------------------------------------------------------------------------- */

resultValue_t timer2DeactivateCompareAInterrupt(void)
{
	clrBit(TIMSK2, OCIE2A);
     ef2:	e0 e7       	ldi	r30, 0x70	; 112
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	80 81       	ld	r24, Z
     ef8:	8d 7f       	andi	r24, 0xFD	; 253
     efa:	80 83       	st	Z, r24
	return RESULT_OK;
}
     efc:	80 e0       	ldi	r24, 0x00	; 0
     efe:	08 95       	ret

00000f00 <timer2ClearCompareAInterruptRequest>:
 * Clears the timer2 compare A interrupt request
 * -------------------------------------------------------------------------- */

resultValue_t timer2ClearCompareAInterruptRequest(void)
{
	setBit(TIFR2, OCF2A);
     f00:	b9 9a       	sbi	0x17, 1	; 23
	return RESULT_OK;
}
     f02:	80 e0       	ldi	r24, 0x00	; 0
     f04:	08 95       	ret

00000f06 <timer2ActivateCompareBInterrupt>:
 * Activates the timer2 compare B interrupt
 * -------------------------------------------------------------------------- */

resultValue_t timer2ActivateCompareBInterrupt(void)
{
	setBit(TIMSK2, OCIE2B);
     f06:	e0 e7       	ldi	r30, 0x70	; 112
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	80 81       	ld	r24, Z
     f0c:	84 60       	ori	r24, 0x04	; 4
     f0e:	80 83       	st	Z, r24
	return RESULT_OK;
}
     f10:	80 e0       	ldi	r24, 0x00	; 0
     f12:	08 95       	ret

00000f14 <timer2DeactivateCompareBInterrupt>:
 * Deactivates the timer2 compare B interrupt
 * -------------------------------------------------------------------------- */

resultValue_t timer2DeactivateCompareBInterrupt(void)
{
	clrBit(TIMSK2, OCIE2B);
     f14:	e0 e7       	ldi	r30, 0x70	; 112
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	80 81       	ld	r24, Z
     f1a:	8b 7f       	andi	r24, 0xFB	; 251
     f1c:	80 83       	st	Z, r24
	return RESULT_OK;
}
     f1e:	80 e0       	ldi	r24, 0x00	; 0
     f20:	08 95       	ret

00000f22 <timer2ClearCompareBInterruptRequest>:
 * Clears the timer2 compare B interrupt request
 * -------------------------------------------------------------------------- */

resultValue_t timer2ClearCompareBInterruptRequest(void)
{
	setBit(TIFR2, OCF2B);
     f22:	ba 9a       	sbi	0x17, 2	; 23
	return RESULT_OK;
}
     f24:	80 e0       	ldi	r24, 0x00	; 0
     f26:	08 95       	ret

00000f28 <timer2ForceCompareA>:
 * Forces a comparison on the output compare A of the timer2
 * -------------------------------------------------------------------------- */

resultValue_t timer2ForceCompareA(void)
{
	setBit(TCCR2B, FOC2A);
     f28:	e1 eb       	ldi	r30, 0xB1	; 177
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	80 81       	ld	r24, Z
     f2e:	80 68       	ori	r24, 0x80	; 128
     f30:	80 83       	st	Z, r24
	return RESULT_OK;
}
     f32:	80 e0       	ldi	r24, 0x00	; 0
     f34:	08 95       	ret

00000f36 <timer2ForceCompareB>:
 * Forces a comparison on the output compare B of the timer2
 * -------------------------------------------------------------------------- */

resultValue_t timer2ForceCompareB(void)
{
	setBit(TCCR2B, FOC2B);
     f36:	e1 eb       	ldi	r30, 0xB1	; 177
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	80 81       	ld	r24, Z
     f3c:	80 64       	ori	r24, 0x40	; 64
     f3e:	80 83       	st	Z, r24
	return RESULT_OK;
}
     f40:	80 e0       	ldi	r24, 0x00	; 0
     f42:	08 95       	ret

00000f44 <timer2SetCounterValue>:
 * Sets the timer2 counter value
 * -------------------------------------------------------------------------- */

resultValue_t timer2SetCounterValue(uint8 value)
{
	TCNT2 = value;
     f44:	80 93 b2 00 	sts	0x00B2, r24
	return RESULT_OK;
}
     f48:	80 e0       	ldi	r24, 0x00	; 0
     f4a:	08 95       	ret

00000f4c <timer2GetCounterValue>:
 * Gets the timer2 counter value
 * -------------------------------------------------------------------------- */

uint8 timer2GetCounterValue(void)
{
	return TCNT2;
     f4c:	80 91 b2 00 	lds	r24, 0x00B2
}
     f50:	08 95       	ret

00000f52 <timer2SetCompareAValue>:
 * Sets the timer2 compare A value
 * -------------------------------------------------------------------------- */

resultValue_t timer2SetCompareAValue(uint8 value)
{
	OCR2A = value;
     f52:	80 93 b3 00 	sts	0x00B3, r24
	return RESULT_OK;
}
     f56:	80 e0       	ldi	r24, 0x00	; 0
     f58:	08 95       	ret

00000f5a <timer2GetCompareAValue>:
 * Gets the timer2 compare A value
 * -------------------------------------------------------------------------- */

uint8 timer2GetCompareAValue(void)
{
	return OCR2A;
     f5a:	80 91 b3 00 	lds	r24, 0x00B3
}
     f5e:	08 95       	ret

00000f60 <timer2SetCompareBValue>:
 * Sets the timer2 compare B value
 * -------------------------------------------------------------------------- */

resultValue_t timer2SetCompareBValue(uint8 value)
{
	OCR2B = value;
     f60:	80 93 b4 00 	sts	0x00B4, r24
	return RESULT_OK;
}
     f64:	80 e0       	ldi	r24, 0x00	; 0
     f66:	08 95       	ret

00000f68 <timer2GetCompareBValue>:
 * Gets the timer2 compare B value
 * -------------------------------------------------------------------------- */

uint8 timer2GetCompareBValue(void)
{
	return OCR2B;
     f68:	80 91 b4 00 	lds	r24, 0x00B4
}
     f6c:	08 95       	ret

00000f6e <adcConfig>:

resultValue_t adcConfig(adcMode_t mode, adcReference_t reference, adcPrescaler_t  prescaler)
{
	uint8 reg = 0;

	if(reference != ADC_REFERENCE_NO_CHANGE){
     f6e:	6f 3f       	cpi	r22, 0xFF	; 255
     f70:	51 f0       	breq	.+20     	; 0xf86 <adcConfig+0x18>
		reg = ADMUX;
     f72:	90 91 7c 00 	lds	r25, 0x007C
		reg &= ~(0x03 << REFS0);
		reg |= reference << REFS0;
     f76:	20 e4       	ldi	r18, 0x40	; 64
     f78:	62 9f       	mul	r22, r18
     f7a:	b0 01       	movw	r22, r0
     f7c:	11 24       	eor	r1, r1
{
	uint8 reg = 0;

	if(reference != ADC_REFERENCE_NO_CHANGE){
		reg = ADMUX;
		reg &= ~(0x03 << REFS0);
     f7e:	9f 73       	andi	r25, 0x3F	; 63
		reg |= reference << REFS0;
     f80:	96 2b       	or	r25, r22
		ADMUX = reg;
     f82:	90 93 7c 00 	sts	0x007C, r25
	}

	if(prescaler != ADC_PRESCALER_NO_CHANGE){
     f86:	4f 3f       	cpi	r20, 0xFF	; 255
     f88:	31 f0       	breq	.+12     	; 0xf96 <adcConfig+0x28>
		reg = ADCSRA;
     f8a:	90 91 7a 00 	lds	r25, 0x007A
		reg &= ~(0x07 << ADPS0);
     f8e:	98 7f       	andi	r25, 0xF8	; 248
		reg |= prescaler << ADPS0;
     f90:	94 2b       	or	r25, r20
		ADCSRA = reg;
     f92:	90 93 7a 00 	sts	0x007A, r25
	}

	if(mode != ADC_MODE_NO_CHANGE){
     f96:	8f 3f       	cpi	r24, 0xFF	; 255
     f98:	39 f1       	breq	.+78     	; 0xfe8 <adcConfig+0x7a>
		if(mode == ADC_MODE_SINGLE_CONVERSION)
     f9a:	81 11       	cpse	r24, r1
     f9c:	04 c0       	rjmp	.+8      	; 0xfa6 <adcConfig+0x38>
			clrBit(ADCSRA, ADATE);
     f9e:	80 91 7a 00 	lds	r24, 0x007A
     fa2:	8f 7d       	andi	r24, 0xDF	; 223
     fa4:	1f c0       	rjmp	.+62     	; 0xfe4 <adcConfig+0x76>
		else{
			reg = ADCSRB;
     fa6:	20 91 7b 00 	lds	r18, 0x007B
			reg &= ~(0x07 << ADTS0);
     faa:	28 7f       	andi	r18, 0xF8	; 248
			switch(mode){
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	fc 01       	movw	r30, r24
     fb0:	32 97       	sbiw	r30, 0x02	; 2
     fb2:	e7 30       	cpi	r30, 0x07	; 7
     fb4:	f1 05       	cpc	r31, r1
     fb6:	d0 f4       	brcc	.+52     	; 0xfec <adcConfig+0x7e>
     fb8:	eb 5b       	subi	r30, 0xBB	; 187
     fba:	ff 4f       	sbci	r31, 0xFF	; 255
     fbc:	0c 94 9e 0a 	jmp	0x153c	; 0x153c <__tablejump2__>
				case ADC_MODE_AUTO_ANALOG_COMP:		reg |= (1 << ADTS0);	break;
     fc0:	21 60       	ori	r18, 0x01	; 1
     fc2:	0b c0       	rjmp	.+22     	; 0xfda <adcConfig+0x6c>
				case ADC_MODE_AUTO_INT0:			reg |= (2 << ADTS0);	break;
     fc4:	22 60       	ori	r18, 0x02	; 2
     fc6:	09 c0       	rjmp	.+18     	; 0xfda <adcConfig+0x6c>
				case ADC_MODE_AUTO_TIMER0_COMPA:	reg |= (3 << ADTS0);	break;
     fc8:	23 60       	ori	r18, 0x03	; 3
     fca:	07 c0       	rjmp	.+14     	; 0xfda <adcConfig+0x6c>
				case ADC_MODE_AUTO_TIMER0_OVERFLOW:	reg |= (4 << ADTS0);	break;
     fcc:	24 60       	ori	r18, 0x04	; 4
     fce:	05 c0       	rjmp	.+10     	; 0xfda <adcConfig+0x6c>
				case ADC_MODE_AUTO_TIMER1_COMPB:	reg |= (5 << ADTS0);	break;
     fd0:	25 60       	ori	r18, 0x05	; 5
     fd2:	03 c0       	rjmp	.+6      	; 0xfda <adcConfig+0x6c>
				case ADC_MODE_AUTO_TIMER1_OVERFLOW:	reg |= (6 << ADTS0);	break;
     fd4:	26 60       	ori	r18, 0x06	; 6
     fd6:	01 c0       	rjmp	.+2      	; 0xfda <adcConfig+0x6c>
				case ADC_MODE_AUTO_TIMER1_CAPTURE:	reg |= (7 << ADTS0);	break;
     fd8:	27 60       	ori	r18, 0x07	; 7
				default:							return RESULT_UNSUPPORTED_VALUE;	break;
			}
			ADCSRB = reg;
     fda:	20 93 7b 00 	sts	0x007B, r18
			setBit(ADCSRA, ADATE);
     fde:	80 91 7a 00 	lds	r24, 0x007A
     fe2:	80 62       	ori	r24, 0x20	; 32
     fe4:	80 93 7a 00 	sts	0x007A, r24
		}
	}

	return RESULT_OK;
     fe8:	80 e0       	ldi	r24, 0x00	; 0
     fea:	08 95       	ret
				case ADC_MODE_AUTO_TIMER0_COMPA:	reg |= (3 << ADTS0);	break;
				case ADC_MODE_AUTO_TIMER0_OVERFLOW:	reg |= (4 << ADTS0);	break;
				case ADC_MODE_AUTO_TIMER1_COMPB:	reg |= (5 << ADTS0);	break;
				case ADC_MODE_AUTO_TIMER1_OVERFLOW:	reg |= (6 << ADTS0);	break;
				case ADC_MODE_AUTO_TIMER1_CAPTURE:	reg |= (7 << ADTS0);	break;
				default:							return RESULT_UNSUPPORTED_VALUE;	break;
     fec:	87 e0       	ldi	r24, 0x07	; 7
			setBit(ADCSRA, ADATE);
		}
	}

	return RESULT_OK;
 }
     fee:	08 95       	ret

00000ff0 <adcSelectChannel>:
 * Selects the adc channel
 * -------------------------------------------------------------------------- */

resultValue_t adcSelectChannel(adcChannel_t channel)
{
	uint8 reg = ADMUX;
     ff0:	ec e7       	ldi	r30, 0x7C	; 124
     ff2:	f0 e0       	ldi	r31, 0x00	; 0
     ff4:	90 81       	ld	r25, Z

	reg &= ~(0x0F << MUX0);
     ff6:	90 7f       	andi	r25, 0xF0	; 240
	reg |= (channel << MUX0);
     ff8:	98 2b       	or	r25, r24
	ADMUX = reg;
     ffa:	90 83       	st	Z, r25

	return RESULT_OK;
}
     ffc:	80 e0       	ldi	r24, 0x00	; 0
     ffe:	08 95       	ret

00001000 <adcEnableDigitalInput>:
 * Enable adc digital inputs
 * -------------------------------------------------------------------------- */

resultValue_t adcEnableDigitalInput(uint8 flagInputs)
{
	DIDR0 &= (~flagInputs);
    1000:	ee e7       	ldi	r30, 0x7E	; 126
    1002:	f0 e0       	ldi	r31, 0x00	; 0
    1004:	90 81       	ld	r25, Z
    1006:	80 95       	com	r24
    1008:	89 23       	and	r24, r25
    100a:	80 83       	st	Z, r24

	return RESULT_OK;
}
    100c:	80 e0       	ldi	r24, 0x00	; 0
    100e:	08 95       	ret

00001010 <adcDisableDigitalInput>:
 * Enable adc digital inputs
 * -------------------------------------------------------------------------- */

resultValue_t adcDisableDigitalInput(uint8 flagInputs)
{
	DIDR0 |= flagInputs;
    1010:	ee e7       	ldi	r30, 0x7E	; 126
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	90 81       	ld	r25, Z
    1016:	98 2b       	or	r25, r24
    1018:	90 83       	st	Z, r25

	return RESULT_OK;
}
    101a:	80 e0       	ldi	r24, 0x00	; 0
    101c:	08 95       	ret

0000101e <adcDataPresentation>:
 * Sets the adc data presentation
 * -------------------------------------------------------------------------- */

resultValue_t adcDataPresentation(adcDataPresentation_t presentation)
{
	if(presentation == ADC_LEFT_ADJUSTED)
    101e:	81 11       	cpse	r24, r1
    1020:	04 c0       	rjmp	.+8      	; 0x102a <adcDataPresentation+0xc>
		setBit(ADMUX, ADLAR);
    1022:	80 91 7c 00 	lds	r24, 0x007C
    1026:	80 62       	ori	r24, 0x20	; 32
    1028:	03 c0       	rjmp	.+6      	; 0x1030 <adcDataPresentation+0x12>
	else
		clrBit(ADMUX, ADLAR);
    102a:	80 91 7c 00 	lds	r24, 0x007C
    102e:	8f 7d       	andi	r24, 0xDF	; 223
    1030:	80 93 7c 00 	sts	0x007C, r24

	return RESULT_OK;
}
    1034:	80 e0       	ldi	r24, 0x00	; 0
    1036:	08 95       	ret

00001038 <adcEnable>:
 * Enables the adc module
 * -------------------------------------------------------------------------- */

resultValue_t adcEnable(void)
{
	setBit(ADCSRA, ADEN);
    1038:	ea e7       	ldi	r30, 0x7A	; 122
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	80 81       	ld	r24, Z
    103e:	80 68       	ori	r24, 0x80	; 128
    1040:	80 83       	st	Z, r24

	return RESULT_OK;
}
    1042:	80 e0       	ldi	r24, 0x00	; 0
    1044:	08 95       	ret

00001046 <adcDisable>:
 * Disables the adc module
 * -------------------------------------------------------------------------- */

resultValue_t adcDisable(void)
{
	clrBit(ADCSRA, ADEN);
    1046:	ea e7       	ldi	r30, 0x7A	; 122
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	80 81       	ld	r24, Z
    104c:	8f 77       	andi	r24, 0x7F	; 127
    104e:	80 83       	st	Z, r24

	return RESULT_OK;
}
    1050:	80 e0       	ldi	r24, 0x00	; 0
    1052:	08 95       	ret

00001054 <adcClearInterruptRequest>:
 * Clears the adc interrupt request
 * -------------------------------------------------------------------------- */

resultValue_t adcClearInterruptRequest(void)
{
	setBit(ADCSRA, ADIF);
    1054:	ea e7       	ldi	r30, 0x7A	; 122
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	80 81       	ld	r24, Z
    105a:	80 61       	ori	r24, 0x10	; 16
    105c:	80 83       	st	Z, r24

	return RESULT_OK;
}
    105e:	80 e0       	ldi	r24, 0x00	; 0
    1060:	08 95       	ret

00001062 <adcActivateInterrupt>:
 * Enables the adc interrupt
 * -------------------------------------------------------------------------- */

resultValue_t adcActivateInterrupt(void)
{
	setBit(ADCSRA, ADIE);
    1062:	ea e7       	ldi	r30, 0x7A	; 122
    1064:	f0 e0       	ldi	r31, 0x00	; 0
    1066:	80 81       	ld	r24, Z
    1068:	88 60       	ori	r24, 0x08	; 8
    106a:	80 83       	st	Z, r24

	return RESULT_OK;
}
    106c:	80 e0       	ldi	r24, 0x00	; 0
    106e:	08 95       	ret

00001070 <adcDeactivateInterrupt>:
 * Disables the adc interrupt
 * -------------------------------------------------------------------------- */

resultValue_t adcDeactivateInterrupt(void)
{
	clrBit(ADCSRA, ADIE);
    1070:	ea e7       	ldi	r30, 0x7A	; 122
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	80 81       	ld	r24, Z
    1076:	87 7f       	andi	r24, 0xF7	; 247
    1078:	80 83       	st	Z, r24

	return RESULT_OK;
}
    107a:	80 e0       	ldi	r24, 0x00	; 0
    107c:	08 95       	ret

0000107e <adcStartConversion>:
 * Starts an adc conversion
 * -------------------------------------------------------------------------- */

resultValue_t adcStartConversion(void)
{
	setBit(ADCSRA, ADSC);
    107e:	ea e7       	ldi	r30, 0x7A	; 122
    1080:	f0 e0       	ldi	r31, 0x00	; 0
    1082:	80 81       	ld	r24, Z
    1084:	80 64       	ori	r24, 0x40	; 64
    1086:	80 83       	st	Z, r24

	return RESULT_OK;
}
    1088:	80 e0       	ldi	r24, 0x00	; 0
    108a:	08 95       	ret

0000108c <adcIsBusy>:
 * Returns if an adc conversion is running
 * -------------------------------------------------------------------------- */

bool_t adcIsBusy(void)
{
	return isBitSet(ADCSRA, ADSC);
    108c:	80 91 7a 00 	lds	r24, 0x007A
}
    1090:	86 fb       	bst	r24, 6
    1092:	88 27       	eor	r24, r24
    1094:	80 f9       	bld	r24, 0
    1096:	08 95       	ret

00001098 <adcWaitUntilConversionFinish>:
 * Waits until the current conversion is finished
 * -------------------------------------------------------------------------- */

resultValue_t adcWaitUntilConversionFinish(void)
{
	waitUntilBitIsClear(ADCSRA, ADSC);
    1098:	80 91 7a 00 	lds	r24, 0x007A
    109c:	86 fd       	sbrc	r24, 6
    109e:	fc cf       	rjmp	.-8      	; 0x1098 <adcWaitUntilConversionFinish>
	return RESULT_OK;
}
    10a0:	80 e0       	ldi	r24, 0x00	; 0
    10a2:	08 95       	ret

000010a4 <usartConfig>:
/* -----------------------------------------------------------------------------
 * Configures the USART controller
 * -------------------------------------------------------------------------- */

resultValue_t usartConfig(usartMode_t mode, usartBaudRate_t baudRate, usartDataBits_t dataBits, usartParity_t parity, usartStopBits_t stopBits)
{
    10a4:	8f 92       	push	r8
    10a6:	9f 92       	push	r9
    10a8:	af 92       	push	r10
    10aa:	bf 92       	push	r11
    10ac:	cf 92       	push	r12
    10ae:	df 92       	push	r13
    10b0:	ef 92       	push	r14
    10b2:	ff 92       	push	r15
    10b4:	0f 93       	push	r16
    10b6:	4a 01       	movw	r8, r20
    10b8:	5b 01       	movw	r10, r22
    10ba:	9e 2d       	mov	r25, r14
	uint8 reg1 = UCSR0A;
    10bc:	30 91 c0 00 	lds	r19, 0x00C0
	uint8 reg2 = UCSR0B;
    10c0:	30 91 c1 00 	lds	r19, 0x00C1
	uint8 reg3 = UCSR0C;
    10c4:	30 91 c2 00 	lds	r19, 0x00C2

	// Clear errors
	reg1 &= ~((1 << FE0) | (1 << DOR0) | (1 << UPE0));

	// USART stop bits
	if(stopBits != USART_STOP_BIT_NO_CHANGE){
    10c8:	9f 3f       	cpi	r25, 0xFF	; 255
    10ca:	19 f0       	breq	.+6      	; 0x10d2 <usartConfig+0x2e>
		switch(stopBits){
    10cc:	92 30       	cpi	r25, 0x02	; 2
    10ce:	08 f0       	brcs	.+2      	; 0x10d2 <usartConfig+0x2e>
    10d0:	5f c0       	rjmp	.+190    	; 0x1190 <usartConfig+0xec>
			default:					return RESULT_UNSUPPORTED_VALUE;	break;
		}
	}

	// USART parity bits
	if(parity != USART_PARITY_NO_CHANGE){
    10d2:	0f 3f       	cpi	r16, 0xFF	; 255
    10d4:	19 f0       	breq	.+6      	; 0x10dc <usartConfig+0x38>
		reg3 &= ~(0x03 << UPM00);
		switch(parity){
    10d6:	03 30       	cpi	r16, 0x03	; 3
    10d8:	08 f0       	brcs	.+2      	; 0x10dc <usartConfig+0x38>
    10da:	5c c0       	rjmp	.+184    	; 0x1194 <usartConfig+0xf0>
			default:					return RESULT_USART_PARITY_UNSUPORTED;	break;
		}
	}

	// USART data bits
	if(dataBits != USART_DATA_BITS_NO_CHANGE){
    10dc:	2f 3f       	cpi	r18, 0xFF	; 255
    10de:	19 f0       	breq	.+6      	; 0x10e6 <usartConfig+0x42>
		clrBit(reg2, UCSZ02);
		reg3 &= ~(0x03 << UCSZ00);
		switch(dataBits){
    10e0:	25 30       	cpi	r18, 0x05	; 5
    10e2:	08 f0       	brcs	.+2      	; 0x10e6 <usartConfig+0x42>
    10e4:	57 c0       	rjmp	.+174    	; 0x1194 <usartConfig+0xf0>
			break;
		}
	}

	// USART mode
	if(mode != USART_MODE_NO_CHANGE){
    10e6:	8f 3f       	cpi	r24, 0xFF	; 255
    10e8:	79 f4       	brne	.+30     	; 0x1108 <usartConfig+0x64>
			reg3 |= (3 << UMSEL00);		// Synchronous SPI Mode
			setBit(reg3, UCPOL0);		// Polarity
			break;
		}
	}else{
		aux8 = (0x03 & (UCSR0C >> UMSEL00));
    10ea:	80 91 c2 00 	lds	r24, 0x00C2
    10ee:	82 95       	swap	r24
    10f0:	86 95       	lsr	r24
    10f2:	86 95       	lsr	r24
    10f4:	83 70       	andi	r24, 0x03	; 3
		switch(aux8){
    10f6:	21 f0       	breq	.+8      	; 0x1100 <usartConfig+0x5c>
    10f8:	83 30       	cpi	r24, 0x03	; 3
    10fa:	e9 f0       	breq	.+58     	; 0x1136 <usartConfig+0x92>
resultValue_t usartConfig(usartMode_t mode, usartBaudRate_t baudRate, usartDataBits_t dataBits, usartParity_t parity, usartStopBits_t stopBits)
{
	uint8 reg1 = UCSR0A;
	uint8 reg2 = UCSR0B;
	uint8 reg3 = UCSR0C;
	uint8 modeAux = 0;
    10fc:	80 e0       	ldi	r24, 0x00	; 0
    10fe:	04 c0       	rjmp	.+8      	; 0x1108 <usartConfig+0x64>
		}
	}else{
		aux8 = (0x03 & (UCSR0C >> UMSEL00));
		switch(aux8){
		case 0:	// Asynchronous mode
			if(isBitClr(UCSR0A, U2X0)){	// Single speed
    1100:	80 91 c0 00 	lds	r24, 0x00C0
    1104:	86 95       	lsr	r24
    1106:	81 70       	andi	r24, 0x01	; 1
			modeAux = USART_MODE_SYNCHRONOUS_SPI;
			break;
		}
	}

	if(baudRate != USART_BAUD_NO_CHANGE){
    1108:	9f ef       	ldi	r25, 0xFF	; 255
    110a:	89 16       	cp	r8, r25
    110c:	99 06       	cpc	r9, r25
    110e:	a9 06       	cpc	r10, r25
    1110:	b9 06       	cpc	r11, r25
    1112:	09 f4       	brne	.+2      	; 0x1116 <usartConfig+0x72>
    1114:	41 c0       	rjmp	.+130    	; 0x1198 <usartConfig+0xf4>
		switch(modeAux){
    1116:	81 30       	cpi	r24, 0x01	; 1
    1118:	49 f0       	breq	.+18     	; 0x112c <usartConfig+0x88>
    111a:	18 f0       	brcs	.+6      	; 0x1122 <usartConfig+0x7e>
    111c:	84 30       	cpi	r24, 0x04	; 4
    111e:	89 f0       	breq	.+34     	; 0x1142 <usartConfig+0x9e>
    1120:	22 c0       	rjmp	.+68     	; 0x1166 <usartConfig+0xc2>
		case USART_MODE_ASYNCHRONOUS:
			aux64 = (F_CPU / 16 / baudRate) - 1;
    1122:	60 e4       	ldi	r22, 0x40	; 64
    1124:	72 e4       	ldi	r23, 0x42	; 66
    1126:	8f e0       	ldi	r24, 0x0F	; 15
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	0f c0       	rjmp	.+30     	; 0x114a <usartConfig+0xa6>
			break;
		case USART_MODE_ASYNCHRONOUS_DOUBLE_SPEED:
			aux64 = (F_CPU / 8 / baudRate) - 1;
    112c:	60 e8       	ldi	r22, 0x80	; 128
    112e:	74 e8       	ldi	r23, 0x84	; 132
    1130:	8e e1       	ldi	r24, 0x1E	; 30
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	0a c0       	rjmp	.+20     	; 0x114a <usartConfig+0xa6>
			modeAux = USART_MODE_SYNCHRONOUS_SPI;
			break;
		}
	}

	if(baudRate != USART_BAUD_NO_CHANGE){
    1136:	8f ef       	ldi	r24, 0xFF	; 255
    1138:	88 16       	cp	r8, r24
    113a:	98 06       	cpc	r9, r24
    113c:	a8 06       	cpc	r10, r24
    113e:	b8 06       	cpc	r11, r24
    1140:	59 f1       	breq	.+86     	; 0x1198 <usartConfig+0xf4>
			break;
		case USART_MODE_ASYNCHRONOUS_DOUBLE_SPEED:
			aux64 = (F_CPU / 8 / baudRate) - 1;
			break;
		case USART_MODE_SYNCHRONOUS_SPI:
			aux64 = (F_CPU / 2 / baudRate) - 1;
    1142:	60 e0       	ldi	r22, 0x00	; 0
    1144:	72 e1       	ldi	r23, 0x12	; 18
    1146:	8a e7       	ldi	r24, 0x7A	; 122
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	a5 01       	movw	r20, r10
    114c:	94 01       	movw	r18, r8
    114e:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <__udivmodsi4>
    1152:	21 50       	subi	r18, 0x01	; 1
    1154:	31 09       	sbc	r19, r1
    1156:	41 09       	sbc	r20, r1
    1158:	51 09       	sbc	r21, r1
    115a:	49 01       	movw	r8, r18
    115c:	5a 01       	movw	r10, r20
    115e:	c1 2c       	mov	r12, r1
    1160:	d1 2c       	mov	r13, r1
    1162:	76 01       	movw	r14, r12
			break;
    1164:	08 c0       	rjmp	.+16     	; 0x1176 <usartConfig+0xd2>
	uint8 reg1 = UCSR0A;
	uint8 reg2 = UCSR0B;
	uint8 reg3 = UCSR0C;
	uint8 modeAux = 0;
	uint8 aux8 = 0;
	uint64 aux64 = 0;
    1166:	81 2c       	mov	r8, r1
    1168:	91 2c       	mov	r9, r1
    116a:	a1 2c       	mov	r10, r1
    116c:	b1 2c       	mov	r11, r1
    116e:	c1 2c       	mov	r12, r1
    1170:	d1 2c       	mov	r13, r1
    1172:	e1 2c       	mov	r14, r1
    1174:	f1 2c       	mov	r15, r1
			aux64 = (F_CPU / 2 / baudRate) - 1;
			break;
		}
//		if((aux64 > (1.05 * baudRate)) || (aux64 < (0.95 * baudRate)))
//			return RESULT_USART_BAUD_RATE_UNSUPORTED;
		UBRR0H = 0x0F & (aux64 >> 8);
    1176:	94 01       	movw	r18, r8
    1178:	a5 01       	movw	r20, r10
    117a:	b6 01       	movw	r22, r12
    117c:	c7 01       	movw	r24, r14
    117e:	08 e0       	ldi	r16, 0x08	; 8
    1180:	0e 94 a6 0a 	call	0x154c	; 0x154c <__lshrdi3>
    1184:	2f 70       	andi	r18, 0x0F	; 15
    1186:	20 93 c5 00 	sts	0x00C5, r18
		UBRR0L = (0xFF & aux64);
    118a:	80 92 c4 00 	sts	0x00C4, r8
    118e:	04 c0       	rjmp	.+8      	; 0x1198 <usartConfig+0xf4>
	// USART stop bits
	if(stopBits != USART_STOP_BIT_NO_CHANGE){
		switch(stopBits){
			case USART_STOP_BIT_SINGLE:	clrBit(reg3, USBS0);				break;
			case USART_STOP_BIT_DOUBLE:	setBit(reg3, USBS0);				break;
			default:					return RESULT_UNSUPPORTED_VALUE;	break;
    1190:	87 e0       	ldi	r24, 0x07	; 7
    1192:	03 c0       	rjmp	.+6      	; 0x119a <usartConfig+0xf6>
		case USART_DATA_BITS_9:
			setBit(reg2, UCSZ02);
			reg3 |= (0x03 << UCSZ00);
			break;
		default:
			return RESULT_USART_PARITY_UNSUPORTED;
    1194:	85 e0       	ldi	r24, 0x05	; 5
    1196:	01 c0       	rjmp	.+2      	; 0x119a <usartConfig+0xf6>
//			return RESULT_USART_BAUD_RATE_UNSUPORTED;
		UBRR0H = 0x0F & (aux64 >> 8);
		UBRR0L = (0xFF & aux64);
	}

	return RESULT_OK;
    1198:	80 e0       	ldi	r24, 0x00	; 0
}
    119a:	0f 91       	pop	r16
    119c:	ff 90       	pop	r15
    119e:	ef 90       	pop	r14
    11a0:	df 90       	pop	r13
    11a2:	cf 90       	pop	r12
    11a4:	bf 90       	pop	r11
    11a6:	af 90       	pop	r10
    11a8:	9f 90       	pop	r9
    11aa:	8f 90       	pop	r8
    11ac:	08 95       	ret

000011ae <usartEnableReceiver>:
 * Enables USART reception module
 * -------------------------------------------------------------------------- */

resultValue_t usartEnableReceiver(void)
{
	setBit(UCSR0B, RXEN0);
    11ae:	e1 ec       	ldi	r30, 0xC1	; 193
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	80 81       	ld	r24, Z
    11b4:	80 61       	ori	r24, 0x10	; 16
    11b6:	80 83       	st	Z, r24
	return RESULT_OK;
}
    11b8:	80 e0       	ldi	r24, 0x00	; 0
    11ba:	08 95       	ret

000011bc <usartDisableReceiver>:
 * Disables USART reception module
 * -------------------------------------------------------------------------- */

resultValue_t usartDisableReceiver(void)
{
	clrBit(UCSR0B, RXEN0);
    11bc:	e1 ec       	ldi	r30, 0xC1	; 193
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	80 81       	ld	r24, Z
    11c2:	8f 7e       	andi	r24, 0xEF	; 239
    11c4:	80 83       	st	Z, r24
	return RESULT_OK;
}
    11c6:	80 e0       	ldi	r24, 0x00	; 0
    11c8:	08 95       	ret

000011ca <usartEnableTransmitter>:
 * Enables USART transmission module
 * -------------------------------------------------------------------------- */

resultValue_t usartEnableTransmitter(void)
{
	setBit(UCSR0B, TXEN0);
    11ca:	e1 ec       	ldi	r30, 0xC1	; 193
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	80 81       	ld	r24, Z
    11d0:	88 60       	ori	r24, 0x08	; 8
    11d2:	80 83       	st	Z, r24
	return RESULT_OK;
}
    11d4:	80 e0       	ldi	r24, 0x00	; 0
    11d6:	08 95       	ret

000011d8 <usartDisableTransmitter>:
 * Disables USART transmission module
 * -------------------------------------------------------------------------- */

resultValue_t usartDisableTransmitter(void)
{
	clrBit(UCSR0B, TXEN0);
    11d8:	e1 ec       	ldi	r30, 0xC1	; 193
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	80 81       	ld	r24, Z
    11de:	87 7f       	andi	r24, 0xF7	; 247
    11e0:	80 83       	st	Z, r24
	return RESULT_OK;
}
    11e2:	80 e0       	ldi	r24, 0x00	; 0
    11e4:	08 95       	ret

000011e6 <usartActivateReceptionCompleteInterrupt>:
 * Activates USART reception complete interrupt
 * -------------------------------------------------------------------------- */

resultValue_t usartActivateReceptionCompleteInterrupt(void)
{
	setBit(UCSR0B, RXCIE0);
    11e6:	e1 ec       	ldi	r30, 0xC1	; 193
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	80 81       	ld	r24, Z
    11ec:	80 68       	ori	r24, 0x80	; 128
    11ee:	80 83       	st	Z, r24
	return RESULT_OK;
}
    11f0:	80 e0       	ldi	r24, 0x00	; 0
    11f2:	08 95       	ret

000011f4 <usartDeactivateReceptionCompleteInterrupt>:
 * Deactivates USART reception complete interrupt
 * -------------------------------------------------------------------------- */

resultValue_t usartDeactivateReceptionCompleteInterrupt(void)
{
	clrBit(UCSR0B, RXCIE0);
    11f4:	e1 ec       	ldi	r30, 0xC1	; 193
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	80 81       	ld	r24, Z
    11fa:	8f 77       	andi	r24, 0x7F	; 127
    11fc:	80 83       	st	Z, r24
	return RESULT_OK;
}
    11fe:	80 e0       	ldi	r24, 0x00	; 0
    1200:	08 95       	ret

00001202 <usartActivateTransmissionCompleteInterrupt>:
 * Activates USART transmission complete interrupt
 * -------------------------------------------------------------------------- */

resultValue_t usartActivateTransmissionCompleteInterrupt(void)
{
	setBit(UCSR0B, TXCIE0);
    1202:	e1 ec       	ldi	r30, 0xC1	; 193
    1204:	f0 e0       	ldi	r31, 0x00	; 0
    1206:	80 81       	ld	r24, Z
    1208:	80 64       	ori	r24, 0x40	; 64
    120a:	80 83       	st	Z, r24
	return RESULT_OK;
}
    120c:	80 e0       	ldi	r24, 0x00	; 0
    120e:	08 95       	ret

00001210 <usartDeactivateTransmissionCompleteInterrupt>:
 * Deactivates USART transmission complete interrupt
 * -------------------------------------------------------------------------- */

resultValue_t usartDeactivateTransmissionCompleteInterrupt(void)
{
	clrBit(UCSR0B, TXCIE0);
    1210:	e1 ec       	ldi	r30, 0xC1	; 193
    1212:	f0 e0       	ldi	r31, 0x00	; 0
    1214:	80 81       	ld	r24, Z
    1216:	8f 7b       	andi	r24, 0xBF	; 191
    1218:	80 83       	st	Z, r24
	return RESULT_OK;
}
    121a:	80 e0       	ldi	r24, 0x00	; 0
    121c:	08 95       	ret

0000121e <usartActivateBufferEmptyInterrupt>:
 * Activates USART buffer empty interrupt
 * -------------------------------------------------------------------------- */

resultValue_t usartActivateBufferEmptyInterrupt(void)
{
	setBit(UCSR0B, UDRIE0);
    121e:	e1 ec       	ldi	r30, 0xC1	; 193
    1220:	f0 e0       	ldi	r31, 0x00	; 0
    1222:	80 81       	ld	r24, Z
    1224:	80 62       	ori	r24, 0x20	; 32
    1226:	80 83       	st	Z, r24
	return RESULT_OK;
}
    1228:	80 e0       	ldi	r24, 0x00	; 0
    122a:	08 95       	ret

0000122c <usartDeactivateBufferEmptyInterrupt>:
 * Deactivates USART buffer empty interrupt
 * -------------------------------------------------------------------------- */

resultValue_t usartDeactivateBufferEmptyInterrupt(void)
{
	clrBit(UCSR0B, UDRIE0);
    122c:	e1 ec       	ldi	r30, 0xC1	; 193
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	80 81       	ld	r24, Z
    1232:	8f 7d       	andi	r24, 0xDF	; 223
    1234:	80 83       	st	Z, r24
	return RESULT_OK;
}
    1236:	80 e0       	ldi	r24, 0x00	; 0
    1238:	08 95       	ret

0000123a <usartStdio>:
 * Changes the std handlers to usart module
 * -------------------------------------------------------------------------- */

resultValue_t usartStdio(void)
{
	stdin = stdout = stderr = &usartStream;
    123a:	8a e0       	ldi	r24, 0x0A	; 10
    123c:	91 e0       	ldi	r25, 0x01	; 1
    123e:	90 93 5a 01 	sts	0x015A, r25
    1242:	80 93 59 01 	sts	0x0159, r24
    1246:	90 93 58 01 	sts	0x0158, r25
    124a:	80 93 57 01 	sts	0x0157, r24
    124e:	90 93 56 01 	sts	0x0156, r25
    1252:	80 93 55 01 	sts	0x0155, r24
	return RESULT_OK;
}
    1256:	80 e0       	ldi	r24, 0x00	; 0
    1258:	08 95       	ret

0000125a <usartIsReceptionComplete>:
 * Checks if a reception has been completed
 * -------------------------------------------------------------------------- */

bool_t usartIsReceptionComplete(void)
{
	return isBitSet(UCSR0A, RXC0);
    125a:	80 91 c0 00 	lds	r24, 0x00C0
}
    125e:	88 1f       	adc	r24, r24
    1260:	88 27       	eor	r24, r24
    1262:	88 1f       	adc	r24, r24
    1264:	08 95       	ret

00001266 <usartIsTransmissionComplete>:
 * Checks if a transmission has been completed
 * -------------------------------------------------------------------------- */

bool_t usartIsTransmissionComplete(void)
{
	return isBitSet(UCSR0A, TXC0);
    1266:	80 91 c0 00 	lds	r24, 0x00C0
}
    126a:	86 fb       	bst	r24, 6
    126c:	88 27       	eor	r24, r24
    126e:	80 f9       	bld	r24, 0
    1270:	08 95       	ret

00001272 <usartIsBufferEmpty>:
 * Checks if the buffer is empty
 * -------------------------------------------------------------------------- */

bool_t usartIsBufferEmpty(void)
{
	return isBitSet(UCSR0A, UDRE0);
    1272:	80 91 c0 00 	lds	r24, 0x00C0
}
    1276:	85 fb       	bst	r24, 5
    1278:	88 27       	eor	r24, r24
    127a:	80 f9       	bld	r24, 0
    127c:	08 95       	ret

0000127e <usartTransmitStd>:
 * Transmits data in 5, 6, 7 or 8 bits modes using the USART controller and
 * standard output heandler
 * -------------------------------------------------------------------------- */

resultValue_t usartTransmitStd(int8 data, FILE * stream)
{
    127e:	cf 93       	push	r28
    1280:	c8 2f       	mov	r28, r24
	while(!usartIsBufferEmpty())
    1282:	0e 94 39 09 	call	0x1272	; 0x1272 <usartIsBufferEmpty>
    1286:	88 23       	and	r24, r24
    1288:	e1 f3       	breq	.-8      	; 0x1282 <usartTransmitStd+0x4>
		;	// Waits until last transmission ends
	UDR0 = data;
    128a:	c0 93 c6 00 	sts	0x00C6, r28
	return RESULT_OK;
}
    128e:	80 e0       	ldi	r24, 0x00	; 0
    1290:	cf 91       	pop	r28
    1292:	08 95       	ret

00001294 <usartCheckError>:

usartError_t usartCheckError(void)
{
	usartError_t error = 0;

	if(isBitSet(UCSR0A, FE0))
    1294:	80 91 c0 00 	lds	r24, 0x00C0
    1298:	84 fd       	sbrc	r24, 4
    129a:	02 c0       	rjmp	.+4      	; 0x12a0 <usartCheckError+0xc>
 * Checks if an error occurred during transmission or reception
 * -------------------------------------------------------------------------- */

usartError_t usartCheckError(void)
{
	usartError_t error = 0;
    129c:	80 e0       	ldi	r24, 0x00	; 0
    129e:	01 c0       	rjmp	.+2      	; 0x12a2 <usartCheckError+0xe>

	if(isBitSet(UCSR0A, FE0))
		error |= USART_FRAME_ERROR;
    12a0:	82 e0       	ldi	r24, 0x02	; 2
	if(isBitSet(UCSR0A, DOR0))
    12a2:	90 91 c0 00 	lds	r25, 0x00C0
    12a6:	93 fd       	sbrc	r25, 3
		error |= USART_PARITY_ERROR;
    12a8:	84 60       	ori	r24, 0x04	; 4
	if(isBitSet(UCSR0A, UPE0))
    12aa:	90 91 c0 00 	lds	r25, 0x00C0
    12ae:	92 ff       	sbrs	r25, 2
    12b0:	02 c0       	rjmp	.+4      	; 0x12b6 <usartCheckError+0x22>
		error |= USART_BUFFER_OVERFLOW_ERROR;
    12b2:	88 60       	ori	r24, 0x08	; 8
    12b4:	08 95       	ret

	if(error == 0)
    12b6:	81 11       	cpse	r24, r1
    12b8:	01 c0       	rjmp	.+2      	; 0x12bc <usartCheckError+0x28>
		return USART_OK;
    12ba:	81 e0       	ldi	r24, 0x01	; 1
	return error;
}
    12bc:	08 95       	ret

000012be <usartTransmit>:
/* -----------------------------------------------------------------------------
 * Transmits data in 5, 6, 7 or 8 bits modes using the USART controller
 * -------------------------------------------------------------------------- */

resultValue_t usartTransmit(int8 data)
{
    12be:	cf 93       	push	r28
    12c0:	c8 2f       	mov	r28, r24
	while(!usartIsBufferEmpty())
    12c2:	0e 94 39 09 	call	0x1272	; 0x1272 <usartIsBufferEmpty>
    12c6:	88 23       	and	r24, r24
    12c8:	e1 f3       	breq	.-8      	; 0x12c2 <usartTransmit+0x4>
		;	// Waits until last transmission ends
	UDR0 = data;
    12ca:	c0 93 c6 00 	sts	0x00C6, r28
	return RESULT_OK;
}
    12ce:	80 e0       	ldi	r24, 0x00	; 0
    12d0:	cf 91       	pop	r28
    12d2:	08 95       	ret

000012d4 <usartTransmit9bits>:
/* -----------------------------------------------------------------------------
 * Transmits data in 9 bits mode using the USART controller
 * -------------------------------------------------------------------------- */

resultValue_t usartTransmit9bits(uint16 data)
{
    12d4:	cf 93       	push	r28
    12d6:	df 93       	push	r29
    12d8:	ec 01       	movw	r28, r24
	uint8 aux;

	while(!usartIsBufferEmpty())
    12da:	0e 94 39 09 	call	0x1272	; 0x1272 <usartIsBufferEmpty>
    12de:	88 23       	and	r24, r24
    12e0:	e1 f3       	breq	.-8      	; 0x12da <usartTransmit9bits+0x6>
		;	// Waits until last transmission ends
	aux = ((data & 0x100) >> 8);
    12e2:	ce 01       	movw	r24, r28
    12e4:	88 27       	eor	r24, r24
    12e6:	91 70       	andi	r25, 0x01	; 1
	if(aux)
		setBit(UCSR0B, TXB80);
    12e8:	80 91 c1 00 	lds	r24, 0x00C1
	uint8 aux;

	while(!usartIsBufferEmpty())
		;	// Waits until last transmission ends
	aux = ((data & 0x100) >> 8);
	if(aux)
    12ec:	99 23       	and	r25, r25
    12ee:	11 f0       	breq	.+4      	; 0x12f4 <usartTransmit9bits+0x20>
		setBit(UCSR0B, TXB80);
    12f0:	81 60       	ori	r24, 0x01	; 1
    12f2:	01 c0       	rjmp	.+2      	; 0x12f6 <usartTransmit9bits+0x22>
	else
		clrBit(UCSR0B, TXB80);
    12f4:	8e 7f       	andi	r24, 0xFE	; 254
    12f6:	80 93 c1 00 	sts	0x00C1, r24
	UDR0 = (uint8)data;
    12fa:	c0 93 c6 00 	sts	0x00C6, r28
	return RESULT_OK;
}
    12fe:	80 e0       	ldi	r24, 0x00	; 0
    1300:	df 91       	pop	r29
    1302:	cf 91       	pop	r28
    1304:	08 95       	ret

00001306 <usartReceive>:
 * Checks if a reception has been completed
 * -------------------------------------------------------------------------- */

bool_t usartIsReceptionComplete(void)
{
	return isBitSet(UCSR0A, RXC0);
    1306:	80 91 c0 00 	lds	r24, 0x00C0

uint8 usartReceive(void)
{
	uint8 status;

	while(!usartIsReceptionComplete())
    130a:	87 ff       	sbrs	r24, 7
    130c:	fc cf       	rjmp	.-8      	; 0x1306 <usartReceive>
		;	// Waits until last reception ends
	status = UCSR0A;
    130e:	80 91 c0 00 	lds	r24, 0x00C0
	return UDR0;
    1312:	80 91 c6 00 	lds	r24, 0x00C6
}
    1316:	08 95       	ret

00001318 <usartReceive9bits>:
 * Checks if a reception has been completed
 * -------------------------------------------------------------------------- */

bool_t usartIsReceptionComplete(void)
{
	return isBitSet(UCSR0A, RXC0);
    1318:	80 91 c0 00 	lds	r24, 0x00C0
	uint8 status;
	uint8 byteh;
	uint8 bytel;
	uint16 byte;

	while(!usartIsReceptionComplete())
    131c:	87 ff       	sbrs	r24, 7
    131e:	fc cf       	rjmp	.-8      	; 0x1318 <usartReceive9bits>
		;	// Waits until last reception ends
	status = UCSR0A;
    1320:	80 91 c0 00 	lds	r24, 0x00C0
	byteh = UCSR0B;
    1324:	80 91 c1 00 	lds	r24, 0x00C1
	bytel = UDR0;
    1328:	20 91 c6 00 	lds	r18, 0x00C6

	byte = (uint16)(byteh & 0x02) << 7;
    132c:	82 70       	andi	r24, 0x02	; 2
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	96 95       	lsr	r25
    1332:	98 2f       	mov	r25, r24
    1334:	88 27       	eor	r24, r24
    1336:	97 95       	ror	r25
    1338:	87 95       	ror	r24
	byte |= bytel;
	return  byte;
}
    133a:	82 2b       	or	r24, r18
    133c:	08 95       	ret

0000133e <usartClearReceptionBuffer>:
 * Checks if a reception has been completed
 * -------------------------------------------------------------------------- */

bool_t usartIsReceptionComplete(void)
{
	return isBitSet(UCSR0A, RXC0);
    133e:	80 91 c0 00 	lds	r24, 0x00C0
 * -------------------------------------------------------------------------- */

void usartClearReceptionBuffer(void)
{
	uint8 aux;
	while(usartIsReceptionComplete())
    1342:	87 ff       	sbrs	r24, 7
    1344:	03 c0       	rjmp	.+6      	; 0x134c <usartClearReceptionBuffer+0xe>
		aux = UDR0;
    1346:	80 91 c6 00 	lds	r24, 0x00C6
    134a:	f9 cf       	rjmp	.-14     	; 0x133e <usartClearReceptionBuffer>
	return;
}
    134c:	08 95       	ret

0000134e <usartAddDataToReceiverBuffer>:
/* -----------------------------------------------------------------------------
 * Adds data to the reception buffer. The function has NO CONTROL of lost data.
 * -------------------------------------------------------------------------- */

void usartAddDataToReceiverBuffer(uint8 data)
{
    134e:	ff 92       	push	r15
    1350:	0f 93       	push	r16
    1352:	1f 93       	push	r17
    1354:	cf 93       	push	r28
    1356:	df 93       	push	r29
    1358:	f8 2e       	mov	r15, r24
	if(((usartReceiverBufferNextWrite + 1) % USART_RECEIVER_BUFFER_SIZE) != usartReceiverBufferNextRead){
    135a:	c0 91 52 01 	lds	r28, 0x0152
    135e:	d0 e0       	ldi	r29, 0x00	; 0
    1360:	be 01       	movw	r22, r28
    1362:	6f 5f       	subi	r22, 0xFF	; 255
    1364:	7f 4f       	sbci	r23, 0xFF	; 255
    1366:	88 27       	eor	r24, r24
    1368:	77 fd       	sbrc	r23, 7
    136a:	80 95       	com	r24
    136c:	98 2f       	mov	r25, r24
    136e:	22 e3       	ldi	r18, 0x32	; 50
    1370:	30 e0       	ldi	r19, 0x00	; 0
    1372:	40 e0       	ldi	r20, 0x00	; 0
    1374:	50 e0       	ldi	r21, 0x00	; 0
    1376:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <__udivmodsi4>
    137a:	00 91 54 01 	lds	r16, 0x0154
    137e:	10 e0       	ldi	r17, 0x00	; 0
    1380:	20 e0       	ldi	r18, 0x00	; 0
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	60 17       	cp	r22, r16
    1386:	71 07       	cpc	r23, r17
    1388:	82 07       	cpc	r24, r18
    138a:	93 07       	cpc	r25, r19
    138c:	51 f0       	breq	.+20     	; 0x13a2 <usartAddDataToReceiverBuffer+0x54>
		usartReceiverBuffer[usartReceiverBufferNextWrite] = data;
    138e:	c0 5e       	subi	r28, 0xE0	; 224
    1390:	de 4f       	sbci	r29, 0xFE	; 254
    1392:	f8 82       	st	Y, r15
		usartReceiverBufferNextWrite = (usartReceiverBufferNextWrite + 1) % USART_RECEIVER_BUFFER_SIZE;
    1394:	60 93 52 01 	sts	0x0152, r22
		usartReceiverBufferLength++;
    1398:	80 91 53 01 	lds	r24, 0x0153
    139c:	8f 5f       	subi	r24, 0xFF	; 255
    139e:	80 93 53 01 	sts	0x0153, r24
	}
	return;
}
    13a2:	df 91       	pop	r29
    13a4:	cf 91       	pop	r28
    13a6:	1f 91       	pop	r17
    13a8:	0f 91       	pop	r16
    13aa:	ff 90       	pop	r15
    13ac:	08 95       	ret

000013ae <usartGetDataFromReceiverBuffer>:
 * usartIsReceiverBufferEmpty() function must be called to check if there is new
 * data in the buffer.
 * -------------------------------------------------------------------------- */

uint8 usartGetDataFromReceiverBuffer(void)
{
    13ae:	cf 93       	push	r28
    13b0:	df 93       	push	r29
	uint8 data = usartReceiverBuffer[usartReceiverBufferNextRead];
    13b2:	60 91 54 01 	lds	r22, 0x0154
    13b6:	70 e0       	ldi	r23, 0x00	; 0
    13b8:	fb 01       	movw	r30, r22
    13ba:	e0 5e       	subi	r30, 0xE0	; 224
    13bc:	fe 4f       	sbci	r31, 0xFE	; 254
    13be:	d0 81       	ld	r29, Z
	if(usartReceiverBufferLength > 0){
    13c0:	c0 91 53 01 	lds	r28, 0x0153
    13c4:	cc 23       	and	r28, r28
    13c6:	89 f0       	breq	.+34     	; 0x13ea <usartGetDataFromReceiverBuffer+0x3c>
		usartReceiverBufferNextRead = (usartReceiverBufferNextRead + 1) % USART_RECEIVER_BUFFER_SIZE;
    13c8:	6f 5f       	subi	r22, 0xFF	; 255
    13ca:	7f 4f       	sbci	r23, 0xFF	; 255
    13cc:	88 27       	eor	r24, r24
    13ce:	77 fd       	sbrc	r23, 7
    13d0:	80 95       	com	r24
    13d2:	98 2f       	mov	r25, r24
    13d4:	22 e3       	ldi	r18, 0x32	; 50
    13d6:	30 e0       	ldi	r19, 0x00	; 0
    13d8:	40 e0       	ldi	r20, 0x00	; 0
    13da:	50 e0       	ldi	r21, 0x00	; 0
    13dc:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <__udivmodsi4>
    13e0:	60 93 54 01 	sts	0x0154, r22
		usartReceiverBufferLength--;
    13e4:	c1 50       	subi	r28, 0x01	; 1
    13e6:	c0 93 53 01 	sts	0x0153, r28
	}
	return data;
}
    13ea:	8d 2f       	mov	r24, r29
    13ec:	df 91       	pop	r29
    13ee:	cf 91       	pop	r28
    13f0:	08 95       	ret

000013f2 <usartIsReceiverBufferEmpty>:
 * reading the buffer.
 * -------------------------------------------------------------------------- */

uint8 usartIsReceiverBufferEmpty(void)
{
	if(usartReceiverBufferLength == 0)
    13f2:	81 e0       	ldi	r24, 0x01	; 1
    13f4:	90 91 53 01 	lds	r25, 0x0153
    13f8:	91 11       	cpse	r25, r1
    13fa:	80 e0       	ldi	r24, 0x00	; 0
		return TRUE;
	return FALSE;
}
    13fc:	08 95       	ret

000013fe <usartGetCurrentBaudRate>:
//	case 2:
//		aux32 = F_CPU / 2 / (UBRR0 + 1);
//		break;
//	}
	return aux32;
 }
    13fe:	60 e0       	ldi	r22, 0x00	; 0
    1400:	70 e0       	ldi	r23, 0x00	; 0
    1402:	cb 01       	movw	r24, r22
    1404:	08 95       	ret

00001406 <spiInit>:
/* -----------------------------------------------------------------------------
 * Configures the SPI controller
 * -------------------------------------------------------------------------- */

void spiInit(void)
{
    1406:	08 95       	ret

00001408 <spiMasterTransmit>:
 * Transmit data at the SPI bus in master mode
 * -------------------------------------------------------------------------- */

uint8 spiMasterTransmit(uint8 data)
{
	SPDR = data;
    1408:	8e bd       	out	0x2e, r24	; 46
	waitUntilBitIsClear(SPSR, SPIF);
    140a:	0d b4       	in	r0, 0x2d	; 45
    140c:	07 fc       	sbrc	r0, 7
    140e:	fd cf       	rjmp	.-6      	; 0x140a <spiMasterTransmit+0x2>
	return SPDR;
    1410:	8e b5       	in	r24, 0x2e	; 46
}
    1412:	08 95       	ret

00001414 <spiSlaveTransmit>:
 * Receives data from the SPI bus
 * -------------------------------------------------------------------------- */

uint8 spiSlaveTransmit(void)
{
	waitUntilBitIsClear(SPSR, SPIF);
    1414:	0d b4       	in	r0, 0x2d	; 45
    1416:	07 fc       	sbrc	r0, 7
    1418:	fd cf       	rjmp	.-6      	; 0x1414 <spiSlaveTransmit>
	return SPDR;
    141a:	8e b5       	in	r24, 0x2e	; 46
}
    141c:	08 95       	ret

0000141e <main>:

int main(void)
{
	
	// CONFIGURA ADC
	clrBit(DDRC,POT_BIT);		//SETA O PINO DO ADC COMO ENTRADA
    141e:	39 98       	cbi	0x07, 1	; 7
	adcConfig(ADC_MODE_SINGLE_CONVERSION, ADC_REFRENCE_POWER_SUPPLY , ADC_PRESCALER_128);
    1420:	47 e0       	ldi	r20, 0x07	; 7
    1422:	61 e0       	ldi	r22, 0x01	; 1
    1424:	80 e0       	ldi	r24, 0x00	; 0
    1426:	0e 94 b7 07 	call	0xf6e	; 0xf6e <adcConfig>
	adcSelectChannel(POT_CHANNEL);
    142a:	81 e0       	ldi	r24, 0x01	; 1
    142c:	0e 94 f8 07 	call	0xff0	; 0xff0 <adcSelectChannel>
	adcClearInterruptRequest();
    1430:	0e 94 2a 08 	call	0x1054	; 0x1054 <adcClearInterruptRequest>
	adcActivateInterrupt();
    1434:	0e 94 31 08 	call	0x1062	; 0x1062 <adcActivateInterrupt>
	adcEnable();
    1438:	0e 94 1c 08 	call	0x1038	; 0x1038 <adcEnable>
	adcStartConversion();
    143c:	0e 94 3f 08 	call	0x107e	; 0x107e <adcStartConversion>
	
	// CONFIGURA PWM
	timer1Config(TIMER_B_MODE_CTC, TIMER_A_PRESCALER_64);
    1440:	63 e0       	ldi	r22, 0x03	; 3
    1442:	84 e0       	ldi	r24, 0x04	; 4
    1444:	0e 94 6e 06 	call	0xcdc	; 0xcdc <timer1Config>
	timer1ClearCompareBInterruptRequest();									
    1448:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <timer1ClearCompareBInterruptRequest>
	timer1ClearCompareAInterruptRequest();
    144c:	0e 94 c8 06 	call	0xd90	; 0xd90 <timer1ClearCompareAInterruptRequest>
	timer1ActivateCompareBInterrupt();									//ativa a interrupcao do compA
    1450:	0e 94 cb 06 	call	0xd96	; 0xd96 <timer1ActivateCompareBInterrupt>
	timer1ActivateCompareAInterrupt();									//ativa a interrupcao do compB
    1454:	0e 94 ba 06 	call	0xd74	; 0xd74 <timer1ActivateCompareAInterrupt>
	timer1SetCompareAValue((F_CPU/64)/freq);							//valor do comparador A,  define a frequencia
    1458:	20 91 07 01 	lds	r18, 0x0107
    145c:	30 91 08 01 	lds	r19, 0x0108
    1460:	40 e0       	ldi	r20, 0x00	; 0
    1462:	50 e0       	ldi	r21, 0x00	; 0
    1464:	60 e9       	ldi	r22, 0x90	; 144
    1466:	70 ed       	ldi	r23, 0xD0	; 208
    1468:	83 e0       	ldi	r24, 0x03	; 3
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <__udivmodsi4>
    1470:	c9 01       	movw	r24, r18
    1472:	0e 94 09 07 	call	0xe12	; 0xe12 <timer1SetCompareAValue>
	timer1SetCompareBValue((dc * (timer1GetCompareAValue()))/100);		//valor do comparador B,  define Duty Cicle
    1476:	c0 91 1b 01 	lds	r28, 0x011B
    147a:	d0 e0       	ldi	r29, 0x00	; 0
    147c:	0e 94 12 07 	call	0xe24	; 0xe24 <timer1GetCompareAValue>
    1480:	9c 01       	movw	r18, r24
    1482:	2c 9f       	mul	r18, r28
    1484:	c0 01       	movw	r24, r0
    1486:	2d 9f       	mul	r18, r29
    1488:	90 0d       	add	r25, r0
    148a:	3c 9f       	mul	r19, r28
    148c:	90 0d       	add	r25, r0
    148e:	11 24       	eor	r1, r1
    1490:	64 e6       	ldi	r22, 0x64	; 100
    1492:	70 e0       	ldi	r23, 0x00	; 0
    1494:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <__udivmodhi4>
    1498:	cb 01       	movw	r24, r22
    149a:	0e 94 17 07 	call	0xe2e	; 0xe2e <timer1SetCompareBValue>

	// CONFIGURA A INTERRUPÇÃO DE CONTROLE(60Hz)
	timer0Config(TIMER_A_MODE_NORMAL, TIMER_A_PRESCALER_1024);			
    149e:	65 e0       	ldi	r22, 0x05	; 5
    14a0:	80 e0       	ldi	r24, 0x00	; 0
    14a2:	0e 94 c9 05 	call	0xb92	; 0xb92 <timer0Config>
	timer0ClearOverflowInterruptRequest();								//limpa a interrupcao de OVF
    14a6:	0e 94 3c 06 	call	0xc78	; 0xc78 <timer0ClearOverflowInterruptRequest>
	timer0ActivateOverflowInterrupt();							
    14aa:	0e 94 30 06 	call	0xc60	; 0xc60 <timer0ActivateOverflowInterrupt>
		
	sei();
    14ae:	78 94       	sei
	
	setBit(PWM_DDR,PWM_BIT);			//define o pino do pwm como saída
    14b0:	21 9a       	sbi	0x04, 1	; 4

	setBit(ON_PORT,ON_BIT);				//habilita o pull-up da chave on
    14b2:	5d 9a       	sbi	0x0b, 5	; 11
	setBit(DMS_PORT,DMS_BIT);			//habilita o pull-up da chave dms
    14b4:	5c 9a       	sbi	0x0b, 4	; 11

//configura o buzzer e da sinal de alerta de ligação
	setBit(BUZZER_DDR,BUZZER_BIT);			
    14b6:	3c 9a       	sbi	0x07, 4	; 7
	setBit(BUZZER_PORT,BUZZER_BIT);
    14b8:	44 9a       	sbi	0x08, 4	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    14ba:	3f ef       	ldi	r19, 0xFF	; 255
    14bc:	83 ed       	ldi	r24, 0xD3	; 211
    14be:	90 e3       	ldi	r25, 0x30	; 48
    14c0:	31 50       	subi	r19, 0x01	; 1
    14c2:	80 40       	sbci	r24, 0x00	; 0
    14c4:	90 40       	sbci	r25, 0x00	; 0
    14c6:	e1 f7       	brne	.-8      	; 0x14c0 <main+0xa2>
    14c8:	00 c0       	rjmp	.+0      	; 0x14ca <main+0xac>
    14ca:	00 00       	nop
	_delay_ms(1000);
	clrBit(BUZZER_PORT,BUZZER_BIT);
    14cc:	44 98       	cbi	0x08, 4	; 8
    14ce:	ff cf       	rjmp	.-2      	; 0x14ce <main+0xb0>

000014d0 <__udivmodhi4>:
    14d0:	aa 1b       	sub	r26, r26
    14d2:	bb 1b       	sub	r27, r27
    14d4:	51 e1       	ldi	r21, 0x11	; 17
    14d6:	07 c0       	rjmp	.+14     	; 0x14e6 <__udivmodhi4_ep>

000014d8 <__udivmodhi4_loop>:
    14d8:	aa 1f       	adc	r26, r26
    14da:	bb 1f       	adc	r27, r27
    14dc:	a6 17       	cp	r26, r22
    14de:	b7 07       	cpc	r27, r23
    14e0:	10 f0       	brcs	.+4      	; 0x14e6 <__udivmodhi4_ep>
    14e2:	a6 1b       	sub	r26, r22
    14e4:	b7 0b       	sbc	r27, r23

000014e6 <__udivmodhi4_ep>:
    14e6:	88 1f       	adc	r24, r24
    14e8:	99 1f       	adc	r25, r25
    14ea:	5a 95       	dec	r21
    14ec:	a9 f7       	brne	.-22     	; 0x14d8 <__udivmodhi4_loop>
    14ee:	80 95       	com	r24
    14f0:	90 95       	com	r25
    14f2:	bc 01       	movw	r22, r24
    14f4:	cd 01       	movw	r24, r26
    14f6:	08 95       	ret

000014f8 <__udivmodsi4>:
    14f8:	a1 e2       	ldi	r26, 0x21	; 33
    14fa:	1a 2e       	mov	r1, r26
    14fc:	aa 1b       	sub	r26, r26
    14fe:	bb 1b       	sub	r27, r27
    1500:	fd 01       	movw	r30, r26
    1502:	0d c0       	rjmp	.+26     	; 0x151e <__udivmodsi4_ep>

00001504 <__udivmodsi4_loop>:
    1504:	aa 1f       	adc	r26, r26
    1506:	bb 1f       	adc	r27, r27
    1508:	ee 1f       	adc	r30, r30
    150a:	ff 1f       	adc	r31, r31
    150c:	a2 17       	cp	r26, r18
    150e:	b3 07       	cpc	r27, r19
    1510:	e4 07       	cpc	r30, r20
    1512:	f5 07       	cpc	r31, r21
    1514:	20 f0       	brcs	.+8      	; 0x151e <__udivmodsi4_ep>
    1516:	a2 1b       	sub	r26, r18
    1518:	b3 0b       	sbc	r27, r19
    151a:	e4 0b       	sbc	r30, r20
    151c:	f5 0b       	sbc	r31, r21

0000151e <__udivmodsi4_ep>:
    151e:	66 1f       	adc	r22, r22
    1520:	77 1f       	adc	r23, r23
    1522:	88 1f       	adc	r24, r24
    1524:	99 1f       	adc	r25, r25
    1526:	1a 94       	dec	r1
    1528:	69 f7       	brne	.-38     	; 0x1504 <__udivmodsi4_loop>
    152a:	60 95       	com	r22
    152c:	70 95       	com	r23
    152e:	80 95       	com	r24
    1530:	90 95       	com	r25
    1532:	9b 01       	movw	r18, r22
    1534:	ac 01       	movw	r20, r24
    1536:	bd 01       	movw	r22, r26
    1538:	cf 01       	movw	r24, r30
    153a:	08 95       	ret

0000153c <__tablejump2__>:
    153c:	ee 0f       	add	r30, r30
    153e:	ff 1f       	adc	r31, r31

00001540 <__tablejump__>:
    1540:	05 90       	lpm	r0, Z+
    1542:	f4 91       	lpm	r31, Z
    1544:	e0 2d       	mov	r30, r0
    1546:	09 94       	ijmp

00001548 <__ashrdi3>:
    1548:	97 fb       	bst	r25, 7
    154a:	10 f8       	bld	r1, 0

0000154c <__lshrdi3>:
    154c:	16 94       	lsr	r1
    154e:	00 08       	sbc	r0, r0
    1550:	0f 93       	push	r16
    1552:	08 30       	cpi	r16, 0x08	; 8
    1554:	98 f0       	brcs	.+38     	; 0x157c <__lshrdi3+0x30>
    1556:	08 50       	subi	r16, 0x08	; 8
    1558:	23 2f       	mov	r18, r19
    155a:	34 2f       	mov	r19, r20
    155c:	45 2f       	mov	r20, r21
    155e:	56 2f       	mov	r21, r22
    1560:	67 2f       	mov	r22, r23
    1562:	78 2f       	mov	r23, r24
    1564:	89 2f       	mov	r24, r25
    1566:	90 2d       	mov	r25, r0
    1568:	f4 cf       	rjmp	.-24     	; 0x1552 <__lshrdi3+0x6>
    156a:	05 94       	asr	r0
    156c:	97 95       	ror	r25
    156e:	87 95       	ror	r24
    1570:	77 95       	ror	r23
    1572:	67 95       	ror	r22
    1574:	57 95       	ror	r21
    1576:	47 95       	ror	r20
    1578:	37 95       	ror	r19
    157a:	27 95       	ror	r18
    157c:	0a 95       	dec	r16
    157e:	aa f7       	brpl	.-22     	; 0x156a <__lshrdi3+0x1e>
    1580:	0f 91       	pop	r16
    1582:	08 95       	ret

00001584 <_exit>:
    1584:	f8 94       	cli

00001586 <__stop_program>:
    1586:	ff cf       	rjmp	.-2      	; 0x1586 <__stop_program>
