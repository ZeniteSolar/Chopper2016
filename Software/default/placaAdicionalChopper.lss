
placaAdicionalChopper.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003c  00800100  00001b08  00001b9c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b08  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000046  0080013c  0080013c  00001bd8  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00001bd8  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00001be9  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000033be  00000000  00000000  00001c31  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006c5  00000000  00000000  00004fef  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000816  00000000  00000000  000056b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000de8  00000000  00000000  00005ecc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00002575  00000000  00000000  00006cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001b1d  00000000  00000000  00009229  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  0000ad46  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__ctors_end>
       4:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
       8:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
       c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      10:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      14:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      18:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      1c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      20:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      24:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      28:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      2c:	0c 94 c4 01 	jmp	0x388	; 0x388 <__vector_11>
      30:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__vector_12>
      34:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      38:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      3c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      40:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <__vector_16>
      44:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      48:	0c 94 7f 02 	jmp	0x4fe	; 0x4fe <__vector_18>
      4c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      50:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      54:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__vector_21>
      58:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      5c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      60:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      64:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      68:	10 0c       	add	r1, r0
      6a:	13 0c       	add	r1, r3
      6c:	1d 0c       	add	r1, r13
      6e:	20 0c       	add	r2, r0
      70:	23 0c       	add	r2, r3
      72:	26 0c       	add	r2, r6
      74:	29 0c       	add	r2, r9
      76:	30 0c       	add	r3, r0
      78:	37 0c       	add	r3, r7
      7a:	3a 0c       	add	r3, r10
      7c:	3d 0c       	add	r3, r13
      7e:	40 0c       	add	r4, r0
      80:	43 0c       	add	r4, r3
      82:	46 0c       	add	r4, r6
      84:	80 0c       	add	r8, r0
      86:	b8 0c       	add	r11, r8
      88:	bf 0c       	add	r11, r15
      8a:	c6 0c       	add	r12, r6
      8c:	d1 0c       	add	r13, r1
      8e:	d8 0c       	add	r13, r8
      90:	e5 0c       	add	r14, r5
      92:	f4 0c       	add	r15, r4
      94:	fb 0c       	add	r15, r11
      96:	02 0d       	add	r16, r2
      98:	ba 02       	muls	r27, r26
      9a:	ca 02       	muls	r28, r26
      9c:	bc 02       	muls	r27, r28
      9e:	be 02       	muls	r27, r30
      a0:	c0 02       	muls	r28, r16
      a2:	c2 02       	muls	r28, r18
      a4:	c4 02       	muls	r28, r20
      a6:	c6 02       	muls	r28, r22
      a8:	c8 02       	muls	r28, r24
      aa:	ed 06       	cpc	r14, r29
      ac:	e0 06       	cpc	r14, r16
      ae:	e2 06       	cpc	r14, r18
      b0:	e4 06       	cpc	r14, r20
      b2:	e6 06       	cpc	r14, r22
      b4:	e8 06       	cpc	r14, r24
      b6:	ea 06       	cpc	r14, r26
      b8:	ec 06       	cpc	r14, r28
      ba:	e8 08       	sbc	r14, r8
      bc:	ea 08       	sbc	r14, r10
      be:	ec 08       	sbc	r14, r12
      c0:	ee 08       	sbc	r14, r14
      c2:	f0 08       	sbc	r15, r0
      c4:	f2 08       	sbc	r15, r2
      c6:	f4 08       	sbc	r15, r4

000000c8 <__ctors_end>:
      c8:	11 24       	eor	r1, r1
      ca:	1f be       	out	0x3f, r1	; 63
      cc:	cf ef       	ldi	r28, 0xFF	; 255
      ce:	d8 e0       	ldi	r29, 0x08	; 8
      d0:	de bf       	out	0x3e, r29	; 62
      d2:	cd bf       	out	0x3d, r28	; 61

000000d4 <__do_copy_data>:
      d4:	11 e0       	ldi	r17, 0x01	; 1
      d6:	a0 e0       	ldi	r26, 0x00	; 0
      d8:	b1 e0       	ldi	r27, 0x01	; 1
      da:	e8 e0       	ldi	r30, 0x08	; 8
      dc:	fb e1       	ldi	r31, 0x1B	; 27
      de:	02 c0       	rjmp	.+4      	; 0xe4 <__do_copy_data+0x10>
      e0:	05 90       	lpm	r0, Z+
      e2:	0d 92       	st	X+, r0
      e4:	ac 33       	cpi	r26, 0x3C	; 60
      e6:	b1 07       	cpc	r27, r17
      e8:	d9 f7       	brne	.-10     	; 0xe0 <__do_copy_data+0xc>

000000ea <__do_clear_bss>:
      ea:	21 e0       	ldi	r18, 0x01	; 1
      ec:	ac e3       	ldi	r26, 0x3C	; 60
      ee:	b1 e0       	ldi	r27, 0x01	; 1
      f0:	01 c0       	rjmp	.+2      	; 0xf4 <.do_clear_bss_start>

000000f2 <.do_clear_bss_loop>:
      f2:	1d 92       	st	X+, r1

000000f4 <.do_clear_bss_start>:
      f4:	a2 38       	cpi	r26, 0x82	; 130
      f6:	b2 07       	cpc	r27, r18
      f8:	e1 f7       	brne	.-8      	; 0xf2 <.do_clear_bss_loop>
      fa:	0e 94 17 0b 	call	0x162e	; 0x162e <main>
      fe:	0c 94 82 0d 	jmp	0x1b04	; 0x1b04 <_exit>

00000102 <__bad_interrupt>:
     102:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000106 <seta_dc>:
uint8 maxTemp = 70;				//temperatura maxima, desliga o sistema
uint8 criticalTemp = 60;		//temperatura critica
uint8 minVotage = 30;

void seta_dc(uint8 d_cycle)		//função para definição do Duty Cicle do PWM
{
     106:	cf 93       	push	r28
     108:	c8 2f       	mov	r28, r24
	if(d_cycle < minDC)				// Comparação com o valor mínimo de Duty Cicle
     10a:	80 91 05 01 	lds	r24, 0x0105
     10e:	c8 17       	cp	r28, r24
     110:	18 f4       	brcc	.+6      	; 0x118 <seta_dc+0x12>
		status.dc = 0;
     112:	10 92 43 01 	sts	0x0143, r1
     116:	1a c0       	rjmp	.+52     	; 0x14c <seta_dc+0x46>
	else
	{
		if(d_cycle > maxDC)			//Comparação com o valor máximo de Duty Cicle
     118:	80 91 04 01 	lds	r24, 0x0104
     11c:	8c 17       	cp	r24, r28
     11e:	20 f4       	brcc	.+8      	; 0x128 <seta_dc+0x22>
			status.dc = 100;
     120:	84 e6       	ldi	r24, 0x64	; 100
     122:	80 93 43 01 	sts	0x0143, r24
     126:	12 c0       	rjmp	.+36     	; 0x14c <seta_dc+0x46>
		else
		{
			status.dc = d_cycle;
     128:	c0 93 43 01 	sts	0x0143, r28
			timer1SetCompareBValue((status.dc * (timer1GetCompareAValue()))/100);		//seta o valor do comparador B para gerar o DC requerido
     12c:	0e 94 1a 08 	call	0x1034	; 0x1034 <timer1GetCompareAValue>
     130:	9c 01       	movw	r18, r24
     132:	c2 9f       	mul	r28, r18
     134:	c0 01       	movw	r24, r0
     136:	c3 9f       	mul	r28, r19
     138:	90 0d       	add	r25, r0
     13a:	11 24       	eor	r1, r1
     13c:	64 e6       	ldi	r22, 0x64	; 100
     13e:	70 e0       	ldi	r23, 0x00	; 0
     140:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <__udivmodhi4>
     144:	cb 01       	movw	r24, r22
		}
	}
}
     146:	cf 91       	pop	r28
		if(d_cycle > maxDC)			//Comparação com o valor máximo de Duty Cicle
			status.dc = 100;
		else
		{
			status.dc = d_cycle;
			timer1SetCompareBValue((status.dc * (timer1GetCompareAValue()))/100);		//seta o valor do comparador B para gerar o DC requerido
     148:	0c 94 1f 08 	jmp	0x103e	; 0x103e <timer1SetCompareBValue>
		}
	}
}
     14c:	cf 91       	pop	r28
     14e:	08 95       	ret

00000150 <esvaziaBuffer>:
}

//esvazia o buffer de entrada da usart
void esvaziaBuffer()
{
	while(!usartIsReceiverBufferEmpty())
     150:	0e 94 01 0b 	call	0x1602	; 0x1602 <usartIsReceiverBufferEmpty>
     154:	81 11       	cpse	r24, r1
     156:	03 c0       	rjmp	.+6      	; 0x15e <esvaziaBuffer+0xe>
		usartGetDataFromReceiverBuffer();
     158:	0e 94 df 0a 	call	0x15be	; 0x15be <usartGetDataFromReceiverBuffer>
     15c:	f9 cf       	rjmp	.-14     	; 0x150 <esvaziaBuffer>
}
     15e:	08 95       	ret

00000160 <stringTransmit>:

//envia uma msg usando o protocolo GUI
void stringTransmit(char* texto)
{
     160:	1f 93       	push	r17
     162:	cf 93       	push	r28
     164:	df 93       	push	r29
     166:	ec 01       	movw	r28, r24
	uint8 i = 0;
	usartTransmit(INICIODOPACOTE);
     168:	80 e4       	ldi	r24, 0x40	; 64
     16a:	0e 94 67 0a 	call	0x14ce	; 0x14ce <usartTransmit>
	for(i = 0; texto[i] != '\0'; i++)
     16e:	10 e0       	ldi	r17, 0x00	; 0
     170:	fe 01       	movw	r30, r28
     172:	e1 0f       	add	r30, r17
     174:	f1 1d       	adc	r31, r1
     176:	80 81       	ld	r24, Z
     178:	88 23       	and	r24, r24
     17a:	21 f0       	breq	.+8      	; 0x184 <stringTransmit+0x24>
		usartTransmit(texto[i]);
     17c:	0e 94 67 0a 	call	0x14ce	; 0x14ce <usartTransmit>
//envia uma msg usando o protocolo GUI
void stringTransmit(char* texto)
{
	uint8 i = 0;
	usartTransmit(INICIODOPACOTE);
	for(i = 0; texto[i] != '\0'; i++)
     180:	1f 5f       	subi	r17, 0xFF	; 255
     182:	f6 cf       	rjmp	.-20     	; 0x170 <stringTransmit+0x10>
		usartTransmit(texto[i]);
	usartTransmit(FINALDOPACOTE);
     184:	8a e2       	ldi	r24, 0x2A	; 42
}
     186:	df 91       	pop	r29
     188:	cf 91       	pop	r28
     18a:	1f 91       	pop	r17
{
	uint8 i = 0;
	usartTransmit(INICIODOPACOTE);
	for(i = 0; texto[i] != '\0'; i++)
		usartTransmit(texto[i]);
	usartTransmit(FINALDOPACOTE);
     18c:	0c 94 67 0a 	jmp	0x14ce	; 0x14ce <usartTransmit>

00000190 <uint16ToString4>:
}

//convert uint16 to string of 4 characters
void uint16ToString4(char* str,uint16 value)
{
     190:	0f 93       	push	r16
     192:	1f 93       	push	r17
     194:	cf 93       	push	r28
     196:	df 93       	push	r29
     198:	fc 01       	movw	r30, r24
     19a:	9b 01       	movw	r18, r22
	str[4] = '\0';
     19c:	14 82       	std	Z+4, r1	; 0x04
	str[3] = (char ) (value%10 + 48);
     19e:	ca e0       	ldi	r28, 0x0A	; 10
     1a0:	d0 e0       	ldi	r29, 0x00	; 0
     1a2:	cb 01       	movw	r24, r22
     1a4:	be 01       	movw	r22, r28
     1a6:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <__udivmodhi4>
     1aa:	80 5d       	subi	r24, 0xD0	; 208
     1ac:	83 83       	std	Z+3, r24	; 0x03
	str[2] = (char) ((value%100) / 10 + 48);
     1ae:	04 e6       	ldi	r16, 0x64	; 100
     1b0:	10 e0       	ldi	r17, 0x00	; 0
     1b2:	c9 01       	movw	r24, r18
     1b4:	b8 01       	movw	r22, r16
     1b6:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <__udivmodhi4>
     1ba:	be 01       	movw	r22, r28
     1bc:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <__udivmodhi4>
     1c0:	60 5d       	subi	r22, 0xD0	; 208
     1c2:	62 83       	std	Z+2, r22	; 0x02
	str[1] = (char) ((value%1000) / 100 + 48);
     1c4:	c8 ee       	ldi	r28, 0xE8	; 232
     1c6:	d3 e0       	ldi	r29, 0x03	; 3
     1c8:	c9 01       	movw	r24, r18
     1ca:	be 01       	movw	r22, r28
     1cc:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <__udivmodhi4>
     1d0:	b8 01       	movw	r22, r16
     1d2:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <__udivmodhi4>
     1d6:	60 5d       	subi	r22, 0xD0	; 208
     1d8:	61 83       	std	Z+1, r22	; 0x01
	str[0] = (char) ((value%10000) / 1000 + 48);
     1da:	c9 01       	movw	r24, r18
     1dc:	60 e1       	ldi	r22, 0x10	; 16
     1de:	77 e2       	ldi	r23, 0x27	; 39
     1e0:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <__udivmodhi4>
     1e4:	be 01       	movw	r22, r28
     1e6:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <__udivmodhi4>
     1ea:	60 5d       	subi	r22, 0xD0	; 208
     1ec:	60 83       	st	Z, r22
}
     1ee:	df 91       	pop	r29
     1f0:	cf 91       	pop	r28
     1f2:	1f 91       	pop	r17
     1f4:	0f 91       	pop	r16
     1f6:	08 95       	ret

000001f8 <uint8ToString4>:

//convert uint8 to string of 4 characters
void uint8ToString4(char* str,uint16 value)
{
     1f8:	0f 93       	push	r16
     1fa:	1f 93       	push	r17
     1fc:	cf 93       	push	r28
     1fe:	df 93       	push	r29
     200:	fc 01       	movw	r30, r24
     202:	9b 01       	movw	r18, r22
	str[4] = '\0';
     204:	14 82       	std	Z+4, r1	; 0x04
	str[3] = (char ) (value%10 + 48);
     206:	0a e0       	ldi	r16, 0x0A	; 10
     208:	10 e0       	ldi	r17, 0x00	; 0
     20a:	cb 01       	movw	r24, r22
     20c:	b8 01       	movw	r22, r16
     20e:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <__udivmodhi4>
     212:	80 5d       	subi	r24, 0xD0	; 208
     214:	83 83       	std	Z+3, r24	; 0x03
	str[2] = (char) ((value%100) / 10 + 48);
     216:	c4 e6       	ldi	r28, 0x64	; 100
     218:	d0 e0       	ldi	r29, 0x00	; 0
     21a:	c9 01       	movw	r24, r18
     21c:	be 01       	movw	r22, r28
     21e:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <__udivmodhi4>
     222:	b8 01       	movw	r22, r16
     224:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <__udivmodhi4>
     228:	60 5d       	subi	r22, 0xD0	; 208
     22a:	62 83       	std	Z+2, r22	; 0x02
	str[1] = (char) ((value%1000) / 100 + 48);
     22c:	c9 01       	movw	r24, r18
     22e:	68 ee       	ldi	r22, 0xE8	; 232
     230:	73 e0       	ldi	r23, 0x03	; 3
     232:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <__udivmodhi4>
     236:	be 01       	movw	r22, r28
     238:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <__udivmodhi4>
     23c:	60 5d       	subi	r22, 0xD0	; 208
     23e:	61 83       	std	Z+1, r22	; 0x01
	str[0] = '0';
     240:	80 e3       	ldi	r24, 0x30	; 48
     242:	80 83       	st	Z, r24
}
     244:	df 91       	pop	r29
     246:	cf 91       	pop	r28
     248:	1f 91       	pop	r17
     24a:	0f 91       	pop	r16
     24c:	08 95       	ret

0000024e <string4ToUint16>:

//convert string of 4 characters uint16
uint16 string4ToUint16(char* str)
{
     24e:	fc 01       	movw	r30, r24
	uint16 value;
	value = (uint16) (str[0]-48)*1000 + (str[1]-48)*100 
	+ (str[2]-48)*10 + str[3]-48;
     250:	23 81       	ldd	r18, Z+3	; 0x03
     252:	30 e0       	ldi	r19, 0x00	; 0

//convert string of 4 characters uint16
uint16 string4ToUint16(char* str)
{
	uint16 value;
	value = (uint16) (str[0]-48)*1000 + (str[1]-48)*100 
     254:	20 53       	subi	r18, 0x30	; 48
     256:	31 09       	sbc	r19, r1
     258:	80 81       	ld	r24, Z
     25a:	90 e0       	ldi	r25, 0x00	; 0
     25c:	c0 97       	sbiw	r24, 0x30	; 48
     25e:	68 ee       	ldi	r22, 0xE8	; 232
     260:	73 e0       	ldi	r23, 0x03	; 3
     262:	86 9f       	mul	r24, r22
     264:	a0 01       	movw	r20, r0
     266:	87 9f       	mul	r24, r23
     268:	50 0d       	add	r21, r0
     26a:	96 9f       	mul	r25, r22
     26c:	50 0d       	add	r21, r0
     26e:	11 24       	eor	r1, r1
	+ (str[2]-48)*10 + str[3]-48;
     270:	24 0f       	add	r18, r20
     272:	35 1f       	adc	r19, r21

//convert string of 4 characters uint16
uint16 string4ToUint16(char* str)
{
	uint16 value;
	value = (uint16) (str[0]-48)*1000 + (str[1]-48)*100 
     274:	81 81       	ldd	r24, Z+1	; 0x01
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	c0 97       	sbiw	r24, 0x30	; 48
     27a:	64 e6       	ldi	r22, 0x64	; 100
     27c:	68 9f       	mul	r22, r24
     27e:	a0 01       	movw	r20, r0
     280:	69 9f       	mul	r22, r25
     282:	50 0d       	add	r21, r0
     284:	11 24       	eor	r1, r1
	+ (str[2]-48)*10 + str[3]-48;
     286:	24 0f       	add	r18, r20
     288:	35 1f       	adc	r19, r21
     28a:	42 81       	ldd	r20, Z+2	; 0x02
     28c:	50 e0       	ldi	r21, 0x00	; 0
     28e:	40 53       	subi	r20, 0x30	; 48
     290:	51 09       	sbc	r21, r1
     292:	6a e0       	ldi	r22, 0x0A	; 10
     294:	64 9f       	mul	r22, r20
     296:	c0 01       	movw	r24, r0
     298:	65 9f       	mul	r22, r21
     29a:	90 0d       	add	r25, r0
     29c:	11 24       	eor	r1, r1
	return value;
}
     29e:	82 0f       	add	r24, r18
     2a0:	93 1f       	adc	r25, r19
     2a2:	08 95       	ret

000002a4 <string4Touint8>:

//convert string of 4 characters uint8
uint8 string4Touint8(char* str)
{
     2a4:	fc 01       	movw	r30, r24
	uint8 value;
	value = (uint8) ((str[1]-48)*100 
     2a6:	83 81       	ldd	r24, Z+3	; 0x03
     2a8:	80 53       	subi	r24, 0x30	; 48
     2aa:	91 81       	ldd	r25, Z+1	; 0x01
     2ac:	90 53       	subi	r25, 0x30	; 48
     2ae:	24 e6       	ldi	r18, 0x64	; 100
     2b0:	92 9f       	mul	r25, r18
     2b2:	80 0d       	add	r24, r0
     2b4:	11 24       	eor	r1, r1
	+ (str[2]-48)*10 + str[3]-48);
     2b6:	92 81       	ldd	r25, Z+2	; 0x02
     2b8:	99 0f       	add	r25, r25

//convert string of 4 characters uint8
uint8 string4Touint8(char* str)
{
	uint8 value;
	value = (uint8) ((str[1]-48)*100 
     2ba:	90 56       	subi	r25, 0x60	; 96
     2bc:	29 2f       	mov	r18, r25
     2be:	22 0f       	add	r18, r18
     2c0:	22 0f       	add	r18, r18
     2c2:	29 0f       	add	r18, r25
	+ (str[2]-48)*10 + str[3]-48);
	return value;
}
     2c4:	82 0f       	add	r24, r18
     2c6:	08 95       	ret

000002c8 <__vector_21>:
		}
    }
}

ISR(ADC_vect)
{
     2c8:	1f 92       	push	r1
     2ca:	0f 92       	push	r0
     2cc:	0f b6       	in	r0, 0x3f	; 63
     2ce:	0f 92       	push	r0
     2d0:	11 24       	eor	r1, r1
     2d2:	2f 93       	push	r18
     2d4:	3f 93       	push	r19
     2d6:	4f 93       	push	r20
     2d8:	5f 93       	push	r21
     2da:	6f 93       	push	r22
     2dc:	7f 93       	push	r23
     2de:	8f 93       	push	r24
     2e0:	9f 93       	push	r25
     2e2:	af 93       	push	r26
     2e4:	bf 93       	push	r27
     2e6:	ef 93       	push	r30
     2e8:	ff 93       	push	r31
	switch (channel)
     2ea:	80 91 07 01 	lds	r24, 0x0107
     2ee:	81 30       	cpi	r24, 0x01	; 1
     2f0:	b9 f0       	breq	.+46     	; 0x320 <__vector_21+0x58>
     2f2:	78 f0       	brcs	.+30     	; 0x312 <__vector_21+0x4a>
     2f4:	82 30       	cpi	r24, 0x02	; 2
     2f6:	39 f1       	breq	.+78     	; 0x346 <__vector_21+0x7e>
     2f8:	83 30       	cpi	r24, 0x03	; 3
     2fa:	79 f5       	brne	.+94     	; 0x35a <__vector_21+0x92>
			break;
		case VOLTAGE_CHANNEL:
			status.voltage = ADC / 30;
			break;
		case TEMP_CHANNEL:
			status.temperature = ADC / 2;
     2fc:	80 91 78 00 	lds	r24, 0x0078
     300:	90 91 79 00 	lds	r25, 0x0079
     304:	96 95       	lsr	r25
     306:	87 95       	ror	r24
     308:	80 93 44 01 	sts	0x0144, r24
			channel = CURRENT_CHANNEL;
     30c:	10 92 07 01 	sts	0x0107, r1
			break;
     310:	24 c0       	rjmp	.+72     	; 0x35a <__vector_21+0x92>
ISR(ADC_vect)
{
	switch (channel)
	{
		case CURRENT_CHANNEL:
			status.current = ADC;// / 5;
     312:	80 91 78 00 	lds	r24, 0x0078
     316:	90 91 79 00 	lds	r25, 0x0079
     31a:	80 93 42 01 	sts	0x0142, r24
     31e:	0f c0       	rjmp	.+30     	; 0x33e <__vector_21+0x76>
			channel = TEMP_CHANNEL;
			break;
		case POT_CHANNEL:
			if(flags.mode == POT_MODE)
     320:	80 91 3f 01 	lds	r24, 0x013F
     324:	8c 70       	andi	r24, 0x0C	; 12
     326:	88 30       	cpi	r24, 0x08	; 8
     328:	51 f4       	brne	.+20     	; 0x33e <__vector_21+0x76>
				dcReq = ADC / 10;
     32a:	80 91 78 00 	lds	r24, 0x0078
     32e:	90 91 79 00 	lds	r25, 0x0079
     332:	6a e0       	ldi	r22, 0x0A	; 10
     334:	70 e0       	ldi	r23, 0x00	; 0
     336:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <__udivmodhi4>
     33a:	60 93 3c 01 	sts	0x013C, r22
			channel = TEMP_CHANNEL;
     33e:	83 e0       	ldi	r24, 0x03	; 3
     340:	80 93 07 01 	sts	0x0107, r24
			break;
     344:	0a c0       	rjmp	.+20     	; 0x35a <__vector_21+0x92>
		case VOLTAGE_CHANNEL:
			status.voltage = ADC / 30;
     346:	80 91 78 00 	lds	r24, 0x0078
     34a:	90 91 79 00 	lds	r25, 0x0079
     34e:	6e e1       	ldi	r22, 0x1E	; 30
     350:	70 e0       	ldi	r23, 0x00	; 0
     352:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <__udivmodhi4>
     356:	60 93 45 01 	sts	0x0145, r22
	/*if(channel == LAST_CHANNEL)
		channel = FIRST_CHANNEL;
	else
		channel ++;
	*/
	adcSelectChannel(channel);
     35a:	80 91 07 01 	lds	r24, 0x0107
     35e:	0e 94 00 09 	call	0x1200	; 0x1200 <adcSelectChannel>
	adcStartConversion();
     362:	0e 94 47 09 	call	0x128e	; 0x128e <adcStartConversion>
}
     366:	ff 91       	pop	r31
     368:	ef 91       	pop	r30
     36a:	bf 91       	pop	r27
     36c:	af 91       	pop	r26
     36e:	9f 91       	pop	r25
     370:	8f 91       	pop	r24
     372:	7f 91       	pop	r23
     374:	6f 91       	pop	r22
     376:	5f 91       	pop	r21
     378:	4f 91       	pop	r20
     37a:	3f 91       	pop	r19
     37c:	2f 91       	pop	r18
     37e:	0f 90       	pop	r0
     380:	0f be       	out	0x3f, r0	; 63
     382:	0f 90       	pop	r0
     384:	1f 90       	pop	r1
     386:	18 95       	reti

00000388 <__vector_11>:

ISR(TIMER1_COMPA_vect)
{
     388:	1f 92       	push	r1
     38a:	0f 92       	push	r0
     38c:	0f b6       	in	r0, 0x3f	; 63
     38e:	0f 92       	push	r0
     390:	11 24       	eor	r1, r1
     392:	8f 93       	push	r24
	if(status.dc > 0 && flags.on && flags.dms)
     394:	80 91 43 01 	lds	r24, 0x0143
     398:	88 23       	and	r24, r24
     39a:	31 f0       	breq	.+12     	; 0x3a8 <__vector_11+0x20>
     39c:	80 91 3f 01 	lds	r24, 0x013F
     3a0:	80 73       	andi	r24, 0x30	; 48
     3a2:	80 33       	cpi	r24, 0x30	; 48
     3a4:	09 f4       	brne	.+2      	; 0x3a8 <__vector_11+0x20>
		setBit(PWM_PORT,PWM_BIT);		//Inicia o período em nível alto do PWM
     3a6:	29 9a       	sbi	0x05, 1	; 5
}
     3a8:	8f 91       	pop	r24
     3aa:	0f 90       	pop	r0
     3ac:	0f be       	out	0x3f, r0	; 63
     3ae:	0f 90       	pop	r0
     3b0:	1f 90       	pop	r1
     3b2:	18 95       	reti

000003b4 <__vector_12>:

ISR(TIMER1_COMPB_vect)
{
     3b4:	1f 92       	push	r1
     3b6:	0f 92       	push	r0
     3b8:	0f b6       	in	r0, 0x3f	; 63
     3ba:	0f 92       	push	r0
     3bc:	11 24       	eor	r1, r1
     3be:	8f 93       	push	r24
	if(status.dc < 100)
     3c0:	80 91 43 01 	lds	r24, 0x0143
     3c4:	84 36       	cpi	r24, 0x64	; 100
     3c6:	08 f4       	brcc	.+2      	; 0x3ca <__vector_12+0x16>
		clrBit(PWM_PORT,PWM_BIT);		//Inicia o período em nível baixo do PWM
     3c8:	29 98       	cbi	0x05, 1	; 5
}
     3ca:	8f 91       	pop	r24
     3cc:	0f 90       	pop	r0
     3ce:	0f be       	out	0x3f, r0	; 63
     3d0:	0f 90       	pop	r0
     3d2:	1f 90       	pop	r1
     3d4:	18 95       	reti

000003d6 <__vector_16>:

//controle 60Hz
ISR(TIMER0_OVF_vect)
{
     3d6:	1f 92       	push	r1
     3d8:	0f 92       	push	r0
     3da:	0f b6       	in	r0, 0x3f	; 63
     3dc:	0f 92       	push	r0
     3de:	11 24       	eor	r1, r1
     3e0:	2f 93       	push	r18
     3e2:	3f 93       	push	r19
     3e4:	4f 93       	push	r20
     3e6:	5f 93       	push	r21
     3e8:	6f 93       	push	r22
     3ea:	7f 93       	push	r23
     3ec:	8f 93       	push	r24
     3ee:	9f 93       	push	r25
     3f0:	af 93       	push	r26
     3f2:	bf 93       	push	r27
     3f4:	ef 93       	push	r30
     3f6:	ff 93       	push	r31
	//setBit(PIND,PD0);
	if(flags.mode == POT_MODE)
     3f8:	90 91 3f 01 	lds	r25, 0x013F
     3fc:	89 2f       	mov	r24, r25
     3fe:	8c 70       	andi	r24, 0x0C	; 12
     400:	88 30       	cpi	r24, 0x08	; 8
     402:	91 f4       	brne	.+36     	; 0x428 <__vector_16+0x52>
	{
		flags.on = isBitClr(ON_PIN,ON_BIT);
     404:	89 b1       	in	r24, 0x09	; 9
     406:	85 fb       	bst	r24, 5
     408:	88 27       	eor	r24, r24
     40a:	80 f9       	bld	r24, 0
     40c:	21 e0       	ldi	r18, 0x01	; 1
     40e:	82 27       	eor	r24, r18
     410:	80 fb       	bst	r24, 0
     412:	94 f9       	bld	r25, 4
     414:	90 93 3f 01 	sts	0x013F, r25
		flags.dms = isBitClr(DMS_PIN,DMS_BIT);
     418:	89 b1       	in	r24, 0x09	; 9
     41a:	82 95       	swap	r24
     41c:	81 70       	andi	r24, 0x01	; 1
     41e:	82 27       	eor	r24, r18
     420:	80 fb       	bst	r24, 0
     422:	95 f9       	bld	r25, 5
     424:	90 93 3f 01 	sts	0x013F, r25
	}
	if(flags.on && flags.dms)
     428:	80 91 3f 01 	lds	r24, 0x013F
     42c:	80 73       	andi	r24, 0x30	; 48
     42e:	80 33       	cpi	r24, 0x30	; 48
     430:	81 f5       	brne	.+96     	; 0x492 <__vector_16+0xbc>
	{
		//stringTransmit("@teste*");
    	if(status.dc != dcReq)
     432:	60 91 43 01 	lds	r22, 0x0143
     436:	90 91 3c 01 	lds	r25, 0x013C
     43a:	69 17       	cp	r22, r25
     43c:	a9 f1       	breq	.+106    	; 0x4a8 <__vector_16+0xd2>
    	{
    		if(dcReq > status.dc && dcReq > (minDC + 5))
     43e:	69 17       	cp	r22, r25
     440:	20 f5       	brcc	.+72     	; 0x48a <__vector_16+0xb4>
     442:	80 91 05 01 	lds	r24, 0x0105
     446:	49 2f       	mov	r20, r25
     448:	50 e0       	ldi	r21, 0x00	; 0
     44a:	28 2f       	mov	r18, r24
     44c:	30 e0       	ldi	r19, 0x00	; 0
     44e:	2b 5f       	subi	r18, 0xFB	; 251
     450:	3f 4f       	sbci	r19, 0xFF	; 255
     452:	24 17       	cp	r18, r20
     454:	35 07       	cpc	r19, r21
     456:	cc f4       	brge	.+50     	; 0x48a <__vector_16+0xb4>
    		{
    			if(cont == maxCont)
     458:	20 91 3d 01 	lds	r18, 0x013D
     45c:	30 91 3e 01 	lds	r19, 0x013E
     460:	23 30       	cpi	r18, 0x03	; 3
     462:	31 05       	cpc	r19, r1
     464:	59 f4       	brne	.+22     	; 0x47c <__vector_16+0xa6>
    			{
    				if(status.dc == 0)
     466:	66 23       	and	r22, r22
     468:	11 f0       	breq	.+4      	; 0x46e <__vector_16+0x98>
    					seta_dc(minDC);
    				else
    					seta_dc(status.dc+1);
     46a:	81 e0       	ldi	r24, 0x01	; 1
     46c:	86 0f       	add	r24, r22
     46e:	0e 94 83 00 	call	0x106	; 0x106 <seta_dc>
    				cont = 0;
     472:	10 92 3e 01 	sts	0x013E, r1
     476:	10 92 3d 01 	sts	0x013D, r1
     47a:	16 c0       	rjmp	.+44     	; 0x4a8 <__vector_16+0xd2>
    			}
    			else
    				cont++;
     47c:	2f 5f       	subi	r18, 0xFF	; 255
     47e:	3f 4f       	sbci	r19, 0xFF	; 255
     480:	30 93 3e 01 	sts	0x013E, r19
     484:	20 93 3d 01 	sts	0x013D, r18
     488:	0f c0       	rjmp	.+30     	; 0x4a8 <__vector_16+0xd2>
    		}
    		else
    			if (dcReq < status.dc)
     48a:	96 17       	cp	r25, r22
     48c:	68 f4       	brcc	.+26     	; 0x4a8 <__vector_16+0xd2>
    				seta_dc(dcReq);			//definição do Duty Cicle do PWM
     48e:	89 2f       	mov	r24, r25
     490:	09 c0       	rjmp	.+18     	; 0x4a4 <__vector_16+0xce>
    	}
	}
	else
	{
		stringTransmit("@teste2*");
     492:	83 e3       	ldi	r24, 0x33	; 51
     494:	91 e0       	ldi	r25, 0x01	; 1
     496:	0e 94 b0 00 	call	0x160	; 0x160 <stringTransmit>
		if(status.dc != 0)			//se o sistema ainda nao esta desligado
     49a:	80 91 43 01 	lds	r24, 0x0143
     49e:	88 23       	and	r24, r24
     4a0:	19 f0       	breq	.+6      	; 0x4a8 <__vector_16+0xd2>
			seta_dc(0);				//desliga o sistema
     4a2:	80 e0       	ldi	r24, 0x00	; 0
     4a4:	0e 94 83 00 	call	0x106	; 0x106 <seta_dc>
	}
	if(status.temperature > criticalTemp && !flags.warning)
     4a8:	90 91 44 01 	lds	r25, 0x0144
     4ac:	80 91 01 01 	lds	r24, 0x0101
     4b0:	89 17       	cp	r24, r25
     4b2:	50 f4       	brcc	.+20     	; 0x4c8 <__vector_16+0xf2>
     4b4:	20 91 3f 01 	lds	r18, 0x013F
     4b8:	20 fd       	sbrc	r18, 0
     4ba:	06 c0       	rjmp	.+12     	; 0x4c8 <__vector_16+0xf2>
	{
		flags.warning = 1;
     4bc:	82 2f       	mov	r24, r18
     4be:	81 60       	ori	r24, 0x01	; 1
     4c0:	80 93 3f 01 	sts	0x013F, r24
		setBit(BUZZER_PORT,BUZZER_BIT);
     4c4:	44 9a       	sbi	0x08, 4	; 8
     4c6:	0a c0       	rjmp	.+20     	; 0x4dc <__vector_16+0x106>
	}
	else
		if(status.temperature < criticalTemp && flags.warning)
     4c8:	98 17       	cp	r25, r24
     4ca:	40 f4       	brcc	.+16     	; 0x4dc <__vector_16+0x106>
     4cc:	80 91 3f 01 	lds	r24, 0x013F
     4d0:	80 ff       	sbrs	r24, 0
     4d2:	04 c0       	rjmp	.+8      	; 0x4dc <__vector_16+0x106>
		{
			flags.warning = 0;
     4d4:	8e 7f       	andi	r24, 0xFE	; 254
     4d6:	80 93 3f 01 	sts	0x013F, r24
			clrBit(BUZZER_PORT,BUZZER_BIT);
     4da:	44 98       	cbi	0x08, 4	; 8
		}
}
     4dc:	ff 91       	pop	r31
     4de:	ef 91       	pop	r30
     4e0:	bf 91       	pop	r27
     4e2:	af 91       	pop	r26
     4e4:	9f 91       	pop	r25
     4e6:	8f 91       	pop	r24
     4e8:	7f 91       	pop	r23
     4ea:	6f 91       	pop	r22
     4ec:	5f 91       	pop	r21
     4ee:	4f 91       	pop	r20
     4f0:	3f 91       	pop	r19
     4f2:	2f 91       	pop	r18
     4f4:	0f 90       	pop	r0
     4f6:	0f be       	out	0x3f, r0	; 63
     4f8:	0f 90       	pop	r0
     4fa:	1f 90       	pop	r1
     4fc:	18 95       	reti

000004fe <__vector_18>:

ISR(USART_RX_vect)
{
     4fe:	1f 92       	push	r1
     500:	0f 92       	push	r0
     502:	0f b6       	in	r0, 0x3f	; 63
     504:	0f 92       	push	r0
     506:	11 24       	eor	r1, r1
     508:	2f 93       	push	r18
     50a:	3f 93       	push	r19
     50c:	4f 93       	push	r20
     50e:	5f 93       	push	r21
     510:	6f 93       	push	r22
     512:	7f 93       	push	r23
     514:	8f 93       	push	r24
     516:	9f 93       	push	r25
     518:	af 93       	push	r26
     51a:	bf 93       	push	r27
     51c:	ef 93       	push	r30
     51e:	ff 93       	push	r31
	usartAddDataToReceiverBuffer(UDR0);
     520:	80 91 c6 00 	lds	r24, 0x00C6
     524:	0e 94 af 0a 	call	0x155e	; 0x155e <usartAddDataToReceiverBuffer>
     528:	ff 91       	pop	r31
     52a:	ef 91       	pop	r30
     52c:	bf 91       	pop	r27
     52e:	af 91       	pop	r26
     530:	9f 91       	pop	r25
     532:	8f 91       	pop	r24
     534:	7f 91       	pop	r23
     536:	6f 91       	pop	r22
     538:	5f 91       	pop	r21
     53a:	4f 91       	pop	r20
     53c:	3f 91       	pop	r19
     53e:	2f 91       	pop	r18
     540:	0f 90       	pop	r0
     542:	0f be       	out	0x3f, r0	; 63
     544:	0f 90       	pop	r0
     546:	1f 90       	pop	r1
     548:	18 95       	reti

0000054a <usartReceiveStd>:
 * Checks if a reception has been completed
 * -------------------------------------------------------------------------- */

bool_t usartIsReceptionComplete(void)
{
	return isBitSet(UCSR0A, RXC0);
     54a:	80 91 c0 00 	lds	r24, 0x00C0
 * standard input heandler
 * -------------------------------------------------------------------------- */

int16 usartReceiveStd(FILE * stream)
{
	while(!usartIsReceptionComplete())
     54e:	87 ff       	sbrs	r24, 7
     550:	fc cf       	rjmp	.-8      	; 0x54a <usartReceiveStd>
		;	// Waits until last reception ends
	return (int16)UDR0;
     552:	80 91 c6 00 	lds	r24, 0x00C6
}
     556:	90 e0       	ldi	r25, 0x00	; 0
     558:	08 95       	ret

0000055a <globalInterruptEnable>:
 * Enable global interrupts
 * -------------------------------------------------------------------------- */

void globalInterruptEnable(void)
{
	sei();
     55a:	78 94       	sei
     55c:	08 95       	ret

0000055e <globalInterruptDisable>:
 * Disable global interrupts
 * -------------------------------------------------------------------------- */

void globalInterruptDisable(void)
{
	cli();
     55e:	f8 94       	cli
     560:	08 95       	ret

00000562 <systemClockSetPrescaler>:

resultValue_t systemClockSetPrescaler(systemPrescalerValue_t prescaler)
{
	uint8 aux8 = 0;

	switch(prescaler){
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	89 30       	cpi	r24, 0x09	; 9
     566:	91 05       	cpc	r25, r1
     568:	00 f5       	brcc	.+64     	; 0x5aa <systemClockSetPrescaler+0x48>
     56a:	fc 01       	movw	r30, r24
     56c:	e4 5b       	subi	r30, 0xB4	; 180
     56e:	ff 4f       	sbci	r31, 0xFF	; 255
     570:	0c 94 4c 0d 	jmp	0x1a98	; 0x1a98 <__tablejump2__>
		case SYSTEM_PRESCALER_OFF:		aux8 = 0;	break;
     574:	80 e0       	ldi	r24, 0x00	; 0
     576:	0f c0       	rjmp	.+30     	; 0x596 <systemClockSetPrescaler+0x34>
		case SYSTEM_PRESCALER_2:		aux8 = 1;	break;
		case SYSTEM_PRESCALER_4:		aux8 = 2;	break;
     578:	82 e0       	ldi	r24, 0x02	; 2
     57a:	0d c0       	rjmp	.+26     	; 0x596 <systemClockSetPrescaler+0x34>
		case SYSTEM_PRESCALER_8:		aux8 = 3;	break;
     57c:	83 e0       	ldi	r24, 0x03	; 3
     57e:	0b c0       	rjmp	.+22     	; 0x596 <systemClockSetPrescaler+0x34>
		case SYSTEM_PRESCALER_16:		aux8 = 4;	break;
     580:	84 e0       	ldi	r24, 0x04	; 4
     582:	09 c0       	rjmp	.+18     	; 0x596 <systemClockSetPrescaler+0x34>
		case SYSTEM_PRESCALER_32:		aux8 = 5;	break;
     584:	85 e0       	ldi	r24, 0x05	; 5
     586:	07 c0       	rjmp	.+14     	; 0x596 <systemClockSetPrescaler+0x34>
		case SYSTEM_PRESCALER_64:		aux8 = 6;	break;
     588:	86 e0       	ldi	r24, 0x06	; 6
     58a:	05 c0       	rjmp	.+10     	; 0x596 <systemClockSetPrescaler+0x34>
		case SYSTEM_PRESCALER_128:		aux8 = 7;	break;
     58c:	87 e0       	ldi	r24, 0x07	; 7
     58e:	03 c0       	rjmp	.+6      	; 0x596 <systemClockSetPrescaler+0x34>
		case SYSTEM_PRESCALER_256:		aux8 = 8;	break;
     590:	88 e0       	ldi	r24, 0x08	; 8
     592:	01 c0       	rjmp	.+2      	; 0x596 <systemClockSetPrescaler+0x34>
{
	uint8 aux8 = 0;

	switch(prescaler){
		case SYSTEM_PRESCALER_OFF:		aux8 = 0;	break;
		case SYSTEM_PRESCALER_2:		aux8 = 1;	break;
     594:	81 e0       	ldi	r24, 0x01	; 1
		case SYSTEM_PRESCALER_64:		aux8 = 6;	break;
		case SYSTEM_PRESCALER_128:		aux8 = 7;	break;
		case SYSTEM_PRESCALER_256:		aux8 = 8;	break;
		default:						return RESULT_UNSUPPORTED_VALUE;	break;
	}
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
     596:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     598:	f8 94       	cli
		CLKPR = 0b10000000;
     59a:	20 e8       	ldi	r18, 0x80	; 128
     59c:	20 93 61 00 	sts	0x0061, r18
		CLKPR = aux8;
     5a0:	80 93 61 00 	sts	0x0061, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     5a4:	9f bf       	out	0x3f, r25	; 63
	}

	return RESULT_OK;
     5a6:	80 e0       	ldi	r24, 0x00	; 0
     5a8:	08 95       	ret
		case SYSTEM_PRESCALER_16:		aux8 = 4;	break;
		case SYSTEM_PRESCALER_32:		aux8 = 5;	break;
		case SYSTEM_PRESCALER_64:		aux8 = 6;	break;
		case SYSTEM_PRESCALER_128:		aux8 = 7;	break;
		case SYSTEM_PRESCALER_256:		aux8 = 8;	break;
		default:						return RESULT_UNSUPPORTED_VALUE;	break;
     5aa:	87 e0       	ldi	r24, 0x07	; 7
		CLKPR = 0b10000000;
		CLKPR = aux8;
	}

	return RESULT_OK;
}
     5ac:	08 95       	ret

000005ae <eepromSetOperationMode>:

void eepromSetOperationMode(eepromMode_t mode)
{
	uint8 aux8 = 0;

	aux8 = EECR & ~(0x03 << EEPM0);
     5ae:	2f b3       	in	r18, 0x1f	; 31
	aux8 |= (mode << EEPM0);
     5b0:	30 e1       	ldi	r19, 0x10	; 16
     5b2:	83 9f       	mul	r24, r19
     5b4:	c0 01       	movw	r24, r0
     5b6:	11 24       	eor	r1, r1

void eepromSetOperationMode(eepromMode_t mode)
{
	uint8 aux8 = 0;

	aux8 = EECR & ~(0x03 << EEPM0);
     5b8:	2f 7c       	andi	r18, 0xCF	; 207
	aux8 |= (mode << EEPM0);
     5ba:	28 2b       	or	r18, r24
	EECR = aux8;
     5bc:	2f bb       	out	0x1f, r18	; 31
     5be:	08 95       	ret

000005c0 <eepromReadyActivateInterrupt>:
 * Activates the EEPROM ready interrupt
 * -------------------------------------------------------------------------- */

void eepromReadyActivateInterrupt(void)
{
	setBit(EECR, EERIE);
     5c0:	fb 9a       	sbi	0x1f, 3	; 31
     5c2:	08 95       	ret

000005c4 <eepromReadyDeactivateInterrupt>:
 * Deactivates the EEPROM ready interrupt
 * -------------------------------------------------------------------------- */

void eepromReadyDeactivateInterrupt(void)
{
	clrBit(EECR, EERIE);
     5c4:	fb 98       	cbi	0x1f, 3	; 31
     5c6:	08 95       	ret

000005c8 <eepromWrite>:
 * Writes a byte in the specified address in the EEPROM
 * -------------------------------------------------------------------------- */

void eepromWrite(uint16 address, uint8 data)
{
	waitUntilBitIsClear(EECR, EEPE);
     5c8:	f9 99       	sbic	0x1f, 1	; 31
     5ca:	fe cf       	rjmp	.-4      	; 0x5c8 <eepromWrite>
	waitUntilBitIsClear(SPMEN, SPMCSR);
     5cc:	27 b7       	in	r18, 0x37	; 55
	EEAR = (address & EEPROM_ADDRESS_MASK);
     5ce:	93 70       	andi	r25, 0x03	; 3
     5d0:	92 bd       	out	0x22, r25	; 34
     5d2:	81 bd       	out	0x21, r24	; 33
	EEDR = data;
     5d4:	60 bd       	out	0x20, r22	; 32
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
     5d6:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     5d8:	f8 94       	cli
		setBit(EECR, EEMPE);
     5da:	fa 9a       	sbi	0x1f, 2	; 31
		setBit(EECR, EEPE);
     5dc:	f9 9a       	sbi	0x1f, 1	; 31
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     5de:	8f bf       	out	0x3f, r24	; 63
    __asm__ volatile ("" ::: "memory");
     5e0:	08 95       	ret

000005e2 <eepromRead>:
 * Reads a byte from the specified address in the EEPROM
 * -------------------------------------------------------------------------- */

uint8 eepromRead(uint16 address)
{
	waitUntilBitIsClear(EECR, EEPE);
     5e2:	f9 99       	sbic	0x1f, 1	; 31
     5e4:	fe cf       	rjmp	.-4      	; 0x5e2 <eepromRead>
	EEAR = (address & EEPROM_ADDRESS_MASK);
     5e6:	93 70       	andi	r25, 0x03	; 3
     5e8:	92 bd       	out	0x22, r25	; 34
     5ea:	81 bd       	out	0x21, r24	; 33
	setBit(EECR, EERE);
     5ec:	f8 9a       	sbi	0x1f, 0	; 31
	return EEDR;
     5ee:	80 b5       	in	r24, 0x20	; 32
}
     5f0:	08 95       	ret

000005f2 <globalPullUpEnable>:
 * Enables the global pull-up
 * -------------------------------------------------------------------------- */

void globalPullUpEnable(void)
{
	clrBit(MCUCR, PUD);
     5f2:	85 b7       	in	r24, 0x35	; 53
     5f4:	8f 7e       	andi	r24, 0xEF	; 239
     5f6:	85 bf       	out	0x35, r24	; 53
     5f8:	08 95       	ret

000005fa <pullUpDisable>:
 * Disables the global pull-up
 * -------------------------------------------------------------------------- */

void pullUpDisable(void)
{
	setBit(MCUCR, PUD);
     5fa:	85 b7       	in	r24, 0x35	; 53
     5fc:	80 61       	ori	r24, 0x10	; 16
     5fe:	85 bf       	out	0x35, r24	; 53
     600:	08 95       	ret

00000602 <int0Config>:

resultValue_t int0Config(portMode_t port, senseMode_t sense)
{
	uint8 aux8 = 0;

	switch(port){
     602:	82 30       	cpi	r24, 0x02	; 2
     604:	79 f0       	breq	.+30     	; 0x624 <int0Config+0x22>
     606:	30 f4       	brcc	.+12     	; 0x614 <int0Config+0x12>
     608:	88 23       	and	r24, r24
     60a:	49 f0       	breq	.+18     	; 0x61e <int0Config+0x1c>
     60c:	81 30       	cpi	r24, 0x01	; 1
     60e:	11 f5       	brne	.+68     	; 0x654 <int0Config+0x52>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD2); setBit(DDRD, PD2);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD2); setBit(DDRD, PD2);	break;
     610:	5a 9a       	sbi	0x0b, 2	; 11
     612:	06 c0       	rjmp	.+12     	; 0x620 <int0Config+0x1e>

resultValue_t int0Config(portMode_t port, senseMode_t sense)
{
	uint8 aux8 = 0;

	switch(port){
     614:	83 30       	cpi	r24, 0x03	; 3
     616:	41 f0       	breq	.+16     	; 0x628 <int0Config+0x26>
     618:	8f 3f       	cpi	r24, 0xFF	; 255
     61a:	41 f0       	breq	.+16     	; 0x62c <int0Config+0x2a>
     61c:	1b c0       	rjmp	.+54     	; 0x654 <int0Config+0x52>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD2); setBit(DDRD, PD2);	break;
     61e:	5a 98       	cbi	0x0b, 2	; 11
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD2); setBit(DDRD, PD2);	break;
     620:	52 9a       	sbi	0x0a, 2	; 10
     622:	04 c0       	rjmp	.+8      	; 0x62c <int0Config+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD2); clrBit(DDRD, PD2);	break;
     624:	5a 98       	cbi	0x0b, 2	; 11
     626:	01 c0       	rjmp	.+2      	; 0x62a <int0Config+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD2); clrBit(DDRD, PD2);	break;
     628:	5a 9a       	sbi	0x0b, 2	; 11
     62a:	52 98       	cbi	0x0a, 2	; 10
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}

	if(sense != SENSE_NO_CHANGE){
     62c:	6f 3f       	cpi	r22, 0xFF	; 255
     62e:	a1 f0       	breq	.+40     	; 0x658 <int0Config+0x56>
		aux8 = EICRA & ~(0x03 << ISC00);
     630:	80 91 69 00 	lds	r24, 0x0069
     634:	8c 7f       	andi	r24, 0xFC	; 252
		switch(sense){
     636:	61 30       	cpi	r22, 0x01	; 1
     638:	39 f0       	breq	.+14     	; 0x648 <int0Config+0x46>
     63a:	48 f0       	brcs	.+18     	; 0x64e <int0Config+0x4c>
     63c:	62 30       	cpi	r22, 0x02	; 2
     63e:	31 f0       	breq	.+12     	; 0x64c <int0Config+0x4a>
     640:	63 30       	cpi	r22, 0x03	; 3
     642:	61 f4       	brne	.+24     	; 0x65c <int0Config+0x5a>
			case SENSE_LOW_LEVEL:		break;
			case SENSE_ANY_EDGE:		aux8 |= (0x01 << ISC00);			break;
			case SENSE_FALLING_EDGE:	aux8 |= (0x02 << ISC00);			break;
			case SENSE_RISING_EDGE:		aux8 |= (0x03 << ISC00);			break;
     644:	83 60       	ori	r24, 0x03	; 3
     646:	03 c0       	rjmp	.+6      	; 0x64e <int0Config+0x4c>

	if(sense != SENSE_NO_CHANGE){
		aux8 = EICRA & ~(0x03 << ISC00);
		switch(sense){
			case SENSE_LOW_LEVEL:		break;
			case SENSE_ANY_EDGE:		aux8 |= (0x01 << ISC00);			break;
     648:	81 60       	ori	r24, 0x01	; 1
     64a:	01 c0       	rjmp	.+2      	; 0x64e <int0Config+0x4c>
			case SENSE_FALLING_EDGE:	aux8 |= (0x02 << ISC00);			break;
     64c:	82 60       	ori	r24, 0x02	; 2
			case SENSE_RISING_EDGE:		aux8 |= (0x03 << ISC00);			break;
			case SENSE_NO_CHANGE:		break;
			default:					return RESULT_INT_SENSE_VALUE_UNSUPPORTED;	break;
		}
		EICRA = aux8;
     64e:	80 93 69 00 	sts	0x0069, r24
     652:	02 c0       	rjmp	.+4      	; 0x658 <int0Config+0x56>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD2); setBit(DDRD, PD2);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD2); setBit(DDRD, PD2);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD2); clrBit(DDRD, PD2);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD2); clrBit(DDRD, PD2);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     654:	81 e0       	ldi	r24, 0x01	; 1
     656:	08 95       	ret
			default:					return RESULT_INT_SENSE_VALUE_UNSUPPORTED;	break;
		}
		EICRA = aux8;
	}

	return RESULT_OK;
     658:	80 e0       	ldi	r24, 0x00	; 0
     65a:	08 95       	ret
			case SENSE_LOW_LEVEL:		break;
			case SENSE_ANY_EDGE:		aux8 |= (0x01 << ISC00);			break;
			case SENSE_FALLING_EDGE:	aux8 |= (0x02 << ISC00);			break;
			case SENSE_RISING_EDGE:		aux8 |= (0x03 << ISC00);			break;
			case SENSE_NO_CHANGE:		break;
			default:					return RESULT_INT_SENSE_VALUE_UNSUPPORTED;	break;
     65c:	82 e0       	ldi	r24, 0x02	; 2
		}
		EICRA = aux8;
	}

	return RESULT_OK;
}
     65e:	08 95       	ret

00000660 <int0ActivateInterrupt>:
 * Activates the external interrupt int0
 * -------------------------------------------------------------------------- */

void int0ActivateInterrupt(void)
{
	setBit(EIMSK, INT0);
     660:	e8 9a       	sbi	0x1d, 0	; 29
     662:	08 95       	ret

00000664 <int0DeactivateInterrupt>:
 * Deactivates the external interrupt int0
 * -------------------------------------------------------------------------- */

void int0DeactivateInterrupt(void)
{
	clrBit(EIMSK, INT0);
     664:	e8 98       	cbi	0x1d, 0	; 29
     666:	08 95       	ret

00000668 <int0ClearInterruptRequest>:
 * Clears the external interrupt int0 request
 * -------------------------------------------------------------------------- */

void int0ClearInterruptRequest(void)
{
	setBit(EIFR, INTF0);
     668:	e0 9a       	sbi	0x1c, 0	; 28
     66a:	08 95       	ret

0000066c <int1Config>:

resultValue_t int1Config(portMode_t port, senseMode_t sense)
{
	uint8 aux8 = 0;

	switch(port){
     66c:	82 30       	cpi	r24, 0x02	; 2
     66e:	79 f0       	breq	.+30     	; 0x68e <int1Config+0x22>
     670:	30 f4       	brcc	.+12     	; 0x67e <int1Config+0x12>
     672:	88 23       	and	r24, r24
     674:	49 f0       	breq	.+18     	; 0x688 <int1Config+0x1c>
     676:	81 30       	cpi	r24, 0x01	; 1
     678:	11 f5       	brne	.+68     	; 0x6be <int1Config+0x52>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD3); setBit(DDRD, PD3);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD3); setBit(DDRD, PD3);	break;
     67a:	5b 9a       	sbi	0x0b, 3	; 11
     67c:	06 c0       	rjmp	.+12     	; 0x68a <int1Config+0x1e>

resultValue_t int1Config(portMode_t port, senseMode_t sense)
{
	uint8 aux8 = 0;

	switch(port){
     67e:	83 30       	cpi	r24, 0x03	; 3
     680:	41 f0       	breq	.+16     	; 0x692 <int1Config+0x26>
     682:	8f 3f       	cpi	r24, 0xFF	; 255
     684:	41 f0       	breq	.+16     	; 0x696 <int1Config+0x2a>
     686:	1b c0       	rjmp	.+54     	; 0x6be <int1Config+0x52>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD3); setBit(DDRD, PD3);	break;
     688:	5b 98       	cbi	0x0b, 3	; 11
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD3); setBit(DDRD, PD3);	break;
     68a:	53 9a       	sbi	0x0a, 3	; 10
     68c:	04 c0       	rjmp	.+8      	; 0x696 <int1Config+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD3); clrBit(DDRD, PD3);	break;
     68e:	5b 98       	cbi	0x0b, 3	; 11
     690:	01 c0       	rjmp	.+2      	; 0x694 <int1Config+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD3); clrBit(DDRD, PD3);	break;
     692:	5b 9a       	sbi	0x0b, 3	; 11
     694:	53 98       	cbi	0x0a, 3	; 10
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}

	if(sense != SENSE_NO_CHANGE){
     696:	6f 3f       	cpi	r22, 0xFF	; 255
     698:	a1 f0       	breq	.+40     	; 0x6c2 <int1Config+0x56>
		aux8 = EICRA & ~(0x03 << ISC10);
     69a:	80 91 69 00 	lds	r24, 0x0069
     69e:	83 7f       	andi	r24, 0xF3	; 243
		switch(sense){
     6a0:	61 30       	cpi	r22, 0x01	; 1
     6a2:	39 f0       	breq	.+14     	; 0x6b2 <int1Config+0x46>
     6a4:	48 f0       	brcs	.+18     	; 0x6b8 <int1Config+0x4c>
     6a6:	62 30       	cpi	r22, 0x02	; 2
     6a8:	31 f0       	breq	.+12     	; 0x6b6 <int1Config+0x4a>
     6aa:	63 30       	cpi	r22, 0x03	; 3
     6ac:	61 f4       	brne	.+24     	; 0x6c6 <int1Config+0x5a>
			case SENSE_LOW_LEVEL:		break;
			case SENSE_ANY_EDGE:		aux8 |= (0x01 << ISC10);			break;
			case SENSE_FALLING_EDGE:	aux8 |= (0x02 << ISC10);			break;
			case SENSE_RISING_EDGE:		aux8 |= (0x03 << ISC10);			break;
     6ae:	8c 60       	ori	r24, 0x0C	; 12
     6b0:	03 c0       	rjmp	.+6      	; 0x6b8 <int1Config+0x4c>

	if(sense != SENSE_NO_CHANGE){
		aux8 = EICRA & ~(0x03 << ISC10);
		switch(sense){
			case SENSE_LOW_LEVEL:		break;
			case SENSE_ANY_EDGE:		aux8 |= (0x01 << ISC10);			break;
     6b2:	84 60       	ori	r24, 0x04	; 4
     6b4:	01 c0       	rjmp	.+2      	; 0x6b8 <int1Config+0x4c>
			case SENSE_FALLING_EDGE:	aux8 |= (0x02 << ISC10);			break;
     6b6:	88 60       	ori	r24, 0x08	; 8
			case SENSE_RISING_EDGE:		aux8 |= (0x03 << ISC10);			break;
			case SENSE_NO_CHANGE:		break;
			default:					return RESULT_INT_SENSE_VALUE_UNSUPPORTED;	break;
		}
		EICRA = aux8;
     6b8:	80 93 69 00 	sts	0x0069, r24
     6bc:	02 c0       	rjmp	.+4      	; 0x6c2 <int1Config+0x56>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD3); setBit(DDRD, PD3);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD3); setBit(DDRD, PD3);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD3); clrBit(DDRD, PD3);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD3); clrBit(DDRD, PD3);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     6be:	81 e0       	ldi	r24, 0x01	; 1
     6c0:	08 95       	ret
			default:					return RESULT_INT_SENSE_VALUE_UNSUPPORTED;	break;
		}
		EICRA = aux8;
	}

	return RESULT_OK;
     6c2:	80 e0       	ldi	r24, 0x00	; 0
     6c4:	08 95       	ret
			case SENSE_LOW_LEVEL:		break;
			case SENSE_ANY_EDGE:		aux8 |= (0x01 << ISC10);			break;
			case SENSE_FALLING_EDGE:	aux8 |= (0x02 << ISC10);			break;
			case SENSE_RISING_EDGE:		aux8 |= (0x03 << ISC10);			break;
			case SENSE_NO_CHANGE:		break;
			default:					return RESULT_INT_SENSE_VALUE_UNSUPPORTED;	break;
     6c6:	82 e0       	ldi	r24, 0x02	; 2
		}
		EICRA = aux8;
	}

	return RESULT_OK;
}
     6c8:	08 95       	ret

000006ca <int1ActivateInterrupt>:
 * Activates the external interrupt int1
 * -------------------------------------------------------------------------- */

void int1ActivateInterrupt(void)
{
	setBit(EIMSK, INT1);
     6ca:	e9 9a       	sbi	0x1d, 1	; 29
     6cc:	08 95       	ret

000006ce <int1DeactivateInterrupt>:
 * Deactivates the external interrupt int1
 * -------------------------------------------------------------------------- */

void int1DeactivateInterrupt(void)
{
	clrBit(EIMSK, INT1);
     6ce:	e9 98       	cbi	0x1d, 1	; 29
     6d0:	08 95       	ret

000006d2 <int1ClearInterruptRequest>:
 * Clears the external interrupt int1 request
 * -------------------------------------------------------------------------- */

void int1ClearInterruptRequest(void)
{
	setBit(EIFR, INTF1);
     6d2:	e1 9a       	sbi	0x1c, 1	; 28
     6d4:	08 95       	ret

000006d6 <pcint7_0Enable>:
 * Enables the external interrupt pcint in port B
 * -------------------------------------------------------------------------- */

void pcint7_0Enable(void)
{
	setBit(PCICR, PCIE0);
     6d6:	e8 e6       	ldi	r30, 0x68	; 104
     6d8:	f0 e0       	ldi	r31, 0x00	; 0
     6da:	80 81       	ld	r24, Z
     6dc:	81 60       	ori	r24, 0x01	; 1
     6de:	80 83       	st	Z, r24
     6e0:	08 95       	ret

000006e2 <pcint7_0Disable>:
 * Disables the external interrupt pcint in port B
 * -------------------------------------------------------------------------- */

void pcint7_0Disable(void)
{
	clrBit(PCICR, PCIE0);
     6e2:	e8 e6       	ldi	r30, 0x68	; 104
     6e4:	f0 e0       	ldi	r31, 0x00	; 0
     6e6:	80 81       	ld	r24, Z
     6e8:	8e 7f       	andi	r24, 0xFE	; 254
     6ea:	80 83       	st	Z, r24
     6ec:	08 95       	ret

000006ee <pcint7_0ClearInterruptRequest>:
 * Disables the external interrupt pcint in port B
 * -------------------------------------------------------------------------- */

void pcint7_0ClearInterruptRequest(void)
{
	setBit(PCIFR, PCIF0);
     6ee:	d8 9a       	sbi	0x1b, 0	; 27
     6f0:	08 95       	ret

000006f2 <pcint0ActivateInterrupt>:
 * Activates the external interrupt pcint0 and configures port mode in PB0
 * -------------------------------------------------------------------------- */

resultValue_t pcint0ActivateInterrupt(portMode_t port)
{
	switch(port){
     6f2:	82 30       	cpi	r24, 0x02	; 2
     6f4:	79 f0       	breq	.+30     	; 0x714 <pcint0ActivateInterrupt+0x22>
     6f6:	30 f4       	brcc	.+12     	; 0x704 <pcint0ActivateInterrupt+0x12>
     6f8:	88 23       	and	r24, r24
     6fa:	49 f0       	breq	.+18     	; 0x70e <pcint0ActivateInterrupt+0x1c>
     6fc:	81 30       	cpi	r24, 0x01	; 1
     6fe:	a9 f4       	brne	.+42     	; 0x72a <pcint0ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB0); setBit(DDRB, PB0);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB0); setBit(DDRB, PB0);	break;
     700:	28 9a       	sbi	0x05, 0	; 5
     702:	06 c0       	rjmp	.+12     	; 0x710 <pcint0ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint0 and configures port mode in PB0
 * -------------------------------------------------------------------------- */

resultValue_t pcint0ActivateInterrupt(portMode_t port)
{
	switch(port){
     704:	83 30       	cpi	r24, 0x03	; 3
     706:	41 f0       	breq	.+16     	; 0x718 <pcint0ActivateInterrupt+0x26>
     708:	8f 3f       	cpi	r24, 0xFF	; 255
     70a:	41 f0       	breq	.+16     	; 0x71c <pcint0ActivateInterrupt+0x2a>
     70c:	0e c0       	rjmp	.+28     	; 0x72a <pcint0ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB0); setBit(DDRB, PB0);	break;
     70e:	28 98       	cbi	0x05, 0	; 5
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB0); setBit(DDRB, PB0);	break;
     710:	20 9a       	sbi	0x04, 0	; 4
     712:	04 c0       	rjmp	.+8      	; 0x71c <pcint0ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB0); clrBit(DDRB, PB0);	break;
     714:	28 98       	cbi	0x05, 0	; 5
     716:	01 c0       	rjmp	.+2      	; 0x71a <pcint0ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB0); clrBit(DDRB, PB0);	break;
     718:	28 9a       	sbi	0x05, 0	; 5
     71a:	20 98       	cbi	0x04, 0	; 4
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK0, PCINT0);
     71c:	80 91 6b 00 	lds	r24, 0x006B
     720:	81 60       	ori	r24, 0x01	; 1
     722:	80 93 6b 00 	sts	0x006B, r24
	return RESULT_OK;
     726:	80 e0       	ldi	r24, 0x00	; 0
     728:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB0); setBit(DDRB, PB0);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB0); setBit(DDRB, PB0);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB0); clrBit(DDRB, PB0);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB0); clrBit(DDRB, PB0);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     72a:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK0, PCINT0);
	return RESULT_OK;
}
     72c:	08 95       	ret

0000072e <pcint0DeactivateInterrupt>:
 * Deactivates the external interrupt pcint0 in PB0
 * -------------------------------------------------------------------------- */

void pcint0DeactivateInterrupt(void)
{
	clrBit(PCMSK0, PCINT0);
     72e:	eb e6       	ldi	r30, 0x6B	; 107
     730:	f0 e0       	ldi	r31, 0x00	; 0
     732:	80 81       	ld	r24, Z
     734:	8e 7f       	andi	r24, 0xFE	; 254
     736:	80 83       	st	Z, r24
     738:	08 95       	ret

0000073a <pcint1ActivateInterrupt>:
 * Activates the external interrupt pcint1 and configures port mode in PB1
 * -------------------------------------------------------------------------- */

resultValue_t pcint1ActivateInterrupt(portMode_t port)
{
	switch(port){
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	79 f0       	breq	.+30     	; 0x75c <pcint1ActivateInterrupt+0x22>
     73e:	30 f4       	brcc	.+12     	; 0x74c <pcint1ActivateInterrupt+0x12>
     740:	88 23       	and	r24, r24
     742:	49 f0       	breq	.+18     	; 0x756 <pcint1ActivateInterrupt+0x1c>
     744:	81 30       	cpi	r24, 0x01	; 1
     746:	a9 f4       	brne	.+42     	; 0x772 <pcint1ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB1); setBit(DDRB, PB1);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB1); setBit(DDRB, PB1);	break;
     748:	29 9a       	sbi	0x05, 1	; 5
     74a:	06 c0       	rjmp	.+12     	; 0x758 <pcint1ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint1 and configures port mode in PB1
 * -------------------------------------------------------------------------- */

resultValue_t pcint1ActivateInterrupt(portMode_t port)
{
	switch(port){
     74c:	83 30       	cpi	r24, 0x03	; 3
     74e:	41 f0       	breq	.+16     	; 0x760 <pcint1ActivateInterrupt+0x26>
     750:	8f 3f       	cpi	r24, 0xFF	; 255
     752:	41 f0       	breq	.+16     	; 0x764 <pcint1ActivateInterrupt+0x2a>
     754:	0e c0       	rjmp	.+28     	; 0x772 <pcint1ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB1); setBit(DDRB, PB1);	break;
     756:	29 98       	cbi	0x05, 1	; 5
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB1); setBit(DDRB, PB1);	break;
     758:	21 9a       	sbi	0x04, 1	; 4
     75a:	04 c0       	rjmp	.+8      	; 0x764 <pcint1ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB1); clrBit(DDRB, PB1);	break;
     75c:	29 98       	cbi	0x05, 1	; 5
     75e:	01 c0       	rjmp	.+2      	; 0x762 <pcint1ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB1); clrBit(DDRB, PB1);	break;
     760:	29 9a       	sbi	0x05, 1	; 5
     762:	21 98       	cbi	0x04, 1	; 4
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK0, PCINT1);
     764:	80 91 6b 00 	lds	r24, 0x006B
     768:	82 60       	ori	r24, 0x02	; 2
     76a:	80 93 6b 00 	sts	0x006B, r24
	return RESULT_OK;
     76e:	80 e0       	ldi	r24, 0x00	; 0
     770:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB1); setBit(DDRB, PB1);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB1); setBit(DDRB, PB1);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB1); clrBit(DDRB, PB1);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB1); clrBit(DDRB, PB1);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     772:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK0, PCINT1);
	return RESULT_OK;
}
     774:	08 95       	ret

00000776 <pcint1DeactivateInterrupt>:
 * Deactivates the external interrupt pcint1 in PB1
 * -------------------------------------------------------------------------- */

void pcint1DeactivateInterrupt(void)
{
	clrBit(PCMSK0, PCINT1);
     776:	eb e6       	ldi	r30, 0x6B	; 107
     778:	f0 e0       	ldi	r31, 0x00	; 0
     77a:	80 81       	ld	r24, Z
     77c:	8d 7f       	andi	r24, 0xFD	; 253
     77e:	80 83       	st	Z, r24
     780:	08 95       	ret

00000782 <pcint2ActivateInterrupt>:
 * Activates the external interrupt pcint2 and configures port mode in PB2
 * -------------------------------------------------------------------------- */

resultValue_t pcint2ActivateInterrupt(portMode_t port)
{
	switch(port){
     782:	82 30       	cpi	r24, 0x02	; 2
     784:	79 f0       	breq	.+30     	; 0x7a4 <pcint2ActivateInterrupt+0x22>
     786:	30 f4       	brcc	.+12     	; 0x794 <pcint2ActivateInterrupt+0x12>
     788:	88 23       	and	r24, r24
     78a:	49 f0       	breq	.+18     	; 0x79e <pcint2ActivateInterrupt+0x1c>
     78c:	81 30       	cpi	r24, 0x01	; 1
     78e:	a9 f4       	brne	.+42     	; 0x7ba <pcint2ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB2); setBit(DDRB, PB2);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB2); setBit(DDRB, PB2);	break;
     790:	2a 9a       	sbi	0x05, 2	; 5
     792:	06 c0       	rjmp	.+12     	; 0x7a0 <pcint2ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint2 and configures port mode in PB2
 * -------------------------------------------------------------------------- */

resultValue_t pcint2ActivateInterrupt(portMode_t port)
{
	switch(port){
     794:	83 30       	cpi	r24, 0x03	; 3
     796:	41 f0       	breq	.+16     	; 0x7a8 <pcint2ActivateInterrupt+0x26>
     798:	8f 3f       	cpi	r24, 0xFF	; 255
     79a:	41 f0       	breq	.+16     	; 0x7ac <pcint2ActivateInterrupt+0x2a>
     79c:	0e c0       	rjmp	.+28     	; 0x7ba <pcint2ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB2); setBit(DDRB, PB2);	break;
     79e:	2a 98       	cbi	0x05, 2	; 5
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB2); setBit(DDRB, PB2);	break;
     7a0:	22 9a       	sbi	0x04, 2	; 4
     7a2:	04 c0       	rjmp	.+8      	; 0x7ac <pcint2ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB2); clrBit(DDRB, PB2);	break;
     7a4:	2a 98       	cbi	0x05, 2	; 5
     7a6:	01 c0       	rjmp	.+2      	; 0x7aa <pcint2ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB2); clrBit(DDRB, PB2);	break;
     7a8:	2a 9a       	sbi	0x05, 2	; 5
     7aa:	22 98       	cbi	0x04, 2	; 4
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK0, PCINT2);
     7ac:	80 91 6b 00 	lds	r24, 0x006B
     7b0:	84 60       	ori	r24, 0x04	; 4
     7b2:	80 93 6b 00 	sts	0x006B, r24
	return RESULT_OK;
     7b6:	80 e0       	ldi	r24, 0x00	; 0
     7b8:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB2); setBit(DDRB, PB2);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB2); setBit(DDRB, PB2);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB2); clrBit(DDRB, PB2);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB2); clrBit(DDRB, PB2);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     7ba:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK0, PCINT2);
	return RESULT_OK;
}
     7bc:	08 95       	ret

000007be <pcint2DeactivateInterrupt>:
 * Deactivates the external interrupt pcint2 in PB2
 * -------------------------------------------------------------------------- */

void pcint2DeactivateInterrupt(void)
{
	clrBit(PCMSK0, PCINT2);
     7be:	eb e6       	ldi	r30, 0x6B	; 107
     7c0:	f0 e0       	ldi	r31, 0x00	; 0
     7c2:	80 81       	ld	r24, Z
     7c4:	8b 7f       	andi	r24, 0xFB	; 251
     7c6:	80 83       	st	Z, r24
     7c8:	08 95       	ret

000007ca <pcint3ActivateInterrupt>:
 * Activates the external interrupt pcint3 and configures port mode in PB3
 * -------------------------------------------------------------------------- */

resultValue_t pcint3ActivateInterrupt(portMode_t port)
{
	switch(port){
     7ca:	82 30       	cpi	r24, 0x02	; 2
     7cc:	79 f0       	breq	.+30     	; 0x7ec <pcint3ActivateInterrupt+0x22>
     7ce:	30 f4       	brcc	.+12     	; 0x7dc <pcint3ActivateInterrupt+0x12>
     7d0:	88 23       	and	r24, r24
     7d2:	49 f0       	breq	.+18     	; 0x7e6 <pcint3ActivateInterrupt+0x1c>
     7d4:	81 30       	cpi	r24, 0x01	; 1
     7d6:	a9 f4       	brne	.+42     	; 0x802 <pcint3ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB3); setBit(DDRB, PB3);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB3); setBit(DDRB, PB3);	break;
     7d8:	2b 9a       	sbi	0x05, 3	; 5
     7da:	06 c0       	rjmp	.+12     	; 0x7e8 <pcint3ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint3 and configures port mode in PB3
 * -------------------------------------------------------------------------- */

resultValue_t pcint3ActivateInterrupt(portMode_t port)
{
	switch(port){
     7dc:	83 30       	cpi	r24, 0x03	; 3
     7de:	41 f0       	breq	.+16     	; 0x7f0 <pcint3ActivateInterrupt+0x26>
     7e0:	8f 3f       	cpi	r24, 0xFF	; 255
     7e2:	41 f0       	breq	.+16     	; 0x7f4 <pcint3ActivateInterrupt+0x2a>
     7e4:	0e c0       	rjmp	.+28     	; 0x802 <pcint3ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB3); setBit(DDRB, PB3);	break;
     7e6:	2b 98       	cbi	0x05, 3	; 5
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB3); setBit(DDRB, PB3);	break;
     7e8:	23 9a       	sbi	0x04, 3	; 4
     7ea:	04 c0       	rjmp	.+8      	; 0x7f4 <pcint3ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB3); clrBit(DDRB, PB3);	break;
     7ec:	2b 98       	cbi	0x05, 3	; 5
     7ee:	01 c0       	rjmp	.+2      	; 0x7f2 <pcint3ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB3); clrBit(DDRB, PB3);	break;
     7f0:	2b 9a       	sbi	0x05, 3	; 5
     7f2:	23 98       	cbi	0x04, 3	; 4
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK0, PCINT3);
     7f4:	80 91 6b 00 	lds	r24, 0x006B
     7f8:	88 60       	ori	r24, 0x08	; 8
     7fa:	80 93 6b 00 	sts	0x006B, r24
	return RESULT_OK;
     7fe:	80 e0       	ldi	r24, 0x00	; 0
     800:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB3); setBit(DDRB, PB3);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB3); setBit(DDRB, PB3);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB3); clrBit(DDRB, PB3);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB3); clrBit(DDRB, PB3);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     802:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK0, PCINT3);
	return RESULT_OK;
}
     804:	08 95       	ret

00000806 <pcint3DeactivateInterrupt>:
 * Deactivates the external interrupt pcint3 in PB3
 * -------------------------------------------------------------------------- */

void pcint3DeactivateInterrupt(void)
{
	clrBit(PCMSK0, PCINT3);
     806:	eb e6       	ldi	r30, 0x6B	; 107
     808:	f0 e0       	ldi	r31, 0x00	; 0
     80a:	80 81       	ld	r24, Z
     80c:	87 7f       	andi	r24, 0xF7	; 247
     80e:	80 83       	st	Z, r24
     810:	08 95       	ret

00000812 <pcint4ActivateInterrupt>:
 * Activates the external interrupt pcint4 and configures port mode in PB4
 * -------------------------------------------------------------------------- */

resultValue_t pcint4ActivateInterrupt(portMode_t port)
{
	switch(port){
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	79 f0       	breq	.+30     	; 0x834 <pcint4ActivateInterrupt+0x22>
     816:	30 f4       	brcc	.+12     	; 0x824 <pcint4ActivateInterrupt+0x12>
     818:	88 23       	and	r24, r24
     81a:	49 f0       	breq	.+18     	; 0x82e <pcint4ActivateInterrupt+0x1c>
     81c:	81 30       	cpi	r24, 0x01	; 1
     81e:	a9 f4       	brne	.+42     	; 0x84a <pcint4ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB4); setBit(DDRB, PB4);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB4); setBit(DDRB, PB4);	break;
     820:	2c 9a       	sbi	0x05, 4	; 5
     822:	06 c0       	rjmp	.+12     	; 0x830 <pcint4ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint4 and configures port mode in PB4
 * -------------------------------------------------------------------------- */

resultValue_t pcint4ActivateInterrupt(portMode_t port)
{
	switch(port){
     824:	83 30       	cpi	r24, 0x03	; 3
     826:	41 f0       	breq	.+16     	; 0x838 <pcint4ActivateInterrupt+0x26>
     828:	8f 3f       	cpi	r24, 0xFF	; 255
     82a:	41 f0       	breq	.+16     	; 0x83c <pcint4ActivateInterrupt+0x2a>
     82c:	0e c0       	rjmp	.+28     	; 0x84a <pcint4ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB4); setBit(DDRB, PB4);	break;
     82e:	2c 98       	cbi	0x05, 4	; 5
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB4); setBit(DDRB, PB4);	break;
     830:	24 9a       	sbi	0x04, 4	; 4
     832:	04 c0       	rjmp	.+8      	; 0x83c <pcint4ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB4); clrBit(DDRB, PB4);	break;
     834:	2c 98       	cbi	0x05, 4	; 5
     836:	01 c0       	rjmp	.+2      	; 0x83a <pcint4ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB4); clrBit(DDRB, PB4);	break;
     838:	2c 9a       	sbi	0x05, 4	; 5
     83a:	24 98       	cbi	0x04, 4	; 4
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK0, PCINT4);
     83c:	80 91 6b 00 	lds	r24, 0x006B
     840:	80 61       	ori	r24, 0x10	; 16
     842:	80 93 6b 00 	sts	0x006B, r24
	return RESULT_OK;
     846:	80 e0       	ldi	r24, 0x00	; 0
     848:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB4); setBit(DDRB, PB4);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB4); setBit(DDRB, PB4);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB4); clrBit(DDRB, PB4);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB4); clrBit(DDRB, PB4);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     84a:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK0, PCINT4);
	return RESULT_OK;
}
     84c:	08 95       	ret

0000084e <pcint4DeactivateInterrupt>:
 * Deactivates the external interrupt pcint4 in PB4
 * -------------------------------------------------------------------------- */

void pcint4DeactivateInterrupt(void)
{
	clrBit(PCMSK0, PCINT4);
     84e:	eb e6       	ldi	r30, 0x6B	; 107
     850:	f0 e0       	ldi	r31, 0x00	; 0
     852:	80 81       	ld	r24, Z
     854:	8f 7e       	andi	r24, 0xEF	; 239
     856:	80 83       	st	Z, r24
     858:	08 95       	ret

0000085a <pcint5ActivateInterrupt>:
 * Activates the external interrupt pcint5 and configures port mode in PB5
 * -------------------------------------------------------------------------- */

resultValue_t pcint5ActivateInterrupt(portMode_t port)
{
	switch(port){
     85a:	82 30       	cpi	r24, 0x02	; 2
     85c:	79 f0       	breq	.+30     	; 0x87c <pcint5ActivateInterrupt+0x22>
     85e:	30 f4       	brcc	.+12     	; 0x86c <pcint5ActivateInterrupt+0x12>
     860:	88 23       	and	r24, r24
     862:	49 f0       	breq	.+18     	; 0x876 <pcint5ActivateInterrupt+0x1c>
     864:	81 30       	cpi	r24, 0x01	; 1
     866:	a9 f4       	brne	.+42     	; 0x892 <pcint5ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB5); setBit(DDRB, PB5);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB5); setBit(DDRB, PB5);	break;
     868:	2d 9a       	sbi	0x05, 5	; 5
     86a:	06 c0       	rjmp	.+12     	; 0x878 <pcint5ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint5 and configures port mode in PB5
 * -------------------------------------------------------------------------- */

resultValue_t pcint5ActivateInterrupt(portMode_t port)
{
	switch(port){
     86c:	83 30       	cpi	r24, 0x03	; 3
     86e:	41 f0       	breq	.+16     	; 0x880 <pcint5ActivateInterrupt+0x26>
     870:	8f 3f       	cpi	r24, 0xFF	; 255
     872:	41 f0       	breq	.+16     	; 0x884 <pcint5ActivateInterrupt+0x2a>
     874:	0e c0       	rjmp	.+28     	; 0x892 <pcint5ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB5); setBit(DDRB, PB5);	break;
     876:	2d 98       	cbi	0x05, 5	; 5
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB5); setBit(DDRB, PB5);	break;
     878:	25 9a       	sbi	0x04, 5	; 4
     87a:	04 c0       	rjmp	.+8      	; 0x884 <pcint5ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB5); clrBit(DDRB, PB5);	break;
     87c:	2d 98       	cbi	0x05, 5	; 5
     87e:	01 c0       	rjmp	.+2      	; 0x882 <pcint5ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB5); clrBit(DDRB, PB5);	break;
     880:	2d 9a       	sbi	0x05, 5	; 5
     882:	25 98       	cbi	0x04, 5	; 4
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK0, PCINT5);
     884:	80 91 6b 00 	lds	r24, 0x006B
     888:	80 62       	ori	r24, 0x20	; 32
     88a:	80 93 6b 00 	sts	0x006B, r24
	return RESULT_OK;
     88e:	80 e0       	ldi	r24, 0x00	; 0
     890:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB5); setBit(DDRB, PB5);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB5); setBit(DDRB, PB5);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB5); clrBit(DDRB, PB5);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB5); clrBit(DDRB, PB5);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     892:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK0, PCINT5);
	return RESULT_OK;
}
     894:	08 95       	ret

00000896 <pcint5DeactivateInterrupt>:
 * Deactivates the external interrupt pcint5 in PB5
 * -------------------------------------------------------------------------- */

void pcint5DeactivateInterrupt(void)
{
	clrBit(PCMSK0, PCINT5);
     896:	eb e6       	ldi	r30, 0x6B	; 107
     898:	f0 e0       	ldi	r31, 0x00	; 0
     89a:	80 81       	ld	r24, Z
     89c:	8f 7d       	andi	r24, 0xDF	; 223
     89e:	80 83       	st	Z, r24
     8a0:	08 95       	ret

000008a2 <pcint6ActivateInterrupt>:
 * Activates the external interrupt pcint6 and configures port mode in PB6
 * -------------------------------------------------------------------------- */

resultValue_t pcint6ActivateInterrupt(portMode_t port)
{
	switch(port){
     8a2:	82 30       	cpi	r24, 0x02	; 2
     8a4:	79 f0       	breq	.+30     	; 0x8c4 <pcint6ActivateInterrupt+0x22>
     8a6:	30 f4       	brcc	.+12     	; 0x8b4 <pcint6ActivateInterrupt+0x12>
     8a8:	88 23       	and	r24, r24
     8aa:	49 f0       	breq	.+18     	; 0x8be <pcint6ActivateInterrupt+0x1c>
     8ac:	81 30       	cpi	r24, 0x01	; 1
     8ae:	a9 f4       	brne	.+42     	; 0x8da <pcint6ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB6); setBit(DDRB, PB6);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB6); setBit(DDRB, PB6);	break;
     8b0:	2e 9a       	sbi	0x05, 6	; 5
     8b2:	06 c0       	rjmp	.+12     	; 0x8c0 <pcint6ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint6 and configures port mode in PB6
 * -------------------------------------------------------------------------- */

resultValue_t pcint6ActivateInterrupt(portMode_t port)
{
	switch(port){
     8b4:	83 30       	cpi	r24, 0x03	; 3
     8b6:	41 f0       	breq	.+16     	; 0x8c8 <pcint6ActivateInterrupt+0x26>
     8b8:	8f 3f       	cpi	r24, 0xFF	; 255
     8ba:	41 f0       	breq	.+16     	; 0x8cc <pcint6ActivateInterrupt+0x2a>
     8bc:	0e c0       	rjmp	.+28     	; 0x8da <pcint6ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB6); setBit(DDRB, PB6);	break;
     8be:	2e 98       	cbi	0x05, 6	; 5
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB6); setBit(DDRB, PB6);	break;
     8c0:	26 9a       	sbi	0x04, 6	; 4
     8c2:	04 c0       	rjmp	.+8      	; 0x8cc <pcint6ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB6); clrBit(DDRB, PB6);	break;
     8c4:	2e 98       	cbi	0x05, 6	; 5
     8c6:	01 c0       	rjmp	.+2      	; 0x8ca <pcint6ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB6); clrBit(DDRB, PB6);	break;
     8c8:	2e 9a       	sbi	0x05, 6	; 5
     8ca:	26 98       	cbi	0x04, 6	; 4
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK0, PCINT6);
     8cc:	80 91 6b 00 	lds	r24, 0x006B
     8d0:	80 64       	ori	r24, 0x40	; 64
     8d2:	80 93 6b 00 	sts	0x006B, r24
	return RESULT_OK;
     8d6:	80 e0       	ldi	r24, 0x00	; 0
     8d8:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB6); setBit(DDRB, PB6);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB6); setBit(DDRB, PB6);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB6); clrBit(DDRB, PB6);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB6); clrBit(DDRB, PB6);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     8da:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK0, PCINT6);
	return RESULT_OK;
}
     8dc:	08 95       	ret

000008de <pcint6DeactivateInterrupt>:
 * Deactivates the external interrupt pcint6 in PB6
 * -------------------------------------------------------------------------- */

void pcint6DeactivateInterrupt(void)
{
	clrBit(PCMSK0, PCINT6);
     8de:	eb e6       	ldi	r30, 0x6B	; 107
     8e0:	f0 e0       	ldi	r31, 0x00	; 0
     8e2:	80 81       	ld	r24, Z
     8e4:	8f 7b       	andi	r24, 0xBF	; 191
     8e6:	80 83       	st	Z, r24
     8e8:	08 95       	ret

000008ea <pcint7ActivateInterrupt>:
 * Activates the external interrupt pcint7 and configures port mode in PB7
 * -------------------------------------------------------------------------- */

resultValue_t pcint7ActivateInterrupt(portMode_t port)
{
	switch(port){
     8ea:	82 30       	cpi	r24, 0x02	; 2
     8ec:	79 f0       	breq	.+30     	; 0x90c <__stack+0xd>
     8ee:	30 f4       	brcc	.+12     	; 0x8fc <pcint7ActivateInterrupt+0x12>
     8f0:	88 23       	and	r24, r24
     8f2:	49 f0       	breq	.+18     	; 0x906 <__stack+0x7>
     8f4:	81 30       	cpi	r24, 0x01	; 1
     8f6:	a9 f4       	brne	.+42     	; 0x922 <__stack+0x23>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB7); setBit(DDRB, PB7);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB7); setBit(DDRB, PB7);	break;
     8f8:	2f 9a       	sbi	0x05, 7	; 5
     8fa:	06 c0       	rjmp	.+12     	; 0x908 <__stack+0x9>
 * Activates the external interrupt pcint7 and configures port mode in PB7
 * -------------------------------------------------------------------------- */

resultValue_t pcint7ActivateInterrupt(portMode_t port)
{
	switch(port){
     8fc:	83 30       	cpi	r24, 0x03	; 3
     8fe:	41 f0       	breq	.+16     	; 0x910 <__stack+0x11>
     900:	8f 3f       	cpi	r24, 0xFF	; 255
     902:	41 f0       	breq	.+16     	; 0x914 <__stack+0x15>
     904:	0e c0       	rjmp	.+28     	; 0x922 <__stack+0x23>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB7); setBit(DDRB, PB7);	break;
     906:	2f 98       	cbi	0x05, 7	; 5
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB7); setBit(DDRB, PB7);	break;
     908:	27 9a       	sbi	0x04, 7	; 4
     90a:	04 c0       	rjmp	.+8      	; 0x914 <__stack+0x15>
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB7); clrBit(DDRB, PB7);	break;
     90c:	2f 98       	cbi	0x05, 7	; 5
     90e:	01 c0       	rjmp	.+2      	; 0x912 <__stack+0x13>
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB7); clrBit(DDRB, PB7);	break;
     910:	2f 9a       	sbi	0x05, 7	; 5
     912:	27 98       	cbi	0x04, 7	; 4
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK0, PCINT7);
     914:	80 91 6b 00 	lds	r24, 0x006B
     918:	80 68       	ori	r24, 0x80	; 128
     91a:	80 93 6b 00 	sts	0x006B, r24
	return RESULT_OK;
     91e:	80 e0       	ldi	r24, 0x00	; 0
     920:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB7); setBit(DDRB, PB7);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB7); setBit(DDRB, PB7);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB7); clrBit(DDRB, PB7);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB7); clrBit(DDRB, PB7);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     922:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK0, PCINT7);
	return RESULT_OK;
}
     924:	08 95       	ret

00000926 <pcint7DeactivateInterrupt>:
 * Deactivates the external interrupt pcint7 in PB7
 * -------------------------------------------------------------------------- */

void pcint7DeactivateInterrupt(void)
{
	clrBit(PCMSK0, PCINT7);
     926:	eb e6       	ldi	r30, 0x6B	; 107
     928:	f0 e0       	ldi	r31, 0x00	; 0
     92a:	80 81       	ld	r24, Z
     92c:	8f 77       	andi	r24, 0x7F	; 127
     92e:	80 83       	st	Z, r24
     930:	08 95       	ret

00000932 <pcint14_8Enable>:
 * Enables the external interrupt pcint in port C
 * -------------------------------------------------------------------------- */

void pcint14_8Enable(void)
{
	setBit(PCICR, PCIE1);
     932:	e8 e6       	ldi	r30, 0x68	; 104
     934:	f0 e0       	ldi	r31, 0x00	; 0
     936:	80 81       	ld	r24, Z
     938:	82 60       	ori	r24, 0x02	; 2
     93a:	80 83       	st	Z, r24
     93c:	08 95       	ret

0000093e <pcint14_8Disable>:
 * Disables the external interrupt pcint in port C
 * -------------------------------------------------------------------------- */

void pcint14_8Disable(void)
{
	clrBit(PCICR, PCIE1);
     93e:	e8 e6       	ldi	r30, 0x68	; 104
     940:	f0 e0       	ldi	r31, 0x00	; 0
     942:	80 81       	ld	r24, Z
     944:	8d 7f       	andi	r24, 0xFD	; 253
     946:	80 83       	st	Z, r24
     948:	08 95       	ret

0000094a <pcint14_8ClearInterruptRequest>:
 * Disables the external interrupt pcint in port C
 * -------------------------------------------------------------------------- */

void pcint14_8ClearInterruptRequest(void)
{
	setBit(PCIFR, PCIF1);
     94a:	d9 9a       	sbi	0x1b, 1	; 27
     94c:	08 95       	ret

0000094e <pcint8ActivateInterrupt>:
 * Activates the external interrupt pcint8 and configures port mode in PC0
 * -------------------------------------------------------------------------- */

resultValue_t pcint8ActivateInterrupt(portMode_t port)
{
	switch(port){
     94e:	82 30       	cpi	r24, 0x02	; 2
     950:	79 f0       	breq	.+30     	; 0x970 <pcint8ActivateInterrupt+0x22>
     952:	30 f4       	brcc	.+12     	; 0x960 <pcint8ActivateInterrupt+0x12>
     954:	88 23       	and	r24, r24
     956:	49 f0       	breq	.+18     	; 0x96a <pcint8ActivateInterrupt+0x1c>
     958:	81 30       	cpi	r24, 0x01	; 1
     95a:	a9 f4       	brne	.+42     	; 0x986 <pcint8ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC0); setBit(DDRC, PC0);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC0); setBit(DDRC, PC0);	break;
     95c:	40 9a       	sbi	0x08, 0	; 8
     95e:	06 c0       	rjmp	.+12     	; 0x96c <pcint8ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint8 and configures port mode in PC0
 * -------------------------------------------------------------------------- */

resultValue_t pcint8ActivateInterrupt(portMode_t port)
{
	switch(port){
     960:	83 30       	cpi	r24, 0x03	; 3
     962:	41 f0       	breq	.+16     	; 0x974 <pcint8ActivateInterrupt+0x26>
     964:	8f 3f       	cpi	r24, 0xFF	; 255
     966:	41 f0       	breq	.+16     	; 0x978 <pcint8ActivateInterrupt+0x2a>
     968:	0e c0       	rjmp	.+28     	; 0x986 <pcint8ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC0); setBit(DDRC, PC0);	break;
     96a:	40 98       	cbi	0x08, 0	; 8
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC0); setBit(DDRC, PC0);	break;
     96c:	38 9a       	sbi	0x07, 0	; 7
     96e:	04 c0       	rjmp	.+8      	; 0x978 <pcint8ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTC, PC0); clrBit(DDRC, PC0);	break;
     970:	40 98       	cbi	0x08, 0	; 8
     972:	01 c0       	rjmp	.+2      	; 0x976 <pcint8ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTC, PC0); clrBit(DDRC, PC0);	break;
     974:	40 9a       	sbi	0x08, 0	; 8
     976:	38 98       	cbi	0x07, 0	; 7
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK1, PCINT8);
     978:	80 91 6c 00 	lds	r24, 0x006C
     97c:	81 60       	ori	r24, 0x01	; 1
     97e:	80 93 6c 00 	sts	0x006C, r24
	return RESULT_OK;
     982:	80 e0       	ldi	r24, 0x00	; 0
     984:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC0); setBit(DDRC, PC0);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC0); setBit(DDRC, PC0);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTC, PC0); clrBit(DDRC, PC0);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTC, PC0); clrBit(DDRC, PC0);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     986:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK1, PCINT8);
	return RESULT_OK;
}
     988:	08 95       	ret

0000098a <pcint8DeactivateInterrupt>:
 * Deactivates the external interrupt pcint8 in PC0
 * -------------------------------------------------------------------------- */

void pcint8DeactivateInterrupt(void)
{
	clrBit(PCMSK1, PCINT8);
     98a:	ec e6       	ldi	r30, 0x6C	; 108
     98c:	f0 e0       	ldi	r31, 0x00	; 0
     98e:	80 81       	ld	r24, Z
     990:	8e 7f       	andi	r24, 0xFE	; 254
     992:	80 83       	st	Z, r24
     994:	08 95       	ret

00000996 <pcint9ActivateInterrupt>:
 * Activates the external interrupt pcint9 and configures port mode in PC1
 * -------------------------------------------------------------------------- */

resultValue_t pcint9ActivateInterrupt(portMode_t port)
{
	switch(port){
     996:	82 30       	cpi	r24, 0x02	; 2
     998:	79 f0       	breq	.+30     	; 0x9b8 <pcint9ActivateInterrupt+0x22>
     99a:	30 f4       	brcc	.+12     	; 0x9a8 <pcint9ActivateInterrupt+0x12>
     99c:	88 23       	and	r24, r24
     99e:	49 f0       	breq	.+18     	; 0x9b2 <pcint9ActivateInterrupt+0x1c>
     9a0:	81 30       	cpi	r24, 0x01	; 1
     9a2:	a9 f4       	brne	.+42     	; 0x9ce <pcint9ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC1); setBit(DDRC, PC1);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC1); setBit(DDRC, PC1);	break;
     9a4:	41 9a       	sbi	0x08, 1	; 8
     9a6:	06 c0       	rjmp	.+12     	; 0x9b4 <pcint9ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint9 and configures port mode in PC1
 * -------------------------------------------------------------------------- */

resultValue_t pcint9ActivateInterrupt(portMode_t port)
{
	switch(port){
     9a8:	83 30       	cpi	r24, 0x03	; 3
     9aa:	41 f0       	breq	.+16     	; 0x9bc <pcint9ActivateInterrupt+0x26>
     9ac:	8f 3f       	cpi	r24, 0xFF	; 255
     9ae:	41 f0       	breq	.+16     	; 0x9c0 <pcint9ActivateInterrupt+0x2a>
     9b0:	0e c0       	rjmp	.+28     	; 0x9ce <pcint9ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC1); setBit(DDRC, PC1);	break;
     9b2:	41 98       	cbi	0x08, 1	; 8
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC1); setBit(DDRC, PC1);	break;
     9b4:	39 9a       	sbi	0x07, 1	; 7
     9b6:	04 c0       	rjmp	.+8      	; 0x9c0 <pcint9ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTC, PC1); clrBit(DDRC, PC1);	break;
     9b8:	41 98       	cbi	0x08, 1	; 8
     9ba:	01 c0       	rjmp	.+2      	; 0x9be <pcint9ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTC, PC1); clrBit(DDRC, PC1);	break;
     9bc:	41 9a       	sbi	0x08, 1	; 8
     9be:	39 98       	cbi	0x07, 1	; 7
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK1, PCINT9);
     9c0:	80 91 6c 00 	lds	r24, 0x006C
     9c4:	82 60       	ori	r24, 0x02	; 2
     9c6:	80 93 6c 00 	sts	0x006C, r24
	return RESULT_OK;
     9ca:	80 e0       	ldi	r24, 0x00	; 0
     9cc:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC1); setBit(DDRC, PC1);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC1); setBit(DDRC, PC1);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTC, PC1); clrBit(DDRC, PC1);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTC, PC1); clrBit(DDRC, PC1);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     9ce:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK1, PCINT9);
	return RESULT_OK;
}
     9d0:	08 95       	ret

000009d2 <pcint9DeactivateInterrupt>:
 * Deactivates the external interrupt pcint9 in PC1
 * -------------------------------------------------------------------------- */

void pcint9DeactivateInterrupt(void)
{
	clrBit(PCMSK1, PCINT9);
     9d2:	ec e6       	ldi	r30, 0x6C	; 108
     9d4:	f0 e0       	ldi	r31, 0x00	; 0
     9d6:	80 81       	ld	r24, Z
     9d8:	8d 7f       	andi	r24, 0xFD	; 253
     9da:	80 83       	st	Z, r24
     9dc:	08 95       	ret

000009de <pcint10ActivateInterrupt>:
 * Activates the external interrupt pcint10 and configures port mode in PC2
 * -------------------------------------------------------------------------- */

resultValue_t pcint10ActivateInterrupt(portMode_t port)
{
	switch(port){
     9de:	82 30       	cpi	r24, 0x02	; 2
     9e0:	79 f0       	breq	.+30     	; 0xa00 <pcint10ActivateInterrupt+0x22>
     9e2:	30 f4       	brcc	.+12     	; 0x9f0 <pcint10ActivateInterrupt+0x12>
     9e4:	88 23       	and	r24, r24
     9e6:	49 f0       	breq	.+18     	; 0x9fa <pcint10ActivateInterrupt+0x1c>
     9e8:	81 30       	cpi	r24, 0x01	; 1
     9ea:	a9 f4       	brne	.+42     	; 0xa16 <pcint10ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC2); setBit(DDRC, PC2);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC2); setBit(DDRC, PC2);	break;
     9ec:	42 9a       	sbi	0x08, 2	; 8
     9ee:	06 c0       	rjmp	.+12     	; 0x9fc <pcint10ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint10 and configures port mode in PC2
 * -------------------------------------------------------------------------- */

resultValue_t pcint10ActivateInterrupt(portMode_t port)
{
	switch(port){
     9f0:	83 30       	cpi	r24, 0x03	; 3
     9f2:	41 f0       	breq	.+16     	; 0xa04 <pcint10ActivateInterrupt+0x26>
     9f4:	8f 3f       	cpi	r24, 0xFF	; 255
     9f6:	41 f0       	breq	.+16     	; 0xa08 <pcint10ActivateInterrupt+0x2a>
     9f8:	0e c0       	rjmp	.+28     	; 0xa16 <pcint10ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC2); setBit(DDRC, PC2);	break;
     9fa:	42 98       	cbi	0x08, 2	; 8
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC2); setBit(DDRC, PC2);	break;
     9fc:	3a 9a       	sbi	0x07, 2	; 7
     9fe:	04 c0       	rjmp	.+8      	; 0xa08 <pcint10ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTC, PC2); clrBit(DDRC, PC2);	break;
     a00:	42 98       	cbi	0x08, 2	; 8
     a02:	01 c0       	rjmp	.+2      	; 0xa06 <pcint10ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTC, PC2); clrBit(DDRC, PC2);	break;
     a04:	42 9a       	sbi	0x08, 2	; 8
     a06:	3a 98       	cbi	0x07, 2	; 7
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK1, PCINT10);
     a08:	80 91 6c 00 	lds	r24, 0x006C
     a0c:	84 60       	ori	r24, 0x04	; 4
     a0e:	80 93 6c 00 	sts	0x006C, r24
	return RESULT_OK;
     a12:	80 e0       	ldi	r24, 0x00	; 0
     a14:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC2); setBit(DDRC, PC2);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC2); setBit(DDRC, PC2);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTC, PC2); clrBit(DDRC, PC2);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTC, PC2); clrBit(DDRC, PC2);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     a16:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK1, PCINT10);
	return RESULT_OK;
}
     a18:	08 95       	ret

00000a1a <pcint10DeactivateInterrupt>:
 * Deactivates the external interrupt pcint10 in PC2
 * -------------------------------------------------------------------------- */

void pcint10DeactivateInterrupt(void)
{
	clrBit(PCMSK1, PCINT10);
     a1a:	ec e6       	ldi	r30, 0x6C	; 108
     a1c:	f0 e0       	ldi	r31, 0x00	; 0
     a1e:	80 81       	ld	r24, Z
     a20:	8b 7f       	andi	r24, 0xFB	; 251
     a22:	80 83       	st	Z, r24
     a24:	08 95       	ret

00000a26 <pcint11ActivateInterrupt>:
 * Activates the external interrupt pcint11 and configures port mode in PC3
 * -------------------------------------------------------------------------- */

resultValue_t pcint11ActivateInterrupt(portMode_t port)
{
	switch(port){
     a26:	82 30       	cpi	r24, 0x02	; 2
     a28:	79 f0       	breq	.+30     	; 0xa48 <pcint11ActivateInterrupt+0x22>
     a2a:	30 f4       	brcc	.+12     	; 0xa38 <pcint11ActivateInterrupt+0x12>
     a2c:	88 23       	and	r24, r24
     a2e:	49 f0       	breq	.+18     	; 0xa42 <pcint11ActivateInterrupt+0x1c>
     a30:	81 30       	cpi	r24, 0x01	; 1
     a32:	a9 f4       	brne	.+42     	; 0xa5e <pcint11ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC3); setBit(DDRC, PC3);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC3); setBit(DDRC, PC3);	break;
     a34:	43 9a       	sbi	0x08, 3	; 8
     a36:	06 c0       	rjmp	.+12     	; 0xa44 <pcint11ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint11 and configures port mode in PC3
 * -------------------------------------------------------------------------- */

resultValue_t pcint11ActivateInterrupt(portMode_t port)
{
	switch(port){
     a38:	83 30       	cpi	r24, 0x03	; 3
     a3a:	41 f0       	breq	.+16     	; 0xa4c <pcint11ActivateInterrupt+0x26>
     a3c:	8f 3f       	cpi	r24, 0xFF	; 255
     a3e:	41 f0       	breq	.+16     	; 0xa50 <pcint11ActivateInterrupt+0x2a>
     a40:	0e c0       	rjmp	.+28     	; 0xa5e <pcint11ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC3); setBit(DDRC, PC3);	break;
     a42:	43 98       	cbi	0x08, 3	; 8
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC3); setBit(DDRC, PC3);	break;
     a44:	3b 9a       	sbi	0x07, 3	; 7
     a46:	04 c0       	rjmp	.+8      	; 0xa50 <pcint11ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTC, PC3); clrBit(DDRC, PC3);	break;
     a48:	43 98       	cbi	0x08, 3	; 8
     a4a:	01 c0       	rjmp	.+2      	; 0xa4e <pcint11ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTC, PC3); clrBit(DDRC, PC3);	break;
     a4c:	43 9a       	sbi	0x08, 3	; 8
     a4e:	3b 98       	cbi	0x07, 3	; 7
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK1, PCINT11);
     a50:	80 91 6c 00 	lds	r24, 0x006C
     a54:	88 60       	ori	r24, 0x08	; 8
     a56:	80 93 6c 00 	sts	0x006C, r24
	return RESULT_OK;
     a5a:	80 e0       	ldi	r24, 0x00	; 0
     a5c:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC3); setBit(DDRC, PC3);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC3); setBit(DDRC, PC3);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTC, PC3); clrBit(DDRC, PC3);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTC, PC3); clrBit(DDRC, PC3);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     a5e:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK1, PCINT11);
	return RESULT_OK;
}
     a60:	08 95       	ret

00000a62 <pcint11DeactivateInterrupt>:
 * Deactivates the external interrupt pcint11 in PC3
 * -------------------------------------------------------------------------- */

void pcint11DeactivateInterrupt(void)
{
	clrBit(PCMSK1, PCINT11);
     a62:	ec e6       	ldi	r30, 0x6C	; 108
     a64:	f0 e0       	ldi	r31, 0x00	; 0
     a66:	80 81       	ld	r24, Z
     a68:	87 7f       	andi	r24, 0xF7	; 247
     a6a:	80 83       	st	Z, r24
     a6c:	08 95       	ret

00000a6e <pcint12ActivateInterrupt>:
 * Activates the external interrupt pcint12 and configures port mode in PC4
 * -------------------------------------------------------------------------- */

resultValue_t pcint12ActivateInterrupt(portMode_t port)
{
	switch(port){
     a6e:	82 30       	cpi	r24, 0x02	; 2
     a70:	79 f0       	breq	.+30     	; 0xa90 <pcint12ActivateInterrupt+0x22>
     a72:	30 f4       	brcc	.+12     	; 0xa80 <pcint12ActivateInterrupt+0x12>
     a74:	88 23       	and	r24, r24
     a76:	49 f0       	breq	.+18     	; 0xa8a <pcint12ActivateInterrupt+0x1c>
     a78:	81 30       	cpi	r24, 0x01	; 1
     a7a:	a9 f4       	brne	.+42     	; 0xaa6 <pcint12ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC4); setBit(DDRC, PC4);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC4); setBit(DDRC, PC4);	break;
     a7c:	44 9a       	sbi	0x08, 4	; 8
     a7e:	06 c0       	rjmp	.+12     	; 0xa8c <pcint12ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint12 and configures port mode in PC4
 * -------------------------------------------------------------------------- */

resultValue_t pcint12ActivateInterrupt(portMode_t port)
{
	switch(port){
     a80:	83 30       	cpi	r24, 0x03	; 3
     a82:	41 f0       	breq	.+16     	; 0xa94 <pcint12ActivateInterrupt+0x26>
     a84:	8f 3f       	cpi	r24, 0xFF	; 255
     a86:	41 f0       	breq	.+16     	; 0xa98 <pcint12ActivateInterrupt+0x2a>
     a88:	0e c0       	rjmp	.+28     	; 0xaa6 <pcint12ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC4); setBit(DDRC, PC4);	break;
     a8a:	44 98       	cbi	0x08, 4	; 8
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC4); setBit(DDRC, PC4);	break;
     a8c:	3c 9a       	sbi	0x07, 4	; 7
     a8e:	04 c0       	rjmp	.+8      	; 0xa98 <pcint12ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTC, PC4); clrBit(DDRC, PC4);	break;
     a90:	44 98       	cbi	0x08, 4	; 8
     a92:	01 c0       	rjmp	.+2      	; 0xa96 <pcint12ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTC, PC4); clrBit(DDRC, PC4);	break;
     a94:	44 9a       	sbi	0x08, 4	; 8
     a96:	3c 98       	cbi	0x07, 4	; 7
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK1, PCINT12);
     a98:	80 91 6c 00 	lds	r24, 0x006C
     a9c:	80 61       	ori	r24, 0x10	; 16
     a9e:	80 93 6c 00 	sts	0x006C, r24
	return RESULT_OK;
     aa2:	80 e0       	ldi	r24, 0x00	; 0
     aa4:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC4); setBit(DDRC, PC4);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC4); setBit(DDRC, PC4);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTC, PC4); clrBit(DDRC, PC4);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTC, PC4); clrBit(DDRC, PC4);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     aa6:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK1, PCINT12);
	return RESULT_OK;
}
     aa8:	08 95       	ret

00000aaa <pcint12DeactivateInterrupt>:
 * Deactivates the external interrupt pcint12 in PC4
 * -------------------------------------------------------------------------- */

void pcint12DeactivateInterrupt(void)
{
	clrBit(PCMSK1, PCINT12);
     aaa:	ec e6       	ldi	r30, 0x6C	; 108
     aac:	f0 e0       	ldi	r31, 0x00	; 0
     aae:	80 81       	ld	r24, Z
     ab0:	8f 7e       	andi	r24, 0xEF	; 239
     ab2:	80 83       	st	Z, r24
     ab4:	08 95       	ret

00000ab6 <pcint13ActivateInterrupt>:
 * Activates the external interrupt pcint13 and configures port mode in PC5
 * -------------------------------------------------------------------------- */

resultValue_t pcint13ActivateInterrupt(portMode_t port)
{
	switch(port){
     ab6:	82 30       	cpi	r24, 0x02	; 2
     ab8:	79 f0       	breq	.+30     	; 0xad8 <pcint13ActivateInterrupt+0x22>
     aba:	30 f4       	brcc	.+12     	; 0xac8 <pcint13ActivateInterrupt+0x12>
     abc:	88 23       	and	r24, r24
     abe:	49 f0       	breq	.+18     	; 0xad2 <pcint13ActivateInterrupt+0x1c>
     ac0:	81 30       	cpi	r24, 0x01	; 1
     ac2:	a9 f4       	brne	.+42     	; 0xaee <pcint13ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC5); setBit(DDRC, PC5);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC5); setBit(DDRC, PC5);	break;
     ac4:	45 9a       	sbi	0x08, 5	; 8
     ac6:	06 c0       	rjmp	.+12     	; 0xad4 <pcint13ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint13 and configures port mode in PC5
 * -------------------------------------------------------------------------- */

resultValue_t pcint13ActivateInterrupt(portMode_t port)
{
	switch(port){
     ac8:	83 30       	cpi	r24, 0x03	; 3
     aca:	41 f0       	breq	.+16     	; 0xadc <pcint13ActivateInterrupt+0x26>
     acc:	8f 3f       	cpi	r24, 0xFF	; 255
     ace:	41 f0       	breq	.+16     	; 0xae0 <pcint13ActivateInterrupt+0x2a>
     ad0:	0e c0       	rjmp	.+28     	; 0xaee <pcint13ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC5); setBit(DDRC, PC5);	break;
     ad2:	45 98       	cbi	0x08, 5	; 8
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC5); setBit(DDRC, PC5);	break;
     ad4:	3d 9a       	sbi	0x07, 5	; 7
     ad6:	04 c0       	rjmp	.+8      	; 0xae0 <pcint13ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTC, PC5); clrBit(DDRC, PC5);	break;
     ad8:	45 98       	cbi	0x08, 5	; 8
     ada:	01 c0       	rjmp	.+2      	; 0xade <pcint13ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTC, PC5); clrBit(DDRC, PC5);	break;
     adc:	45 9a       	sbi	0x08, 5	; 8
     ade:	3d 98       	cbi	0x07, 5	; 7
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK1, PCINT13);
     ae0:	80 91 6c 00 	lds	r24, 0x006C
     ae4:	80 62       	ori	r24, 0x20	; 32
     ae6:	80 93 6c 00 	sts	0x006C, r24
	return RESULT_OK;
     aea:	80 e0       	ldi	r24, 0x00	; 0
     aec:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC5); setBit(DDRC, PC5);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC5); setBit(DDRC, PC5);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTC, PC5); clrBit(DDRC, PC5);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTC, PC5); clrBit(DDRC, PC5);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     aee:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK1, PCINT13);
	return RESULT_OK;
}
     af0:	08 95       	ret

00000af2 <pcint13DeactivateInterrupt>:
 * Deactivates the external interrupt pcint13 in PC5
 * -------------------------------------------------------------------------- */

void pcint13DeactivateInterrupt(void)
{
	clrBit(PCMSK1, PCINT13);
     af2:	ec e6       	ldi	r30, 0x6C	; 108
     af4:	f0 e0       	ldi	r31, 0x00	; 0
     af6:	80 81       	ld	r24, Z
     af8:	8f 7d       	andi	r24, 0xDF	; 223
     afa:	80 83       	st	Z, r24
     afc:	08 95       	ret

00000afe <pcint14ActivateInterrupt>:
 * Activates the external interrupt pcint14 and configures port mode in PC6
 * -------------------------------------------------------------------------- */

resultValue_t pcint14ActivateInterrupt(portMode_t port)
{
	switch(port){
     afe:	82 30       	cpi	r24, 0x02	; 2
     b00:	79 f0       	breq	.+30     	; 0xb20 <pcint14ActivateInterrupt+0x22>
     b02:	30 f4       	brcc	.+12     	; 0xb10 <pcint14ActivateInterrupt+0x12>
     b04:	88 23       	and	r24, r24
     b06:	49 f0       	breq	.+18     	; 0xb1a <pcint14ActivateInterrupt+0x1c>
     b08:	81 30       	cpi	r24, 0x01	; 1
     b0a:	a9 f4       	brne	.+42     	; 0xb36 <pcint14ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC6); setBit(DDRC, PC6);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC6); setBit(DDRC, PC6);	break;
     b0c:	46 9a       	sbi	0x08, 6	; 8
     b0e:	06 c0       	rjmp	.+12     	; 0xb1c <pcint14ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint14 and configures port mode in PC6
 * -------------------------------------------------------------------------- */

resultValue_t pcint14ActivateInterrupt(portMode_t port)
{
	switch(port){
     b10:	83 30       	cpi	r24, 0x03	; 3
     b12:	41 f0       	breq	.+16     	; 0xb24 <pcint14ActivateInterrupt+0x26>
     b14:	8f 3f       	cpi	r24, 0xFF	; 255
     b16:	41 f0       	breq	.+16     	; 0xb28 <pcint14ActivateInterrupt+0x2a>
     b18:	0e c0       	rjmp	.+28     	; 0xb36 <pcint14ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC6); setBit(DDRC, PC6);	break;
     b1a:	46 98       	cbi	0x08, 6	; 8
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC6); setBit(DDRC, PC6);	break;
     b1c:	3e 9a       	sbi	0x07, 6	; 7
     b1e:	04 c0       	rjmp	.+8      	; 0xb28 <pcint14ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTC, PC6); clrBit(DDRC, PC6);	break;
     b20:	46 98       	cbi	0x08, 6	; 8
     b22:	01 c0       	rjmp	.+2      	; 0xb26 <pcint14ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTC, PC6); clrBit(DDRC, PC6);	break;
     b24:	46 9a       	sbi	0x08, 6	; 8
     b26:	3e 98       	cbi	0x07, 6	; 7
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK1, PCINT14);
     b28:	80 91 6c 00 	lds	r24, 0x006C
     b2c:	80 64       	ori	r24, 0x40	; 64
     b2e:	80 93 6c 00 	sts	0x006C, r24
	return RESULT_OK;
     b32:	80 e0       	ldi	r24, 0x00	; 0
     b34:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC6); setBit(DDRC, PC6);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC6); setBit(DDRC, PC6);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTC, PC6); clrBit(DDRC, PC6);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTC, PC6); clrBit(DDRC, PC6);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     b36:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK1, PCINT14);
	return RESULT_OK;
}
     b38:	08 95       	ret

00000b3a <pcint14DeactivateInterrupt>:
 * Deactivates the external interrupt pcint14 in PC6
 * -------------------------------------------------------------------------- */

void pcint14DeactivateInterrupt(void)
{
	clrBit(PCMSK1, PCINT14);
     b3a:	ec e6       	ldi	r30, 0x6C	; 108
     b3c:	f0 e0       	ldi	r31, 0x00	; 0
     b3e:	80 81       	ld	r24, Z
     b40:	8f 7b       	andi	r24, 0xBF	; 191
     b42:	80 83       	st	Z, r24
     b44:	08 95       	ret

00000b46 <pcint23_16Enable>:
 * Enables the external interrupt pcint in port D
 * -------------------------------------------------------------------------- */

void pcint23_16Enable(void)
{
	setBit(PCICR, PCIE2);
     b46:	e8 e6       	ldi	r30, 0x68	; 104
     b48:	f0 e0       	ldi	r31, 0x00	; 0
     b4a:	80 81       	ld	r24, Z
     b4c:	84 60       	ori	r24, 0x04	; 4
     b4e:	80 83       	st	Z, r24
     b50:	08 95       	ret

00000b52 <pcint23_16Disable>:
 * Disables the external interrupt pcint in port D
 * -------------------------------------------------------------------------- */

void pcint23_16Disable(void)
{
	clrBit(PCICR, PCIE2);
     b52:	e8 e6       	ldi	r30, 0x68	; 104
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	8b 7f       	andi	r24, 0xFB	; 251
     b5a:	80 83       	st	Z, r24
     b5c:	08 95       	ret

00000b5e <pcint23_16ClearInterruptRequest>:
 * Disables the external interrupt pcint in port D
 * -------------------------------------------------------------------------- */

void pcint23_16ClearInterruptRequest(void)
{
	setBit(PCIFR, PCIF2);
     b5e:	da 9a       	sbi	0x1b, 2	; 27
     b60:	08 95       	ret

00000b62 <pcint16ActivateInterrupt>:
 * Activates the external interrupt pcint16 and configures port mode in PD0
 * -------------------------------------------------------------------------- */

resultValue_t pcint16ActivateInterrupt(portMode_t port)
{
	switch(port){
     b62:	82 30       	cpi	r24, 0x02	; 2
     b64:	79 f0       	breq	.+30     	; 0xb84 <pcint16ActivateInterrupt+0x22>
     b66:	30 f4       	brcc	.+12     	; 0xb74 <pcint16ActivateInterrupt+0x12>
     b68:	88 23       	and	r24, r24
     b6a:	49 f0       	breq	.+18     	; 0xb7e <pcint16ActivateInterrupt+0x1c>
     b6c:	81 30       	cpi	r24, 0x01	; 1
     b6e:	a9 f4       	brne	.+42     	; 0xb9a <pcint16ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD0); setBit(DDRD, PD0);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD0); setBit(DDRD, PD0);	break;
     b70:	58 9a       	sbi	0x0b, 0	; 11
     b72:	06 c0       	rjmp	.+12     	; 0xb80 <pcint16ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint16 and configures port mode in PD0
 * -------------------------------------------------------------------------- */

resultValue_t pcint16ActivateInterrupt(portMode_t port)
{
	switch(port){
     b74:	83 30       	cpi	r24, 0x03	; 3
     b76:	41 f0       	breq	.+16     	; 0xb88 <pcint16ActivateInterrupt+0x26>
     b78:	8f 3f       	cpi	r24, 0xFF	; 255
     b7a:	41 f0       	breq	.+16     	; 0xb8c <pcint16ActivateInterrupt+0x2a>
     b7c:	0e c0       	rjmp	.+28     	; 0xb9a <pcint16ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD0); setBit(DDRD, PD0);	break;
     b7e:	58 98       	cbi	0x0b, 0	; 11
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD0); setBit(DDRD, PD0);	break;
     b80:	50 9a       	sbi	0x0a, 0	; 10
     b82:	04 c0       	rjmp	.+8      	; 0xb8c <pcint16ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD0); clrBit(DDRD, PD0);	break;
     b84:	58 98       	cbi	0x0b, 0	; 11
     b86:	01 c0       	rjmp	.+2      	; 0xb8a <pcint16ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD0); clrBit(DDRD, PD0);	break;
     b88:	58 9a       	sbi	0x0b, 0	; 11
     b8a:	50 98       	cbi	0x0a, 0	; 10
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK2, PCINT16);
     b8c:	80 91 6d 00 	lds	r24, 0x006D
     b90:	81 60       	ori	r24, 0x01	; 1
     b92:	80 93 6d 00 	sts	0x006D, r24
	return RESULT_OK;
     b96:	80 e0       	ldi	r24, 0x00	; 0
     b98:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD0); setBit(DDRD, PD0);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD0); setBit(DDRD, PD0);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD0); clrBit(DDRD, PD0);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD0); clrBit(DDRD, PD0);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     b9a:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK2, PCINT16);
	return RESULT_OK;
}
     b9c:	08 95       	ret

00000b9e <pcint16DeactivateInterrupt>:
 * Deactivates the external interrupt pcint16 in PD0
 * -------------------------------------------------------------------------- */

void pcint16DeactivateInterrupt(void)
{
	clrBit(PCMSK2, PCINT16);
     b9e:	ed e6       	ldi	r30, 0x6D	; 109
     ba0:	f0 e0       	ldi	r31, 0x00	; 0
     ba2:	80 81       	ld	r24, Z
     ba4:	8e 7f       	andi	r24, 0xFE	; 254
     ba6:	80 83       	st	Z, r24
     ba8:	08 95       	ret

00000baa <pcint17ActivateInterrupt>:
 * Activates the external interrupt pcint17 and configures port mode in PD1
 * -------------------------------------------------------------------------- */

resultValue_t pcint17ActivateInterrupt(portMode_t port)
{
	switch(port){
     baa:	82 30       	cpi	r24, 0x02	; 2
     bac:	79 f0       	breq	.+30     	; 0xbcc <pcint17ActivateInterrupt+0x22>
     bae:	30 f4       	brcc	.+12     	; 0xbbc <pcint17ActivateInterrupt+0x12>
     bb0:	88 23       	and	r24, r24
     bb2:	49 f0       	breq	.+18     	; 0xbc6 <pcint17ActivateInterrupt+0x1c>
     bb4:	81 30       	cpi	r24, 0x01	; 1
     bb6:	a9 f4       	brne	.+42     	; 0xbe2 <pcint17ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD1); setBit(DDRD, PD1);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD1); setBit(DDRD, PD1);	break;
     bb8:	59 9a       	sbi	0x0b, 1	; 11
     bba:	06 c0       	rjmp	.+12     	; 0xbc8 <pcint17ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint17 and configures port mode in PD1
 * -------------------------------------------------------------------------- */

resultValue_t pcint17ActivateInterrupt(portMode_t port)
{
	switch(port){
     bbc:	83 30       	cpi	r24, 0x03	; 3
     bbe:	41 f0       	breq	.+16     	; 0xbd0 <pcint17ActivateInterrupt+0x26>
     bc0:	8f 3f       	cpi	r24, 0xFF	; 255
     bc2:	41 f0       	breq	.+16     	; 0xbd4 <pcint17ActivateInterrupt+0x2a>
     bc4:	0e c0       	rjmp	.+28     	; 0xbe2 <pcint17ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD1); setBit(DDRD, PD1);	break;
     bc6:	59 98       	cbi	0x0b, 1	; 11
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD1); setBit(DDRD, PD1);	break;
     bc8:	51 9a       	sbi	0x0a, 1	; 10
     bca:	04 c0       	rjmp	.+8      	; 0xbd4 <pcint17ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD1); clrBit(DDRD, PD1);	break;
     bcc:	59 98       	cbi	0x0b, 1	; 11
     bce:	01 c0       	rjmp	.+2      	; 0xbd2 <pcint17ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD1); clrBit(DDRD, PD1);	break;
     bd0:	59 9a       	sbi	0x0b, 1	; 11
     bd2:	51 98       	cbi	0x0a, 1	; 10
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK2, PCINT17);
     bd4:	80 91 6d 00 	lds	r24, 0x006D
     bd8:	82 60       	ori	r24, 0x02	; 2
     bda:	80 93 6d 00 	sts	0x006D, r24
	return RESULT_OK;
     bde:	80 e0       	ldi	r24, 0x00	; 0
     be0:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD1); setBit(DDRD, PD1);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD1); setBit(DDRD, PD1);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD1); clrBit(DDRD, PD1);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD1); clrBit(DDRD, PD1);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     be2:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK2, PCINT17);
	return RESULT_OK;
}
     be4:	08 95       	ret

00000be6 <pcint17DeactivateInterrupt>:
 * Deactivates the external interrupt pcint17 in PD1
 * -------------------------------------------------------------------------- */

void pcint17DeactivateInterrupt(void)
{
	clrBit(PCMSK2, PCINT17);
     be6:	ed e6       	ldi	r30, 0x6D	; 109
     be8:	f0 e0       	ldi	r31, 0x00	; 0
     bea:	80 81       	ld	r24, Z
     bec:	8d 7f       	andi	r24, 0xFD	; 253
     bee:	80 83       	st	Z, r24
     bf0:	08 95       	ret

00000bf2 <pcint18ActivateInterrupt>:
 * Activates the external interrupt pcint18 and configures port mode in PD2
 * -------------------------------------------------------------------------- */

resultValue_t pcint18ActivateInterrupt(portMode_t port)
{
	switch(port){
     bf2:	82 30       	cpi	r24, 0x02	; 2
     bf4:	79 f0       	breq	.+30     	; 0xc14 <pcint18ActivateInterrupt+0x22>
     bf6:	30 f4       	brcc	.+12     	; 0xc04 <pcint18ActivateInterrupt+0x12>
     bf8:	88 23       	and	r24, r24
     bfa:	49 f0       	breq	.+18     	; 0xc0e <pcint18ActivateInterrupt+0x1c>
     bfc:	81 30       	cpi	r24, 0x01	; 1
     bfe:	a9 f4       	brne	.+42     	; 0xc2a <pcint18ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD2); setBit(DDRD, PD2);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD2); setBit(DDRD, PD2);	break;
     c00:	5a 9a       	sbi	0x0b, 2	; 11
     c02:	06 c0       	rjmp	.+12     	; 0xc10 <pcint18ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint18 and configures port mode in PD2
 * -------------------------------------------------------------------------- */

resultValue_t pcint18ActivateInterrupt(portMode_t port)
{
	switch(port){
     c04:	83 30       	cpi	r24, 0x03	; 3
     c06:	41 f0       	breq	.+16     	; 0xc18 <pcint18ActivateInterrupt+0x26>
     c08:	8f 3f       	cpi	r24, 0xFF	; 255
     c0a:	41 f0       	breq	.+16     	; 0xc1c <pcint18ActivateInterrupt+0x2a>
     c0c:	0e c0       	rjmp	.+28     	; 0xc2a <pcint18ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD2); setBit(DDRD, PD2);	break;
     c0e:	5a 98       	cbi	0x0b, 2	; 11
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD2); setBit(DDRD, PD2);	break;
     c10:	52 9a       	sbi	0x0a, 2	; 10
     c12:	04 c0       	rjmp	.+8      	; 0xc1c <pcint18ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD2); clrBit(DDRD, PD2);	break;
     c14:	5a 98       	cbi	0x0b, 2	; 11
     c16:	01 c0       	rjmp	.+2      	; 0xc1a <pcint18ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD2); clrBit(DDRD, PD2);	break;
     c18:	5a 9a       	sbi	0x0b, 2	; 11
     c1a:	52 98       	cbi	0x0a, 2	; 10
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK2, PCINT18);
     c1c:	80 91 6d 00 	lds	r24, 0x006D
     c20:	84 60       	ori	r24, 0x04	; 4
     c22:	80 93 6d 00 	sts	0x006D, r24
	return RESULT_OK;
     c26:	80 e0       	ldi	r24, 0x00	; 0
     c28:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD2); setBit(DDRD, PD2);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD2); setBit(DDRD, PD2);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD2); clrBit(DDRD, PD2);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD2); clrBit(DDRD, PD2);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     c2a:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK2, PCINT18);
	return RESULT_OK;
}
     c2c:	08 95       	ret

00000c2e <pcint18DeactivateInterrupt>:
 * Deactivates the external interrupt pcint18 in PD2
 * -------------------------------------------------------------------------- */

void pcint18DeactivateInterrupt(void)
{
	clrBit(PCMSK2, PCINT18);
     c2e:	ed e6       	ldi	r30, 0x6D	; 109
     c30:	f0 e0       	ldi	r31, 0x00	; 0
     c32:	80 81       	ld	r24, Z
     c34:	8b 7f       	andi	r24, 0xFB	; 251
     c36:	80 83       	st	Z, r24
     c38:	08 95       	ret

00000c3a <pcint19ActivateInterrupt>:
 * Activates the external interrupt pcint19 and configures port mode in PD3
 * -------------------------------------------------------------------------- */

resultValue_t pcint19ActivateInterrupt(portMode_t port)
{
	switch(port){
     c3a:	82 30       	cpi	r24, 0x02	; 2
     c3c:	79 f0       	breq	.+30     	; 0xc5c <pcint19ActivateInterrupt+0x22>
     c3e:	30 f4       	brcc	.+12     	; 0xc4c <pcint19ActivateInterrupt+0x12>
     c40:	88 23       	and	r24, r24
     c42:	49 f0       	breq	.+18     	; 0xc56 <pcint19ActivateInterrupt+0x1c>
     c44:	81 30       	cpi	r24, 0x01	; 1
     c46:	a9 f4       	brne	.+42     	; 0xc72 <pcint19ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD3); setBit(DDRD, PD3);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD3); setBit(DDRD, PD3);	break;
     c48:	5b 9a       	sbi	0x0b, 3	; 11
     c4a:	06 c0       	rjmp	.+12     	; 0xc58 <pcint19ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint19 and configures port mode in PD3
 * -------------------------------------------------------------------------- */

resultValue_t pcint19ActivateInterrupt(portMode_t port)
{
	switch(port){
     c4c:	83 30       	cpi	r24, 0x03	; 3
     c4e:	41 f0       	breq	.+16     	; 0xc60 <pcint19ActivateInterrupt+0x26>
     c50:	8f 3f       	cpi	r24, 0xFF	; 255
     c52:	41 f0       	breq	.+16     	; 0xc64 <pcint19ActivateInterrupt+0x2a>
     c54:	0e c0       	rjmp	.+28     	; 0xc72 <pcint19ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD3); setBit(DDRD, PD3);	break;
     c56:	5b 98       	cbi	0x0b, 3	; 11
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD3); setBit(DDRD, PD3);	break;
     c58:	53 9a       	sbi	0x0a, 3	; 10
     c5a:	04 c0       	rjmp	.+8      	; 0xc64 <pcint19ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD3); clrBit(DDRD, PD3);	break;
     c5c:	5b 98       	cbi	0x0b, 3	; 11
     c5e:	01 c0       	rjmp	.+2      	; 0xc62 <pcint19ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD3); clrBit(DDRD, PD3);	break;
     c60:	5b 9a       	sbi	0x0b, 3	; 11
     c62:	53 98       	cbi	0x0a, 3	; 10
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK2, PCINT19);
     c64:	80 91 6d 00 	lds	r24, 0x006D
     c68:	88 60       	ori	r24, 0x08	; 8
     c6a:	80 93 6d 00 	sts	0x006D, r24
	return RESULT_OK;
     c6e:	80 e0       	ldi	r24, 0x00	; 0
     c70:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD3); setBit(DDRD, PD3);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD3); setBit(DDRD, PD3);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD3); clrBit(DDRD, PD3);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD3); clrBit(DDRD, PD3);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     c72:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK2, PCINT19);
	return RESULT_OK;
}
     c74:	08 95       	ret

00000c76 <pcint19DeactivateInterrupt>:
 * Deactivates the external interrupt pcint19 in PD3
 * -------------------------------------------------------------------------- */

void pcint19DeactivateInterrupt(void)
{
	clrBit(PCMSK2, PCINT19);
     c76:	ed e6       	ldi	r30, 0x6D	; 109
     c78:	f0 e0       	ldi	r31, 0x00	; 0
     c7a:	80 81       	ld	r24, Z
     c7c:	87 7f       	andi	r24, 0xF7	; 247
     c7e:	80 83       	st	Z, r24
     c80:	08 95       	ret

00000c82 <pcint20ActivateInterrupt>:
 * Activates the external interrupt pcint20 and configures port mode in PD4
 * -------------------------------------------------------------------------- */

resultValue_t pcint20ActivateInterrupt(portMode_t port)
{
	switch(port){
     c82:	82 30       	cpi	r24, 0x02	; 2
     c84:	79 f0       	breq	.+30     	; 0xca4 <pcint20ActivateInterrupt+0x22>
     c86:	30 f4       	brcc	.+12     	; 0xc94 <pcint20ActivateInterrupt+0x12>
     c88:	88 23       	and	r24, r24
     c8a:	49 f0       	breq	.+18     	; 0xc9e <pcint20ActivateInterrupt+0x1c>
     c8c:	81 30       	cpi	r24, 0x01	; 1
     c8e:	a9 f4       	brne	.+42     	; 0xcba <pcint20ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD4); setBit(DDRD, PD4);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD4); setBit(DDRD, PD4);	break;
     c90:	5c 9a       	sbi	0x0b, 4	; 11
     c92:	06 c0       	rjmp	.+12     	; 0xca0 <pcint20ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint20 and configures port mode in PD4
 * -------------------------------------------------------------------------- */

resultValue_t pcint20ActivateInterrupt(portMode_t port)
{
	switch(port){
     c94:	83 30       	cpi	r24, 0x03	; 3
     c96:	41 f0       	breq	.+16     	; 0xca8 <pcint20ActivateInterrupt+0x26>
     c98:	8f 3f       	cpi	r24, 0xFF	; 255
     c9a:	41 f0       	breq	.+16     	; 0xcac <pcint20ActivateInterrupt+0x2a>
     c9c:	0e c0       	rjmp	.+28     	; 0xcba <pcint20ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD4); setBit(DDRD, PD4);	break;
     c9e:	5c 98       	cbi	0x0b, 4	; 11
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD4); setBit(DDRD, PD4);	break;
     ca0:	54 9a       	sbi	0x0a, 4	; 10
     ca2:	04 c0       	rjmp	.+8      	; 0xcac <pcint20ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD4); clrBit(DDRD, PD4);	break;
     ca4:	5c 98       	cbi	0x0b, 4	; 11
     ca6:	01 c0       	rjmp	.+2      	; 0xcaa <pcint20ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD4); clrBit(DDRD, PD4);	break;
     ca8:	5c 9a       	sbi	0x0b, 4	; 11
     caa:	54 98       	cbi	0x0a, 4	; 10
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK2, PCINT20);
     cac:	80 91 6d 00 	lds	r24, 0x006D
     cb0:	80 61       	ori	r24, 0x10	; 16
     cb2:	80 93 6d 00 	sts	0x006D, r24
	return RESULT_OK;
     cb6:	80 e0       	ldi	r24, 0x00	; 0
     cb8:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD4); setBit(DDRD, PD4);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD4); setBit(DDRD, PD4);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD4); clrBit(DDRD, PD4);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD4); clrBit(DDRD, PD4);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     cba:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK2, PCINT20);
	return RESULT_OK;
}
     cbc:	08 95       	ret

00000cbe <pcint20DeactivateInterrupt>:
 * Deactivates the external interrupt pcint20 in PD4
 * -------------------------------------------------------------------------- */

void pcint20DeactivateInterrupt(void)
{
	clrBit(PCMSK2, PCINT20);
     cbe:	ed e6       	ldi	r30, 0x6D	; 109
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	80 81       	ld	r24, Z
     cc4:	8f 7e       	andi	r24, 0xEF	; 239
     cc6:	80 83       	st	Z, r24
     cc8:	08 95       	ret

00000cca <pcint21ActivateInterrupt>:
 * Activates the external interrupt pcint21 and configures port mode in PD5
 * -------------------------------------------------------------------------- */

resultValue_t pcint21ActivateInterrupt(portMode_t port)
{
	switch(port){
     cca:	82 30       	cpi	r24, 0x02	; 2
     ccc:	79 f0       	breq	.+30     	; 0xcec <pcint21ActivateInterrupt+0x22>
     cce:	30 f4       	brcc	.+12     	; 0xcdc <pcint21ActivateInterrupt+0x12>
     cd0:	88 23       	and	r24, r24
     cd2:	49 f0       	breq	.+18     	; 0xce6 <pcint21ActivateInterrupt+0x1c>
     cd4:	81 30       	cpi	r24, 0x01	; 1
     cd6:	a9 f4       	brne	.+42     	; 0xd02 <pcint21ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD5); setBit(DDRD, PD5);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD5); setBit(DDRD, PD5);	break;
     cd8:	5d 9a       	sbi	0x0b, 5	; 11
     cda:	06 c0       	rjmp	.+12     	; 0xce8 <pcint21ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint21 and configures port mode in PD5
 * -------------------------------------------------------------------------- */

resultValue_t pcint21ActivateInterrupt(portMode_t port)
{
	switch(port){
     cdc:	83 30       	cpi	r24, 0x03	; 3
     cde:	41 f0       	breq	.+16     	; 0xcf0 <pcint21ActivateInterrupt+0x26>
     ce0:	8f 3f       	cpi	r24, 0xFF	; 255
     ce2:	41 f0       	breq	.+16     	; 0xcf4 <pcint21ActivateInterrupt+0x2a>
     ce4:	0e c0       	rjmp	.+28     	; 0xd02 <pcint21ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD5); setBit(DDRD, PD5);	break;
     ce6:	5d 98       	cbi	0x0b, 5	; 11
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD5); setBit(DDRD, PD5);	break;
     ce8:	55 9a       	sbi	0x0a, 5	; 10
     cea:	04 c0       	rjmp	.+8      	; 0xcf4 <pcint21ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD5); clrBit(DDRD, PD5);	break;
     cec:	5d 98       	cbi	0x0b, 5	; 11
     cee:	01 c0       	rjmp	.+2      	; 0xcf2 <pcint21ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD5); clrBit(DDRD, PD5);	break;
     cf0:	5d 9a       	sbi	0x0b, 5	; 11
     cf2:	55 98       	cbi	0x0a, 5	; 10
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK2, PCINT21);
     cf4:	80 91 6d 00 	lds	r24, 0x006D
     cf8:	80 62       	ori	r24, 0x20	; 32
     cfa:	80 93 6d 00 	sts	0x006D, r24
	return RESULT_OK;
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD5); setBit(DDRD, PD5);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD5); setBit(DDRD, PD5);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD5); clrBit(DDRD, PD5);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD5); clrBit(DDRD, PD5);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     d02:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK2, PCINT21);
	return RESULT_OK;
}
     d04:	08 95       	ret

00000d06 <pcint21DeactivateInterrupt>:
 * Deactivates the external interrupt pcint21 in PD5
 * -------------------------------------------------------------------------- */

void pcint21DeactivateInterrupt(void)
{
	clrBit(PCMSK2, PCINT21);
     d06:	ed e6       	ldi	r30, 0x6D	; 109
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	80 81       	ld	r24, Z
     d0c:	8f 7d       	andi	r24, 0xDF	; 223
     d0e:	80 83       	st	Z, r24
     d10:	08 95       	ret

00000d12 <pcint22ActivateInterrupt>:
 * Activates the external interrupt pcint22 and configures port mode in PD6
 * -------------------------------------------------------------------------- */

resultValue_t pcint22ActivateInterrupt(portMode_t port)
{
	switch(port){
     d12:	82 30       	cpi	r24, 0x02	; 2
     d14:	79 f0       	breq	.+30     	; 0xd34 <pcint22ActivateInterrupt+0x22>
     d16:	30 f4       	brcc	.+12     	; 0xd24 <pcint22ActivateInterrupt+0x12>
     d18:	88 23       	and	r24, r24
     d1a:	49 f0       	breq	.+18     	; 0xd2e <pcint22ActivateInterrupt+0x1c>
     d1c:	81 30       	cpi	r24, 0x01	; 1
     d1e:	a9 f4       	brne	.+42     	; 0xd4a <pcint22ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD6); setBit(DDRD, PD6);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD6); setBit(DDRD, PD6);	break;
     d20:	5e 9a       	sbi	0x0b, 6	; 11
     d22:	06 c0       	rjmp	.+12     	; 0xd30 <pcint22ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint22 and configures port mode in PD6
 * -------------------------------------------------------------------------- */

resultValue_t pcint22ActivateInterrupt(portMode_t port)
{
	switch(port){
     d24:	83 30       	cpi	r24, 0x03	; 3
     d26:	41 f0       	breq	.+16     	; 0xd38 <pcint22ActivateInterrupt+0x26>
     d28:	8f 3f       	cpi	r24, 0xFF	; 255
     d2a:	41 f0       	breq	.+16     	; 0xd3c <pcint22ActivateInterrupt+0x2a>
     d2c:	0e c0       	rjmp	.+28     	; 0xd4a <pcint22ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD6); setBit(DDRD, PD6);	break;
     d2e:	5e 98       	cbi	0x0b, 6	; 11
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD6); setBit(DDRD, PD6);	break;
     d30:	56 9a       	sbi	0x0a, 6	; 10
     d32:	04 c0       	rjmp	.+8      	; 0xd3c <pcint22ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD6); clrBit(DDRD, PD6);	break;
     d34:	5e 98       	cbi	0x0b, 6	; 11
     d36:	01 c0       	rjmp	.+2      	; 0xd3a <pcint22ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD6); clrBit(DDRD, PD6);	break;
     d38:	5e 9a       	sbi	0x0b, 6	; 11
     d3a:	56 98       	cbi	0x0a, 6	; 10
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK2, PCINT22);
     d3c:	80 91 6d 00 	lds	r24, 0x006D
     d40:	80 64       	ori	r24, 0x40	; 64
     d42:	80 93 6d 00 	sts	0x006D, r24
	return RESULT_OK;
     d46:	80 e0       	ldi	r24, 0x00	; 0
     d48:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD6); setBit(DDRD, PD6);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD6); setBit(DDRD, PD6);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD6); clrBit(DDRD, PD6);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD6); clrBit(DDRD, PD6);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     d4a:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK2, PCINT22);
	return RESULT_OK;
}
     d4c:	08 95       	ret

00000d4e <pcint22DeactivateInterrupt>:
 * Deactivates the external interrupt pcint22 in PD6
 * -------------------------------------------------------------------------- */

void pcint22DeactivateInterrupt(void)
{
	clrBit(PCMSK2, PCINT22);
     d4e:	ed e6       	ldi	r30, 0x6D	; 109
     d50:	f0 e0       	ldi	r31, 0x00	; 0
     d52:	80 81       	ld	r24, Z
     d54:	8f 7b       	andi	r24, 0xBF	; 191
     d56:	80 83       	st	Z, r24
     d58:	08 95       	ret

00000d5a <pcint23ActivateInterrupt>:
 * Activates the external interrupt pcint23 and configures port mode in PD7
 * -------------------------------------------------------------------------- */

resultValue_t pcint23ActivateInterrupt(portMode_t port)
{
	switch(port){
     d5a:	82 30       	cpi	r24, 0x02	; 2
     d5c:	79 f0       	breq	.+30     	; 0xd7c <pcint23ActivateInterrupt+0x22>
     d5e:	30 f4       	brcc	.+12     	; 0xd6c <pcint23ActivateInterrupt+0x12>
     d60:	88 23       	and	r24, r24
     d62:	49 f0       	breq	.+18     	; 0xd76 <pcint23ActivateInterrupt+0x1c>
     d64:	81 30       	cpi	r24, 0x01	; 1
     d66:	a9 f4       	brne	.+42     	; 0xd92 <pcint23ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD7); setBit(DDRD, PD7);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD7); setBit(DDRD, PD7);	break;
     d68:	5f 9a       	sbi	0x0b, 7	; 11
     d6a:	06 c0       	rjmp	.+12     	; 0xd78 <pcint23ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint23 and configures port mode in PD7
 * -------------------------------------------------------------------------- */

resultValue_t pcint23ActivateInterrupt(portMode_t port)
{
	switch(port){
     d6c:	83 30       	cpi	r24, 0x03	; 3
     d6e:	41 f0       	breq	.+16     	; 0xd80 <pcint23ActivateInterrupt+0x26>
     d70:	8f 3f       	cpi	r24, 0xFF	; 255
     d72:	41 f0       	breq	.+16     	; 0xd84 <pcint23ActivateInterrupt+0x2a>
     d74:	0e c0       	rjmp	.+28     	; 0xd92 <pcint23ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD7); setBit(DDRD, PD7);	break;
     d76:	5f 98       	cbi	0x0b, 7	; 11
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD7); setBit(DDRD, PD7);	break;
     d78:	57 9a       	sbi	0x0a, 7	; 10
     d7a:	04 c0       	rjmp	.+8      	; 0xd84 <pcint23ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD7); clrBit(DDRD, PD7);	break;
     d7c:	5f 98       	cbi	0x0b, 7	; 11
     d7e:	01 c0       	rjmp	.+2      	; 0xd82 <pcint23ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD7); clrBit(DDRD, PD7);	break;
     d80:	5f 9a       	sbi	0x0b, 7	; 11
     d82:	57 98       	cbi	0x0a, 7	; 10
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK2, PCINT23);
     d84:	80 91 6d 00 	lds	r24, 0x006D
     d88:	80 68       	ori	r24, 0x80	; 128
     d8a:	80 93 6d 00 	sts	0x006D, r24
	return RESULT_OK;
     d8e:	80 e0       	ldi	r24, 0x00	; 0
     d90:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD7); setBit(DDRD, PD7);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD7); setBit(DDRD, PD7);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD7); clrBit(DDRD, PD7);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD7); clrBit(DDRD, PD7);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     d92:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK2, PCINT23);
	return RESULT_OK;
}
     d94:	08 95       	ret

00000d96 <pcint23DeactivateInterrupt>:
 * Deactivates the external interrupt pcint23 in PD7
 * -------------------------------------------------------------------------- */

void pcint23DeactivateInterrupt(void)
{
	clrBit(PCMSK2, PCINT23);
     d96:	ed e6       	ldi	r30, 0x6D	; 109
     d98:	f0 e0       	ldi	r31, 0x00	; 0
     d9a:	80 81       	ld	r24, Z
     d9c:	8f 77       	andi	r24, 0x7F	; 127
     d9e:	80 83       	st	Z, r24
     da0:	08 95       	ret

00000da2 <timer0Config>:
 * Configures the timer0 mode and prescaler
 * -------------------------------------------------------------------------- */

resultValue_t timer0Config(timerModeA_t mode, timerPrescalerValueA_t prescaler)
{
	uint8 regA = TCCR0A;
     da2:	24 b5       	in	r18, 0x24	; 36
	uint8 regB = TCCR0B;
     da4:	95 b5       	in	r25, 0x25	; 37

	if(prescaler != TIMER_A_PRESCALER_NO_CHANGE){
     da6:	6f 3f       	cpi	r22, 0xFF	; 255
     da8:	c1 f0       	breq	.+48     	; 0xdda <timer0Config+0x38>
		regB &= ~(0x07 << CS00);
     daa:	98 7f       	andi	r25, 0xF8	; 248
		switch(prescaler){
     dac:	46 2f       	mov	r20, r22
     dae:	50 e0       	ldi	r21, 0x00	; 0
     db0:	48 30       	cpi	r20, 0x08	; 8
     db2:	51 05       	cpc	r21, r1
     db4:	80 f5       	brcc	.+96     	; 0xe16 <timer0Config+0x74>
     db6:	fa 01       	movw	r30, r20
     db8:	eb 5a       	subi	r30, 0xAB	; 171
     dba:	ff 4f       	sbci	r31, 0xFF	; 255
     dbc:	0c 94 4c 0d 	jmp	0x1a98	; 0x1a98 <__tablejump2__>
			case TIMER_A_CLOCK_DISABLE:					break;
			case TIMER_A_PRESCALER_OFF:					regB |= (1 << CS00);	break;
     dc0:	91 60       	ori	r25, 0x01	; 1
     dc2:	0b c0       	rjmp	.+22     	; 0xdda <timer0Config+0x38>
			case TIMER_A_PRESCALER_8:					regB |= (2 << CS00);	break;
     dc4:	92 60       	ori	r25, 0x02	; 2
     dc6:	09 c0       	rjmp	.+18     	; 0xdda <timer0Config+0x38>
			case TIMER_A_PRESCALER_64:					regB |= (3 << CS00);	break;
     dc8:	93 60       	ori	r25, 0x03	; 3
     dca:	07 c0       	rjmp	.+14     	; 0xdda <timer0Config+0x38>
			case TIMER_A_PRESCALER_256:					regB |= (4 << CS00);	break;
     dcc:	94 60       	ori	r25, 0x04	; 4
     dce:	05 c0       	rjmp	.+10     	; 0xdda <timer0Config+0x38>
			case TIMER_A_PRESCALER_1024:				regB |= (5 << CS00);	break;
     dd0:	95 60       	ori	r25, 0x05	; 5
     dd2:	03 c0       	rjmp	.+6      	; 0xdda <timer0Config+0x38>
			case TIMER_A_PRESCALER_T0_FALLING_EDGE:		regB |= (6 << CS00);	break;
     dd4:	96 60       	ori	r25, 0x06	; 6
     dd6:	01 c0       	rjmp	.+2      	; 0xdda <timer0Config+0x38>
			case TIMER_A_PRESCALER_T0_RISING_EDGE:		regB |= (7 << CS00);	break;
     dd8:	97 60       	ori	r25, 0x07	; 7
			case TIMER_A_PRESCALER_NO_CHANGE:			break;
			default:									return RESULT_TIMER_PRESCALER_VALUE_UNSUPPORTED;	break;
		}
	}

	if(mode != TIMER_A_MODE_NO_CHANGE){
     dda:	8f 3f       	cpi	r24, 0xFF	; 255
     ddc:	c1 f0       	breq	.+48     	; 0xe0e <timer0Config+0x6c>
		regA &= ~(0x03 << WGM00);
     dde:	2c 7f       	andi	r18, 0xFC	; 252
		clrBit(regB, WGM02);
     de0:	97 7f       	andi	r25, 0xF7	; 247
		switch(mode){
     de2:	82 30       	cpi	r24, 0x02	; 2
     de4:	69 f0       	breq	.+26     	; 0xe00 <timer0Config+0x5e>
     de6:	28 f4       	brcc	.+10     	; 0xdf2 <timer0Config+0x50>
     de8:	88 23       	and	r24, r24
     dea:	89 f0       	breq	.+34     	; 0xe0e <timer0Config+0x6c>
     dec:	81 30       	cpi	r24, 0x01	; 1
     dee:	59 f0       	breq	.+22     	; 0xe06 <timer0Config+0x64>
     df0:	14 c0       	rjmp	.+40     	; 0xe1a <timer0Config+0x78>
     df2:	85 30       	cpi	r24, 0x05	; 5
     df4:	39 f0       	breq	.+14     	; 0xe04 <timer0Config+0x62>
     df6:	87 30       	cpi	r24, 0x07	; 7
     df8:	41 f0       	breq	.+16     	; 0xe0a <timer0Config+0x68>
     dfa:	83 30       	cpi	r24, 0x03	; 3
     dfc:	71 f4       	brne	.+28     	; 0xe1a <timer0Config+0x78>
     dfe:	06 c0       	rjmp	.+12     	; 0xe0c <timer0Config+0x6a>
			case TIMER_A_MODE_NORMAL:						break;
			case TIMER_A_MODE_PWM_PHASE_CORRECTED_MAX:		regA |= (1 << WGM00);	break;
			case TIMER_A_MODE_CTC:							regA |= (2 << WGM00);	break;
     e00:	22 60       	ori	r18, 0x02	; 2
     e02:	05 c0       	rjmp	.+10     	; 0xe0e <timer0Config+0x6c>
			case TIMER_A_MODE_FAST_PWM_MAX:					regA |= (3 << WGM00);	break;
			case TIMER_A_MODE_PWM_PHASE_CORRECTED_OCRA:		setBit(regB, WGM02);regA |= (1 << WGM00);	break;
     e04:	98 60       	ori	r25, 0x08	; 8
     e06:	21 60       	ori	r18, 0x01	; 1
     e08:	02 c0       	rjmp	.+4      	; 0xe0e <timer0Config+0x6c>
			case TIMER_A_MODE_FAST_PWM_OCRA:				setBit(regB, WGM02);regA |= (3 << WGM00);	break;
     e0a:	98 60       	ori	r25, 0x08	; 8
     e0c:	23 60       	ori	r18, 0x03	; 3
			case TIMER_A_MODE_NO_CHANGE:					break;
			default:										return RESULT_TIMER_MODE_VALUE_UNSUPPORTED;	break;
		}
	}
	TCCR0A = regA;
     e0e:	24 bd       	out	0x24, r18	; 36
	TCCR0B = regB;
     e10:	95 bd       	out	0x25, r25	; 37

	return RESULT_OK;
     e12:	80 e0       	ldi	r24, 0x00	; 0
     e14:	08 95       	ret
			case TIMER_A_PRESCALER_256:					regB |= (4 << CS00);	break;
			case TIMER_A_PRESCALER_1024:				regB |= (5 << CS00);	break;
			case TIMER_A_PRESCALER_T0_FALLING_EDGE:		regB |= (6 << CS00);	break;
			case TIMER_A_PRESCALER_T0_RISING_EDGE:		regB |= (7 << CS00);	break;
			case TIMER_A_PRESCALER_NO_CHANGE:			break;
			default:									return RESULT_TIMER_PRESCALER_VALUE_UNSUPPORTED;	break;
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	08 95       	ret
			case TIMER_A_MODE_CTC:							regA |= (2 << WGM00);	break;
			case TIMER_A_MODE_FAST_PWM_MAX:					regA |= (3 << WGM00);	break;
			case TIMER_A_MODE_PWM_PHASE_CORRECTED_OCRA:		setBit(regB, WGM02);regA |= (1 << WGM00);	break;
			case TIMER_A_MODE_FAST_PWM_OCRA:				setBit(regB, WGM02);regA |= (3 << WGM00);	break;
			case TIMER_A_MODE_NO_CHANGE:					break;
			default:										return RESULT_TIMER_MODE_VALUE_UNSUPPORTED;	break;
     e1a:	84 e0       	ldi	r24, 0x04	; 4
	}
	TCCR0A = regA;
	TCCR0B = regB;

	return RESULT_OK;
}
     e1c:	08 95       	ret

00000e1e <timer0OutputConfig>:
 * Configures the timer0 compare outputs
 * -------------------------------------------------------------------------- */

resultValue_t timer0OutputConfig(timerOutput_t compA, timerOutput_t compB)
{
	uint8 reg = TCCR0A;
     e1e:	94 b5       	in	r25, 0x24	; 36

	if(compA != TIMER_PORT_NO_CHANGE){
     e20:	8f 3f       	cpi	r24, 0xFF	; 255
     e22:	69 f0       	breq	.+26     	; 0xe3e <timer0OutputConfig+0x20>
		reg &= ~(0x03 << COM0A0);
     e24:	9f 73       	andi	r25, 0x3F	; 63
		switch(compA){
     e26:	81 30       	cpi	r24, 0x01	; 1
     e28:	39 f0       	breq	.+14     	; 0xe38 <timer0OutputConfig+0x1a>
     e2a:	48 f0       	brcs	.+18     	; 0xe3e <timer0OutputConfig+0x20>
     e2c:	82 30       	cpi	r24, 0x02	; 2
     e2e:	31 f0       	breq	.+12     	; 0xe3c <timer0OutputConfig+0x1e>
     e30:	83 30       	cpi	r24, 0x03	; 3
     e32:	e1 f4       	brne	.+56     	; 0xe6c <timer0OutputConfig+0x4e>
			case TIMER_PORT_NORMAL:				break;
			case TIMER_PORT_TOGGLE_ON_COMPARE:	reg |= (1 << COM0A0);	break;
			case TIMER_PORT_CLEAR_ON_COMPARE:	reg |= (2 << COM0A0);	break;
			case TIMER_PORT_SET_ON_COMPARE:		reg |= (3 << COM0A0);	break;
     e34:	90 6c       	ori	r25, 0xC0	; 192
     e36:	03 c0       	rjmp	.+6      	; 0xe3e <timer0OutputConfig+0x20>

	if(compA != TIMER_PORT_NO_CHANGE){
		reg &= ~(0x03 << COM0A0);
		switch(compA){
			case TIMER_PORT_NORMAL:				break;
			case TIMER_PORT_TOGGLE_ON_COMPARE:	reg |= (1 << COM0A0);	break;
     e38:	90 64       	ori	r25, 0x40	; 64
     e3a:	01 c0       	rjmp	.+2      	; 0xe3e <timer0OutputConfig+0x20>
			case TIMER_PORT_CLEAR_ON_COMPARE:	reg |= (2 << COM0A0);	break;
     e3c:	90 68       	ori	r25, 0x80	; 128
			case TIMER_PORT_SET_ON_COMPARE:		reg |= (3 << COM0A0);	break;
			case TIMER_PORT_NO_CHANGE:			break;
			default:							return RESULT_PORT_VALUE_UNSUPPORTED;	break;
		}
	}
	if(compB != TIMER_PORT_NO_CHANGE){
     e3e:	6f 3f       	cpi	r22, 0xFF	; 255
     e40:	91 f0       	breq	.+36     	; 0xe66 <timer0OutputConfig+0x48>
		reg &= ~(0x03 << COM0B0);
     e42:	9f 7c       	andi	r25, 0xCF	; 207
		switch(compA){
     e44:	82 30       	cpi	r24, 0x02	; 2
     e46:	61 f0       	breq	.+24     	; 0xe60 <timer0OutputConfig+0x42>
     e48:	30 f4       	brcc	.+12     	; 0xe56 <timer0OutputConfig+0x38>
     e4a:	88 23       	and	r24, r24
     e4c:	61 f0       	breq	.+24     	; 0xe66 <timer0OutputConfig+0x48>
     e4e:	81 30       	cpi	r24, 0x01	; 1
     e50:	69 f4       	brne	.+26     	; 0xe6c <timer0OutputConfig+0x4e>
			case TIMER_PORT_NORMAL:				break;
			case TIMER_PORT_TOGGLE_ON_COMPARE:	reg |= (1 << COM0B0);	break;
     e52:	90 61       	ori	r25, 0x10	; 16
     e54:	08 c0       	rjmp	.+16     	; 0xe66 <timer0OutputConfig+0x48>
			default:							return RESULT_PORT_VALUE_UNSUPPORTED;	break;
		}
	}
	if(compB != TIMER_PORT_NO_CHANGE){
		reg &= ~(0x03 << COM0B0);
		switch(compA){
     e56:	83 30       	cpi	r24, 0x03	; 3
     e58:	29 f0       	breq	.+10     	; 0xe64 <timer0OutputConfig+0x46>
     e5a:	8f 3f       	cpi	r24, 0xFF	; 255
     e5c:	21 f0       	breq	.+8      	; 0xe66 <timer0OutputConfig+0x48>
     e5e:	06 c0       	rjmp	.+12     	; 0xe6c <timer0OutputConfig+0x4e>
			case TIMER_PORT_NORMAL:				break;
			case TIMER_PORT_TOGGLE_ON_COMPARE:	reg |= (1 << COM0B0);	break;
			case TIMER_PORT_CLEAR_ON_COMPARE:	reg |= (2 << COM0B0);	break;
     e60:	90 62       	ori	r25, 0x20	; 32
     e62:	01 c0       	rjmp	.+2      	; 0xe66 <timer0OutputConfig+0x48>
			case TIMER_PORT_SET_ON_COMPARE:		reg |= (3 << COM0B0);	break;
     e64:	90 63       	ori	r25, 0x30	; 48
			case TIMER_PORT_NO_CHANGE:			break;
			default:							return RESULT_PORT_VALUE_UNSUPPORTED;	break;
		}
	}
	TCCR0A = reg;
     e66:	94 bd       	out	0x24, r25	; 36
	return RESULT_OK;
     e68:	80 e0       	ldi	r24, 0x00	; 0
     e6a:	08 95       	ret
			case TIMER_PORT_NORMAL:				break;
			case TIMER_PORT_TOGGLE_ON_COMPARE:	reg |= (1 << COM0B0);	break;
			case TIMER_PORT_CLEAR_ON_COMPARE:	reg |= (2 << COM0B0);	break;
			case TIMER_PORT_SET_ON_COMPARE:		reg |= (3 << COM0B0);	break;
			case TIMER_PORT_NO_CHANGE:			break;
			default:							return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     e6c:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	TCCR0A = reg;
	return RESULT_OK;
}
     e6e:	08 95       	ret

00000e70 <timer0ActivateOverflowInterrupt>:
 * Activates the timer0 overflow interrupt
 * -------------------------------------------------------------------------- */

void timer0ActivateOverflowInterrupt(void)
{
	setBit(TIMSK0, TOIE0);
     e70:	ee e6       	ldi	r30, 0x6E	; 110
     e72:	f0 e0       	ldi	r31, 0x00	; 0
     e74:	80 81       	ld	r24, Z
     e76:	81 60       	ori	r24, 0x01	; 1
     e78:	80 83       	st	Z, r24
     e7a:	08 95       	ret

00000e7c <timer0DeactivateOverflowInterrupt>:
 * Deactivates the timer0 overflow interrupt
 * -------------------------------------------------------------------------- */

void timer0DeactivateOverflowInterrupt(void)
{
	clrBit(TIMSK0, TOIE0);
     e7c:	ee e6       	ldi	r30, 0x6E	; 110
     e7e:	f0 e0       	ldi	r31, 0x00	; 0
     e80:	80 81       	ld	r24, Z
     e82:	8e 7f       	andi	r24, 0xFE	; 254
     e84:	80 83       	st	Z, r24
     e86:	08 95       	ret

00000e88 <timer0ClearOverflowInterruptRequest>:
 * Clears the timer0 overflow interrupt request
 * -------------------------------------------------------------------------- */

void timer0ClearOverflowInterruptRequest(void)
{
	setBit(TIFR0, TOV0);
     e88:	a8 9a       	sbi	0x15, 0	; 21
     e8a:	08 95       	ret

00000e8c <timer0ActivateCompareAInterrupt>:
 * Activates the timer0 compare A interrupt
 * -------------------------------------------------------------------------- */

void timer0ActivateCompareAInterrupt(void)
{
	setBit(TIMSK0, OCIE0A);
     e8c:	ee e6       	ldi	r30, 0x6E	; 110
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	80 81       	ld	r24, Z
     e92:	82 60       	ori	r24, 0x02	; 2
     e94:	80 83       	st	Z, r24
     e96:	08 95       	ret

00000e98 <timer0DeactivateCompareAInterrupt>:
 * Deactivates the timer0 compare A interrupt
 * -------------------------------------------------------------------------- */

void timer0DeactivateCompareAInterrupt(void)
{
	clrBit(TIMSK0, OCIE0A);
     e98:	ee e6       	ldi	r30, 0x6E	; 110
     e9a:	f0 e0       	ldi	r31, 0x00	; 0
     e9c:	80 81       	ld	r24, Z
     e9e:	8d 7f       	andi	r24, 0xFD	; 253
     ea0:	80 83       	st	Z, r24
     ea2:	08 95       	ret

00000ea4 <timer0ClearCompareAInterruptRequest>:
 * Clears the timer0 compare A interrupt request
 * -------------------------------------------------------------------------- */

void timer0ClearCompareAInterruptRequest(void)
{
	setBit(TIFR0, OCF0A);
     ea4:	a9 9a       	sbi	0x15, 1	; 21
     ea6:	08 95       	ret

00000ea8 <timer0ActivateCompareBInterrupt>:
 * Activates the timer0 compare B interrupt
 * -------------------------------------------------------------------------- */

void timer0ActivateCompareBInterrupt(void)
{
	setBit(TIMSK0, OCIE0B);
     ea8:	ee e6       	ldi	r30, 0x6E	; 110
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	80 81       	ld	r24, Z
     eae:	84 60       	ori	r24, 0x04	; 4
     eb0:	80 83       	st	Z, r24
     eb2:	08 95       	ret

00000eb4 <timer0DeactivateCompareBInterrupt>:
 * Deactivates the timer0 compare B interrupt
 * -------------------------------------------------------------------------- */

void timer0DeactivateCompareBInterrupt(void)
{
	clrBit(TIMSK0, OCIE0B);
     eb4:	ee e6       	ldi	r30, 0x6E	; 110
     eb6:	f0 e0       	ldi	r31, 0x00	; 0
     eb8:	80 81       	ld	r24, Z
     eba:	8b 7f       	andi	r24, 0xFB	; 251
     ebc:	80 83       	st	Z, r24
     ebe:	08 95       	ret

00000ec0 <timer0ClearCompareBInterruptRequest>:
 * Clears the timer0 compare B interrupt request
 * -------------------------------------------------------------------------- */

void timer0ClearCompareBInterruptRequest(void)
{
	setBit(TIFR0, OCF0B);
     ec0:	aa 9a       	sbi	0x15, 2	; 21
     ec2:	08 95       	ret

00000ec4 <timer0ForceCompareA>:
 * Forces a comparison on the output compare A of the timer0
 * -------------------------------------------------------------------------- */

void timer0ForceCompareA(void)
{
	setBit(TCCR0B, FOC0A);
     ec4:	85 b5       	in	r24, 0x25	; 37
     ec6:	80 68       	ori	r24, 0x80	; 128
     ec8:	85 bd       	out	0x25, r24	; 37
     eca:	08 95       	ret

00000ecc <timer0ForceCompareB>:
 * Forces a comparison on the output compare B of the timer0
 * -------------------------------------------------------------------------- */

void timer0ForceCompareB(void)
{
	setBit(TCCR0B, FOC0B);
     ecc:	85 b5       	in	r24, 0x25	; 37
     ece:	80 64       	ori	r24, 0x40	; 64
     ed0:	85 bd       	out	0x25, r24	; 37
     ed2:	08 95       	ret

00000ed4 <timer0SetCounterValue>:
 * Sets the timer0 counter value
 * -------------------------------------------------------------------------- */

void timer0SetCounterValue(uint8 value)
{
	TCNT0 = value;
     ed4:	86 bd       	out	0x26, r24	; 38
     ed6:	08 95       	ret

00000ed8 <timer0GetCounterValue>:
 * Gets the timer0 counter value
 * -------------------------------------------------------------------------- */

uint8 timer0GetCounterValue(void)
{
	return TCNT0;
     ed8:	86 b5       	in	r24, 0x26	; 38
}
     eda:	08 95       	ret

00000edc <timer0SetCompareAValue>:
 * Sets the timer0 compare A value
 * -------------------------------------------------------------------------- */

void timer0SetCompareAValue(uint8 value)
{
	OCR0A = value;
     edc:	87 bd       	out	0x27, r24	; 39
     ede:	08 95       	ret

00000ee0 <timer0GetCompareAValue>:
 * Gets the timer0 compare A value
 * -------------------------------------------------------------------------- */

uint8 timer0GetCompareAValue(void)
{
	return OCR0A;
     ee0:	87 b5       	in	r24, 0x27	; 39
}
     ee2:	08 95       	ret

00000ee4 <timer0SetCompareBValue>:
 * Sets the timer0 compare B value
 * -------------------------------------------------------------------------- */

void timer0SetCompareBValue(uint8 value)
{
	OCR0B = value;
     ee4:	88 bd       	out	0x28, r24	; 40
     ee6:	08 95       	ret

00000ee8 <timer0GetCompareBValue>:
 * Gets the timer0 compare B value
 * -------------------------------------------------------------------------- */

uint8 timer0GetCompareBValue(void)
{
	return OCR0B;
     ee8:	88 b5       	in	r24, 0x28	; 40
}
     eea:	08 95       	ret

00000eec <timer1Config>:
 * Configures the timer1 mode and prescaler
 * -------------------------------------------------------------------------- */

resultValue_t timer1Config(timerModeB_t mode, timerPrescalerValueA_t prescaler)
{
	uint8 reg1 = TCCR1A;
     eec:	20 91 80 00 	lds	r18, 0x0080
	uint8 reg2 = TCCR1B;
     ef0:	90 91 81 00 	lds	r25, 0x0081

	if(prescaler != TIMER_A_PRESCALER_NO_CHANGE){
     ef4:	6f 3f       	cpi	r22, 0xFF	; 255
     ef6:	11 f0       	breq	.+4      	; 0xefc <timer1Config+0x10>
		reg2 &= ~(0x07 << CS10);
     ef8:	98 7f       	andi	r25, 0xF8	; 248
		reg2 |= prescaler;
     efa:	96 2b       	or	r25, r22
	}

	if(mode != TIMER_B_MODE_NO_CHANGE){
     efc:	8f 3f       	cpi	r24, 0xFF	; 255
     efe:	69 f0       	breq	.+26     	; 0xf1a <timer1Config+0x2e>
		if(isBitSet(mode, 3))
     f00:	83 ff       	sbrs	r24, 3
     f02:	02 c0       	rjmp	.+4      	; 0xf08 <timer1Config+0x1c>
			setBit(reg2, WGM13);
     f04:	90 61       	ori	r25, 0x10	; 16
     f06:	01 c0       	rjmp	.+2      	; 0xf0a <timer1Config+0x1e>
		else
			clrBit(reg2, WGM13);
     f08:	9f 7e       	andi	r25, 0xEF	; 239
		if(isBitSet(mode, 2))
     f0a:	82 ff       	sbrs	r24, 2
     f0c:	02 c0       	rjmp	.+4      	; 0xf12 <timer1Config+0x26>
			setBit(reg2, WGM12);
     f0e:	98 60       	ori	r25, 0x08	; 8
     f10:	01 c0       	rjmp	.+2      	; 0xf14 <timer1Config+0x28>
		else
			clrBit(reg2, WGM12);
     f12:	97 7f       	andi	r25, 0xF7	; 247
		reg1 &= ~(0x03 << WGM10);
		reg1 |= (mode & 0x03);
     f14:	83 70       	andi	r24, 0x03	; 3
			clrBit(reg2, WGM13);
		if(isBitSet(mode, 2))
			setBit(reg2, WGM12);
		else
			clrBit(reg2, WGM12);
		reg1 &= ~(0x03 << WGM10);
     f16:	2c 7f       	andi	r18, 0xFC	; 252
		reg1 |= (mode & 0x03);
     f18:	28 2b       	or	r18, r24
	}
	TCCR1A = reg1;
     f1a:	20 93 80 00 	sts	0x0080, r18
	TCCR1B = reg2;
     f1e:	90 93 81 00 	sts	0x0081, r25

	return RESULT_OK;
}
     f22:	80 e0       	ldi	r24, 0x00	; 0
     f24:	08 95       	ret

00000f26 <timer1OutputConfig>:
 * Configures the timer1 compare outputs
 * -------------------------------------------------------------------------- */

resultValue_t timer1OutputConfig(timerOutput_t compA, timerOutput_t compB)
{
	uint8 aux8 = TCCR1A;
     f26:	20 91 80 00 	lds	r18, 0x0080

	if(compA != TIMER_PORT_NO_CHANGE){
     f2a:	8f 3f       	cpi	r24, 0xFF	; 255
     f2c:	31 f0       	breq	.+12     	; 0xf3a <timer1OutputConfig+0x14>
		aux8 &= ~(0x03 << COM1A0);
		aux8 |= (compA << COM1A0); 
     f2e:	30 e4       	ldi	r19, 0x40	; 64
     f30:	83 9f       	mul	r24, r19
     f32:	c0 01       	movw	r24, r0
     f34:	11 24       	eor	r1, r1
resultValue_t timer1OutputConfig(timerOutput_t compA, timerOutput_t compB)
{
	uint8 aux8 = TCCR1A;

	if(compA != TIMER_PORT_NO_CHANGE){
		aux8 &= ~(0x03 << COM1A0);
     f36:	2f 73       	andi	r18, 0x3F	; 63
		aux8 |= (compA << COM1A0); 
     f38:	28 2b       	or	r18, r24
	}
	if(compB != TIMER_PORT_NO_CHANGE){
     f3a:	6f 3f       	cpi	r22, 0xFF	; 255
     f3c:	31 f0       	breq	.+12     	; 0xf4a <timer1OutputConfig+0x24>
		aux8 &= ~(0x03 << COM1B0);
     f3e:	2f 7c       	andi	r18, 0xCF	; 207
		aux8 |= (compB << COM1B0); 
     f40:	80 e1       	ldi	r24, 0x10	; 16
     f42:	68 9f       	mul	r22, r24
     f44:	b0 01       	movw	r22, r0
     f46:	11 24       	eor	r1, r1
     f48:	26 2b       	or	r18, r22
	}
	TCCR1A = aux8;
     f4a:	20 93 80 00 	sts	0x0080, r18
	return RESULT_OK;
}
     f4e:	80 e0       	ldi	r24, 0x00	; 0
     f50:	08 95       	ret

00000f52 <timer1InputCaptureNoiseCancelerConfig>:
 * Configures the noise canceler of input capture of timer1
 * -------------------------------------------------------------------------- */

resultValue_t	timer1InputCaptureNoiseCancelerConfig(timerInputCaptureNoiseCanceler_t mode)
{
	uint8 aux8 = TCCR1B;
     f52:	e1 e8       	ldi	r30, 0x81	; 129
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	90 81       	ld	r25, Z

	aux8 &= ~(0x03 << ICES1);
     f58:	9f 73       	andi	r25, 0x3F	; 63
	aux8 |= mode;
     f5a:	98 2b       	or	r25, r24

	TCCR1B = aux8;
     f5c:	90 83       	st	Z, r25
	return RESULT_OK;
}
     f5e:	80 e0       	ldi	r24, 0x00	; 0
     f60:	08 95       	ret

00000f62 <timer1ActivateOverflowInterrupt>:
 * Activates the timer1 overflow interrupt
 * -------------------------------------------------------------------------- */

resultValue_t timer1ActivateOverflowInterrupt(void)
{
	setBit(TIMSK1, TOIE1);
     f62:	ef e6       	ldi	r30, 0x6F	; 111
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	80 81       	ld	r24, Z
     f68:	81 60       	ori	r24, 0x01	; 1
     f6a:	80 83       	st	Z, r24
	return RESULT_OK;
}
     f6c:	80 e0       	ldi	r24, 0x00	; 0
     f6e:	08 95       	ret

00000f70 <timer1DeactivateOverflowInterrupt>:
 * Deactivates the timer1 overflow interrupt
 * -------------------------------------------------------------------------- */

resultValue_t timer1DeactivateOverflowInterrupt(void)
{
	clrBit(TIMSK1, TOIE1);
     f70:	ef e6       	ldi	r30, 0x6F	; 111
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	80 81       	ld	r24, Z
     f76:	8e 7f       	andi	r24, 0xFE	; 254
     f78:	80 83       	st	Z, r24
	return RESULT_OK;
}
     f7a:	80 e0       	ldi	r24, 0x00	; 0
     f7c:	08 95       	ret

00000f7e <timer1ClearOverflowInterruptRequest>:
 * Clears the timer1 overflow interrupt request
 * -------------------------------------------------------------------------- */

resultValue_t timer1ClearOverflowInterruptRequest(void)
{
	setBit(TIFR1, TOV1);
     f7e:	b0 9a       	sbi	0x16, 0	; 22
	return RESULT_OK;
}
     f80:	80 e0       	ldi	r24, 0x00	; 0
     f82:	08 95       	ret

00000f84 <timer1ActivateCompareAInterrupt>:
 * Activates the timer1 compare A interrupt
 * -------------------------------------------------------------------------- */

resultValue_t timer1ActivateCompareAInterrupt(void)
{
	setBit(TIMSK1, OCIE1A);
     f84:	ef e6       	ldi	r30, 0x6F	; 111
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	80 81       	ld	r24, Z
     f8a:	82 60       	ori	r24, 0x02	; 2
     f8c:	80 83       	st	Z, r24
	return RESULT_OK;
}
     f8e:	80 e0       	ldi	r24, 0x00	; 0
     f90:	08 95       	ret

00000f92 <timer1DeactivateCompareAInterrupt>:
 * Deactivates the timer1 compare A interrupt
 * -------------------------------------------------------------------------- */

resultValue_t timer1DeactivateCompareAInterrupt(void)
{
	clrBit(TIMSK1, OCIE1A);
     f92:	ef e6       	ldi	r30, 0x6F	; 111
     f94:	f0 e0       	ldi	r31, 0x00	; 0
     f96:	80 81       	ld	r24, Z
     f98:	8d 7f       	andi	r24, 0xFD	; 253
     f9a:	80 83       	st	Z, r24
	return RESULT_OK;
}
     f9c:	80 e0       	ldi	r24, 0x00	; 0
     f9e:	08 95       	ret

00000fa0 <timer1ClearCompareAInterruptRequest>:
 * Clears the timer1 compare A interrupt request
 * -------------------------------------------------------------------------- */

resultValue_t timer1ClearCompareAInterruptRequest(void)
{
	setBit(TIFR1, OCF1A);
     fa0:	b1 9a       	sbi	0x16, 1	; 22
	return RESULT_OK;
}
     fa2:	80 e0       	ldi	r24, 0x00	; 0
     fa4:	08 95       	ret

00000fa6 <timer1ActivateCompareBInterrupt>:
 * Activates the timer1 compare B interrupt
 * -------------------------------------------------------------------------- */

resultValue_t timer1ActivateCompareBInterrupt(void)
{
	setBit(TIMSK1, OCIE1B);
     fa6:	ef e6       	ldi	r30, 0x6F	; 111
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	80 81       	ld	r24, Z
     fac:	84 60       	ori	r24, 0x04	; 4
     fae:	80 83       	st	Z, r24
	return RESULT_OK;
}
     fb0:	80 e0       	ldi	r24, 0x00	; 0
     fb2:	08 95       	ret

00000fb4 <timer1DeactivateCompareBInterrupt>:
 * Deactivates the timer1 compare B interrupt
 * -------------------------------------------------------------------------- */

resultValue_t timer1DeactivateCompareBInterrupt(void)
{
	clrBit(TIMSK1, OCIE1B);
     fb4:	ef e6       	ldi	r30, 0x6F	; 111
     fb6:	f0 e0       	ldi	r31, 0x00	; 0
     fb8:	80 81       	ld	r24, Z
     fba:	8b 7f       	andi	r24, 0xFB	; 251
     fbc:	80 83       	st	Z, r24
	return RESULT_OK;
}
     fbe:	80 e0       	ldi	r24, 0x00	; 0
     fc0:	08 95       	ret

00000fc2 <timer1ClearCompareBInterruptRequest>:
 * Clears the timer1 compare B interrupt request
 * -------------------------------------------------------------------------- */

resultValue_t timer1ClearCompareBInterruptRequest(void)
{
	setBit(TIFR1, OCF1B);
     fc2:	b2 9a       	sbi	0x16, 2	; 22
	return RESULT_OK;
}
     fc4:	80 e0       	ldi	r24, 0x00	; 0
     fc6:	08 95       	ret

00000fc8 <timer1ActivateInputCaptureInterrupt>:
 * Activates the timer1 input capture interrupt
 * -------------------------------------------------------------------------- */

resultValue_t timer1ActivateInputCaptureInterrupt(void)
{
	setBit(TIMSK1, ICIE1);
     fc8:	ef e6       	ldi	r30, 0x6F	; 111
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	80 81       	ld	r24, Z
     fce:	80 62       	ori	r24, 0x20	; 32
     fd0:	80 83       	st	Z, r24
	return RESULT_OK;
}
     fd2:	80 e0       	ldi	r24, 0x00	; 0
     fd4:	08 95       	ret

00000fd6 <timer1DeactivateInputCaptureInterrupt>:
 * Deactivates the timer1 input capture interrupt
 * -------------------------------------------------------------------------- */

resultValue_t timer1DeactivateInputCaptureInterrupt(void)
{
	clrBit(TIMSK1, ICIE1);
     fd6:	ef e6       	ldi	r30, 0x6F	; 111
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	80 81       	ld	r24, Z
     fdc:	8f 7d       	andi	r24, 0xDF	; 223
     fde:	80 83       	st	Z, r24
	return RESULT_OK;
}
     fe0:	80 e0       	ldi	r24, 0x00	; 0
     fe2:	08 95       	ret

00000fe4 <timer1ClearInputCaptureInterruptRequest>:
 * Clears the timer1 input capture interrupt request
 * -------------------------------------------------------------------------- */

resultValue_t timer1ClearInputCaptureInterruptRequest(void)
{
	setBit(TIFR1, ICF1);
     fe4:	b5 9a       	sbi	0x16, 5	; 22
	return RESULT_OK;
}
     fe6:	80 e0       	ldi	r24, 0x00	; 0
     fe8:	08 95       	ret

00000fea <timer1ForceCompareA>:
 * Forces a comparison on the output compare A of the timer1
 * -------------------------------------------------------------------------- */

resultValue_t timer1ForceCompareA(void)
{
	setBit(TCCR1C, FOC1A);
     fea:	e2 e8       	ldi	r30, 0x82	; 130
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	80 81       	ld	r24, Z
     ff0:	80 68       	ori	r24, 0x80	; 128
     ff2:	80 83       	st	Z, r24
	return RESULT_OK;
}
     ff4:	80 e0       	ldi	r24, 0x00	; 0
     ff6:	08 95       	ret

00000ff8 <timer1ForceCompareB>:
 * Forces a comparison on the output compare B of the timer1
 * -------------------------------------------------------------------------- */

resultValue_t timer1ForceCompareB(void)
{
	setBit(TCCR1C, FOC1B);
     ff8:	e2 e8       	ldi	r30, 0x82	; 130
     ffa:	f0 e0       	ldi	r31, 0x00	; 0
     ffc:	80 81       	ld	r24, Z
     ffe:	80 64       	ori	r24, 0x40	; 64
    1000:	80 83       	st	Z, r24
	return RESULT_OK;
}
    1002:	80 e0       	ldi	r24, 0x00	; 0
    1004:	08 95       	ret

00001006 <timer1SetCounterValue>:
 * Sets the timer1 counter value
 * -------------------------------------------------------------------------- */

resultValue_t timer1SetCounterValue(uint16 value)
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    1006:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1008:	f8 94       	cli
		TCNT1 = value;
    100a:	90 93 85 00 	sts	0x0085, r25
    100e:	80 93 84 00 	sts	0x0084, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1012:	2f bf       	out	0x3f, r18	; 63
	}
	return RESULT_OK;
}
    1014:	80 e0       	ldi	r24, 0x00	; 0
    1016:	08 95       	ret

00001018 <timer1GetCounterValue>:
 * Gets the timer1 counter value
 * -------------------------------------------------------------------------- */

uint16 timer1GetCounterValue(void)
{
	return TCNT1;
    1018:	80 91 84 00 	lds	r24, 0x0084
    101c:	90 91 85 00 	lds	r25, 0x0085
}
    1020:	08 95       	ret

00001022 <timer1SetCompareAValue>:
 * Sets the timer1 compare A value
 * -------------------------------------------------------------------------- */

resultValue_t timer1SetCompareAValue(uint16 value)
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    1022:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1024:	f8 94       	cli
		OCR1A = value;
    1026:	90 93 89 00 	sts	0x0089, r25
    102a:	80 93 88 00 	sts	0x0088, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    102e:	2f bf       	out	0x3f, r18	; 63
	}
	return RESULT_OK;
}
    1030:	80 e0       	ldi	r24, 0x00	; 0
    1032:	08 95       	ret

00001034 <timer1GetCompareAValue>:
 * Gets the timer1 compare A value
 * -------------------------------------------------------------------------- */

uint16 timer1GetCompareAValue(void)
{
	return OCR1A;
    1034:	80 91 88 00 	lds	r24, 0x0088
    1038:	90 91 89 00 	lds	r25, 0x0089
}
    103c:	08 95       	ret

0000103e <timer1SetCompareBValue>:
 * Sets the timer1 compare B value
 * -------------------------------------------------------------------------- */

resultValue_t timer1SetCompareBValue(uint16 value)
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    103e:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1040:	f8 94       	cli
		OCR1B = value;
    1042:	90 93 8b 00 	sts	0x008B, r25
    1046:	80 93 8a 00 	sts	0x008A, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    104a:	2f bf       	out	0x3f, r18	; 63
	}
	return RESULT_OK;
}
    104c:	80 e0       	ldi	r24, 0x00	; 0
    104e:	08 95       	ret

00001050 <timer1GetCompareBValue>:
 * Gets the timer1 compare B value
 * -------------------------------------------------------------------------- */

uint16 timer1GetCompareBValue(void)
{
	return OCR1B;
    1050:	80 91 8a 00 	lds	r24, 0x008A
    1054:	90 91 8b 00 	lds	r25, 0x008B
}
    1058:	08 95       	ret

0000105a <timer1SetInputCaptureValue>:
 * Sets the timer1 input capture value
 * -------------------------------------------------------------------------- */

resultValue_t timer1SetInputCaptureValue(uint16 value)
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    105a:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    105c:	f8 94       	cli
		ICR1 = value;
    105e:	90 93 87 00 	sts	0x0087, r25
    1062:	80 93 86 00 	sts	0x0086, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1066:	2f bf       	out	0x3f, r18	; 63
	}
	return RESULT_OK;
}
    1068:	80 e0       	ldi	r24, 0x00	; 0
    106a:	08 95       	ret

0000106c <timer1GetInputCaptureValue>:
 * Gets the timer1 input capture value
 * -------------------------------------------------------------------------- */

uint16 timer1GetInputCaptureValue(void)
{
	return ICR1;
    106c:	80 91 86 00 	lds	r24, 0x0086
    1070:	90 91 87 00 	lds	r25, 0x0087
}
    1074:	08 95       	ret

00001076 <timer2Config>:
 * Configures the timer2 mode and prescaler
 * -------------------------------------------------------------------------- */

resultValue_t timer2Config(timerModeA_t mode, timerPrescalerValueB_t prescaler)
{
	uint8 reg1 = TCCR2A;
    1076:	20 91 b0 00 	lds	r18, 0x00B0
	uint8 reg2 = TCCR2B;
    107a:	90 91 b1 00 	lds	r25, 0x00B1

	if(prescaler != TIMER_B_PRESCALER_NO_CHANGE){
    107e:	6f 3f       	cpi	r22, 0xFF	; 255
    1080:	11 f0       	breq	.+4      	; 0x1086 <timer2Config+0x10>
		reg2 &= ~(0x07 << CS20);
    1082:	98 7f       	andi	r25, 0xF8	; 248
		reg2 |= prescaler;
    1084:	96 2b       	or	r25, r22
	}

	if(mode != TIMER_A_MODE_NO_CHANGE){
    1086:	8f 3f       	cpi	r24, 0xFF	; 255
    1088:	41 f0       	breq	.+16     	; 0x109a <timer2Config+0x24>
		if(isBitSet(mode, 2))
    108a:	82 ff       	sbrs	r24, 2
    108c:	02 c0       	rjmp	.+4      	; 0x1092 <timer2Config+0x1c>
			setBit(reg2, WGM22);
    108e:	98 60       	ori	r25, 0x08	; 8
    1090:	01 c0       	rjmp	.+2      	; 0x1094 <timer2Config+0x1e>
		else
			clrBit(reg2, WGM22);
    1092:	97 7f       	andi	r25, 0xF7	; 247
		reg1 &= ~(0x03 << WGM20);
		reg1 |= (mode & 0x03);
    1094:	83 70       	andi	r24, 0x03	; 3
	if(mode != TIMER_A_MODE_NO_CHANGE){
		if(isBitSet(mode, 2))
			setBit(reg2, WGM22);
		else
			clrBit(reg2, WGM22);
		reg1 &= ~(0x03 << WGM20);
    1096:	2c 7f       	andi	r18, 0xFC	; 252
		reg1 |= (mode & 0x03);
    1098:	28 2b       	or	r18, r24
	}
	TCCR2A = reg1;
    109a:	20 93 b0 00 	sts	0x00B0, r18
	TCCR2B = reg2;
    109e:	90 93 b1 00 	sts	0x00B1, r25

	return RESULT_OK;
}
    10a2:	80 e0       	ldi	r24, 0x00	; 0
    10a4:	08 95       	ret

000010a6 <timer2OutputConfig>:
 * Configures the timer2 compare outputs
 * -------------------------------------------------------------------------- */

resultValue_t timer2OutputConfig(timerOutput_t compA, timerOutput_t compB)
{
	uint8 aux8 = TCCR2A;
    10a6:	20 91 b0 00 	lds	r18, 0x00B0

	if(compA != TIMER_PORT_NO_CHANGE){
    10aa:	8f 3f       	cpi	r24, 0xFF	; 255
    10ac:	31 f0       	breq	.+12     	; 0x10ba <timer2OutputConfig+0x14>
		aux8 &= ~(0x03 << COM2A0);
		aux8 |= (compA << COM2A0); 
    10ae:	30 e4       	ldi	r19, 0x40	; 64
    10b0:	83 9f       	mul	r24, r19
    10b2:	c0 01       	movw	r24, r0
    10b4:	11 24       	eor	r1, r1
resultValue_t timer2OutputConfig(timerOutput_t compA, timerOutput_t compB)
{
	uint8 aux8 = TCCR2A;

	if(compA != TIMER_PORT_NO_CHANGE){
		aux8 &= ~(0x03 << COM2A0);
    10b6:	2f 73       	andi	r18, 0x3F	; 63
		aux8 |= (compA << COM2A0); 
    10b8:	28 2b       	or	r18, r24
	}
	if(compB != TIMER_PORT_NO_CHANGE){
    10ba:	6f 3f       	cpi	r22, 0xFF	; 255
    10bc:	31 f0       	breq	.+12     	; 0x10ca <timer2OutputConfig+0x24>
		aux8 &= ~(0x03 << COM2B0);
    10be:	2f 7c       	andi	r18, 0xCF	; 207
		aux8 |= (compB << COM2B0); 
    10c0:	80 e1       	ldi	r24, 0x10	; 16
    10c2:	68 9f       	mul	r22, r24
    10c4:	b0 01       	movw	r22, r0
    10c6:	11 24       	eor	r1, r1
    10c8:	26 2b       	or	r18, r22
	}
	TCCR2A = aux8;
    10ca:	20 93 b0 00 	sts	0x00B0, r18
	return RESULT_OK;
}
    10ce:	80 e0       	ldi	r24, 0x00	; 0
    10d0:	08 95       	ret

000010d2 <timer2ActivateOverflowInterrupt>:
 * Activates the timer2 overflow interrupt
 * -------------------------------------------------------------------------- */

resultValue_t timer2ActivateOverflowInterrupt(void)
{
	setBit(TIMSK2, TOIE2);
    10d2:	e0 e7       	ldi	r30, 0x70	; 112
    10d4:	f0 e0       	ldi	r31, 0x00	; 0
    10d6:	80 81       	ld	r24, Z
    10d8:	81 60       	ori	r24, 0x01	; 1
    10da:	80 83       	st	Z, r24
	return RESULT_OK;
}
    10dc:	80 e0       	ldi	r24, 0x00	; 0
    10de:	08 95       	ret

000010e0 <timer2DeactivateOverflowInterrupt>:
 * Deactivates the timer2 overflow interrupt
 * -------------------------------------------------------------------------- */

resultValue_t timer2DeactivateOverflowInterrupt(void)
{
	clrBit(TIMSK2, TOIE2);
    10e0:	e0 e7       	ldi	r30, 0x70	; 112
    10e2:	f0 e0       	ldi	r31, 0x00	; 0
    10e4:	80 81       	ld	r24, Z
    10e6:	8e 7f       	andi	r24, 0xFE	; 254
    10e8:	80 83       	st	Z, r24
	return RESULT_OK;
}
    10ea:	80 e0       	ldi	r24, 0x00	; 0
    10ec:	08 95       	ret

000010ee <timer2ClearOverflowInterruptRequest>:
 * Clears the timer2 overflow interrupt request
 * -------------------------------------------------------------------------- */

resultValue_t timer2ClearOverflowInterruptRequest(void)
{
	setBit(TIFR2, TOV2);
    10ee:	b8 9a       	sbi	0x17, 0	; 23
	return RESULT_OK;
}
    10f0:	80 e0       	ldi	r24, 0x00	; 0
    10f2:	08 95       	ret

000010f4 <timer2ActivateCompareAInterrupt>:
 * Activates the timer2 compare A interrupt
 * -------------------------------------------------------------------------- */

resultValue_t timer2ActivateCompareAInterrupt(void)
{
	setBit(TIMSK2, OCIE2A);
    10f4:	e0 e7       	ldi	r30, 0x70	; 112
    10f6:	f0 e0       	ldi	r31, 0x00	; 0
    10f8:	80 81       	ld	r24, Z
    10fa:	82 60       	ori	r24, 0x02	; 2
    10fc:	80 83       	st	Z, r24
	return RESULT_OK;
}
    10fe:	80 e0       	ldi	r24, 0x00	; 0
    1100:	08 95       	ret

00001102 <timer2DeactivateCompareAInterrupt>:
 * Deactivates the timer2 compare A interrupt
 * -------------------------------------------------------------------------- */

resultValue_t timer2DeactivateCompareAInterrupt(void)
{
	clrBit(TIMSK2, OCIE2A);
    1102:	e0 e7       	ldi	r30, 0x70	; 112
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	80 81       	ld	r24, Z
    1108:	8d 7f       	andi	r24, 0xFD	; 253
    110a:	80 83       	st	Z, r24
	return RESULT_OK;
}
    110c:	80 e0       	ldi	r24, 0x00	; 0
    110e:	08 95       	ret

00001110 <timer2ClearCompareAInterruptRequest>:
 * Clears the timer2 compare A interrupt request
 * -------------------------------------------------------------------------- */

resultValue_t timer2ClearCompareAInterruptRequest(void)
{
	setBit(TIFR2, OCF2A);
    1110:	b9 9a       	sbi	0x17, 1	; 23
	return RESULT_OK;
}
    1112:	80 e0       	ldi	r24, 0x00	; 0
    1114:	08 95       	ret

00001116 <timer2ActivateCompareBInterrupt>:
 * Activates the timer2 compare B interrupt
 * -------------------------------------------------------------------------- */

resultValue_t timer2ActivateCompareBInterrupt(void)
{
	setBit(TIMSK2, OCIE2B);
    1116:	e0 e7       	ldi	r30, 0x70	; 112
    1118:	f0 e0       	ldi	r31, 0x00	; 0
    111a:	80 81       	ld	r24, Z
    111c:	84 60       	ori	r24, 0x04	; 4
    111e:	80 83       	st	Z, r24
	return RESULT_OK;
}
    1120:	80 e0       	ldi	r24, 0x00	; 0
    1122:	08 95       	ret

00001124 <timer2DeactivateCompareBInterrupt>:
 * Deactivates the timer2 compare B interrupt
 * -------------------------------------------------------------------------- */

resultValue_t timer2DeactivateCompareBInterrupt(void)
{
	clrBit(TIMSK2, OCIE2B);
    1124:	e0 e7       	ldi	r30, 0x70	; 112
    1126:	f0 e0       	ldi	r31, 0x00	; 0
    1128:	80 81       	ld	r24, Z
    112a:	8b 7f       	andi	r24, 0xFB	; 251
    112c:	80 83       	st	Z, r24
	return RESULT_OK;
}
    112e:	80 e0       	ldi	r24, 0x00	; 0
    1130:	08 95       	ret

00001132 <timer2ClearCompareBInterruptRequest>:
 * Clears the timer2 compare B interrupt request
 * -------------------------------------------------------------------------- */

resultValue_t timer2ClearCompareBInterruptRequest(void)
{
	setBit(TIFR2, OCF2B);
    1132:	ba 9a       	sbi	0x17, 2	; 23
	return RESULT_OK;
}
    1134:	80 e0       	ldi	r24, 0x00	; 0
    1136:	08 95       	ret

00001138 <timer2ForceCompareA>:
 * Forces a comparison on the output compare A of the timer2
 * -------------------------------------------------------------------------- */

resultValue_t timer2ForceCompareA(void)
{
	setBit(TCCR2B, FOC2A);
    1138:	e1 eb       	ldi	r30, 0xB1	; 177
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	80 81       	ld	r24, Z
    113e:	80 68       	ori	r24, 0x80	; 128
    1140:	80 83       	st	Z, r24
	return RESULT_OK;
}
    1142:	80 e0       	ldi	r24, 0x00	; 0
    1144:	08 95       	ret

00001146 <timer2ForceCompareB>:
 * Forces a comparison on the output compare B of the timer2
 * -------------------------------------------------------------------------- */

resultValue_t timer2ForceCompareB(void)
{
	setBit(TCCR2B, FOC2B);
    1146:	e1 eb       	ldi	r30, 0xB1	; 177
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	80 81       	ld	r24, Z
    114c:	80 64       	ori	r24, 0x40	; 64
    114e:	80 83       	st	Z, r24
	return RESULT_OK;
}
    1150:	80 e0       	ldi	r24, 0x00	; 0
    1152:	08 95       	ret

00001154 <timer2SetCounterValue>:
 * Sets the timer2 counter value
 * -------------------------------------------------------------------------- */

resultValue_t timer2SetCounterValue(uint8 value)
{
	TCNT2 = value;
    1154:	80 93 b2 00 	sts	0x00B2, r24
	return RESULT_OK;
}
    1158:	80 e0       	ldi	r24, 0x00	; 0
    115a:	08 95       	ret

0000115c <timer2GetCounterValue>:
 * Gets the timer2 counter value
 * -------------------------------------------------------------------------- */

uint8 timer2GetCounterValue(void)
{
	return TCNT2;
    115c:	80 91 b2 00 	lds	r24, 0x00B2
}
    1160:	08 95       	ret

00001162 <timer2SetCompareAValue>:
 * Sets the timer2 compare A value
 * -------------------------------------------------------------------------- */

resultValue_t timer2SetCompareAValue(uint8 value)
{
	OCR2A = value;
    1162:	80 93 b3 00 	sts	0x00B3, r24
	return RESULT_OK;
}
    1166:	80 e0       	ldi	r24, 0x00	; 0
    1168:	08 95       	ret

0000116a <timer2GetCompareAValue>:
 * Gets the timer2 compare A value
 * -------------------------------------------------------------------------- */

uint8 timer2GetCompareAValue(void)
{
	return OCR2A;
    116a:	80 91 b3 00 	lds	r24, 0x00B3
}
    116e:	08 95       	ret

00001170 <timer2SetCompareBValue>:
 * Sets the timer2 compare B value
 * -------------------------------------------------------------------------- */

resultValue_t timer2SetCompareBValue(uint8 value)
{
	OCR2B = value;
    1170:	80 93 b4 00 	sts	0x00B4, r24
	return RESULT_OK;
}
    1174:	80 e0       	ldi	r24, 0x00	; 0
    1176:	08 95       	ret

00001178 <timer2GetCompareBValue>:
 * Gets the timer2 compare B value
 * -------------------------------------------------------------------------- */

uint8 timer2GetCompareBValue(void)
{
	return OCR2B;
    1178:	80 91 b4 00 	lds	r24, 0x00B4
}
    117c:	08 95       	ret

0000117e <adcConfig>:

resultValue_t adcConfig(adcMode_t mode, adcReference_t reference, adcPrescaler_t  prescaler)
{
	uint8 reg = 0;

	if(reference != ADC_REFERENCE_NO_CHANGE){
    117e:	6f 3f       	cpi	r22, 0xFF	; 255
    1180:	51 f0       	breq	.+20     	; 0x1196 <adcConfig+0x18>
		reg = ADMUX;
    1182:	90 91 7c 00 	lds	r25, 0x007C
		reg &= ~(0x03 << REFS0);
		reg |= reference << REFS0;
    1186:	20 e4       	ldi	r18, 0x40	; 64
    1188:	62 9f       	mul	r22, r18
    118a:	b0 01       	movw	r22, r0
    118c:	11 24       	eor	r1, r1
{
	uint8 reg = 0;

	if(reference != ADC_REFERENCE_NO_CHANGE){
		reg = ADMUX;
		reg &= ~(0x03 << REFS0);
    118e:	9f 73       	andi	r25, 0x3F	; 63
		reg |= reference << REFS0;
    1190:	96 2b       	or	r25, r22
		ADMUX = reg;
    1192:	90 93 7c 00 	sts	0x007C, r25
	}

	if(prescaler != ADC_PRESCALER_NO_CHANGE){
    1196:	4f 3f       	cpi	r20, 0xFF	; 255
    1198:	31 f0       	breq	.+12     	; 0x11a6 <adcConfig+0x28>
		reg = ADCSRA;
    119a:	90 91 7a 00 	lds	r25, 0x007A
		reg &= ~(0x07 << ADPS0);
    119e:	98 7f       	andi	r25, 0xF8	; 248
		reg |= prescaler << ADPS0;
    11a0:	94 2b       	or	r25, r20
		ADCSRA = reg;
    11a2:	90 93 7a 00 	sts	0x007A, r25
	}

	if(mode != ADC_MODE_NO_CHANGE){
    11a6:	8f 3f       	cpi	r24, 0xFF	; 255
    11a8:	39 f1       	breq	.+78     	; 0x11f8 <adcConfig+0x7a>
		if(mode == ADC_MODE_SINGLE_CONVERSION)
    11aa:	81 11       	cpse	r24, r1
    11ac:	04 c0       	rjmp	.+8      	; 0x11b6 <adcConfig+0x38>
			clrBit(ADCSRA, ADATE);
    11ae:	80 91 7a 00 	lds	r24, 0x007A
    11b2:	8f 7d       	andi	r24, 0xDF	; 223
    11b4:	1f c0       	rjmp	.+62     	; 0x11f4 <adcConfig+0x76>
		else{
			reg = ADCSRB;
    11b6:	20 91 7b 00 	lds	r18, 0x007B
			reg &= ~(0x07 << ADTS0);
    11ba:	28 7f       	andi	r18, 0xF8	; 248
			switch(mode){
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	fc 01       	movw	r30, r24
    11c0:	32 97       	sbiw	r30, 0x02	; 2
    11c2:	e7 30       	cpi	r30, 0x07	; 7
    11c4:	f1 05       	cpc	r31, r1
    11c6:	d0 f4       	brcc	.+52     	; 0x11fc <adcConfig+0x7e>
    11c8:	e3 5a       	subi	r30, 0xA3	; 163
    11ca:	ff 4f       	sbci	r31, 0xFF	; 255
    11cc:	0c 94 4c 0d 	jmp	0x1a98	; 0x1a98 <__tablejump2__>
				case ADC_MODE_AUTO_ANALOG_COMP:		reg |= (1 << ADTS0);	break;
    11d0:	21 60       	ori	r18, 0x01	; 1
    11d2:	0b c0       	rjmp	.+22     	; 0x11ea <adcConfig+0x6c>
				case ADC_MODE_AUTO_INT0:			reg |= (2 << ADTS0);	break;
    11d4:	22 60       	ori	r18, 0x02	; 2
    11d6:	09 c0       	rjmp	.+18     	; 0x11ea <adcConfig+0x6c>
				case ADC_MODE_AUTO_TIMER0_COMPA:	reg |= (3 << ADTS0);	break;
    11d8:	23 60       	ori	r18, 0x03	; 3
    11da:	07 c0       	rjmp	.+14     	; 0x11ea <adcConfig+0x6c>
				case ADC_MODE_AUTO_TIMER0_OVERFLOW:	reg |= (4 << ADTS0);	break;
    11dc:	24 60       	ori	r18, 0x04	; 4
    11de:	05 c0       	rjmp	.+10     	; 0x11ea <adcConfig+0x6c>
				case ADC_MODE_AUTO_TIMER1_COMPB:	reg |= (5 << ADTS0);	break;
    11e0:	25 60       	ori	r18, 0x05	; 5
    11e2:	03 c0       	rjmp	.+6      	; 0x11ea <adcConfig+0x6c>
				case ADC_MODE_AUTO_TIMER1_OVERFLOW:	reg |= (6 << ADTS0);	break;
    11e4:	26 60       	ori	r18, 0x06	; 6
    11e6:	01 c0       	rjmp	.+2      	; 0x11ea <adcConfig+0x6c>
				case ADC_MODE_AUTO_TIMER1_CAPTURE:	reg |= (7 << ADTS0);	break;
    11e8:	27 60       	ori	r18, 0x07	; 7
				default:							return RESULT_UNSUPPORTED_VALUE;	break;
			}
			ADCSRB = reg;
    11ea:	20 93 7b 00 	sts	0x007B, r18
			setBit(ADCSRA, ADATE);
    11ee:	80 91 7a 00 	lds	r24, 0x007A
    11f2:	80 62       	ori	r24, 0x20	; 32
    11f4:	80 93 7a 00 	sts	0x007A, r24
		}
	}

	return RESULT_OK;
    11f8:	80 e0       	ldi	r24, 0x00	; 0
    11fa:	08 95       	ret
				case ADC_MODE_AUTO_TIMER0_COMPA:	reg |= (3 << ADTS0);	break;
				case ADC_MODE_AUTO_TIMER0_OVERFLOW:	reg |= (4 << ADTS0);	break;
				case ADC_MODE_AUTO_TIMER1_COMPB:	reg |= (5 << ADTS0);	break;
				case ADC_MODE_AUTO_TIMER1_OVERFLOW:	reg |= (6 << ADTS0);	break;
				case ADC_MODE_AUTO_TIMER1_CAPTURE:	reg |= (7 << ADTS0);	break;
				default:							return RESULT_UNSUPPORTED_VALUE;	break;
    11fc:	87 e0       	ldi	r24, 0x07	; 7
			setBit(ADCSRA, ADATE);
		}
	}

	return RESULT_OK;
 }
    11fe:	08 95       	ret

00001200 <adcSelectChannel>:
 * Selects the adc channel
 * -------------------------------------------------------------------------- */

resultValue_t adcSelectChannel(adcChannel_t channel)
{
	uint8 reg = ADMUX;
    1200:	ec e7       	ldi	r30, 0x7C	; 124
    1202:	f0 e0       	ldi	r31, 0x00	; 0
    1204:	90 81       	ld	r25, Z

	reg &= ~(0x0F << MUX0);
    1206:	90 7f       	andi	r25, 0xF0	; 240
	reg |= (channel << MUX0);
    1208:	98 2b       	or	r25, r24
	ADMUX = reg;
    120a:	90 83       	st	Z, r25

	return RESULT_OK;
}
    120c:	80 e0       	ldi	r24, 0x00	; 0
    120e:	08 95       	ret

00001210 <adcEnableDigitalInput>:
 * Enable adc digital inputs
 * -------------------------------------------------------------------------- */

resultValue_t adcEnableDigitalInput(uint8 flagInputs)
{
	DIDR0 &= (~flagInputs);
    1210:	ee e7       	ldi	r30, 0x7E	; 126
    1212:	f0 e0       	ldi	r31, 0x00	; 0
    1214:	90 81       	ld	r25, Z
    1216:	80 95       	com	r24
    1218:	89 23       	and	r24, r25
    121a:	80 83       	st	Z, r24

	return RESULT_OK;
}
    121c:	80 e0       	ldi	r24, 0x00	; 0
    121e:	08 95       	ret

00001220 <adcDisableDigitalInput>:
 * Enable adc digital inputs
 * -------------------------------------------------------------------------- */

resultValue_t adcDisableDigitalInput(uint8 flagInputs)
{
	DIDR0 |= flagInputs;
    1220:	ee e7       	ldi	r30, 0x7E	; 126
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	90 81       	ld	r25, Z
    1226:	98 2b       	or	r25, r24
    1228:	90 83       	st	Z, r25

	return RESULT_OK;
}
    122a:	80 e0       	ldi	r24, 0x00	; 0
    122c:	08 95       	ret

0000122e <adcDataPresentation>:
 * Sets the adc data presentation
 * -------------------------------------------------------------------------- */

resultValue_t adcDataPresentation(adcDataPresentation_t presentation)
{
	if(presentation == ADC_LEFT_ADJUSTED)
    122e:	81 11       	cpse	r24, r1
    1230:	04 c0       	rjmp	.+8      	; 0x123a <adcDataPresentation+0xc>
		setBit(ADMUX, ADLAR);
    1232:	80 91 7c 00 	lds	r24, 0x007C
    1236:	80 62       	ori	r24, 0x20	; 32
    1238:	03 c0       	rjmp	.+6      	; 0x1240 <adcDataPresentation+0x12>
	else
		clrBit(ADMUX, ADLAR);
    123a:	80 91 7c 00 	lds	r24, 0x007C
    123e:	8f 7d       	andi	r24, 0xDF	; 223
    1240:	80 93 7c 00 	sts	0x007C, r24

	return RESULT_OK;
}
    1244:	80 e0       	ldi	r24, 0x00	; 0
    1246:	08 95       	ret

00001248 <adcEnable>:
 * Enables the adc module
 * -------------------------------------------------------------------------- */

resultValue_t adcEnable(void)
{
	setBit(ADCSRA, ADEN);
    1248:	ea e7       	ldi	r30, 0x7A	; 122
    124a:	f0 e0       	ldi	r31, 0x00	; 0
    124c:	80 81       	ld	r24, Z
    124e:	80 68       	ori	r24, 0x80	; 128
    1250:	80 83       	st	Z, r24

	return RESULT_OK;
}
    1252:	80 e0       	ldi	r24, 0x00	; 0
    1254:	08 95       	ret

00001256 <adcDisable>:
 * Disables the adc module
 * -------------------------------------------------------------------------- */

resultValue_t adcDisable(void)
{
	clrBit(ADCSRA, ADEN);
    1256:	ea e7       	ldi	r30, 0x7A	; 122
    1258:	f0 e0       	ldi	r31, 0x00	; 0
    125a:	80 81       	ld	r24, Z
    125c:	8f 77       	andi	r24, 0x7F	; 127
    125e:	80 83       	st	Z, r24

	return RESULT_OK;
}
    1260:	80 e0       	ldi	r24, 0x00	; 0
    1262:	08 95       	ret

00001264 <adcClearInterruptRequest>:
 * Clears the adc interrupt request
 * -------------------------------------------------------------------------- */

resultValue_t adcClearInterruptRequest(void)
{
	setBit(ADCSRA, ADIF);
    1264:	ea e7       	ldi	r30, 0x7A	; 122
    1266:	f0 e0       	ldi	r31, 0x00	; 0
    1268:	80 81       	ld	r24, Z
    126a:	80 61       	ori	r24, 0x10	; 16
    126c:	80 83       	st	Z, r24

	return RESULT_OK;
}
    126e:	80 e0       	ldi	r24, 0x00	; 0
    1270:	08 95       	ret

00001272 <adcActivateInterrupt>:
 * Enables the adc interrupt
 * -------------------------------------------------------------------------- */

resultValue_t adcActivateInterrupt(void)
{
	setBit(ADCSRA, ADIE);
    1272:	ea e7       	ldi	r30, 0x7A	; 122
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	80 81       	ld	r24, Z
    1278:	88 60       	ori	r24, 0x08	; 8
    127a:	80 83       	st	Z, r24

	return RESULT_OK;
}
    127c:	80 e0       	ldi	r24, 0x00	; 0
    127e:	08 95       	ret

00001280 <adcDeactivateInterrupt>:
 * Disables the adc interrupt
 * -------------------------------------------------------------------------- */

resultValue_t adcDeactivateInterrupt(void)
{
	clrBit(ADCSRA, ADIE);
    1280:	ea e7       	ldi	r30, 0x7A	; 122
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	80 81       	ld	r24, Z
    1286:	87 7f       	andi	r24, 0xF7	; 247
    1288:	80 83       	st	Z, r24

	return RESULT_OK;
}
    128a:	80 e0       	ldi	r24, 0x00	; 0
    128c:	08 95       	ret

0000128e <adcStartConversion>:
 * Starts an adc conversion
 * -------------------------------------------------------------------------- */

resultValue_t adcStartConversion(void)
{
	setBit(ADCSRA, ADSC);
    128e:	ea e7       	ldi	r30, 0x7A	; 122
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	80 81       	ld	r24, Z
    1294:	80 64       	ori	r24, 0x40	; 64
    1296:	80 83       	st	Z, r24

	return RESULT_OK;
}
    1298:	80 e0       	ldi	r24, 0x00	; 0
    129a:	08 95       	ret

0000129c <adcIsBusy>:
 * Returns if an adc conversion is running
 * -------------------------------------------------------------------------- */

bool_t adcIsBusy(void)
{
	return isBitSet(ADCSRA, ADSC);
    129c:	80 91 7a 00 	lds	r24, 0x007A
}
    12a0:	86 fb       	bst	r24, 6
    12a2:	88 27       	eor	r24, r24
    12a4:	80 f9       	bld	r24, 0
    12a6:	08 95       	ret

000012a8 <adcWaitUntilConversionFinish>:
 * Waits until the current conversion is finished
 * -------------------------------------------------------------------------- */

resultValue_t adcWaitUntilConversionFinish(void)
{
	waitUntilBitIsClear(ADCSRA, ADSC);
    12a8:	80 91 7a 00 	lds	r24, 0x007A
    12ac:	86 fd       	sbrc	r24, 6
    12ae:	fc cf       	rjmp	.-8      	; 0x12a8 <adcWaitUntilConversionFinish>
	return RESULT_OK;
}
    12b0:	80 e0       	ldi	r24, 0x00	; 0
    12b2:	08 95       	ret

000012b4 <usartConfig>:
/* -----------------------------------------------------------------------------
 * Configures the USART controller
 * -------------------------------------------------------------------------- */

resultValue_t usartConfig(usartMode_t mode, usartBaudRate_t baudRate, usartDataBits_t dataBits, usartParity_t parity, usartStopBits_t stopBits)
{
    12b4:	8f 92       	push	r8
    12b6:	9f 92       	push	r9
    12b8:	af 92       	push	r10
    12ba:	bf 92       	push	r11
    12bc:	cf 92       	push	r12
    12be:	df 92       	push	r13
    12c0:	ef 92       	push	r14
    12c2:	ff 92       	push	r15
    12c4:	0f 93       	push	r16
    12c6:	4a 01       	movw	r8, r20
    12c8:	5b 01       	movw	r10, r22
    12ca:	9e 2d       	mov	r25, r14
	uint8 reg1 = UCSR0A;
    12cc:	30 91 c0 00 	lds	r19, 0x00C0
	uint8 reg2 = UCSR0B;
    12d0:	30 91 c1 00 	lds	r19, 0x00C1
	uint8 reg3 = UCSR0C;
    12d4:	30 91 c2 00 	lds	r19, 0x00C2

	// Clear errors
	reg1 &= ~((1 << FE0) | (1 << DOR0) | (1 << UPE0));

	// USART stop bits
	if(stopBits != USART_STOP_BIT_NO_CHANGE){
    12d8:	9f 3f       	cpi	r25, 0xFF	; 255
    12da:	19 f0       	breq	.+6      	; 0x12e2 <usartConfig+0x2e>
		switch(stopBits){
    12dc:	92 30       	cpi	r25, 0x02	; 2
    12de:	08 f0       	brcs	.+2      	; 0x12e2 <usartConfig+0x2e>
    12e0:	5f c0       	rjmp	.+190    	; 0x13a0 <usartConfig+0xec>
			default:					return RESULT_UNSUPPORTED_VALUE;	break;
		}
	}

	// USART parity bits
	if(parity != USART_PARITY_NO_CHANGE){
    12e2:	0f 3f       	cpi	r16, 0xFF	; 255
    12e4:	19 f0       	breq	.+6      	; 0x12ec <usartConfig+0x38>
		reg3 &= ~(0x03 << UPM00);
		switch(parity){
    12e6:	03 30       	cpi	r16, 0x03	; 3
    12e8:	08 f0       	brcs	.+2      	; 0x12ec <usartConfig+0x38>
    12ea:	5c c0       	rjmp	.+184    	; 0x13a4 <usartConfig+0xf0>
			default:					return RESULT_USART_PARITY_UNSUPORTED;	break;
		}
	}

	// USART data bits
	if(dataBits != USART_DATA_BITS_NO_CHANGE){
    12ec:	2f 3f       	cpi	r18, 0xFF	; 255
    12ee:	19 f0       	breq	.+6      	; 0x12f6 <usartConfig+0x42>
		clrBit(reg2, UCSZ02);
		reg3 &= ~(0x03 << UCSZ00);
		switch(dataBits){
    12f0:	25 30       	cpi	r18, 0x05	; 5
    12f2:	08 f0       	brcs	.+2      	; 0x12f6 <usartConfig+0x42>
    12f4:	57 c0       	rjmp	.+174    	; 0x13a4 <usartConfig+0xf0>
			break;
		}
	}

	// USART mode
	if(mode != USART_MODE_NO_CHANGE){
    12f6:	8f 3f       	cpi	r24, 0xFF	; 255
    12f8:	79 f4       	brne	.+30     	; 0x1318 <usartConfig+0x64>
			reg3 |= (3 << UMSEL00);		// Synchronous SPI Mode
			setBit(reg3, UCPOL0);		// Polarity
			break;
		}
	}else{
		aux8 = (0x03 & (UCSR0C >> UMSEL00));
    12fa:	80 91 c2 00 	lds	r24, 0x00C2
    12fe:	82 95       	swap	r24
    1300:	86 95       	lsr	r24
    1302:	86 95       	lsr	r24
    1304:	83 70       	andi	r24, 0x03	; 3
		switch(aux8){
    1306:	21 f0       	breq	.+8      	; 0x1310 <usartConfig+0x5c>
    1308:	83 30       	cpi	r24, 0x03	; 3
    130a:	e9 f0       	breq	.+58     	; 0x1346 <usartConfig+0x92>
resultValue_t usartConfig(usartMode_t mode, usartBaudRate_t baudRate, usartDataBits_t dataBits, usartParity_t parity, usartStopBits_t stopBits)
{
	uint8 reg1 = UCSR0A;
	uint8 reg2 = UCSR0B;
	uint8 reg3 = UCSR0C;
	uint8 modeAux = 0;
    130c:	80 e0       	ldi	r24, 0x00	; 0
    130e:	04 c0       	rjmp	.+8      	; 0x1318 <usartConfig+0x64>
		}
	}else{
		aux8 = (0x03 & (UCSR0C >> UMSEL00));
		switch(aux8){
		case 0:	// Asynchronous mode
			if(isBitClr(UCSR0A, U2X0)){	// Single speed
    1310:	80 91 c0 00 	lds	r24, 0x00C0
    1314:	86 95       	lsr	r24
    1316:	81 70       	andi	r24, 0x01	; 1
			modeAux = USART_MODE_SYNCHRONOUS_SPI;
			break;
		}
	}

	if(baudRate != USART_BAUD_NO_CHANGE){
    1318:	9f ef       	ldi	r25, 0xFF	; 255
    131a:	89 16       	cp	r8, r25
    131c:	99 06       	cpc	r9, r25
    131e:	a9 06       	cpc	r10, r25
    1320:	b9 06       	cpc	r11, r25
    1322:	09 f4       	brne	.+2      	; 0x1326 <usartConfig+0x72>
    1324:	41 c0       	rjmp	.+130    	; 0x13a8 <usartConfig+0xf4>
		switch(modeAux){
    1326:	81 30       	cpi	r24, 0x01	; 1
    1328:	49 f0       	breq	.+18     	; 0x133c <usartConfig+0x88>
    132a:	18 f0       	brcs	.+6      	; 0x1332 <usartConfig+0x7e>
    132c:	84 30       	cpi	r24, 0x04	; 4
    132e:	89 f0       	breq	.+34     	; 0x1352 <usartConfig+0x9e>
    1330:	22 c0       	rjmp	.+68     	; 0x1376 <usartConfig+0xc2>
		case USART_MODE_ASYNCHRONOUS:
			aux64 = (F_CPU / 16 / baudRate) - 1;
    1332:	60 e4       	ldi	r22, 0x40	; 64
    1334:	72 e4       	ldi	r23, 0x42	; 66
    1336:	8f e0       	ldi	r24, 0x0F	; 15
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	0f c0       	rjmp	.+30     	; 0x135a <usartConfig+0xa6>
			break;
		case USART_MODE_ASYNCHRONOUS_DOUBLE_SPEED:
			aux64 = (F_CPU / 8 / baudRate) - 1;
    133c:	60 e8       	ldi	r22, 0x80	; 128
    133e:	74 e8       	ldi	r23, 0x84	; 132
    1340:	8e e1       	ldi	r24, 0x1E	; 30
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	0a c0       	rjmp	.+20     	; 0x135a <usartConfig+0xa6>
			modeAux = USART_MODE_SYNCHRONOUS_SPI;
			break;
		}
	}

	if(baudRate != USART_BAUD_NO_CHANGE){
    1346:	8f ef       	ldi	r24, 0xFF	; 255
    1348:	88 16       	cp	r8, r24
    134a:	98 06       	cpc	r9, r24
    134c:	a8 06       	cpc	r10, r24
    134e:	b8 06       	cpc	r11, r24
    1350:	59 f1       	breq	.+86     	; 0x13a8 <usartConfig+0xf4>
			break;
		case USART_MODE_ASYNCHRONOUS_DOUBLE_SPEED:
			aux64 = (F_CPU / 8 / baudRate) - 1;
			break;
		case USART_MODE_SYNCHRONOUS_SPI:
			aux64 = (F_CPU / 2 / baudRate) - 1;
    1352:	60 e0       	ldi	r22, 0x00	; 0
    1354:	72 e1       	ldi	r23, 0x12	; 18
    1356:	8a e7       	ldi	r24, 0x7A	; 122
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	a5 01       	movw	r20, r10
    135c:	94 01       	movw	r18, r8
    135e:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <__udivmodsi4>
    1362:	21 50       	subi	r18, 0x01	; 1
    1364:	31 09       	sbc	r19, r1
    1366:	41 09       	sbc	r20, r1
    1368:	51 09       	sbc	r21, r1
    136a:	49 01       	movw	r8, r18
    136c:	5a 01       	movw	r10, r20
    136e:	c1 2c       	mov	r12, r1
    1370:	d1 2c       	mov	r13, r1
    1372:	76 01       	movw	r14, r12
			break;
    1374:	08 c0       	rjmp	.+16     	; 0x1386 <usartConfig+0xd2>
	uint8 reg1 = UCSR0A;
	uint8 reg2 = UCSR0B;
	uint8 reg3 = UCSR0C;
	uint8 modeAux = 0;
	uint8 aux8 = 0;
	uint64 aux64 = 0;
    1376:	81 2c       	mov	r8, r1
    1378:	91 2c       	mov	r9, r1
    137a:	a1 2c       	mov	r10, r1
    137c:	b1 2c       	mov	r11, r1
    137e:	c1 2c       	mov	r12, r1
    1380:	d1 2c       	mov	r13, r1
    1382:	e1 2c       	mov	r14, r1
    1384:	f1 2c       	mov	r15, r1
			aux64 = (F_CPU / 2 / baudRate) - 1;
			break;
		}
//		if((aux64 > (1.05 * baudRate)) || (aux64 < (0.95 * baudRate)))
//			return RESULT_USART_BAUD_RATE_UNSUPORTED;
		UBRR0H = 0x0F & (aux64 >> 8);
    1386:	94 01       	movw	r18, r8
    1388:	a5 01       	movw	r20, r10
    138a:	b6 01       	movw	r22, r12
    138c:	c7 01       	movw	r24, r14
    138e:	08 e0       	ldi	r16, 0x08	; 8
    1390:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <__lshrdi3>
    1394:	2f 70       	andi	r18, 0x0F	; 15
    1396:	20 93 c5 00 	sts	0x00C5, r18
		UBRR0L = (0xFF & aux64);
    139a:	80 92 c4 00 	sts	0x00C4, r8
    139e:	04 c0       	rjmp	.+8      	; 0x13a8 <usartConfig+0xf4>
	// USART stop bits
	if(stopBits != USART_STOP_BIT_NO_CHANGE){
		switch(stopBits){
			case USART_STOP_BIT_SINGLE:	clrBit(reg3, USBS0);				break;
			case USART_STOP_BIT_DOUBLE:	setBit(reg3, USBS0);				break;
			default:					return RESULT_UNSUPPORTED_VALUE;	break;
    13a0:	87 e0       	ldi	r24, 0x07	; 7
    13a2:	03 c0       	rjmp	.+6      	; 0x13aa <usartConfig+0xf6>
		case USART_DATA_BITS_9:
			setBit(reg2, UCSZ02);
			reg3 |= (0x03 << UCSZ00);
			break;
		default:
			return RESULT_USART_PARITY_UNSUPORTED;
    13a4:	85 e0       	ldi	r24, 0x05	; 5
    13a6:	01 c0       	rjmp	.+2      	; 0x13aa <usartConfig+0xf6>
//			return RESULT_USART_BAUD_RATE_UNSUPORTED;
		UBRR0H = 0x0F & (aux64 >> 8);
		UBRR0L = (0xFF & aux64);
	}

	return RESULT_OK;
    13a8:	80 e0       	ldi	r24, 0x00	; 0
}
    13aa:	0f 91       	pop	r16
    13ac:	ff 90       	pop	r15
    13ae:	ef 90       	pop	r14
    13b0:	df 90       	pop	r13
    13b2:	cf 90       	pop	r12
    13b4:	bf 90       	pop	r11
    13b6:	af 90       	pop	r10
    13b8:	9f 90       	pop	r9
    13ba:	8f 90       	pop	r8
    13bc:	08 95       	ret

000013be <usartEnableReceiver>:
 * Enables USART reception module
 * -------------------------------------------------------------------------- */

resultValue_t usartEnableReceiver(void)
{
	setBit(UCSR0B, RXEN0);
    13be:	e1 ec       	ldi	r30, 0xC1	; 193
    13c0:	f0 e0       	ldi	r31, 0x00	; 0
    13c2:	80 81       	ld	r24, Z
    13c4:	80 61       	ori	r24, 0x10	; 16
    13c6:	80 83       	st	Z, r24
	return RESULT_OK;
}
    13c8:	80 e0       	ldi	r24, 0x00	; 0
    13ca:	08 95       	ret

000013cc <usartDisableReceiver>:
 * Disables USART reception module
 * -------------------------------------------------------------------------- */

resultValue_t usartDisableReceiver(void)
{
	clrBit(UCSR0B, RXEN0);
    13cc:	e1 ec       	ldi	r30, 0xC1	; 193
    13ce:	f0 e0       	ldi	r31, 0x00	; 0
    13d0:	80 81       	ld	r24, Z
    13d2:	8f 7e       	andi	r24, 0xEF	; 239
    13d4:	80 83       	st	Z, r24
	return RESULT_OK;
}
    13d6:	80 e0       	ldi	r24, 0x00	; 0
    13d8:	08 95       	ret

000013da <usartEnableTransmitter>:
 * Enables USART transmission module
 * -------------------------------------------------------------------------- */

resultValue_t usartEnableTransmitter(void)
{
	setBit(UCSR0B, TXEN0);
    13da:	e1 ec       	ldi	r30, 0xC1	; 193
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
    13de:	80 81       	ld	r24, Z
    13e0:	88 60       	ori	r24, 0x08	; 8
    13e2:	80 83       	st	Z, r24
	return RESULT_OK;
}
    13e4:	80 e0       	ldi	r24, 0x00	; 0
    13e6:	08 95       	ret

000013e8 <usartDisableTransmitter>:
 * Disables USART transmission module
 * -------------------------------------------------------------------------- */

resultValue_t usartDisableTransmitter(void)
{
	clrBit(UCSR0B, TXEN0);
    13e8:	e1 ec       	ldi	r30, 0xC1	; 193
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	80 81       	ld	r24, Z
    13ee:	87 7f       	andi	r24, 0xF7	; 247
    13f0:	80 83       	st	Z, r24
	return RESULT_OK;
}
    13f2:	80 e0       	ldi	r24, 0x00	; 0
    13f4:	08 95       	ret

000013f6 <usartActivateReceptionCompleteInterrupt>:
 * Activates USART reception complete interrupt
 * -------------------------------------------------------------------------- */

resultValue_t usartActivateReceptionCompleteInterrupt(void)
{
	setBit(UCSR0B, RXCIE0);
    13f6:	e1 ec       	ldi	r30, 0xC1	; 193
    13f8:	f0 e0       	ldi	r31, 0x00	; 0
    13fa:	80 81       	ld	r24, Z
    13fc:	80 68       	ori	r24, 0x80	; 128
    13fe:	80 83       	st	Z, r24
	return RESULT_OK;
}
    1400:	80 e0       	ldi	r24, 0x00	; 0
    1402:	08 95       	ret

00001404 <usartDeactivateReceptionCompleteInterrupt>:
 * Deactivates USART reception complete interrupt
 * -------------------------------------------------------------------------- */

resultValue_t usartDeactivateReceptionCompleteInterrupt(void)
{
	clrBit(UCSR0B, RXCIE0);
    1404:	e1 ec       	ldi	r30, 0xC1	; 193
    1406:	f0 e0       	ldi	r31, 0x00	; 0
    1408:	80 81       	ld	r24, Z
    140a:	8f 77       	andi	r24, 0x7F	; 127
    140c:	80 83       	st	Z, r24
	return RESULT_OK;
}
    140e:	80 e0       	ldi	r24, 0x00	; 0
    1410:	08 95       	ret

00001412 <usartActivateTransmissionCompleteInterrupt>:
 * Activates USART transmission complete interrupt
 * -------------------------------------------------------------------------- */

resultValue_t usartActivateTransmissionCompleteInterrupt(void)
{
	setBit(UCSR0B, TXCIE0);
    1412:	e1 ec       	ldi	r30, 0xC1	; 193
    1414:	f0 e0       	ldi	r31, 0x00	; 0
    1416:	80 81       	ld	r24, Z
    1418:	80 64       	ori	r24, 0x40	; 64
    141a:	80 83       	st	Z, r24
	return RESULT_OK;
}
    141c:	80 e0       	ldi	r24, 0x00	; 0
    141e:	08 95       	ret

00001420 <usartDeactivateTransmissionCompleteInterrupt>:
 * Deactivates USART transmission complete interrupt
 * -------------------------------------------------------------------------- */

resultValue_t usartDeactivateTransmissionCompleteInterrupt(void)
{
	clrBit(UCSR0B, TXCIE0);
    1420:	e1 ec       	ldi	r30, 0xC1	; 193
    1422:	f0 e0       	ldi	r31, 0x00	; 0
    1424:	80 81       	ld	r24, Z
    1426:	8f 7b       	andi	r24, 0xBF	; 191
    1428:	80 83       	st	Z, r24
	return RESULT_OK;
}
    142a:	80 e0       	ldi	r24, 0x00	; 0
    142c:	08 95       	ret

0000142e <usartActivateBufferEmptyInterrupt>:
 * Activates USART buffer empty interrupt
 * -------------------------------------------------------------------------- */

resultValue_t usartActivateBufferEmptyInterrupt(void)
{
	setBit(UCSR0B, UDRIE0);
    142e:	e1 ec       	ldi	r30, 0xC1	; 193
    1430:	f0 e0       	ldi	r31, 0x00	; 0
    1432:	80 81       	ld	r24, Z
    1434:	80 62       	ori	r24, 0x20	; 32
    1436:	80 83       	st	Z, r24
	return RESULT_OK;
}
    1438:	80 e0       	ldi	r24, 0x00	; 0
    143a:	08 95       	ret

0000143c <usartDeactivateBufferEmptyInterrupt>:
 * Deactivates USART buffer empty interrupt
 * -------------------------------------------------------------------------- */

resultValue_t usartDeactivateBufferEmptyInterrupt(void)
{
	clrBit(UCSR0B, UDRIE0);
    143c:	e1 ec       	ldi	r30, 0xC1	; 193
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	80 81       	ld	r24, Z
    1442:	8f 7d       	andi	r24, 0xDF	; 223
    1444:	80 83       	st	Z, r24
	return RESULT_OK;
}
    1446:	80 e0       	ldi	r24, 0x00	; 0
    1448:	08 95       	ret

0000144a <usartStdio>:
 * Changes the std handlers to usart module
 * -------------------------------------------------------------------------- */

resultValue_t usartStdio(void)
{
	stdin = stdout = stderr = &usartStream;
    144a:	88 e0       	ldi	r24, 0x08	; 8
    144c:	91 e0       	ldi	r25, 0x01	; 1
    144e:	90 93 81 01 	sts	0x0181, r25
    1452:	80 93 80 01 	sts	0x0180, r24
    1456:	90 93 7f 01 	sts	0x017F, r25
    145a:	80 93 7e 01 	sts	0x017E, r24
    145e:	90 93 7d 01 	sts	0x017D, r25
    1462:	80 93 7c 01 	sts	0x017C, r24
	return RESULT_OK;
}
    1466:	80 e0       	ldi	r24, 0x00	; 0
    1468:	08 95       	ret

0000146a <usartIsReceptionComplete>:
 * Checks if a reception has been completed
 * -------------------------------------------------------------------------- */

bool_t usartIsReceptionComplete(void)
{
	return isBitSet(UCSR0A, RXC0);
    146a:	80 91 c0 00 	lds	r24, 0x00C0
}
    146e:	88 1f       	adc	r24, r24
    1470:	88 27       	eor	r24, r24
    1472:	88 1f       	adc	r24, r24
    1474:	08 95       	ret

00001476 <usartIsTransmissionComplete>:
 * Checks if a transmission has been completed
 * -------------------------------------------------------------------------- */

bool_t usartIsTransmissionComplete(void)
{
	return isBitSet(UCSR0A, TXC0);
    1476:	80 91 c0 00 	lds	r24, 0x00C0
}
    147a:	86 fb       	bst	r24, 6
    147c:	88 27       	eor	r24, r24
    147e:	80 f9       	bld	r24, 0
    1480:	08 95       	ret

00001482 <usartIsBufferEmpty>:
 * Checks if the buffer is empty
 * -------------------------------------------------------------------------- */

bool_t usartIsBufferEmpty(void)
{
	return isBitSet(UCSR0A, UDRE0);
    1482:	80 91 c0 00 	lds	r24, 0x00C0
}
    1486:	85 fb       	bst	r24, 5
    1488:	88 27       	eor	r24, r24
    148a:	80 f9       	bld	r24, 0
    148c:	08 95       	ret

0000148e <usartTransmitStd>:
 * Transmits data in 5, 6, 7 or 8 bits modes using the USART controller and
 * standard output heandler
 * -------------------------------------------------------------------------- */

resultValue_t usartTransmitStd(int8 data, FILE * stream)
{
    148e:	cf 93       	push	r28
    1490:	c8 2f       	mov	r28, r24
	while(!usartIsBufferEmpty())
    1492:	0e 94 41 0a 	call	0x1482	; 0x1482 <usartIsBufferEmpty>
    1496:	88 23       	and	r24, r24
    1498:	e1 f3       	breq	.-8      	; 0x1492 <usartTransmitStd+0x4>
		;	// Waits until last transmission ends
	UDR0 = data;
    149a:	c0 93 c6 00 	sts	0x00C6, r28
	return RESULT_OK;
}
    149e:	80 e0       	ldi	r24, 0x00	; 0
    14a0:	cf 91       	pop	r28
    14a2:	08 95       	ret

000014a4 <usartCheckError>:

usartError_t usartCheckError(void)
{
	usartError_t error = 0;

	if(isBitSet(UCSR0A, FE0))
    14a4:	80 91 c0 00 	lds	r24, 0x00C0
    14a8:	84 fd       	sbrc	r24, 4
    14aa:	02 c0       	rjmp	.+4      	; 0x14b0 <usartCheckError+0xc>
 * Checks if an error occurred during transmission or reception
 * -------------------------------------------------------------------------- */

usartError_t usartCheckError(void)
{
	usartError_t error = 0;
    14ac:	80 e0       	ldi	r24, 0x00	; 0
    14ae:	01 c0       	rjmp	.+2      	; 0x14b2 <usartCheckError+0xe>

	if(isBitSet(UCSR0A, FE0))
		error |= USART_FRAME_ERROR;
    14b0:	82 e0       	ldi	r24, 0x02	; 2
	if(isBitSet(UCSR0A, DOR0))
    14b2:	90 91 c0 00 	lds	r25, 0x00C0
    14b6:	93 fd       	sbrc	r25, 3
		error |= USART_PARITY_ERROR;
    14b8:	84 60       	ori	r24, 0x04	; 4
	if(isBitSet(UCSR0A, UPE0))
    14ba:	90 91 c0 00 	lds	r25, 0x00C0
    14be:	92 ff       	sbrs	r25, 2
    14c0:	02 c0       	rjmp	.+4      	; 0x14c6 <usartCheckError+0x22>
		error |= USART_BUFFER_OVERFLOW_ERROR;
    14c2:	88 60       	ori	r24, 0x08	; 8
    14c4:	08 95       	ret

	if(error == 0)
    14c6:	81 11       	cpse	r24, r1
    14c8:	01 c0       	rjmp	.+2      	; 0x14cc <usartCheckError+0x28>
		return USART_OK;
    14ca:	81 e0       	ldi	r24, 0x01	; 1
	return error;
}
    14cc:	08 95       	ret

000014ce <usartTransmit>:
/* -----------------------------------------------------------------------------
 * Transmits data in 5, 6, 7 or 8 bits modes using the USART controller
 * -------------------------------------------------------------------------- */

resultValue_t usartTransmit(int8 data)
{
    14ce:	cf 93       	push	r28
    14d0:	c8 2f       	mov	r28, r24
	while(!usartIsBufferEmpty())
    14d2:	0e 94 41 0a 	call	0x1482	; 0x1482 <usartIsBufferEmpty>
    14d6:	88 23       	and	r24, r24
    14d8:	e1 f3       	breq	.-8      	; 0x14d2 <usartTransmit+0x4>
		;	// Waits until last transmission ends
	UDR0 = data;
    14da:	c0 93 c6 00 	sts	0x00C6, r28
	return RESULT_OK;
}
    14de:	80 e0       	ldi	r24, 0x00	; 0
    14e0:	cf 91       	pop	r28
    14e2:	08 95       	ret

000014e4 <usartTransmit9bits>:
/* -----------------------------------------------------------------------------
 * Transmits data in 9 bits mode using the USART controller
 * -------------------------------------------------------------------------- */

resultValue_t usartTransmit9bits(uint16 data)
{
    14e4:	cf 93       	push	r28
    14e6:	df 93       	push	r29
    14e8:	ec 01       	movw	r28, r24
	uint8 aux;

	while(!usartIsBufferEmpty())
    14ea:	0e 94 41 0a 	call	0x1482	; 0x1482 <usartIsBufferEmpty>
    14ee:	88 23       	and	r24, r24
    14f0:	e1 f3       	breq	.-8      	; 0x14ea <usartTransmit9bits+0x6>
		;	// Waits until last transmission ends
	aux = ((data & 0x100) >> 8);
    14f2:	ce 01       	movw	r24, r28
    14f4:	88 27       	eor	r24, r24
    14f6:	91 70       	andi	r25, 0x01	; 1
	if(aux)
		setBit(UCSR0B, TXB80);
    14f8:	80 91 c1 00 	lds	r24, 0x00C1
	uint8 aux;

	while(!usartIsBufferEmpty())
		;	// Waits until last transmission ends
	aux = ((data & 0x100) >> 8);
	if(aux)
    14fc:	99 23       	and	r25, r25
    14fe:	11 f0       	breq	.+4      	; 0x1504 <usartTransmit9bits+0x20>
		setBit(UCSR0B, TXB80);
    1500:	81 60       	ori	r24, 0x01	; 1
    1502:	01 c0       	rjmp	.+2      	; 0x1506 <usartTransmit9bits+0x22>
	else
		clrBit(UCSR0B, TXB80);
    1504:	8e 7f       	andi	r24, 0xFE	; 254
    1506:	80 93 c1 00 	sts	0x00C1, r24
	UDR0 = (uint8)data;
    150a:	c0 93 c6 00 	sts	0x00C6, r28
	return RESULT_OK;
}
    150e:	80 e0       	ldi	r24, 0x00	; 0
    1510:	df 91       	pop	r29
    1512:	cf 91       	pop	r28
    1514:	08 95       	ret

00001516 <usartReceive>:
 * Checks if a reception has been completed
 * -------------------------------------------------------------------------- */

bool_t usartIsReceptionComplete(void)
{
	return isBitSet(UCSR0A, RXC0);
    1516:	80 91 c0 00 	lds	r24, 0x00C0

uint8 usartReceive(void)
{
	uint8 status;

	while(!usartIsReceptionComplete())
    151a:	87 ff       	sbrs	r24, 7
    151c:	fc cf       	rjmp	.-8      	; 0x1516 <usartReceive>
		;	// Waits until last reception ends
	status = UCSR0A;
    151e:	80 91 c0 00 	lds	r24, 0x00C0
	return UDR0;
    1522:	80 91 c6 00 	lds	r24, 0x00C6
}
    1526:	08 95       	ret

00001528 <usartReceive9bits>:
 * Checks if a reception has been completed
 * -------------------------------------------------------------------------- */

bool_t usartIsReceptionComplete(void)
{
	return isBitSet(UCSR0A, RXC0);
    1528:	80 91 c0 00 	lds	r24, 0x00C0
	uint8 status;
	uint8 byteh;
	uint8 bytel;
	uint16 byte;

	while(!usartIsReceptionComplete())
    152c:	87 ff       	sbrs	r24, 7
    152e:	fc cf       	rjmp	.-8      	; 0x1528 <usartReceive9bits>
		;	// Waits until last reception ends
	status = UCSR0A;
    1530:	80 91 c0 00 	lds	r24, 0x00C0
	byteh = UCSR0B;
    1534:	80 91 c1 00 	lds	r24, 0x00C1
	bytel = UDR0;
    1538:	20 91 c6 00 	lds	r18, 0x00C6

	byte = (uint16)(byteh & 0x02) << 7;
    153c:	82 70       	andi	r24, 0x02	; 2
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	96 95       	lsr	r25
    1542:	98 2f       	mov	r25, r24
    1544:	88 27       	eor	r24, r24
    1546:	97 95       	ror	r25
    1548:	87 95       	ror	r24
	byte |= bytel;
	return  byte;
}
    154a:	82 2b       	or	r24, r18
    154c:	08 95       	ret

0000154e <usartClearReceptionBuffer>:
 * Checks if a reception has been completed
 * -------------------------------------------------------------------------- */

bool_t usartIsReceptionComplete(void)
{
	return isBitSet(UCSR0A, RXC0);
    154e:	80 91 c0 00 	lds	r24, 0x00C0
 * -------------------------------------------------------------------------- */

void usartClearReceptionBuffer(void)
{
	uint8 aux;
	while(usartIsReceptionComplete())
    1552:	87 ff       	sbrs	r24, 7
    1554:	03 c0       	rjmp	.+6      	; 0x155c <usartClearReceptionBuffer+0xe>
		aux = UDR0;
    1556:	80 91 c6 00 	lds	r24, 0x00C6
    155a:	f9 cf       	rjmp	.-14     	; 0x154e <usartClearReceptionBuffer>
	return;
}
    155c:	08 95       	ret

0000155e <usartAddDataToReceiverBuffer>:
/* -----------------------------------------------------------------------------
 * Adds data to the reception buffer. The function has NO CONTROL of lost data.
 * -------------------------------------------------------------------------- */

void usartAddDataToReceiverBuffer(uint8 data)
{
    155e:	ff 92       	push	r15
    1560:	0f 93       	push	r16
    1562:	1f 93       	push	r17
    1564:	cf 93       	push	r28
    1566:	df 93       	push	r29
    1568:	f8 2e       	mov	r15, r24
	if(((usartReceiverBufferNextWrite + 1) % USART_RECEIVER_BUFFER_SIZE) != usartReceiverBufferNextRead){
    156a:	c0 91 79 01 	lds	r28, 0x0179
    156e:	d0 e0       	ldi	r29, 0x00	; 0
    1570:	be 01       	movw	r22, r28
    1572:	6f 5f       	subi	r22, 0xFF	; 255
    1574:	7f 4f       	sbci	r23, 0xFF	; 255
    1576:	88 27       	eor	r24, r24
    1578:	77 fd       	sbrc	r23, 7
    157a:	80 95       	com	r24
    157c:	98 2f       	mov	r25, r24
    157e:	22 e3       	ldi	r18, 0x32	; 50
    1580:	30 e0       	ldi	r19, 0x00	; 0
    1582:	40 e0       	ldi	r20, 0x00	; 0
    1584:	50 e0       	ldi	r21, 0x00	; 0
    1586:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <__udivmodsi4>
    158a:	00 91 7b 01 	lds	r16, 0x017B
    158e:	10 e0       	ldi	r17, 0x00	; 0
    1590:	20 e0       	ldi	r18, 0x00	; 0
    1592:	30 e0       	ldi	r19, 0x00	; 0
    1594:	60 17       	cp	r22, r16
    1596:	71 07       	cpc	r23, r17
    1598:	82 07       	cpc	r24, r18
    159a:	93 07       	cpc	r25, r19
    159c:	51 f0       	breq	.+20     	; 0x15b2 <usartAddDataToReceiverBuffer+0x54>
		usartReceiverBuffer[usartReceiverBufferNextWrite] = data;
    159e:	c9 5b       	subi	r28, 0xB9	; 185
    15a0:	de 4f       	sbci	r29, 0xFE	; 254
    15a2:	f8 82       	st	Y, r15
		usartReceiverBufferNextWrite = (usartReceiverBufferNextWrite + 1) % USART_RECEIVER_BUFFER_SIZE;
    15a4:	60 93 79 01 	sts	0x0179, r22
		usartReceiverBufferLength++;
    15a8:	80 91 7a 01 	lds	r24, 0x017A
    15ac:	8f 5f       	subi	r24, 0xFF	; 255
    15ae:	80 93 7a 01 	sts	0x017A, r24
	}
	return;
}
    15b2:	df 91       	pop	r29
    15b4:	cf 91       	pop	r28
    15b6:	1f 91       	pop	r17
    15b8:	0f 91       	pop	r16
    15ba:	ff 90       	pop	r15
    15bc:	08 95       	ret

000015be <usartGetDataFromReceiverBuffer>:
 * usartIsReceiverBufferEmpty() function must be called to check if there is new
 * data in the buffer.
 * -------------------------------------------------------------------------- */

uint8 usartGetDataFromReceiverBuffer(void)
{
    15be:	cf 93       	push	r28
    15c0:	df 93       	push	r29
	uint8 data = usartReceiverBuffer[usartReceiverBufferNextRead];
    15c2:	60 91 7b 01 	lds	r22, 0x017B
    15c6:	70 e0       	ldi	r23, 0x00	; 0
    15c8:	fb 01       	movw	r30, r22
    15ca:	e9 5b       	subi	r30, 0xB9	; 185
    15cc:	fe 4f       	sbci	r31, 0xFE	; 254
    15ce:	d0 81       	ld	r29, Z
	if(usartReceiverBufferLength > 0){
    15d0:	c0 91 7a 01 	lds	r28, 0x017A
    15d4:	cc 23       	and	r28, r28
    15d6:	89 f0       	breq	.+34     	; 0x15fa <usartGetDataFromReceiverBuffer+0x3c>
		usartReceiverBufferNextRead = (usartReceiverBufferNextRead + 1) % USART_RECEIVER_BUFFER_SIZE;
    15d8:	6f 5f       	subi	r22, 0xFF	; 255
    15da:	7f 4f       	sbci	r23, 0xFF	; 255
    15dc:	88 27       	eor	r24, r24
    15de:	77 fd       	sbrc	r23, 7
    15e0:	80 95       	com	r24
    15e2:	98 2f       	mov	r25, r24
    15e4:	22 e3       	ldi	r18, 0x32	; 50
    15e6:	30 e0       	ldi	r19, 0x00	; 0
    15e8:	40 e0       	ldi	r20, 0x00	; 0
    15ea:	50 e0       	ldi	r21, 0x00	; 0
    15ec:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <__udivmodsi4>
    15f0:	60 93 7b 01 	sts	0x017B, r22
		usartReceiverBufferLength--;
    15f4:	c1 50       	subi	r28, 0x01	; 1
    15f6:	c0 93 7a 01 	sts	0x017A, r28
	}
	return data;
}
    15fa:	8d 2f       	mov	r24, r29
    15fc:	df 91       	pop	r29
    15fe:	cf 91       	pop	r28
    1600:	08 95       	ret

00001602 <usartIsReceiverBufferEmpty>:
 * reading the buffer.
 * -------------------------------------------------------------------------- */

uint8 usartIsReceiverBufferEmpty(void)
{
	if(usartReceiverBufferLength == 0)
    1602:	81 e0       	ldi	r24, 0x01	; 1
    1604:	90 91 7a 01 	lds	r25, 0x017A
    1608:	91 11       	cpse	r25, r1
    160a:	80 e0       	ldi	r24, 0x00	; 0
		return TRUE;
	return FALSE;
}
    160c:	08 95       	ret

0000160e <usartGetCurrentBaudRate>:
//	case 2:
//		aux32 = F_CPU / 2 / (UBRR0 + 1);
//		break;
//	}
	return aux32;
 }
    160e:	60 e0       	ldi	r22, 0x00	; 0
    1610:	70 e0       	ldi	r23, 0x00	; 0
    1612:	cb 01       	movw	r24, r22
    1614:	08 95       	ret

00001616 <spiInit>:
/* -----------------------------------------------------------------------------
 * Configures the SPI controller
 * -------------------------------------------------------------------------- */

void spiInit(void)
{
    1616:	08 95       	ret

00001618 <spiMasterTransmit>:
 * Transmit data at the SPI bus in master mode
 * -------------------------------------------------------------------------- */

uint8 spiMasterTransmit(uint8 data)
{
	SPDR = data;
    1618:	8e bd       	out	0x2e, r24	; 46
	waitUntilBitIsClear(SPSR, SPIF);
    161a:	0d b4       	in	r0, 0x2d	; 45
    161c:	07 fc       	sbrc	r0, 7
    161e:	fd cf       	rjmp	.-6      	; 0x161a <spiMasterTransmit+0x2>
	return SPDR;
    1620:	8e b5       	in	r24, 0x2e	; 46
}
    1622:	08 95       	ret

00001624 <spiSlaveTransmit>:
 * Receives data from the SPI bus
 * -------------------------------------------------------------------------- */

uint8 spiSlaveTransmit(void)
{
	waitUntilBitIsClear(SPSR, SPIF);
    1624:	0d b4       	in	r0, 0x2d	; 45
    1626:	07 fc       	sbrc	r0, 7
    1628:	fd cf       	rjmp	.-6      	; 0x1624 <spiSlaveTransmit>
	return SPDR;
    162a:	8e b5       	in	r24, 0x2e	; 46
}
    162c:	08 95       	ret

0000162e <main>:
	+ (str[2]-48)*10 + str[3]-48);
	return value;
}

int main(void)
{
    162e:	cf 93       	push	r28
    1630:	df 93       	push	r29
    1632:	cd b7       	in	r28, 0x3d	; 61
    1634:	de b7       	in	r29, 0x3e	; 62
    1636:	ce 59       	subi	r28, 0x9E	; 158
    1638:	d1 09       	sbc	r29, r1
    163a:	0f b6       	in	r0, 0x3f	; 63
    163c:	f8 94       	cli
    163e:	de bf       	out	0x3e, r29	; 62
    1640:	0f be       	out	0x3f, r0	; 63
    1642:	cd bf       	out	0x3d, r28	; 61
	flags.mode = SERIAL_MODE;
    1644:	20 91 3f 01 	lds	r18, 0x013F
    1648:	23 7f       	andi	r18, 0xF3	; 243
	status.freq = 1000;
    164a:	88 ee       	ldi	r24, 0xE8	; 232
    164c:	93 e0       	ldi	r25, 0x03	; 3
    164e:	90 93 41 01 	sts	0x0141, r25
    1652:	80 93 40 01 	sts	0x0140, r24
	flags.on = 1;
	flags.dms = 1;
    1656:	24 61       	ori	r18, 0x14	; 20
    1658:	20 62       	ori	r18, 0x20	; 32
    165a:	20 93 3f 01 	sts	0x013F, r18
	// VARIAVEIS LOCAIS;
	char frameData[50];
	uint8 frameIndex = 0;
	char recebido[100] = "";
    165e:	19 82       	std	Y+1, r1	; 0x01
    1660:	1a 82       	std	Y+2, r1	; 0x02
    1662:	1b 82       	std	Y+3, r1	; 0x03
    1664:	1c 82       	std	Y+4, r1	; 0x04
    1666:	fe 01       	movw	r30, r28
    1668:	35 96       	adiw	r30, 0x05	; 5
    166a:	80 e6       	ldi	r24, 0x60	; 96
    166c:	df 01       	movw	r26, r30
    166e:	1d 92       	st	X+, r1
    1670:	8a 95       	dec	r24
    1672:	e9 f7       	brne	.-6      	; 0x166e <main+0x40>
	char msgToSend[8] = "";
    1674:	c9 56       	subi	r28, 0x69	; 105
    1676:	df 4f       	sbci	r29, 0xFF	; 255
    1678:	18 82       	st	Y, r1
    167a:	19 82       	std	Y+1, r1	; 0x01
    167c:	1a 82       	std	Y+2, r1	; 0x02
    167e:	1b 82       	std	Y+3, r1	; 0x03
    1680:	c7 59       	subi	r28, 0x97	; 151
    1682:	d0 40       	sbci	r29, 0x00	; 0
    1684:	c5 56       	subi	r28, 0x65	; 101
    1686:	df 4f       	sbci	r29, 0xFF	; 255
    1688:	18 82       	st	Y, r1
    168a:	19 82       	std	Y+1, r1	; 0x01
    168c:	1a 82       	std	Y+2, r1	; 0x02
    168e:	1b 82       	std	Y+3, r1	; 0x03
    1690:	cb 59       	subi	r28, 0x9B	; 155
    1692:	d0 40       	sbci	r29, 0x00	; 0
	uint8 pos =  0;
	
	// CONFIGURA ADC
	clrBit(DDRC,POT_BIT);		//SETA O PINO DO ADC COMO ENTRADA
    1694:	39 98       	cbi	0x07, 1	; 7
	adcConfig(ADC_MODE_SINGLE_CONVERSION, ADC_REFRENCE_POWER_SUPPLY , ADC_PRESCALER_128);
    1696:	47 e0       	ldi	r20, 0x07	; 7
    1698:	61 e0       	ldi	r22, 0x01	; 1
    169a:	80 e0       	ldi	r24, 0x00	; 0
    169c:	0e 94 bf 08 	call	0x117e	; 0x117e <adcConfig>
	adcSelectChannel(POT_CHANNEL);
    16a0:	81 e0       	ldi	r24, 0x01	; 1
    16a2:	0e 94 00 09 	call	0x1200	; 0x1200 <adcSelectChannel>
	adcClearInterruptRequest();
    16a6:	0e 94 32 09 	call	0x1264	; 0x1264 <adcClearInterruptRequest>
	adcActivateInterrupt();
    16aa:	0e 94 39 09 	call	0x1272	; 0x1272 <adcActivateInterrupt>
	adcEnable();
    16ae:	0e 94 24 09 	call	0x1248	; 0x1248 <adcEnable>
	adcStartConversion();
    16b2:	0e 94 47 09 	call	0x128e	; 0x128e <adcStartConversion>
	
	// CONFIGURA PWM
	timer1Config(TIMER_B_MODE_CTC, TIMER_A_PRESCALER_64);
    16b6:	63 e0       	ldi	r22, 0x03	; 3
    16b8:	84 e0       	ldi	r24, 0x04	; 4
    16ba:	0e 94 76 07 	call	0xeec	; 0xeec <timer1Config>
	timer1ClearCompareBInterruptRequest();									
    16be:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <timer1ClearCompareBInterruptRequest>
	timer1ClearCompareAInterruptRequest();
    16c2:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <timer1ClearCompareAInterruptRequest>
	timer1ActivateCompareBInterrupt();									//ativa a interrupcao do compA
    16c6:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <timer1ActivateCompareBInterrupt>
	timer1ActivateCompareAInterrupt();									//ativa a interrupcao do compB
    16ca:	0e 94 c2 07 	call	0xf84	; 0xf84 <timer1ActivateCompareAInterrupt>
	timer1SetCompareAValue((F_CPU/64)/status.freq);							//valor do comparador A,  define a frequencia
    16ce:	20 91 40 01 	lds	r18, 0x0140
    16d2:	30 91 41 01 	lds	r19, 0x0141
    16d6:	40 e0       	ldi	r20, 0x00	; 0
    16d8:	50 e0       	ldi	r21, 0x00	; 0
    16da:	60 e9       	ldi	r22, 0x90	; 144
    16dc:	70 ed       	ldi	r23, 0xD0	; 208
    16de:	83 e0       	ldi	r24, 0x03	; 3
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <__udivmodsi4>
    16e6:	c9 01       	movw	r24, r18
    16e8:	0e 94 11 08 	call	0x1022	; 0x1022 <timer1SetCompareAValue>
	timer1SetCompareBValue((status.dc * (timer1GetCompareAValue()))/100);		//valor do comparador B,  define Duty Cicle
    16ec:	00 91 43 01 	lds	r16, 0x0143
    16f0:	10 e0       	ldi	r17, 0x00	; 0
    16f2:	0e 94 1a 08 	call	0x1034	; 0x1034 <timer1GetCompareAValue>
    16f6:	9c 01       	movw	r18, r24
    16f8:	20 9f       	mul	r18, r16
    16fa:	c0 01       	movw	r24, r0
    16fc:	21 9f       	mul	r18, r17
    16fe:	90 0d       	add	r25, r0
    1700:	30 9f       	mul	r19, r16
    1702:	90 0d       	add	r25, r0
    1704:	11 24       	eor	r1, r1
    1706:	64 e6       	ldi	r22, 0x64	; 100
    1708:	70 e0       	ldi	r23, 0x00	; 0
    170a:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <__udivmodhi4>
    170e:	cb 01       	movw	r24, r22
    1710:	0e 94 1f 08 	call	0x103e	; 0x103e <timer1SetCompareBValue>

	// CONFIGURA A INTERRUPÇÃO DE CONTROLE(60Hz)
	timer0Config(TIMER_A_MODE_NORMAL, TIMER_A_PRESCALER_1024);			
    1714:	65 e0       	ldi	r22, 0x05	; 5
    1716:	80 e0       	ldi	r24, 0x00	; 0
    1718:	0e 94 d1 06 	call	0xda2	; 0xda2 <timer0Config>
	timer0ClearOverflowInterruptRequest();								//limpa a interrupcao de OVF
    171c:	0e 94 44 07 	call	0xe88	; 0xe88 <timer0ClearOverflowInterruptRequest>
	timer0ActivateOverflowInterrupt();
    1720:	0e 94 38 07 	call	0xe70	; 0xe70 <timer0ActivateOverflowInterrupt>

	//se estiver no modo Serial configura a usart							
	if (flags.mode == SERIAL_MODE)
    1724:	80 91 3f 01 	lds	r24, 0x013F
    1728:	8c 70       	andi	r24, 0x0C	; 12
    172a:	84 30       	cpi	r24, 0x04	; 4
    172c:	81 f4       	brne	.+32     	; 0x174e <main+0x120>
	{
		// CONFIGURA A USART
		usartConfig(USART_MODE_ASYNCHRONOUS,USART_BAUD_9600 ,USART_DATA_BITS_8,USART_PARITY_NONE,USART_STOP_BIT_SINGLE);
    172e:	e1 2c       	mov	r14, r1
    1730:	00 e0       	ldi	r16, 0x00	; 0
    1732:	23 e0       	ldi	r18, 0x03	; 3
    1734:	40 e8       	ldi	r20, 0x80	; 128
    1736:	55 e2       	ldi	r21, 0x25	; 37
    1738:	60 e0       	ldi	r22, 0x00	; 0
    173a:	70 e0       	ldi	r23, 0x00	; 0
    173c:	80 e0       	ldi	r24, 0x00	; 0
    173e:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <usartConfig>
		usartEnableReceiver();
    1742:	0e 94 df 09 	call	0x13be	; 0x13be <usartEnableReceiver>
		usartEnableTransmitter();
    1746:	0e 94 ed 09 	call	0x13da	; 0x13da <usartEnableTransmitter>
		usartActivateReceptionCompleteInterrupt();
    174a:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <usartActivateReceptionCompleteInterrupt>
	}

	sei();
    174e:	78 94       	sei
	
	setBit(PWM_DDR,PWM_BIT);			//define o pino do pwm como saída
    1750:	21 9a       	sbi	0x04, 1	; 4

	setBit(ON_PORT,ON_BIT);				//habilita o pull-up da chave on
    1752:	5d 9a       	sbi	0x0b, 5	; 11
	setBit(DMS_PORT,DMS_BIT);			//habilita o pull-up da chave dms
    1754:	5c 9a       	sbi	0x0b, 4	; 11

	//configura o buzzer e da sinal de alerta de ligação
	setBit(BUZZER_DDR,BUZZER_BIT);			
    1756:	3c 9a       	sbi	0x07, 4	; 7
	setBit(BUZZER_PORT,BUZZER_BIT);
    1758:	44 9a       	sbi	0x08, 4	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    175a:	3f ef       	ldi	r19, 0xFF	; 255
    175c:	83 ed       	ldi	r24, 0xD3	; 211
    175e:	90 e3       	ldi	r25, 0x30	; 48
    1760:	31 50       	subi	r19, 0x01	; 1
    1762:	80 40       	sbci	r24, 0x00	; 0
    1764:	90 40       	sbci	r25, 0x00	; 0
    1766:	e1 f7       	brne	.-8      	; 0x1760 <main+0x132>
    1768:	00 c0       	rjmp	.+0      	; 0x176a <main+0x13c>
    176a:	00 00       	nop
	_delay_ms(1000);
	clrBit(BUZZER_PORT,BUZZER_BIT);
    176c:	44 98       	cbi	0x08, 4	; 8
	status.freq = 1000;
	flags.on = 1;
	flags.dms = 1;
	// VARIAVEIS LOCAIS;
	char frameData[50];
	uint8 frameIndex = 0;
    176e:	81 2c       	mov	r8, r1
	else
		if(freqReq > MAX_FREQ)
			status.freq = MAX_FREQ;
		else
			status.freq = freqReq;
	timer1SetCompareAValue((F_CPU/1024)/status.freq);
    1770:	09 e0       	ldi	r16, 0x09	; 9
    1772:	1d e3       	ldi	r17, 0x3D	; 61
	timer1SetCompareBValue((status.dc * (timer1GetCompareAValue()))/100);//bota o dc
    1774:	24 e6       	ldi	r18, 0x64	; 100
    1776:	e2 2e       	mov	r14, r18
    1778:	f1 2c       	mov	r15, r1
	setBit(PORTD,PD0);			
	*/

    while(1)
    {
    	if(flags.mode == SERIAL_MODE)
    177a:	80 91 3f 01 	lds	r24, 0x013F
    177e:	8c 70       	andi	r24, 0x0C	; 12
    1780:	84 30       	cpi	r24, 0x04	; 4
    1782:	09 f0       	breq	.+2      	; 0x1786 <main+0x158>
    1784:	ff cf       	rjmp	.-2      	; 0x1784 <main+0x156>
{
	if(freqReq < MIN_FREQ)
		status.freq = MIN_FREQ;
	else
		if(freqReq > MAX_FREQ)
			status.freq = MAX_FREQ;
    1786:	88 ee       	ldi	r24, 0xE8	; 232
    1788:	c8 2e       	mov	r12, r24
    178a:	83 e0       	ldi	r24, 0x03	; 3
    178c:	d8 2e       	mov	r13, r24
}

inline void seta_freq(uint16 freqReq)		//função para definição da frequencia do PWM
{
	if(freqReq < MIN_FREQ)
		status.freq = MIN_FREQ;
    178e:	94 ef       	ldi	r25, 0xF4	; 244
    1790:	a9 2e       	mov	r10, r25
    1792:	bb 24       	eor	r11, r11
    1794:	b3 94       	inc	r11

    while(1)
    {
    	if(flags.mode == SERIAL_MODE)
    	{
	    	while(!usartIsReceiverBufferEmpty())
    1796:	0e 94 01 0b 	call	0x1602	; 0x1602 <usartIsReceiverBufferEmpty>
    179a:	81 11       	cpse	r24, r1
    179c:	ee cf       	rjmp	.-36     	; 0x177a <main+0x14c>
	    	{
				frameData[frameIndex++] = usartGetDataFromReceiverBuffer();
    179e:	99 24       	eor	r9, r9
    17a0:	93 94       	inc	r9
    17a2:	98 0c       	add	r9, r8
    17a4:	0e 94 df 0a 	call	0x15be	; 0x15be <usartGetDataFromReceiverBuffer>
    17a8:	e5 e6       	ldi	r30, 0x65	; 101
    17aa:	f0 e0       	ldi	r31, 0x00	; 0
    17ac:	ec 0f       	add	r30, r28
    17ae:	fd 1f       	adc	r31, r29
    17b0:	e8 0d       	add	r30, r8
    17b2:	f1 1d       	adc	r31, r1
    17b4:	80 83       	st	Z, r24
				if ((frameData[frameIndex-1] == FINALDOPACOTE))
    17b6:	e5 e6       	ldi	r30, 0x65	; 101
    17b8:	f0 e0       	ldi	r31, 0x00	; 0
    17ba:	ec 0f       	add	r30, r28
    17bc:	fd 1f       	adc	r31, r29
    17be:	e9 0d       	add	r30, r9
    17c0:	f1 1d       	adc	r31, r1
    17c2:	31 97       	sbiw	r30, 0x01	; 1
    17c4:	80 81       	ld	r24, Z
    17c6:	8a 32       	cpi	r24, 0x2A	; 42
    17c8:	11 f0       	breq	.+4      	; 0x17ce <main+0x1a0>
    {
    	if(flags.mode == SERIAL_MODE)
    	{
	    	while(!usartIsReceiverBufferEmpty())
	    	{
				frameData[frameIndex++] = usartGetDataFromReceiverBuffer();
    17ca:	89 2c       	mov	r8, r9
    17cc:	e4 cf       	rjmp	.-56     	; 0x1796 <main+0x168>
				if ((frameData[frameIndex-1] == FINALDOPACOTE))
				{//se esta no final da palavra
					if(frameData[0] == INICIODOPACOTE )
    17ce:	a6 96       	adiw	r28, 0x26	; 38
    17d0:	8f ad       	ldd	r24, Y+63	; 0x3f
    17d2:	a6 97       	sbiw	r28, 0x26	; 38
    17d4:	80 34       	cpi	r24, 0x40	; 64
    17d6:	09 f0       	breq	.+2      	; 0x17da <main+0x1ac>
    17d8:	25 c1       	rjmp	.+586    	; 0x1a24 <main+0x3f6>
					{//verifica se o inicio da palavra esta correto
						strcpy(recebido,frameData);
    17da:	be 01       	movw	r22, r28
    17dc:	6b 59       	subi	r22, 0x9B	; 155
    17de:	7f 4f       	sbci	r23, 0xFF	; 255
    17e0:	ce 01       	movw	r24, r28
    17e2:	01 96       	adiw	r24, 0x01	; 1
    17e4:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <strcpy>
						pos = (recebido[2]-48) + (recebido[1] - 48)*10;
    17e8:	8b 81       	ldd	r24, Y+3	; 0x03
    17ea:	80 53       	subi	r24, 0x30	; 48
    17ec:	9a 81       	ldd	r25, Y+2	; 0x02
    17ee:	99 0f       	add	r25, r25
    17f0:	90 56       	subi	r25, 0x60	; 96
    17f2:	29 2f       	mov	r18, r25
    17f4:	22 0f       	add	r18, r18
    17f6:	22 0f       	add	r18, r18
    17f8:	29 0f       	add	r18, r25
    17fa:	82 0f       	add	r24, r18
						if(frameIndex == GETWORDSIZE)
    17fc:	a4 e0       	ldi	r26, 0x04	; 4
    17fe:	9a 12       	cpse	r9, r26
    1800:	68 c0       	rjmp	.+208    	; 0x18d2 <main+0x2a4>
						{
							memcpy( recebido,  (recebido+1), 2);
    1802:	2a 81       	ldd	r18, Y+2	; 0x02
    1804:	3b 81       	ldd	r19, Y+3	; 0x03
    1806:	3a 83       	std	Y+2, r19	; 0x02
    1808:	29 83       	std	Y+1, r18	; 0x01
							recebido[2] = '\0';//isola o id
    180a:	1b 82       	std	Y+3, r1	; 0x03
							switch (pos)
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	8e 30       	cpi	r24, 0x0E	; 14
    1810:	91 05       	cpc	r25, r1
    1812:	08 f0       	brcs	.+2      	; 0x1816 <main+0x1e8>
    1814:	44 c0       	rjmp	.+136    	; 0x189e <main+0x270>
    1816:	fc 01       	movw	r30, r24
    1818:	ec 5c       	subi	r30, 0xCC	; 204
    181a:	ff 4f       	sbci	r31, 0xFF	; 255
    181c:	0c 94 4c 0d 	jmp	0x1a98	; 0x1a98 <__tablejump2__>
							{
								case 0:
									strcpy(msgToSend,"OK");
    1820:	66 e1       	ldi	r22, 0x16	; 22
    1822:	71 e0       	ldi	r23, 0x01	; 1
    1824:	3e c0       	rjmp	.+124    	; 0x18a2 <main+0x274>
									break;
								case 1:
									uint16ToString4(msgToSend,status.freq);
    1826:	60 91 40 01 	lds	r22, 0x0140
    182a:	70 91 41 01 	lds	r23, 0x0141
    182e:	ce 01       	movw	r24, r28
    1830:	89 56       	subi	r24, 0x69	; 105
    1832:	9f 4f       	sbci	r25, 0xFF	; 255
    1834:	0e 94 c8 00 	call	0x190	; 0x190 <uint16ToString4>
									break;
    1838:	39 c0       	rjmp	.+114    	; 0x18ac <main+0x27e>
								case 2:
									uint8ToString4(msgToSend,maxCurrent);
    183a:	60 91 06 01 	lds	r22, 0x0106
    183e:	28 c0       	rjmp	.+80     	; 0x1890 <main+0x262>
									break;
								case 3:
									uint8ToString4(msgToSend,maxDC);
    1840:	60 91 04 01 	lds	r22, 0x0104
    1844:	25 c0       	rjmp	.+74     	; 0x1890 <main+0x262>
									break;
								case 4:
									uint8ToString4(msgToSend,minDC);
    1846:	60 91 05 01 	lds	r22, 0x0105
    184a:	22 c0       	rjmp	.+68     	; 0x1890 <main+0x262>
									break;
								case 5:
									uint8ToString4(msgToSend,maxDV);
    184c:	60 91 03 01 	lds	r22, 0x0103
    1850:	1f c0       	rjmp	.+62     	; 0x1890 <main+0x262>
									break;
								case 6 :
									if(flags.on)
    1852:	80 91 3f 01 	lds	r24, 0x013F
    1856:	84 ff       	sbrs	r24, 4
    1858:	07 c0       	rjmp	.+14     	; 0x1868 <main+0x23a>
										strcpy(msgToSend, "0001");
    185a:	69 e1       	ldi	r22, 0x19	; 25
    185c:	71 e0       	ldi	r23, 0x01	; 1
    185e:	21 c0       	rjmp	.+66     	; 0x18a2 <main+0x274>
									else
										strcpy(msgToSend, "0000");
									break;
								case 7:
									if(flags.dms)
    1860:	80 91 3f 01 	lds	r24, 0x013F
    1864:	85 fd       	sbrc	r24, 5
    1866:	f9 cf       	rjmp	.-14     	; 0x185a <main+0x22c>
									break;
								case 6 :
									if(flags.on)
										strcpy(msgToSend, "0001");
									else
										strcpy(msgToSend, "0000");
    1868:	6e e1       	ldi	r22, 0x1E	; 30
    186a:	71 e0       	ldi	r23, 0x01	; 1
    186c:	1a c0       	rjmp	.+52     	; 0x18a2 <main+0x274>
										strcpy(msgToSend, "0001");
									else
										strcpy(msgToSend, "0000");
									break;
								case 8:
									uint8ToString4(msgToSend,maxTemp);
    186e:	60 91 02 01 	lds	r22, 0x0102
    1872:	0e c0       	rjmp	.+28     	; 0x1890 <main+0x262>
									break;
								case 9:
									uint8ToString4(msgToSend,minVotage);
    1874:	60 91 00 01 	lds	r22, 0x0100
    1878:	0b c0       	rjmp	.+22     	; 0x1890 <main+0x262>
									break;
								case 10:
									uint8ToString4(msgToSend,status.dc);
    187a:	60 91 43 01 	lds	r22, 0x0143
    187e:	08 c0       	rjmp	.+16     	; 0x1890 <main+0x262>
									break;
								case 11:
									uint8ToString4(msgToSend,status.temperature);
    1880:	60 91 44 01 	lds	r22, 0x0144
    1884:	05 c0       	rjmp	.+10     	; 0x1890 <main+0x262>
									break;
								case 12:
									uint8ToString4(msgToSend,status.current);
    1886:	60 91 42 01 	lds	r22, 0x0142
    188a:	02 c0       	rjmp	.+4      	; 0x1890 <main+0x262>
									break;
								case 13:
									uint8ToString4(msgToSend,status.voltage);
    188c:	60 91 45 01 	lds	r22, 0x0145
    1890:	70 e0       	ldi	r23, 0x00	; 0
    1892:	ce 01       	movw	r24, r28
    1894:	89 56       	subi	r24, 0x69	; 105
    1896:	9f 4f       	sbci	r25, 0xFF	; 255
    1898:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <uint8ToString4>
									break;
    189c:	07 c0       	rjmp	.+14     	; 0x18ac <main+0x27e>
								default:
									strcpy(msgToSend,"ERRO");
    189e:	63 e2       	ldi	r22, 0x23	; 35
    18a0:	71 e0       	ldi	r23, 0x01	; 1
    18a2:	ce 01       	movw	r24, r28
    18a4:	89 56       	subi	r24, 0x69	; 105
    18a6:	9f 4f       	sbci	r25, 0xFF	; 255
    18a8:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <strcpy>
							}
							strcat(recebido,msgToSend);
    18ac:	be 01       	movw	r22, r28
    18ae:	69 56       	subi	r22, 0x69	; 105
    18b0:	7f 4f       	sbci	r23, 0xFF	; 255
    18b2:	ce 01       	movw	r24, r28
    18b4:	01 96       	adiw	r24, 0x01	; 1
    18b6:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <strcat>
							strcpy(msgToSend,recebido);
    18ba:	be 01       	movw	r22, r28
    18bc:	6f 5f       	subi	r22, 0xFF	; 255
    18be:	7f 4f       	sbci	r23, 0xFF	; 255
    18c0:	ce 01       	movw	r24, r28
    18c2:	89 56       	subi	r24, 0x69	; 105
    18c4:	9f 4f       	sbci	r25, 0xFF	; 255
    18c6:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <strcpy>

							stringTransmit(msgToSend);
    18ca:	ce 01       	movw	r24, r28
    18cc:	89 56       	subi	r24, 0x69	; 105
    18ce:	9f 4f       	sbci	r25, 0xFF	; 255
    18d0:	a2 c0       	rjmp	.+324    	; 0x1a16 <main+0x3e8>
						}
						else
						{
							if(frameIndex == SETWORDSIZE)
    18d2:	b8 e0       	ldi	r27, 0x08	; 8
    18d4:	9b 12       	cpse	r9, r27
    18d6:	a2 c0       	rjmp	.+324    	; 0x1a1c <main+0x3ee>
							{
								memcpy((void *) recebido, (void *) (recebido+3), 4);//isola somente o valor, usando 4 caracteres
    18d8:	4c 81       	ldd	r20, Y+4	; 0x04
    18da:	5d 81       	ldd	r21, Y+5	; 0x05
    18dc:	6e 81       	ldd	r22, Y+6	; 0x06
    18de:	7f 81       	ldd	r23, Y+7	; 0x07
    18e0:	49 83       	std	Y+1, r20	; 0x01
    18e2:	5a 83       	std	Y+2, r21	; 0x02
    18e4:	6b 83       	std	Y+3, r22	; 0x03
    18e6:	7c 83       	std	Y+4, r23	; 0x04
								recebido[4] = '\0';
    18e8:	1d 82       	std	Y+5, r1	; 0x05

								switch (pos){
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	fc 01       	movw	r30, r24
    18ee:	31 97       	sbiw	r30, 0x01	; 1
    18f0:	ea 30       	cpi	r30, 0x0A	; 10
    18f2:	f1 05       	cpc	r31, r1
    18f4:	08 f0       	brcs	.+2      	; 0x18f8 <main+0x2ca>
    18f6:	8d c0       	rjmp	.+282    	; 0x1a12 <main+0x3e4>
    18f8:	ee 5b       	subi	r30, 0xBE	; 190
    18fa:	ff 4f       	sbci	r31, 0xFF	; 255
    18fc:	0c 94 4c 0d 	jmp	0x1a98	; 0x1a98 <__tablejump2__>
									case 1:
										seta_freq(string4ToUint16(recebido));
    1900:	ce 01       	movw	r24, r28
    1902:	01 96       	adiw	r24, 0x01	; 1
    1904:	0e 94 27 01 	call	0x24e	; 0x24e <string4ToUint16>
	}
}

inline void seta_freq(uint16 freqReq)		//função para definição da frequencia do PWM
{
	if(freqReq < MIN_FREQ)
    1908:	84 3f       	cpi	r24, 0xF4	; 244
    190a:	21 e0       	ldi	r18, 0x01	; 1
    190c:	92 07       	cpc	r25, r18
    190e:	28 f4       	brcc	.+10     	; 0x191a <main+0x2ec>
		status.freq = MIN_FREQ;
    1910:	b0 92 41 01 	sts	0x0141, r11
    1914:	a0 92 40 01 	sts	0x0140, r10
    1918:	0d c0       	rjmp	.+26     	; 0x1934 <main+0x306>
	else
		if(freqReq > MAX_FREQ)
    191a:	89 3e       	cpi	r24, 0xE9	; 233
    191c:	33 e0       	ldi	r19, 0x03	; 3
    191e:	93 07       	cpc	r25, r19
    1920:	28 f0       	brcs	.+10     	; 0x192c <main+0x2fe>
			status.freq = MAX_FREQ;
    1922:	d0 92 41 01 	sts	0x0141, r13
    1926:	c0 92 40 01 	sts	0x0140, r12
    192a:	04 c0       	rjmp	.+8      	; 0x1934 <main+0x306>
		else
			status.freq = freqReq;
    192c:	90 93 41 01 	sts	0x0141, r25
    1930:	80 93 40 01 	sts	0x0140, r24
	timer1SetCompareAValue((F_CPU/1024)/status.freq);
    1934:	60 91 40 01 	lds	r22, 0x0140
    1938:	70 91 41 01 	lds	r23, 0x0141
    193c:	c8 01       	movw	r24, r16
    193e:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <__udivmodhi4>
    1942:	cb 01       	movw	r24, r22
    1944:	0e 94 11 08 	call	0x1022	; 0x1022 <timer1SetCompareAValue>
	timer1SetCompareBValue((status.dc * (timer1GetCompareAValue()))/100);//bota o dc
    1948:	80 90 43 01 	lds	r8, 0x0143
    194c:	91 2c       	mov	r9, r1
    194e:	0e 94 1a 08 	call	0x1034	; 0x1034 <timer1GetCompareAValue>
    1952:	dc 01       	movw	r26, r24
    1954:	a8 9d       	mul	r26, r8
    1956:	c0 01       	movw	r24, r0
    1958:	a9 9d       	mul	r26, r9
    195a:	90 0d       	add	r25, r0
    195c:	b8 9d       	mul	r27, r8
    195e:	90 0d       	add	r25, r0
    1960:	11 24       	eor	r1, r1
    1962:	b7 01       	movw	r22, r14
    1964:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <__udivmodhi4>
    1968:	cb 01       	movw	r24, r22
    196a:	0e 94 1f 08 	call	0x103e	; 0x103e <timer1SetCompareBValue>
    196e:	5c c0       	rjmp	.+184    	; 0x1a28 <main+0x3fa>
								switch (pos){
									case 1:
										seta_freq(string4ToUint16(recebido));
										break;
									case 2:
										maxCurrent = string4Touint8(recebido);
    1970:	ce 01       	movw	r24, r28
    1972:	01 96       	adiw	r24, 0x01	; 1
    1974:	0e 94 52 01 	call	0x2a4	; 0x2a4 <string4Touint8>
    1978:	80 93 06 01 	sts	0x0106, r24
										break;
    197c:	55 c0       	rjmp	.+170    	; 0x1a28 <main+0x3fa>
									case 3:
										maxDC = string4Touint8(recebido);
    197e:	ce 01       	movw	r24, r28
    1980:	01 96       	adiw	r24, 0x01	; 1
    1982:	0e 94 52 01 	call	0x2a4	; 0x2a4 <string4Touint8>
    1986:	80 93 04 01 	sts	0x0104, r24
										break;
    198a:	4e c0       	rjmp	.+156    	; 0x1a28 <main+0x3fa>
									case 4:
										minDC = string4Touint8(recebido);
    198c:	ce 01       	movw	r24, r28
    198e:	01 96       	adiw	r24, 0x01	; 1
    1990:	0e 94 52 01 	call	0x2a4	; 0x2a4 <string4Touint8>
    1994:	80 93 05 01 	sts	0x0105, r24
										seta_dc(dcReq);
    1998:	80 91 3c 01 	lds	r24, 0x013C
    199c:	0e 94 83 00 	call	0x106	; 0x106 <seta_dc>
										break;
    19a0:	43 c0       	rjmp	.+134    	; 0x1a28 <main+0x3fa>
									case 5:
										maxDV = string4Touint8(recebido);
    19a2:	ce 01       	movw	r24, r28
    19a4:	01 96       	adiw	r24, 0x01	; 1
    19a6:	0e 94 52 01 	call	0x2a4	; 0x2a4 <string4Touint8>
    19aa:	80 93 03 01 	sts	0x0103, r24
										break;
    19ae:	3c c0       	rjmp	.+120    	; 0x1a28 <main+0x3fa>
									case 6 :
										if(recebido[3] == '1')
    19b0:	8c 81       	ldd	r24, Y+4	; 0x04
    19b2:	81 33       	cpi	r24, 0x31	; 49
    19b4:	21 f4       	brne	.+8      	; 0x19be <main+0x390>
											flags.on = 1;
    19b6:	80 91 3f 01 	lds	r24, 0x013F
    19ba:	80 61       	ori	r24, 0x10	; 16
    19bc:	0c c0       	rjmp	.+24     	; 0x19d6 <main+0x3a8>
										if(recebido[3] == '0')
    19be:	80 33       	cpi	r24, 0x30	; 48
    19c0:	99 f5       	brne	.+102    	; 0x1a28 <main+0x3fa>
											flags.on = 0;
    19c2:	80 91 3f 01 	lds	r24, 0x013F
    19c6:	8f 7e       	andi	r24, 0xEF	; 239
    19c8:	06 c0       	rjmp	.+12     	; 0x19d6 <main+0x3a8>
										break;
									case 7:
										if(recebido[3] == '1')
    19ca:	8c 81       	ldd	r24, Y+4	; 0x04
    19cc:	81 33       	cpi	r24, 0x31	; 49
    19ce:	31 f4       	brne	.+12     	; 0x19dc <main+0x3ae>
											flags.dms = 1;
    19d0:	80 91 3f 01 	lds	r24, 0x013F
    19d4:	80 62       	ori	r24, 0x20	; 32
    19d6:	80 93 3f 01 	sts	0x013F, r24
    19da:	26 c0       	rjmp	.+76     	; 0x1a28 <main+0x3fa>
										if(recebido[3] == '0')
    19dc:	80 33       	cpi	r24, 0x30	; 48
    19de:	21 f5       	brne	.+72     	; 0x1a28 <main+0x3fa>
											flags.dms = 0;
    19e0:	80 91 3f 01 	lds	r24, 0x013F
    19e4:	8f 7d       	andi	r24, 0xDF	; 223
    19e6:	f7 cf       	rjmp	.-18     	; 0x19d6 <main+0x3a8>
										break;
									case 8:
										maxTemp = string4Touint8(recebido);
    19e8:	ce 01       	movw	r24, r28
    19ea:	01 96       	adiw	r24, 0x01	; 1
    19ec:	0e 94 52 01 	call	0x2a4	; 0x2a4 <string4Touint8>
    19f0:	80 93 02 01 	sts	0x0102, r24
										break;
    19f4:	19 c0       	rjmp	.+50     	; 0x1a28 <main+0x3fa>
									case 9:
										minVotage = string4Touint8(recebido);
    19f6:	ce 01       	movw	r24, r28
    19f8:	01 96       	adiw	r24, 0x01	; 1
    19fa:	0e 94 52 01 	call	0x2a4	; 0x2a4 <string4Touint8>
    19fe:	80 93 00 01 	sts	0x0100, r24
										break;
    1a02:	12 c0       	rjmp	.+36     	; 0x1a28 <main+0x3fa>
									case 10:
										//seta_dc(string4Touint8(recebido));
										dcReq = string4Touint8(recebido);
    1a04:	ce 01       	movw	r24, r28
    1a06:	01 96       	adiw	r24, 0x01	; 1
    1a08:	0e 94 52 01 	call	0x2a4	; 0x2a4 <string4Touint8>
    1a0c:	80 93 3c 01 	sts	0x013C, r24
										break;
    1a10:	0b c0       	rjmp	.+22     	; 0x1a28 <main+0x3fa>
									case 11:
									case 12:
									case 13:

									default:
										stringTransmit("ERRO");
    1a12:	83 e2       	ldi	r24, 0x23	; 35
    1a14:	91 e0       	ldi	r25, 0x01	; 1
    1a16:	0e 94 b0 00 	call	0x160	; 0x160 <stringTransmit>
    1a1a:	06 c0       	rjmp	.+12     	; 0x1a28 <main+0x3fa>
								}
							}
							else
							{
								stringTransmit("wrong size");	
    1a1c:	88 e2       	ldi	r24, 0x28	; 40
    1a1e:	91 e0       	ldi	r25, 0x01	; 1
    1a20:	0e 94 b0 00 	call	0x160	; 0x160 <stringTransmit>
							}
						}
					}
					else
					{//se o inicio da palavra nao esta correto
						esvaziaBuffer();
    1a24:	0e 94 a8 00 	call	0x150	; 0x150 <esvaziaBuffer>
    1a28:	81 2c       	mov	r8, r1
    1a2a:	b5 ce       	rjmp	.-662    	; 0x1796 <main+0x168>

00001a2c <__udivmodhi4>:
    1a2c:	aa 1b       	sub	r26, r26
    1a2e:	bb 1b       	sub	r27, r27
    1a30:	51 e1       	ldi	r21, 0x11	; 17
    1a32:	07 c0       	rjmp	.+14     	; 0x1a42 <__udivmodhi4_ep>

00001a34 <__udivmodhi4_loop>:
    1a34:	aa 1f       	adc	r26, r26
    1a36:	bb 1f       	adc	r27, r27
    1a38:	a6 17       	cp	r26, r22
    1a3a:	b7 07       	cpc	r27, r23
    1a3c:	10 f0       	brcs	.+4      	; 0x1a42 <__udivmodhi4_ep>
    1a3e:	a6 1b       	sub	r26, r22
    1a40:	b7 0b       	sbc	r27, r23

00001a42 <__udivmodhi4_ep>:
    1a42:	88 1f       	adc	r24, r24
    1a44:	99 1f       	adc	r25, r25
    1a46:	5a 95       	dec	r21
    1a48:	a9 f7       	brne	.-22     	; 0x1a34 <__udivmodhi4_loop>
    1a4a:	80 95       	com	r24
    1a4c:	90 95       	com	r25
    1a4e:	bc 01       	movw	r22, r24
    1a50:	cd 01       	movw	r24, r26
    1a52:	08 95       	ret

00001a54 <__udivmodsi4>:
    1a54:	a1 e2       	ldi	r26, 0x21	; 33
    1a56:	1a 2e       	mov	r1, r26
    1a58:	aa 1b       	sub	r26, r26
    1a5a:	bb 1b       	sub	r27, r27
    1a5c:	fd 01       	movw	r30, r26
    1a5e:	0d c0       	rjmp	.+26     	; 0x1a7a <__udivmodsi4_ep>

00001a60 <__udivmodsi4_loop>:
    1a60:	aa 1f       	adc	r26, r26
    1a62:	bb 1f       	adc	r27, r27
    1a64:	ee 1f       	adc	r30, r30
    1a66:	ff 1f       	adc	r31, r31
    1a68:	a2 17       	cp	r26, r18
    1a6a:	b3 07       	cpc	r27, r19
    1a6c:	e4 07       	cpc	r30, r20
    1a6e:	f5 07       	cpc	r31, r21
    1a70:	20 f0       	brcs	.+8      	; 0x1a7a <__udivmodsi4_ep>
    1a72:	a2 1b       	sub	r26, r18
    1a74:	b3 0b       	sbc	r27, r19
    1a76:	e4 0b       	sbc	r30, r20
    1a78:	f5 0b       	sbc	r31, r21

00001a7a <__udivmodsi4_ep>:
    1a7a:	66 1f       	adc	r22, r22
    1a7c:	77 1f       	adc	r23, r23
    1a7e:	88 1f       	adc	r24, r24
    1a80:	99 1f       	adc	r25, r25
    1a82:	1a 94       	dec	r1
    1a84:	69 f7       	brne	.-38     	; 0x1a60 <__udivmodsi4_loop>
    1a86:	60 95       	com	r22
    1a88:	70 95       	com	r23
    1a8a:	80 95       	com	r24
    1a8c:	90 95       	com	r25
    1a8e:	9b 01       	movw	r18, r22
    1a90:	ac 01       	movw	r20, r24
    1a92:	bd 01       	movw	r22, r26
    1a94:	cf 01       	movw	r24, r30
    1a96:	08 95       	ret

00001a98 <__tablejump2__>:
    1a98:	ee 0f       	add	r30, r30
    1a9a:	ff 1f       	adc	r31, r31

00001a9c <__tablejump__>:
    1a9c:	05 90       	lpm	r0, Z+
    1a9e:	f4 91       	lpm	r31, Z
    1aa0:	e0 2d       	mov	r30, r0
    1aa2:	09 94       	ijmp

00001aa4 <__ashrdi3>:
    1aa4:	97 fb       	bst	r25, 7
    1aa6:	10 f8       	bld	r1, 0

00001aa8 <__lshrdi3>:
    1aa8:	16 94       	lsr	r1
    1aaa:	00 08       	sbc	r0, r0
    1aac:	0f 93       	push	r16
    1aae:	08 30       	cpi	r16, 0x08	; 8
    1ab0:	98 f0       	brcs	.+38     	; 0x1ad8 <__lshrdi3+0x30>
    1ab2:	08 50       	subi	r16, 0x08	; 8
    1ab4:	23 2f       	mov	r18, r19
    1ab6:	34 2f       	mov	r19, r20
    1ab8:	45 2f       	mov	r20, r21
    1aba:	56 2f       	mov	r21, r22
    1abc:	67 2f       	mov	r22, r23
    1abe:	78 2f       	mov	r23, r24
    1ac0:	89 2f       	mov	r24, r25
    1ac2:	90 2d       	mov	r25, r0
    1ac4:	f4 cf       	rjmp	.-24     	; 0x1aae <__lshrdi3+0x6>
    1ac6:	05 94       	asr	r0
    1ac8:	97 95       	ror	r25
    1aca:	87 95       	ror	r24
    1acc:	77 95       	ror	r23
    1ace:	67 95       	ror	r22
    1ad0:	57 95       	ror	r21
    1ad2:	47 95       	ror	r20
    1ad4:	37 95       	ror	r19
    1ad6:	27 95       	ror	r18
    1ad8:	0a 95       	dec	r16
    1ada:	aa f7       	brpl	.-22     	; 0x1ac6 <__lshrdi3+0x1e>
    1adc:	0f 91       	pop	r16
    1ade:	08 95       	ret

00001ae0 <strcat>:
    1ae0:	fb 01       	movw	r30, r22
    1ae2:	dc 01       	movw	r26, r24
    1ae4:	0d 90       	ld	r0, X+
    1ae6:	00 20       	and	r0, r0
    1ae8:	e9 f7       	brne	.-6      	; 0x1ae4 <strcat+0x4>
    1aea:	11 97       	sbiw	r26, 0x01	; 1
    1aec:	01 90       	ld	r0, Z+
    1aee:	0d 92       	st	X+, r0
    1af0:	00 20       	and	r0, r0
    1af2:	e1 f7       	brne	.-8      	; 0x1aec <strcat+0xc>
    1af4:	08 95       	ret

00001af6 <strcpy>:
    1af6:	fb 01       	movw	r30, r22
    1af8:	dc 01       	movw	r26, r24
    1afa:	01 90       	ld	r0, Z+
    1afc:	0d 92       	st	X+, r0
    1afe:	00 20       	and	r0, r0
    1b00:	e1 f7       	brne	.-8      	; 0x1afa <strcpy+0x4>
    1b02:	08 95       	ret

00001b04 <_exit>:
    1b04:	f8 94       	cli

00001b06 <__stop_program>:
    1b06:	ff cf       	rjmp	.-2      	; 0x1b06 <__stop_program>
