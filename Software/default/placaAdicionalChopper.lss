
placaAdicionalChopper.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000034  00800100  00001b52  00001be6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b52  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000047  00800134  00800134  00001c1a  2**0
                  ALLOC
  3 .stab         00000c54  00000000  00000000  00001c1c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d41  00000000  00000000  00002870  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000035b1  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000048  00000000  00000000  000035c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000033b4  00000000  00000000  0000360a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000006cc  00000000  00000000  000069be  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000817  00000000  00000000  0000708a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000de8  00000000  00000000  000078a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000253a  00000000  00000000  0000868c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001af1  00000000  00000000  0000abc6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000048  00000000  00000000  0000c6b7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__ctors_end>
       4:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
       8:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
       c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      10:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      14:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      18:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      1c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      20:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      24:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      28:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      2c:	0c 94 e4 01 	jmp	0x3c8	; 0x3c8 <__vector_11>
      30:	0c 94 f8 01 	jmp	0x3f0	; 0x3f0 <__vector_12>
      34:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      38:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      3c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      40:	0c 94 09 02 	jmp	0x412	; 0x412 <__vector_16>
      44:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      48:	0c 94 b2 02 	jmp	0x564	; 0x564 <__vector_18>
      4c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      50:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      54:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__vector_21>
      58:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      5c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      60:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      64:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      68:	3a 0c       	add	r3, r10
      6a:	3d 0c       	add	r3, r13
      6c:	47 0c       	add	r4, r7
      6e:	4a 0c       	add	r4, r10
      70:	4d 0c       	add	r4, r13
      72:	50 0c       	add	r5, r0
      74:	53 0c       	add	r5, r3
      76:	5a 0c       	add	r5, r10
      78:	61 0c       	add	r6, r1
      7a:	64 0c       	add	r6, r4
      7c:	67 0c       	add	r6, r7
      7e:	6a 0c       	add	r6, r10
      80:	6e 0c       	add	r6, r14
      82:	73 0c       	add	r7, r3
      84:	b4 0c       	add	r11, r4
      86:	dc 0c       	add	r13, r12
      88:	e3 0c       	add	r14, r3
      8a:	ea 0c       	add	r14, r10
      8c:	f5 0c       	add	r15, r5
      8e:	fc 0c       	add	r15, r12
      90:	0c 0d       	add	r16, r12
      92:	1a 0d       	add	r17, r10
      94:	21 0d       	add	r18, r1
      96:	28 0d       	add	r18, r8
      98:	ed 02       	muls	r30, r29
      9a:	fd 02       	muls	r31, r29
      9c:	ef 02       	muls	r30, r31
      9e:	f1 02       	muls	r31, r17
      a0:	f3 02       	muls	r31, r19
      a2:	f5 02       	muls	r31, r21
      a4:	f7 02       	muls	r31, r23
      a6:	f9 02       	muls	r31, r25
      a8:	fb 02       	muls	r31, r27
      aa:	20 07       	cpc	r18, r16
      ac:	13 07       	cpc	r17, r19
      ae:	15 07       	cpc	r17, r21
      b0:	17 07       	cpc	r17, r23
      b2:	19 07       	cpc	r17, r25
      b4:	1b 07       	cpc	r17, r27
      b6:	1d 07       	cpc	r17, r29
      b8:	1f 07       	cpc	r17, r31
      ba:	1b 09       	sbc	r17, r11
      bc:	1d 09       	sbc	r17, r13
      be:	1f 09       	sbc	r17, r15
      c0:	21 09       	sbc	r18, r1
      c2:	23 09       	sbc	r18, r3
      c4:	25 09       	sbc	r18, r5
      c6:	27 09       	sbc	r18, r7

000000c8 <__ctors_end>:
      c8:	11 24       	eor	r1, r1
      ca:	1f be       	out	0x3f, r1	; 63
      cc:	cf ef       	ldi	r28, 0xFF	; 255
      ce:	d8 e0       	ldi	r29, 0x08	; 8
      d0:	de bf       	out	0x3e, r29	; 62
      d2:	cd bf       	out	0x3d, r28	; 61

000000d4 <__do_copy_data>:
      d4:	11 e0       	ldi	r17, 0x01	; 1
      d6:	a0 e0       	ldi	r26, 0x00	; 0
      d8:	b1 e0       	ldi	r27, 0x01	; 1
      da:	e2 e5       	ldi	r30, 0x52	; 82
      dc:	fb e1       	ldi	r31, 0x1B	; 27
      de:	02 c0       	rjmp	.+4      	; 0xe4 <__do_copy_data+0x10>
      e0:	05 90       	lpm	r0, Z+
      e2:	0d 92       	st	X+, r0
      e4:	a4 33       	cpi	r26, 0x34	; 52
      e6:	b1 07       	cpc	r27, r17
      e8:	d9 f7       	brne	.-10     	; 0xe0 <__do_copy_data+0xc>

000000ea <__do_clear_bss>:
      ea:	11 e0       	ldi	r17, 0x01	; 1
      ec:	a4 e3       	ldi	r26, 0x34	; 52
      ee:	b1 e0       	ldi	r27, 0x01	; 1
      f0:	01 c0       	rjmp	.+2      	; 0xf4 <.do_clear_bss_start>

000000f2 <.do_clear_bss_loop>:
      f2:	1d 92       	st	X+, r1

000000f4 <.do_clear_bss_start>:
      f4:	ab 37       	cpi	r26, 0x7B	; 123
      f6:	b1 07       	cpc	r27, r17
      f8:	e1 f7       	brne	.-8      	; 0xf2 <.do_clear_bss_loop>
      fa:	0e 94 4a 0b 	call	0x1694	; 0x1694 <main>
      fe:	0c 94 a7 0d 	jmp	0x1b4e	; 0x1b4e <_exit>

00000102 <__bad_interrupt>:
     102:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000106 <seta_dc>:
uint8 maxTemp = 70;				//temperatura maxima, desliga o sistema
uint8 criticalTemp = 60;		//temperatura critica
uint8 minVoltage = 210;			// Este valor é relativo à tensão de alimentação do sistema (no momento, 36V)

void seta_dc(uint8 d_cycle)		//função para definição do Duty Cicle do PWM
{
     106:	cf 93       	push	r28
     108:	c8 2f       	mov	r28, r24
	if(d_cycle < minDC)				// Comparação com o valor mínimo de Duty Cicle
     10a:	80 91 05 01 	lds	r24, 0x0105
     10e:	c8 17       	cp	r28, r24
     110:	18 f4       	brcc	.+6      	; 0x118 <seta_dc+0x12>
		status.dc = 0;
     112:	10 92 3b 01 	sts	0x013B, r1
     116:	1a c0       	rjmp	.+52     	; 0x14c <seta_dc+0x46>
	else
	{
		if(d_cycle > maxDC)			//Comparação com o valor máximo de Duty Cicle
     118:	80 91 04 01 	lds	r24, 0x0104
     11c:	8c 17       	cp	r24, r28
     11e:	20 f4       	brcc	.+8      	; 0x128 <seta_dc+0x22>
			status.dc = 100;
     120:	84 e6       	ldi	r24, 0x64	; 100
     122:	80 93 3b 01 	sts	0x013B, r24
     126:	12 c0       	rjmp	.+36     	; 0x14c <seta_dc+0x46>
		else
		{
			status.dc = d_cycle;
     128:	c0 93 3b 01 	sts	0x013B, r28
			timer1SetCompareBValue((status.dc * (timer1GetCompareAValue()))/100);		//seta o valor do comparador B para gerar o DC requerido
     12c:	0e 94 4d 08 	call	0x109a	; 0x109a <timer1GetCompareAValue>
     130:	9c 01       	movw	r18, r24
     132:	c2 9f       	mul	r28, r18
     134:	c0 01       	movw	r24, r0
     136:	c3 9f       	mul	r28, r19
     138:	90 0d       	add	r25, r0
     13a:	11 24       	eor	r1, r1
     13c:	64 e6       	ldi	r22, 0x64	; 100
     13e:	70 e0       	ldi	r23, 0x00	; 0
     140:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <__udivmodhi4>
     144:	cb 01       	movw	r24, r22
		}
	}
}
     146:	cf 91       	pop	r28
		if(d_cycle > maxDC)			//Comparação com o valor máximo de Duty Cicle
			status.dc = 100;
		else
		{
			status.dc = d_cycle;
			timer1SetCompareBValue((status.dc * (timer1GetCompareAValue()))/100);		//seta o valor do comparador B para gerar o DC requerido
     148:	0c 94 52 08 	jmp	0x10a4	; 0x10a4 <timer1SetCompareBValue>
		}
	}
}
     14c:	cf 91       	pop	r28
     14e:	08 95       	ret

00000150 <esvaziaBuffer>:
}

//esvazia o buffer de entrada da usart
void esvaziaBuffer()
{
	while(!usartIsReceiverBufferEmpty())
     150:	0e 94 34 0b 	call	0x1668	; 0x1668 <usartIsReceiverBufferEmpty>
     154:	81 11       	cpse	r24, r1
     156:	03 c0       	rjmp	.+6      	; 0x15e <esvaziaBuffer+0xe>
		usartGetDataFromReceiverBuffer();
     158:	0e 94 12 0b 	call	0x1624	; 0x1624 <usartGetDataFromReceiverBuffer>
     15c:	f9 cf       	rjmp	.-14     	; 0x150 <esvaziaBuffer>
}
     15e:	08 95       	ret

00000160 <stringTransmit>:

//envia uma msg usando o protocolo GUI
void stringTransmit(char* texto)
{
     160:	1f 93       	push	r17
     162:	cf 93       	push	r28
     164:	df 93       	push	r29
     166:	ec 01       	movw	r28, r24
	uint8 i = 0;
	usartTransmit(INICIODOPACOTE);
     168:	80 e4       	ldi	r24, 0x40	; 64
     16a:	0e 94 9a 0a 	call	0x1534	; 0x1534 <usartTransmit>
	for(i = 0; texto[i] != '\0'; i++)
     16e:	10 e0       	ldi	r17, 0x00	; 0
     170:	fe 01       	movw	r30, r28
     172:	e1 0f       	add	r30, r17
     174:	f1 1d       	adc	r31, r1
     176:	80 81       	ld	r24, Z
     178:	88 23       	and	r24, r24
     17a:	21 f0       	breq	.+8      	; 0x184 <stringTransmit+0x24>
		usartTransmit(texto[i]);
     17c:	0e 94 9a 0a 	call	0x1534	; 0x1534 <usartTransmit>
//envia uma msg usando o protocolo GUI
void stringTransmit(char* texto)
{
	uint8 i = 0;
	usartTransmit(INICIODOPACOTE);
	for(i = 0; texto[i] != '\0'; i++)
     180:	1f 5f       	subi	r17, 0xFF	; 255
     182:	f6 cf       	rjmp	.-20     	; 0x170 <stringTransmit+0x10>
		usartTransmit(texto[i]);
	usartTransmit(FINALDOPACOTE);
     184:	8a e2       	ldi	r24, 0x2A	; 42
}
     186:	df 91       	pop	r29
     188:	cf 91       	pop	r28
     18a:	1f 91       	pop	r17
{
	uint8 i = 0;
	usartTransmit(INICIODOPACOTE);
	for(i = 0; texto[i] != '\0'; i++)
		usartTransmit(texto[i]);
	usartTransmit(FINALDOPACOTE);
     18c:	0c 94 9a 0a 	jmp	0x1534	; 0x1534 <usartTransmit>

00000190 <uint16ToString4>:
}

//convert uint16 to string of 4 characters
void uint16ToString4(char* str,uint16 value)
{
     190:	0f 93       	push	r16
     192:	1f 93       	push	r17
     194:	cf 93       	push	r28
     196:	df 93       	push	r29
     198:	fc 01       	movw	r30, r24
     19a:	9b 01       	movw	r18, r22
	str[4] = '\0';
     19c:	14 82       	std	Z+4, r1	; 0x04
	str[3] = (char ) (value%10 + 48);
     19e:	ca e0       	ldi	r28, 0x0A	; 10
     1a0:	d0 e0       	ldi	r29, 0x00	; 0
     1a2:	cb 01       	movw	r24, r22
     1a4:	be 01       	movw	r22, r28
     1a6:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <__udivmodhi4>
     1aa:	80 5d       	subi	r24, 0xD0	; 208
     1ac:	83 83       	std	Z+3, r24	; 0x03
	str[2] = (char) ((value%100) / 10 + 48);
     1ae:	04 e6       	ldi	r16, 0x64	; 100
     1b0:	10 e0       	ldi	r17, 0x00	; 0
     1b2:	c9 01       	movw	r24, r18
     1b4:	b8 01       	movw	r22, r16
     1b6:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <__udivmodhi4>
     1ba:	be 01       	movw	r22, r28
     1bc:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <__udivmodhi4>
     1c0:	60 5d       	subi	r22, 0xD0	; 208
     1c2:	62 83       	std	Z+2, r22	; 0x02
	str[1] = (char) ((value%1000) / 100 + 48);
     1c4:	c8 ee       	ldi	r28, 0xE8	; 232
     1c6:	d3 e0       	ldi	r29, 0x03	; 3
     1c8:	c9 01       	movw	r24, r18
     1ca:	be 01       	movw	r22, r28
     1cc:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <__udivmodhi4>
     1d0:	b8 01       	movw	r22, r16
     1d2:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <__udivmodhi4>
     1d6:	60 5d       	subi	r22, 0xD0	; 208
     1d8:	61 83       	std	Z+1, r22	; 0x01
	str[0] = (char) ((value%10000) / 1000 + 48);
     1da:	c9 01       	movw	r24, r18
     1dc:	60 e1       	ldi	r22, 0x10	; 16
     1de:	77 e2       	ldi	r23, 0x27	; 39
     1e0:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <__udivmodhi4>
     1e4:	be 01       	movw	r22, r28
     1e6:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <__udivmodhi4>
     1ea:	60 5d       	subi	r22, 0xD0	; 208
     1ec:	60 83       	st	Z, r22
}
     1ee:	df 91       	pop	r29
     1f0:	cf 91       	pop	r28
     1f2:	1f 91       	pop	r17
     1f4:	0f 91       	pop	r16
     1f6:	08 95       	ret

000001f8 <uint8ToString4>:

//convert uint8 to string of 4 characters
void uint8ToString4(char* str,uint16 value)
{
     1f8:	0f 93       	push	r16
     1fa:	1f 93       	push	r17
     1fc:	cf 93       	push	r28
     1fe:	df 93       	push	r29
     200:	fc 01       	movw	r30, r24
     202:	9b 01       	movw	r18, r22
	str[4] = '\0';
     204:	14 82       	std	Z+4, r1	; 0x04
	str[3] = (char ) (value%10 + 48);
     206:	0a e0       	ldi	r16, 0x0A	; 10
     208:	10 e0       	ldi	r17, 0x00	; 0
     20a:	cb 01       	movw	r24, r22
     20c:	b8 01       	movw	r22, r16
     20e:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <__udivmodhi4>
     212:	80 5d       	subi	r24, 0xD0	; 208
     214:	83 83       	std	Z+3, r24	; 0x03
	str[2] = (char) ((value%100) / 10 + 48);
     216:	c4 e6       	ldi	r28, 0x64	; 100
     218:	d0 e0       	ldi	r29, 0x00	; 0
     21a:	c9 01       	movw	r24, r18
     21c:	be 01       	movw	r22, r28
     21e:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <__udivmodhi4>
     222:	b8 01       	movw	r22, r16
     224:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <__udivmodhi4>
     228:	60 5d       	subi	r22, 0xD0	; 208
     22a:	62 83       	std	Z+2, r22	; 0x02
	str[1] = (char) ((value%1000) / 100 + 48);
     22c:	c9 01       	movw	r24, r18
     22e:	68 ee       	ldi	r22, 0xE8	; 232
     230:	73 e0       	ldi	r23, 0x03	; 3
     232:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <__udivmodhi4>
     236:	be 01       	movw	r22, r28
     238:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <__udivmodhi4>
     23c:	60 5d       	subi	r22, 0xD0	; 208
     23e:	61 83       	std	Z+1, r22	; 0x01
	str[0] = '0';
     240:	80 e3       	ldi	r24, 0x30	; 48
     242:	80 83       	st	Z, r24
}
     244:	df 91       	pop	r29
     246:	cf 91       	pop	r28
     248:	1f 91       	pop	r17
     24a:	0f 91       	pop	r16
     24c:	08 95       	ret

0000024e <string4ToUint16>:

//convert string of 4 characters uint16
uint16 string4ToUint16(char* str)
{
     24e:	fc 01       	movw	r30, r24
	uint16 value;
	value = (uint16) (str[0]-48)*1000 + (str[1]-48)*100 
	+ (str[2]-48)*10 + str[3]-48;
     250:	23 81       	ldd	r18, Z+3	; 0x03
     252:	30 e0       	ldi	r19, 0x00	; 0

//convert string of 4 characters uint16
uint16 string4ToUint16(char* str)
{
	uint16 value;
	value = (uint16) (str[0]-48)*1000 + (str[1]-48)*100 
     254:	20 53       	subi	r18, 0x30	; 48
     256:	31 09       	sbc	r19, r1
     258:	80 81       	ld	r24, Z
     25a:	90 e0       	ldi	r25, 0x00	; 0
     25c:	c0 97       	sbiw	r24, 0x30	; 48
     25e:	68 ee       	ldi	r22, 0xE8	; 232
     260:	73 e0       	ldi	r23, 0x03	; 3
     262:	86 9f       	mul	r24, r22
     264:	a0 01       	movw	r20, r0
     266:	87 9f       	mul	r24, r23
     268:	50 0d       	add	r21, r0
     26a:	96 9f       	mul	r25, r22
     26c:	50 0d       	add	r21, r0
     26e:	11 24       	eor	r1, r1
	+ (str[2]-48)*10 + str[3]-48;
     270:	24 0f       	add	r18, r20
     272:	35 1f       	adc	r19, r21

//convert string of 4 characters uint16
uint16 string4ToUint16(char* str)
{
	uint16 value;
	value = (uint16) (str[0]-48)*1000 + (str[1]-48)*100 
     274:	81 81       	ldd	r24, Z+1	; 0x01
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	c0 97       	sbiw	r24, 0x30	; 48
     27a:	64 e6       	ldi	r22, 0x64	; 100
     27c:	68 9f       	mul	r22, r24
     27e:	a0 01       	movw	r20, r0
     280:	69 9f       	mul	r22, r25
     282:	50 0d       	add	r21, r0
     284:	11 24       	eor	r1, r1
	+ (str[2]-48)*10 + str[3]-48;
     286:	24 0f       	add	r18, r20
     288:	35 1f       	adc	r19, r21
     28a:	42 81       	ldd	r20, Z+2	; 0x02
     28c:	50 e0       	ldi	r21, 0x00	; 0
     28e:	40 53       	subi	r20, 0x30	; 48
     290:	51 09       	sbc	r21, r1
     292:	6a e0       	ldi	r22, 0x0A	; 10
     294:	64 9f       	mul	r22, r20
     296:	c0 01       	movw	r24, r0
     298:	65 9f       	mul	r22, r21
     29a:	90 0d       	add	r25, r0
     29c:	11 24       	eor	r1, r1
	return value;
}
     29e:	82 0f       	add	r24, r18
     2a0:	93 1f       	adc	r25, r19
     2a2:	08 95       	ret

000002a4 <string4Touint8>:

//convert string of 4 characters uint8
uint8 string4Touint8(char* str)
{
     2a4:	fc 01       	movw	r30, r24
	uint8 value;
	value = (uint8) ((str[1]-48)*100 
     2a6:	83 81       	ldd	r24, Z+3	; 0x03
     2a8:	80 53       	subi	r24, 0x30	; 48
     2aa:	91 81       	ldd	r25, Z+1	; 0x01
     2ac:	90 53       	subi	r25, 0x30	; 48
     2ae:	24 e6       	ldi	r18, 0x64	; 100
     2b0:	92 9f       	mul	r25, r18
     2b2:	80 0d       	add	r24, r0
     2b4:	11 24       	eor	r1, r1
	+ (str[2]-48)*10 + str[3]-48);
     2b6:	92 81       	ldd	r25, Z+2	; 0x02
     2b8:	99 0f       	add	r25, r25

//convert string of 4 characters uint8
uint8 string4Touint8(char* str)
{
	uint8 value;
	value = (uint8) ((str[1]-48)*100 
     2ba:	90 56       	subi	r25, 0x60	; 96
     2bc:	29 2f       	mov	r18, r25
     2be:	22 0f       	add	r18, r18
     2c0:	22 0f       	add	r18, r18
     2c2:	29 0f       	add	r18, r25
	+ (str[2]-48)*10 + str[3]-48);
	return value;
}
     2c4:	82 0f       	add	r24, r18
     2c6:	08 95       	ret

000002c8 <__vector_21>:
		}
	}
}

ISR(ADC_vect)
{
     2c8:	1f 92       	push	r1
     2ca:	0f 92       	push	r0
     2cc:	0f b6       	in	r0, 0x3f	; 63
     2ce:	0f 92       	push	r0
     2d0:	11 24       	eor	r1, r1
     2d2:	2f 93       	push	r18
     2d4:	3f 93       	push	r19
     2d6:	4f 93       	push	r20
     2d8:	5f 93       	push	r21
     2da:	6f 93       	push	r22
     2dc:	7f 93       	push	r23
     2de:	8f 93       	push	r24
     2e0:	9f 93       	push	r25
     2e2:	af 93       	push	r26
     2e4:	bf 93       	push	r27
     2e6:	ef 93       	push	r30
     2e8:	ff 93       	push	r31
	switch (channel)
     2ea:	80 91 35 01 	lds	r24, 0x0135
     2ee:	81 30       	cpi	r24, 0x01	; 1
     2f0:	b1 f1       	breq	.+108    	; 0x35e <__vector_21+0x96>
     2f2:	08 f4       	brcc	.+2      	; 0x2f6 <__vector_21+0x2e>
     2f4:	47 c0       	rjmp	.+142    	; 0x384 <__vector_21+0xbc>
     2f6:	82 30       	cpi	r24, 0x02	; 2
     2f8:	21 f1       	breq	.+72     	; 0x342 <__vector_21+0x7a>
     2fa:	83 30       	cpi	r24, 0x03	; 3
     2fc:	09 f0       	breq	.+2      	; 0x300 <__vector_21+0x38>
     2fe:	4a c0       	rjmp	.+148    	; 0x394 <__vector_21+0xcc>
				dcReq = (1023 / 10) - (ADC/10); 		//logica inversa do pot, para desligar em caso de rompimento do cabo
			channel = VOLTAGE_CHANNEL;
			break;
		case VOLTAGE_CHANNEL:

			status.voltage = EMA(status.voltage,10*ADC/21,2);					//calculado apartir da relação de media movel
     300:	40 91 78 00 	lds	r20, 0x0078
     304:	50 91 79 00 	lds	r21, 0x0079
     308:	20 91 3d 01 	lds	r18, 0x013D
     30c:	30 91 3e 01 	lds	r19, 0x013E
     310:	6a e0       	ldi	r22, 0x0A	; 10
     312:	64 9f       	mul	r22, r20
     314:	c0 01       	movw	r24, r0
     316:	65 9f       	mul	r22, r21
     318:	90 0d       	add	r25, r0
     31a:	11 24       	eor	r1, r1
     31c:	65 e1       	ldi	r22, 0x15	; 21
     31e:	70 e0       	ldi	r23, 0x00	; 0
     320:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <__udivmodhi4>
     324:	62 1b       	sub	r22, r18
     326:	73 0b       	sbc	r23, r19
     328:	76 95       	lsr	r23
     32a:	67 95       	ror	r22
     32c:	76 95       	lsr	r23
     32e:	67 95       	ror	r22
     330:	62 0f       	add	r22, r18
     332:	73 1f       	adc	r23, r19
     334:	70 93 3e 01 	sts	0x013E, r23
     338:	60 93 3d 01 	sts	0x013D, r22
			channel = TEMP_CHANNEL;
     33c:	10 92 35 01 	sts	0x0135, r1
			break;
     340:	2c c0       	rjmp	.+88     	; 0x39a <__vector_21+0xd2>
ISR(ADC_vect)
{
	switch (channel)
	{
		case CURRENT_CHANNEL:
			status.current = ADC / 5;
     342:	80 91 78 00 	lds	r24, 0x0078
     346:	90 91 79 00 	lds	r25, 0x0079
     34a:	65 e0       	ldi	r22, 0x05	; 5
     34c:	70 e0       	ldi	r23, 0x00	; 0
     34e:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <__udivmodhi4>
     352:	70 93 3a 01 	sts	0x013A, r23
     356:	60 93 39 01 	sts	0x0139, r22
			channel = POT_CHANNEL;
     35a:	81 e0       	ldi	r24, 0x01	; 1
     35c:	1c c0       	rjmp	.+56     	; 0x396 <__vector_21+0xce>
			break;
		case POT_CHANNEL:
			if(flags.mode == POT_MODE)
     35e:	80 91 36 01 	lds	r24, 0x0136
     362:	8c 70       	andi	r24, 0x0C	; 12
     364:	88 30       	cpi	r24, 0x08	; 8
     366:	61 f4       	brne	.+24     	; 0x380 <__vector_21+0xb8>
				dcReq = (1023 / 10) - (ADC/10); 		//logica inversa do pot, para desligar em caso de rompimento do cabo
     368:	80 91 78 00 	lds	r24, 0x0078
     36c:	90 91 79 00 	lds	r25, 0x0079
     370:	6a e0       	ldi	r22, 0x0A	; 10
     372:	70 e0       	ldi	r23, 0x00	; 0
     374:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <__udivmodhi4>
     378:	86 e6       	ldi	r24, 0x66	; 102
     37a:	86 1b       	sub	r24, r22
     37c:	80 93 34 01 	sts	0x0134, r24
			channel = VOLTAGE_CHANNEL;
     380:	83 e0       	ldi	r24, 0x03	; 3
     382:	09 c0       	rjmp	.+18     	; 0x396 <__vector_21+0xce>

			status.voltage = EMA(status.voltage,10*ADC/21,2);					//calculado apartir da relação de media movel
			channel = TEMP_CHANNEL;
			break;
		case TEMP_CHANNEL:
			status.temperature = ADC / 2;
     384:	80 91 78 00 	lds	r24, 0x0078
     388:	90 91 79 00 	lds	r25, 0x0079
     38c:	96 95       	lsr	r25
     38e:	87 95       	ror	r24
     390:	80 93 3c 01 	sts	0x013C, r24
		default:
			channel = CURRENT_CHANNEL;
     394:	82 e0       	ldi	r24, 0x02	; 2
     396:	80 93 35 01 	sts	0x0135, r24
	/*if(channel == LAST_CHANNEL)
		channel = FIRST_CHANNEL;
	else
		channel ++;
	*/
	adcSelectChannel(channel);
     39a:	80 91 35 01 	lds	r24, 0x0135
     39e:	0e 94 33 09 	call	0x1266	; 0x1266 <adcSelectChannel>
	adcStartConversion();
     3a2:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <adcStartConversion>
}
     3a6:	ff 91       	pop	r31
     3a8:	ef 91       	pop	r30
     3aa:	bf 91       	pop	r27
     3ac:	af 91       	pop	r26
     3ae:	9f 91       	pop	r25
     3b0:	8f 91       	pop	r24
     3b2:	7f 91       	pop	r23
     3b4:	6f 91       	pop	r22
     3b6:	5f 91       	pop	r21
     3b8:	4f 91       	pop	r20
     3ba:	3f 91       	pop	r19
     3bc:	2f 91       	pop	r18
     3be:	0f 90       	pop	r0
     3c0:	0f be       	out	0x3f, r0	; 63
     3c2:	0f 90       	pop	r0
     3c4:	1f 90       	pop	r1
     3c6:	18 95       	reti

000003c8 <__vector_11>:

ISR(TIMER1_COMPA_vect)
{
     3c8:	1f 92       	push	r1
     3ca:	0f 92       	push	r0
     3cc:	0f b6       	in	r0, 0x3f	; 63
     3ce:	0f 92       	push	r0
     3d0:	11 24       	eor	r1, r1
     3d2:	8f 93       	push	r24
	if(status.dc != 0 && status.on)
     3d4:	80 91 3b 01 	lds	r24, 0x013B
     3d8:	88 23       	and	r24, r24
     3da:	21 f0       	breq	.+8      	; 0x3e4 <__vector_11+0x1c>
     3dc:	80 91 3f 01 	lds	r24, 0x013F
     3e0:	81 11       	cpse	r24, r1
		setBit(PWM_PORT,PWM_BIT);		//Inicia o período em nível alto do PWM
     3e2:	29 9a       	sbi	0x05, 1	; 5
}
     3e4:	8f 91       	pop	r24
     3e6:	0f 90       	pop	r0
     3e8:	0f be       	out	0x3f, r0	; 63
     3ea:	0f 90       	pop	r0
     3ec:	1f 90       	pop	r1
     3ee:	18 95       	reti

000003f0 <__vector_12>:

ISR(TIMER1_COMPB_vect)
{
     3f0:	1f 92       	push	r1
     3f2:	0f 92       	push	r0
     3f4:	0f b6       	in	r0, 0x3f	; 63
     3f6:	0f 92       	push	r0
     3f8:	11 24       	eor	r1, r1
     3fa:	8f 93       	push	r24
	if(status.dc < 100)
     3fc:	80 91 3b 01 	lds	r24, 0x013B
     400:	84 36       	cpi	r24, 0x64	; 100
     402:	08 f4       	brcc	.+2      	; 0x406 <__vector_12+0x16>
		clrBit(PWM_PORT,PWM_BIT);		//Inicia o período em nível baixo do PWM
     404:	29 98       	cbi	0x05, 1	; 5
}
     406:	8f 91       	pop	r24
     408:	0f 90       	pop	r0
     40a:	0f be       	out	0x3f, r0	; 63
     40c:	0f 90       	pop	r0
     40e:	1f 90       	pop	r1
     410:	18 95       	reti

00000412 <__vector_16>:

//controle 60Hz
ISR(TIMER0_OVF_vect)
{
     412:	1f 92       	push	r1
     414:	0f 92       	push	r0
     416:	0f b6       	in	r0, 0x3f	; 63
     418:	0f 92       	push	r0
     41a:	11 24       	eor	r1, r1
     41c:	2f 93       	push	r18
     41e:	3f 93       	push	r19
     420:	4f 93       	push	r20
     422:	5f 93       	push	r21
     424:	6f 93       	push	r22
     426:	7f 93       	push	r23
     428:	8f 93       	push	r24
     42a:	9f 93       	push	r25
     42c:	af 93       	push	r26
     42e:	bf 93       	push	r27
     430:	ef 93       	push	r30
     432:	ff 93       	push	r31
	if(flags.mode == POT_MODE)
     434:	90 91 36 01 	lds	r25, 0x0136
     438:	89 2f       	mov	r24, r25
     43a:	8c 70       	andi	r24, 0x0C	; 12
     43c:	88 30       	cpi	r24, 0x08	; 8
     43e:	91 f4       	brne	.+36     	; 0x464 <__vector_16+0x52>
	{
		flags.on = isBitClr(ON_PIN,ON_BIT);
     440:	89 b1       	in	r24, 0x09	; 9
     442:	85 fb       	bst	r24, 5
     444:	88 27       	eor	r24, r24
     446:	80 f9       	bld	r24, 0
     448:	21 e0       	ldi	r18, 0x01	; 1
     44a:	82 27       	eor	r24, r18
     44c:	80 fb       	bst	r24, 0
     44e:	94 f9       	bld	r25, 4
     450:	90 93 36 01 	sts	0x0136, r25
		flags.dms = isBitClr(DMS_PIN,DMS_BIT);
     454:	89 b1       	in	r24, 0x09	; 9
     456:	82 95       	swap	r24
     458:	81 70       	andi	r24, 0x01	; 1
     45a:	82 27       	eor	r24, r18
     45c:	80 fb       	bst	r24, 0
     45e:	95 f9       	bld	r25, 5
     460:	90 93 36 01 	sts	0x0136, r25
	}

	//adicionado
	if(!(flags.on && !flags.dms))// || status.temperature > maxTemp)//informa ao sistema para nao acionar o motor caso botão ON e DMS estejam desligados.
     464:	80 91 36 01 	lds	r24, 0x0136
     468:	80 73       	andi	r24, 0x30	; 48
     46a:	80 31       	cpi	r24, 0x10	; 16
     46c:	19 f0       	breq	.+6      	; 0x474 <__vector_16+0x62>
		status.on = 0;
     46e:	10 92 3f 01 	sts	0x013F, r1
     472:	0d c0       	rjmp	.+26     	; 0x48e <__vector_16+0x7c>
	else
		if(dcReq<minDC && !status.on)		//informa ao sistema para acionar o motor apenas quando botão ON e DMS estejam ligados
     474:	90 91 34 01 	lds	r25, 0x0134
     478:	80 91 05 01 	lds	r24, 0x0105
     47c:	98 17       	cp	r25, r24
     47e:	38 f4       	brcc	.+14     	; 0x48e <__vector_16+0x7c>
     480:	80 91 3f 01 	lds	r24, 0x013F
     484:	81 11       	cpse	r24, r1
     486:	03 c0       	rjmp	.+6      	; 0x48e <__vector_16+0x7c>
			status.on = 1;					//e o potenciometro esteja numa posicao correspondente a menos de 10% do DC do PWM.
     488:	81 e0       	ldi	r24, 0x01	; 1
     48a:	80 93 3f 01 	sts	0x013F, r24
	if(status.on)		//inicia o acionamento do motor, com os as condições preliminares acima satisfeitas.
     48e:	80 91 3f 01 	lds	r24, 0x013F
     492:	90 91 3b 01 	lds	r25, 0x013B
     496:	88 23       	and	r24, r24
     498:	69 f1       	breq	.+90     	; 0x4f4 <__vector_16+0xe2>
	{
    	if(status.dc != dcReq)
     49a:	80 91 34 01 	lds	r24, 0x0134
     49e:	98 17       	cp	r25, r24
     4a0:	71 f1       	breq	.+92     	; 0x4fe <__vector_16+0xec>
    	{
    		if(dcReq > status.dc && dcReq > (minDC + 5))//se esta em ascendente
     4a2:	98 17       	cp	r25, r24
     4a4:	20 f5       	brcc	.+72     	; 0x4ee <__vector_16+0xdc>
     4a6:	60 91 05 01 	lds	r22, 0x0105
     4aa:	48 2f       	mov	r20, r24
     4ac:	50 e0       	ldi	r21, 0x00	; 0
     4ae:	26 2f       	mov	r18, r22
     4b0:	30 e0       	ldi	r19, 0x00	; 0
     4b2:	2b 5f       	subi	r18, 0xFB	; 251
     4b4:	3f 4f       	sbci	r19, 0xFF	; 255
     4b6:	24 17       	cp	r18, r20
     4b8:	35 07       	cpc	r19, r21
     4ba:	cc f4       	brge	.+50     	; 0x4ee <__vector_16+0xdc>
    		{
    			if(!--cont)
     4bc:	20 91 07 01 	lds	r18, 0x0107
     4c0:	30 91 08 01 	lds	r19, 0x0108
     4c4:	21 50       	subi	r18, 0x01	; 1
     4c6:	31 09       	sbc	r19, r1
     4c8:	30 93 08 01 	sts	0x0108, r19
     4cc:	20 93 07 01 	sts	0x0107, r18
     4d0:	23 2b       	or	r18, r19
     4d2:	a9 f4       	brne	.+42     	; 0x4fe <__vector_16+0xec>
    			{
    				cont = maxCont;
     4d4:	23 e0       	ldi	r18, 0x03	; 3
     4d6:	30 e0       	ldi	r19, 0x00	; 0
     4d8:	30 93 08 01 	sts	0x0108, r19
     4dc:	20 93 07 01 	sts	0x0107, r18
    				if(status.dc == 0)
     4e0:	91 11       	cpse	r25, r1
     4e2:	02 c0       	rjmp	.+4      	; 0x4e8 <__vector_16+0xd6>
    					seta_dc(minDC);
     4e4:	86 2f       	mov	r24, r22
     4e6:	09 c0       	rjmp	.+18     	; 0x4fa <__vector_16+0xe8>
    				else
    					seta_dc(status.dc+1);
     4e8:	81 e0       	ldi	r24, 0x01	; 1
     4ea:	89 0f       	add	r24, r25
     4ec:	06 c0       	rjmp	.+12     	; 0x4fa <__vector_16+0xe8>
    			}
    		}
    		else
    			if (dcReq < status.dc)
     4ee:	89 17       	cp	r24, r25
     4f0:	30 f4       	brcc	.+12     	; 0x4fe <__vector_16+0xec>
     4f2:	03 c0       	rjmp	.+6      	; 0x4fa <__vector_16+0xe8>
    				seta_dc(dcReq);			//definição do Duty Cicle do PWM
    	}
	}
	else
	{
		if(status.dc != 0)					//se o sistema ainda nao esta desligado
     4f4:	99 23       	and	r25, r25
     4f6:	19 f0       	breq	.+6      	; 0x4fe <__vector_16+0xec>
			seta_dc(0);						//desliga o sistema
     4f8:	80 e0       	ldi	r24, 0x00	; 0
     4fa:	0e 94 83 00 	call	0x106	; 0x106 <seta_dc>
	}
	if(status.dc>=minDC && (status.current>maxCurrent || status.voltage<minVoltage))
     4fe:	80 91 3b 01 	lds	r24, 0x013B
     502:	90 91 05 01 	lds	r25, 0x0105
     506:	89 17       	cp	r24, r25
     508:	e0 f0       	brcs	.+56     	; 0x542 <__vector_16+0x130>
     50a:	20 91 06 01 	lds	r18, 0x0106
     50e:	30 e0       	ldi	r19, 0x00	; 0
     510:	40 91 39 01 	lds	r20, 0x0139
     514:	50 91 3a 01 	lds	r21, 0x013A
     518:	24 17       	cp	r18, r20
     51a:	35 07       	cpc	r19, r21
     51c:	50 f0       	brcs	.+20     	; 0x532 <__vector_16+0x120>
     51e:	20 91 00 01 	lds	r18, 0x0100
     522:	30 e0       	ldi	r19, 0x00	; 0
     524:	40 91 3d 01 	lds	r20, 0x013D
     528:	50 91 3e 01 	lds	r21, 0x013E
     52c:	42 17       	cp	r20, r18
     52e:	53 07       	cpc	r21, r19
     530:	40 f4       	brcc	.+16     	; 0x542 <__vector_16+0x130>
	{
		if(status.dc==100)
     532:	84 36       	cpi	r24, 0x64	; 100
     534:	19 f4       	brne	.+6      	; 0x53c <__vector_16+0x12a>
			seta_dc(status.dc-(100 - maxDC));
     536:	80 91 04 01 	lds	r24, 0x0104
     53a:	01 c0       	rjmp	.+2      	; 0x53e <__vector_16+0x12c>
		else
			seta_dc(status.dc-3);
     53c:	83 50       	subi	r24, 0x03	; 3
     53e:	0e 94 83 00 	call	0x106	; 0x106 <seta_dc>
		{
			flags.warning = 0;
			//clrBit(BUZZER_PORT,BUZZER_BIT);
		}
	*/
}
     542:	ff 91       	pop	r31
     544:	ef 91       	pop	r30
     546:	bf 91       	pop	r27
     548:	af 91       	pop	r26
     54a:	9f 91       	pop	r25
     54c:	8f 91       	pop	r24
     54e:	7f 91       	pop	r23
     550:	6f 91       	pop	r22
     552:	5f 91       	pop	r21
     554:	4f 91       	pop	r20
     556:	3f 91       	pop	r19
     558:	2f 91       	pop	r18
     55a:	0f 90       	pop	r0
     55c:	0f be       	out	0x3f, r0	; 63
     55e:	0f 90       	pop	r0
     560:	1f 90       	pop	r1
     562:	18 95       	reti

00000564 <__vector_18>:

ISR(USART_RX_vect)
{
     564:	1f 92       	push	r1
     566:	0f 92       	push	r0
     568:	0f b6       	in	r0, 0x3f	; 63
     56a:	0f 92       	push	r0
     56c:	11 24       	eor	r1, r1
     56e:	2f 93       	push	r18
     570:	3f 93       	push	r19
     572:	4f 93       	push	r20
     574:	5f 93       	push	r21
     576:	6f 93       	push	r22
     578:	7f 93       	push	r23
     57a:	8f 93       	push	r24
     57c:	9f 93       	push	r25
     57e:	af 93       	push	r26
     580:	bf 93       	push	r27
     582:	ef 93       	push	r30
     584:	ff 93       	push	r31
	usartAddDataToReceiverBuffer(UDR0);
     586:	80 91 c6 00 	lds	r24, 0x00C6
     58a:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <usartAddDataToReceiverBuffer>
     58e:	ff 91       	pop	r31
     590:	ef 91       	pop	r30
     592:	bf 91       	pop	r27
     594:	af 91       	pop	r26
     596:	9f 91       	pop	r25
     598:	8f 91       	pop	r24
     59a:	7f 91       	pop	r23
     59c:	6f 91       	pop	r22
     59e:	5f 91       	pop	r21
     5a0:	4f 91       	pop	r20
     5a2:	3f 91       	pop	r19
     5a4:	2f 91       	pop	r18
     5a6:	0f 90       	pop	r0
     5a8:	0f be       	out	0x3f, r0	; 63
     5aa:	0f 90       	pop	r0
     5ac:	1f 90       	pop	r1
     5ae:	18 95       	reti

000005b0 <usartReceiveStd>:
 * Checks if a reception has been completed
 * -------------------------------------------------------------------------- */

bool_t usartIsReceptionComplete(void)
{
	return isBitSet(UCSR0A, RXC0);
     5b0:	80 91 c0 00 	lds	r24, 0x00C0
 * standard input heandler
 * -------------------------------------------------------------------------- */

int16 usartReceiveStd(FILE * stream)
{
	while(!usartIsReceptionComplete())
     5b4:	87 ff       	sbrs	r24, 7
     5b6:	fc cf       	rjmp	.-8      	; 0x5b0 <usartReceiveStd>
		;	// Waits until last reception ends
	return (int16)UDR0;
     5b8:	80 91 c6 00 	lds	r24, 0x00C6
}
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	08 95       	ret

000005c0 <globalInterruptEnable>:
 * Enable global interrupts
 * -------------------------------------------------------------------------- */

void globalInterruptEnable(void)
{
	sei();
     5c0:	78 94       	sei
     5c2:	08 95       	ret

000005c4 <globalInterruptDisable>:
 * Disable global interrupts
 * -------------------------------------------------------------------------- */

void globalInterruptDisable(void)
{
	cli();
     5c4:	f8 94       	cli
     5c6:	08 95       	ret

000005c8 <systemClockSetPrescaler>:

resultValue_t systemClockSetPrescaler(systemPrescalerValue_t prescaler)
{
	uint8 aux8 = 0;

	switch(prescaler){
     5c8:	90 e0       	ldi	r25, 0x00	; 0
     5ca:	89 30       	cpi	r24, 0x09	; 9
     5cc:	91 05       	cpc	r25, r1
     5ce:	00 f5       	brcc	.+64     	; 0x610 <systemClockSetPrescaler+0x48>
     5d0:	fc 01       	movw	r30, r24
     5d2:	e4 5b       	subi	r30, 0xB4	; 180
     5d4:	ff 4f       	sbci	r31, 0xFF	; 255
     5d6:	0c 94 71 0d 	jmp	0x1ae2	; 0x1ae2 <__tablejump2__>
		case SYSTEM_PRESCALER_OFF:		aux8 = 0;	break;
     5da:	80 e0       	ldi	r24, 0x00	; 0
     5dc:	0f c0       	rjmp	.+30     	; 0x5fc <systemClockSetPrescaler+0x34>
		case SYSTEM_PRESCALER_2:		aux8 = 1;	break;
		case SYSTEM_PRESCALER_4:		aux8 = 2;	break;
     5de:	82 e0       	ldi	r24, 0x02	; 2
     5e0:	0d c0       	rjmp	.+26     	; 0x5fc <systemClockSetPrescaler+0x34>
		case SYSTEM_PRESCALER_8:		aux8 = 3;	break;
     5e2:	83 e0       	ldi	r24, 0x03	; 3
     5e4:	0b c0       	rjmp	.+22     	; 0x5fc <systemClockSetPrescaler+0x34>
		case SYSTEM_PRESCALER_16:		aux8 = 4;	break;
     5e6:	84 e0       	ldi	r24, 0x04	; 4
     5e8:	09 c0       	rjmp	.+18     	; 0x5fc <systemClockSetPrescaler+0x34>
		case SYSTEM_PRESCALER_32:		aux8 = 5;	break;
     5ea:	85 e0       	ldi	r24, 0x05	; 5
     5ec:	07 c0       	rjmp	.+14     	; 0x5fc <systemClockSetPrescaler+0x34>
		case SYSTEM_PRESCALER_64:		aux8 = 6;	break;
     5ee:	86 e0       	ldi	r24, 0x06	; 6
     5f0:	05 c0       	rjmp	.+10     	; 0x5fc <systemClockSetPrescaler+0x34>
		case SYSTEM_PRESCALER_128:		aux8 = 7;	break;
     5f2:	87 e0       	ldi	r24, 0x07	; 7
     5f4:	03 c0       	rjmp	.+6      	; 0x5fc <systemClockSetPrescaler+0x34>
		case SYSTEM_PRESCALER_256:		aux8 = 8;	break;
     5f6:	88 e0       	ldi	r24, 0x08	; 8
     5f8:	01 c0       	rjmp	.+2      	; 0x5fc <systemClockSetPrescaler+0x34>
{
	uint8 aux8 = 0;

	switch(prescaler){
		case SYSTEM_PRESCALER_OFF:		aux8 = 0;	break;
		case SYSTEM_PRESCALER_2:		aux8 = 1;	break;
     5fa:	81 e0       	ldi	r24, 0x01	; 1
		case SYSTEM_PRESCALER_64:		aux8 = 6;	break;
		case SYSTEM_PRESCALER_128:		aux8 = 7;	break;
		case SYSTEM_PRESCALER_256:		aux8 = 8;	break;
		default:						return RESULT_UNSUPPORTED_VALUE;	break;
	}
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
     5fc:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     5fe:	f8 94       	cli
		CLKPR = 0b10000000;
     600:	20 e8       	ldi	r18, 0x80	; 128
     602:	20 93 61 00 	sts	0x0061, r18
		CLKPR = aux8;
     606:	80 93 61 00 	sts	0x0061, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     60a:	9f bf       	out	0x3f, r25	; 63
	}

	return RESULT_OK;
     60c:	80 e0       	ldi	r24, 0x00	; 0
     60e:	08 95       	ret
		case SYSTEM_PRESCALER_16:		aux8 = 4;	break;
		case SYSTEM_PRESCALER_32:		aux8 = 5;	break;
		case SYSTEM_PRESCALER_64:		aux8 = 6;	break;
		case SYSTEM_PRESCALER_128:		aux8 = 7;	break;
		case SYSTEM_PRESCALER_256:		aux8 = 8;	break;
		default:						return RESULT_UNSUPPORTED_VALUE;	break;
     610:	87 e0       	ldi	r24, 0x07	; 7
		CLKPR = 0b10000000;
		CLKPR = aux8;
	}

	return RESULT_OK;
}
     612:	08 95       	ret

00000614 <eepromSetOperationMode>:

void eepromSetOperationMode(eepromMode_t mode)
{
	uint8 aux8 = 0;

	aux8 = EECR & ~(0x03 << EEPM0);
     614:	2f b3       	in	r18, 0x1f	; 31
	aux8 |= (mode << EEPM0);
     616:	30 e1       	ldi	r19, 0x10	; 16
     618:	83 9f       	mul	r24, r19
     61a:	c0 01       	movw	r24, r0
     61c:	11 24       	eor	r1, r1

void eepromSetOperationMode(eepromMode_t mode)
{
	uint8 aux8 = 0;

	aux8 = EECR & ~(0x03 << EEPM0);
     61e:	2f 7c       	andi	r18, 0xCF	; 207
	aux8 |= (mode << EEPM0);
     620:	28 2b       	or	r18, r24
	EECR = aux8;
     622:	2f bb       	out	0x1f, r18	; 31
     624:	08 95       	ret

00000626 <eepromReadyActivateInterrupt>:
 * Activates the EEPROM ready interrupt
 * -------------------------------------------------------------------------- */

void eepromReadyActivateInterrupt(void)
{
	setBit(EECR, EERIE);
     626:	fb 9a       	sbi	0x1f, 3	; 31
     628:	08 95       	ret

0000062a <eepromReadyDeactivateInterrupt>:
 * Deactivates the EEPROM ready interrupt
 * -------------------------------------------------------------------------- */

void eepromReadyDeactivateInterrupt(void)
{
	clrBit(EECR, EERIE);
     62a:	fb 98       	cbi	0x1f, 3	; 31
     62c:	08 95       	ret

0000062e <eepromWrite>:
 * Writes a byte in the specified address in the EEPROM
 * -------------------------------------------------------------------------- */

void eepromWrite(uint16 address, uint8 data)
{
	waitUntilBitIsClear(EECR, EEPE);
     62e:	f9 99       	sbic	0x1f, 1	; 31
     630:	fe cf       	rjmp	.-4      	; 0x62e <eepromWrite>
	waitUntilBitIsClear(SPMEN, SPMCSR);
     632:	27 b7       	in	r18, 0x37	; 55
	EEAR = (address & EEPROM_ADDRESS_MASK);
     634:	93 70       	andi	r25, 0x03	; 3
     636:	92 bd       	out	0x22, r25	; 34
     638:	81 bd       	out	0x21, r24	; 33
	EEDR = data;
     63a:	60 bd       	out	0x20, r22	; 32
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
     63c:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     63e:	f8 94       	cli
		setBit(EECR, EEMPE);
     640:	fa 9a       	sbi	0x1f, 2	; 31
		setBit(EECR, EEPE);
     642:	f9 9a       	sbi	0x1f, 1	; 31
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     644:	8f bf       	out	0x3f, r24	; 63
    __asm__ volatile ("" ::: "memory");
     646:	08 95       	ret

00000648 <eepromRead>:
 * Reads a byte from the specified address in the EEPROM
 * -------------------------------------------------------------------------- */

uint8 eepromRead(uint16 address)
{
	waitUntilBitIsClear(EECR, EEPE);
     648:	f9 99       	sbic	0x1f, 1	; 31
     64a:	fe cf       	rjmp	.-4      	; 0x648 <eepromRead>
	EEAR = (address & EEPROM_ADDRESS_MASK);
     64c:	93 70       	andi	r25, 0x03	; 3
     64e:	92 bd       	out	0x22, r25	; 34
     650:	81 bd       	out	0x21, r24	; 33
	setBit(EECR, EERE);
     652:	f8 9a       	sbi	0x1f, 0	; 31
	return EEDR;
     654:	80 b5       	in	r24, 0x20	; 32
}
     656:	08 95       	ret

00000658 <globalPullUpEnable>:
 * Enables the global pull-up
 * -------------------------------------------------------------------------- */

void globalPullUpEnable(void)
{
	clrBit(MCUCR, PUD);
     658:	85 b7       	in	r24, 0x35	; 53
     65a:	8f 7e       	andi	r24, 0xEF	; 239
     65c:	85 bf       	out	0x35, r24	; 53
     65e:	08 95       	ret

00000660 <pullUpDisable>:
 * Disables the global pull-up
 * -------------------------------------------------------------------------- */

void pullUpDisable(void)
{
	setBit(MCUCR, PUD);
     660:	85 b7       	in	r24, 0x35	; 53
     662:	80 61       	ori	r24, 0x10	; 16
     664:	85 bf       	out	0x35, r24	; 53
     666:	08 95       	ret

00000668 <int0Config>:

resultValue_t int0Config(portMode_t port, senseMode_t sense)
{
	uint8 aux8 = 0;

	switch(port){
     668:	82 30       	cpi	r24, 0x02	; 2
     66a:	79 f0       	breq	.+30     	; 0x68a <int0Config+0x22>
     66c:	30 f4       	brcc	.+12     	; 0x67a <int0Config+0x12>
     66e:	88 23       	and	r24, r24
     670:	49 f0       	breq	.+18     	; 0x684 <int0Config+0x1c>
     672:	81 30       	cpi	r24, 0x01	; 1
     674:	11 f5       	brne	.+68     	; 0x6ba <int0Config+0x52>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD2); setBit(DDRD, PD2);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD2); setBit(DDRD, PD2);	break;
     676:	5a 9a       	sbi	0x0b, 2	; 11
     678:	06 c0       	rjmp	.+12     	; 0x686 <int0Config+0x1e>

resultValue_t int0Config(portMode_t port, senseMode_t sense)
{
	uint8 aux8 = 0;

	switch(port){
     67a:	83 30       	cpi	r24, 0x03	; 3
     67c:	41 f0       	breq	.+16     	; 0x68e <int0Config+0x26>
     67e:	8f 3f       	cpi	r24, 0xFF	; 255
     680:	41 f0       	breq	.+16     	; 0x692 <int0Config+0x2a>
     682:	1b c0       	rjmp	.+54     	; 0x6ba <int0Config+0x52>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD2); setBit(DDRD, PD2);	break;
     684:	5a 98       	cbi	0x0b, 2	; 11
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD2); setBit(DDRD, PD2);	break;
     686:	52 9a       	sbi	0x0a, 2	; 10
     688:	04 c0       	rjmp	.+8      	; 0x692 <int0Config+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD2); clrBit(DDRD, PD2);	break;
     68a:	5a 98       	cbi	0x0b, 2	; 11
     68c:	01 c0       	rjmp	.+2      	; 0x690 <int0Config+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD2); clrBit(DDRD, PD2);	break;
     68e:	5a 9a       	sbi	0x0b, 2	; 11
     690:	52 98       	cbi	0x0a, 2	; 10
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}

	if(sense != SENSE_NO_CHANGE){
     692:	6f 3f       	cpi	r22, 0xFF	; 255
     694:	a1 f0       	breq	.+40     	; 0x6be <int0Config+0x56>
		aux8 = EICRA & ~(0x03 << ISC00);
     696:	80 91 69 00 	lds	r24, 0x0069
     69a:	8c 7f       	andi	r24, 0xFC	; 252
		switch(sense){
     69c:	61 30       	cpi	r22, 0x01	; 1
     69e:	39 f0       	breq	.+14     	; 0x6ae <int0Config+0x46>
     6a0:	48 f0       	brcs	.+18     	; 0x6b4 <int0Config+0x4c>
     6a2:	62 30       	cpi	r22, 0x02	; 2
     6a4:	31 f0       	breq	.+12     	; 0x6b2 <int0Config+0x4a>
     6a6:	63 30       	cpi	r22, 0x03	; 3
     6a8:	61 f4       	brne	.+24     	; 0x6c2 <int0Config+0x5a>
			case SENSE_LOW_LEVEL:		break;
			case SENSE_ANY_EDGE:		aux8 |= (0x01 << ISC00);			break;
			case SENSE_FALLING_EDGE:	aux8 |= (0x02 << ISC00);			break;
			case SENSE_RISING_EDGE:		aux8 |= (0x03 << ISC00);			break;
     6aa:	83 60       	ori	r24, 0x03	; 3
     6ac:	03 c0       	rjmp	.+6      	; 0x6b4 <int0Config+0x4c>

	if(sense != SENSE_NO_CHANGE){
		aux8 = EICRA & ~(0x03 << ISC00);
		switch(sense){
			case SENSE_LOW_LEVEL:		break;
			case SENSE_ANY_EDGE:		aux8 |= (0x01 << ISC00);			break;
     6ae:	81 60       	ori	r24, 0x01	; 1
     6b0:	01 c0       	rjmp	.+2      	; 0x6b4 <int0Config+0x4c>
			case SENSE_FALLING_EDGE:	aux8 |= (0x02 << ISC00);			break;
     6b2:	82 60       	ori	r24, 0x02	; 2
			case SENSE_RISING_EDGE:		aux8 |= (0x03 << ISC00);			break;
			case SENSE_NO_CHANGE:		break;
			default:					return RESULT_INT_SENSE_VALUE_UNSUPPORTED;	break;
		}
		EICRA = aux8;
     6b4:	80 93 69 00 	sts	0x0069, r24
     6b8:	02 c0       	rjmp	.+4      	; 0x6be <int0Config+0x56>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD2); setBit(DDRD, PD2);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD2); setBit(DDRD, PD2);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD2); clrBit(DDRD, PD2);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD2); clrBit(DDRD, PD2);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     6ba:	81 e0       	ldi	r24, 0x01	; 1
     6bc:	08 95       	ret
			default:					return RESULT_INT_SENSE_VALUE_UNSUPPORTED;	break;
		}
		EICRA = aux8;
	}

	return RESULT_OK;
     6be:	80 e0       	ldi	r24, 0x00	; 0
     6c0:	08 95       	ret
			case SENSE_LOW_LEVEL:		break;
			case SENSE_ANY_EDGE:		aux8 |= (0x01 << ISC00);			break;
			case SENSE_FALLING_EDGE:	aux8 |= (0x02 << ISC00);			break;
			case SENSE_RISING_EDGE:		aux8 |= (0x03 << ISC00);			break;
			case SENSE_NO_CHANGE:		break;
			default:					return RESULT_INT_SENSE_VALUE_UNSUPPORTED;	break;
     6c2:	82 e0       	ldi	r24, 0x02	; 2
		}
		EICRA = aux8;
	}

	return RESULT_OK;
}
     6c4:	08 95       	ret

000006c6 <int0ActivateInterrupt>:
 * Activates the external interrupt int0
 * -------------------------------------------------------------------------- */

void int0ActivateInterrupt(void)
{
	setBit(EIMSK, INT0);
     6c6:	e8 9a       	sbi	0x1d, 0	; 29
     6c8:	08 95       	ret

000006ca <int0DeactivateInterrupt>:
 * Deactivates the external interrupt int0
 * -------------------------------------------------------------------------- */

void int0DeactivateInterrupt(void)
{
	clrBit(EIMSK, INT0);
     6ca:	e8 98       	cbi	0x1d, 0	; 29
     6cc:	08 95       	ret

000006ce <int0ClearInterruptRequest>:
 * Clears the external interrupt int0 request
 * -------------------------------------------------------------------------- */

void int0ClearInterruptRequest(void)
{
	setBit(EIFR, INTF0);
     6ce:	e0 9a       	sbi	0x1c, 0	; 28
     6d0:	08 95       	ret

000006d2 <int1Config>:

resultValue_t int1Config(portMode_t port, senseMode_t sense)
{
	uint8 aux8 = 0;

	switch(port){
     6d2:	82 30       	cpi	r24, 0x02	; 2
     6d4:	79 f0       	breq	.+30     	; 0x6f4 <int1Config+0x22>
     6d6:	30 f4       	brcc	.+12     	; 0x6e4 <int1Config+0x12>
     6d8:	88 23       	and	r24, r24
     6da:	49 f0       	breq	.+18     	; 0x6ee <int1Config+0x1c>
     6dc:	81 30       	cpi	r24, 0x01	; 1
     6de:	11 f5       	brne	.+68     	; 0x724 <int1Config+0x52>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD3); setBit(DDRD, PD3);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD3); setBit(DDRD, PD3);	break;
     6e0:	5b 9a       	sbi	0x0b, 3	; 11
     6e2:	06 c0       	rjmp	.+12     	; 0x6f0 <int1Config+0x1e>

resultValue_t int1Config(portMode_t port, senseMode_t sense)
{
	uint8 aux8 = 0;

	switch(port){
     6e4:	83 30       	cpi	r24, 0x03	; 3
     6e6:	41 f0       	breq	.+16     	; 0x6f8 <int1Config+0x26>
     6e8:	8f 3f       	cpi	r24, 0xFF	; 255
     6ea:	41 f0       	breq	.+16     	; 0x6fc <int1Config+0x2a>
     6ec:	1b c0       	rjmp	.+54     	; 0x724 <int1Config+0x52>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD3); setBit(DDRD, PD3);	break;
     6ee:	5b 98       	cbi	0x0b, 3	; 11
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD3); setBit(DDRD, PD3);	break;
     6f0:	53 9a       	sbi	0x0a, 3	; 10
     6f2:	04 c0       	rjmp	.+8      	; 0x6fc <int1Config+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD3); clrBit(DDRD, PD3);	break;
     6f4:	5b 98       	cbi	0x0b, 3	; 11
     6f6:	01 c0       	rjmp	.+2      	; 0x6fa <int1Config+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD3); clrBit(DDRD, PD3);	break;
     6f8:	5b 9a       	sbi	0x0b, 3	; 11
     6fa:	53 98       	cbi	0x0a, 3	; 10
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}

	if(sense != SENSE_NO_CHANGE){
     6fc:	6f 3f       	cpi	r22, 0xFF	; 255
     6fe:	a1 f0       	breq	.+40     	; 0x728 <int1Config+0x56>
		aux8 = EICRA & ~(0x03 << ISC10);
     700:	80 91 69 00 	lds	r24, 0x0069
     704:	83 7f       	andi	r24, 0xF3	; 243
		switch(sense){
     706:	61 30       	cpi	r22, 0x01	; 1
     708:	39 f0       	breq	.+14     	; 0x718 <int1Config+0x46>
     70a:	48 f0       	brcs	.+18     	; 0x71e <int1Config+0x4c>
     70c:	62 30       	cpi	r22, 0x02	; 2
     70e:	31 f0       	breq	.+12     	; 0x71c <int1Config+0x4a>
     710:	63 30       	cpi	r22, 0x03	; 3
     712:	61 f4       	brne	.+24     	; 0x72c <int1Config+0x5a>
			case SENSE_LOW_LEVEL:		break;
			case SENSE_ANY_EDGE:		aux8 |= (0x01 << ISC10);			break;
			case SENSE_FALLING_EDGE:	aux8 |= (0x02 << ISC10);			break;
			case SENSE_RISING_EDGE:		aux8 |= (0x03 << ISC10);			break;
     714:	8c 60       	ori	r24, 0x0C	; 12
     716:	03 c0       	rjmp	.+6      	; 0x71e <int1Config+0x4c>

	if(sense != SENSE_NO_CHANGE){
		aux8 = EICRA & ~(0x03 << ISC10);
		switch(sense){
			case SENSE_LOW_LEVEL:		break;
			case SENSE_ANY_EDGE:		aux8 |= (0x01 << ISC10);			break;
     718:	84 60       	ori	r24, 0x04	; 4
     71a:	01 c0       	rjmp	.+2      	; 0x71e <int1Config+0x4c>
			case SENSE_FALLING_EDGE:	aux8 |= (0x02 << ISC10);			break;
     71c:	88 60       	ori	r24, 0x08	; 8
			case SENSE_RISING_EDGE:		aux8 |= (0x03 << ISC10);			break;
			case SENSE_NO_CHANGE:		break;
			default:					return RESULT_INT_SENSE_VALUE_UNSUPPORTED;	break;
		}
		EICRA = aux8;
     71e:	80 93 69 00 	sts	0x0069, r24
     722:	02 c0       	rjmp	.+4      	; 0x728 <int1Config+0x56>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD3); setBit(DDRD, PD3);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD3); setBit(DDRD, PD3);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD3); clrBit(DDRD, PD3);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD3); clrBit(DDRD, PD3);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     724:	81 e0       	ldi	r24, 0x01	; 1
     726:	08 95       	ret
			default:					return RESULT_INT_SENSE_VALUE_UNSUPPORTED;	break;
		}
		EICRA = aux8;
	}

	return RESULT_OK;
     728:	80 e0       	ldi	r24, 0x00	; 0
     72a:	08 95       	ret
			case SENSE_LOW_LEVEL:		break;
			case SENSE_ANY_EDGE:		aux8 |= (0x01 << ISC10);			break;
			case SENSE_FALLING_EDGE:	aux8 |= (0x02 << ISC10);			break;
			case SENSE_RISING_EDGE:		aux8 |= (0x03 << ISC10);			break;
			case SENSE_NO_CHANGE:		break;
			default:					return RESULT_INT_SENSE_VALUE_UNSUPPORTED;	break;
     72c:	82 e0       	ldi	r24, 0x02	; 2
		}
		EICRA = aux8;
	}

	return RESULT_OK;
}
     72e:	08 95       	ret

00000730 <int1ActivateInterrupt>:
 * Activates the external interrupt int1
 * -------------------------------------------------------------------------- */

void int1ActivateInterrupt(void)
{
	setBit(EIMSK, INT1);
     730:	e9 9a       	sbi	0x1d, 1	; 29
     732:	08 95       	ret

00000734 <int1DeactivateInterrupt>:
 * Deactivates the external interrupt int1
 * -------------------------------------------------------------------------- */

void int1DeactivateInterrupt(void)
{
	clrBit(EIMSK, INT1);
     734:	e9 98       	cbi	0x1d, 1	; 29
     736:	08 95       	ret

00000738 <int1ClearInterruptRequest>:
 * Clears the external interrupt int1 request
 * -------------------------------------------------------------------------- */

void int1ClearInterruptRequest(void)
{
	setBit(EIFR, INTF1);
     738:	e1 9a       	sbi	0x1c, 1	; 28
     73a:	08 95       	ret

0000073c <pcint7_0Enable>:
 * Enables the external interrupt pcint in port B
 * -------------------------------------------------------------------------- */

void pcint7_0Enable(void)
{
	setBit(PCICR, PCIE0);
     73c:	e8 e6       	ldi	r30, 0x68	; 104
     73e:	f0 e0       	ldi	r31, 0x00	; 0
     740:	80 81       	ld	r24, Z
     742:	81 60       	ori	r24, 0x01	; 1
     744:	80 83       	st	Z, r24
     746:	08 95       	ret

00000748 <pcint7_0Disable>:
 * Disables the external interrupt pcint in port B
 * -------------------------------------------------------------------------- */

void pcint7_0Disable(void)
{
	clrBit(PCICR, PCIE0);
     748:	e8 e6       	ldi	r30, 0x68	; 104
     74a:	f0 e0       	ldi	r31, 0x00	; 0
     74c:	80 81       	ld	r24, Z
     74e:	8e 7f       	andi	r24, 0xFE	; 254
     750:	80 83       	st	Z, r24
     752:	08 95       	ret

00000754 <pcint7_0ClearInterruptRequest>:
 * Disables the external interrupt pcint in port B
 * -------------------------------------------------------------------------- */

void pcint7_0ClearInterruptRequest(void)
{
	setBit(PCIFR, PCIF0);
     754:	d8 9a       	sbi	0x1b, 0	; 27
     756:	08 95       	ret

00000758 <pcint0ActivateInterrupt>:
 * Activates the external interrupt pcint0 and configures port mode in PB0
 * -------------------------------------------------------------------------- */

resultValue_t pcint0ActivateInterrupt(portMode_t port)
{
	switch(port){
     758:	82 30       	cpi	r24, 0x02	; 2
     75a:	79 f0       	breq	.+30     	; 0x77a <pcint0ActivateInterrupt+0x22>
     75c:	30 f4       	brcc	.+12     	; 0x76a <pcint0ActivateInterrupt+0x12>
     75e:	88 23       	and	r24, r24
     760:	49 f0       	breq	.+18     	; 0x774 <pcint0ActivateInterrupt+0x1c>
     762:	81 30       	cpi	r24, 0x01	; 1
     764:	a9 f4       	brne	.+42     	; 0x790 <pcint0ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB0); setBit(DDRB, PB0);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB0); setBit(DDRB, PB0);	break;
     766:	28 9a       	sbi	0x05, 0	; 5
     768:	06 c0       	rjmp	.+12     	; 0x776 <pcint0ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint0 and configures port mode in PB0
 * -------------------------------------------------------------------------- */

resultValue_t pcint0ActivateInterrupt(portMode_t port)
{
	switch(port){
     76a:	83 30       	cpi	r24, 0x03	; 3
     76c:	41 f0       	breq	.+16     	; 0x77e <pcint0ActivateInterrupt+0x26>
     76e:	8f 3f       	cpi	r24, 0xFF	; 255
     770:	41 f0       	breq	.+16     	; 0x782 <pcint0ActivateInterrupt+0x2a>
     772:	0e c0       	rjmp	.+28     	; 0x790 <pcint0ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB0); setBit(DDRB, PB0);	break;
     774:	28 98       	cbi	0x05, 0	; 5
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB0); setBit(DDRB, PB0);	break;
     776:	20 9a       	sbi	0x04, 0	; 4
     778:	04 c0       	rjmp	.+8      	; 0x782 <pcint0ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB0); clrBit(DDRB, PB0);	break;
     77a:	28 98       	cbi	0x05, 0	; 5
     77c:	01 c0       	rjmp	.+2      	; 0x780 <pcint0ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB0); clrBit(DDRB, PB0);	break;
     77e:	28 9a       	sbi	0x05, 0	; 5
     780:	20 98       	cbi	0x04, 0	; 4
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK0, PCINT0);
     782:	80 91 6b 00 	lds	r24, 0x006B
     786:	81 60       	ori	r24, 0x01	; 1
     788:	80 93 6b 00 	sts	0x006B, r24
	return RESULT_OK;
     78c:	80 e0       	ldi	r24, 0x00	; 0
     78e:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB0); setBit(DDRB, PB0);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB0); setBit(DDRB, PB0);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB0); clrBit(DDRB, PB0);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB0); clrBit(DDRB, PB0);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     790:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK0, PCINT0);
	return RESULT_OK;
}
     792:	08 95       	ret

00000794 <pcint0DeactivateInterrupt>:
 * Deactivates the external interrupt pcint0 in PB0
 * -------------------------------------------------------------------------- */

void pcint0DeactivateInterrupt(void)
{
	clrBit(PCMSK0, PCINT0);
     794:	eb e6       	ldi	r30, 0x6B	; 107
     796:	f0 e0       	ldi	r31, 0x00	; 0
     798:	80 81       	ld	r24, Z
     79a:	8e 7f       	andi	r24, 0xFE	; 254
     79c:	80 83       	st	Z, r24
     79e:	08 95       	ret

000007a0 <pcint1ActivateInterrupt>:
 * Activates the external interrupt pcint1 and configures port mode in PB1
 * -------------------------------------------------------------------------- */

resultValue_t pcint1ActivateInterrupt(portMode_t port)
{
	switch(port){
     7a0:	82 30       	cpi	r24, 0x02	; 2
     7a2:	79 f0       	breq	.+30     	; 0x7c2 <pcint1ActivateInterrupt+0x22>
     7a4:	30 f4       	brcc	.+12     	; 0x7b2 <pcint1ActivateInterrupt+0x12>
     7a6:	88 23       	and	r24, r24
     7a8:	49 f0       	breq	.+18     	; 0x7bc <pcint1ActivateInterrupt+0x1c>
     7aa:	81 30       	cpi	r24, 0x01	; 1
     7ac:	a9 f4       	brne	.+42     	; 0x7d8 <pcint1ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB1); setBit(DDRB, PB1);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB1); setBit(DDRB, PB1);	break;
     7ae:	29 9a       	sbi	0x05, 1	; 5
     7b0:	06 c0       	rjmp	.+12     	; 0x7be <pcint1ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint1 and configures port mode in PB1
 * -------------------------------------------------------------------------- */

resultValue_t pcint1ActivateInterrupt(portMode_t port)
{
	switch(port){
     7b2:	83 30       	cpi	r24, 0x03	; 3
     7b4:	41 f0       	breq	.+16     	; 0x7c6 <pcint1ActivateInterrupt+0x26>
     7b6:	8f 3f       	cpi	r24, 0xFF	; 255
     7b8:	41 f0       	breq	.+16     	; 0x7ca <pcint1ActivateInterrupt+0x2a>
     7ba:	0e c0       	rjmp	.+28     	; 0x7d8 <pcint1ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB1); setBit(DDRB, PB1);	break;
     7bc:	29 98       	cbi	0x05, 1	; 5
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB1); setBit(DDRB, PB1);	break;
     7be:	21 9a       	sbi	0x04, 1	; 4
     7c0:	04 c0       	rjmp	.+8      	; 0x7ca <pcint1ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB1); clrBit(DDRB, PB1);	break;
     7c2:	29 98       	cbi	0x05, 1	; 5
     7c4:	01 c0       	rjmp	.+2      	; 0x7c8 <pcint1ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB1); clrBit(DDRB, PB1);	break;
     7c6:	29 9a       	sbi	0x05, 1	; 5
     7c8:	21 98       	cbi	0x04, 1	; 4
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK0, PCINT1);
     7ca:	80 91 6b 00 	lds	r24, 0x006B
     7ce:	82 60       	ori	r24, 0x02	; 2
     7d0:	80 93 6b 00 	sts	0x006B, r24
	return RESULT_OK;
     7d4:	80 e0       	ldi	r24, 0x00	; 0
     7d6:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB1); setBit(DDRB, PB1);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB1); setBit(DDRB, PB1);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB1); clrBit(DDRB, PB1);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB1); clrBit(DDRB, PB1);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     7d8:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK0, PCINT1);
	return RESULT_OK;
}
     7da:	08 95       	ret

000007dc <pcint1DeactivateInterrupt>:
 * Deactivates the external interrupt pcint1 in PB1
 * -------------------------------------------------------------------------- */

void pcint1DeactivateInterrupt(void)
{
	clrBit(PCMSK0, PCINT1);
     7dc:	eb e6       	ldi	r30, 0x6B	; 107
     7de:	f0 e0       	ldi	r31, 0x00	; 0
     7e0:	80 81       	ld	r24, Z
     7e2:	8d 7f       	andi	r24, 0xFD	; 253
     7e4:	80 83       	st	Z, r24
     7e6:	08 95       	ret

000007e8 <pcint2ActivateInterrupt>:
 * Activates the external interrupt pcint2 and configures port mode in PB2
 * -------------------------------------------------------------------------- */

resultValue_t pcint2ActivateInterrupt(portMode_t port)
{
	switch(port){
     7e8:	82 30       	cpi	r24, 0x02	; 2
     7ea:	79 f0       	breq	.+30     	; 0x80a <pcint2ActivateInterrupt+0x22>
     7ec:	30 f4       	brcc	.+12     	; 0x7fa <pcint2ActivateInterrupt+0x12>
     7ee:	88 23       	and	r24, r24
     7f0:	49 f0       	breq	.+18     	; 0x804 <pcint2ActivateInterrupt+0x1c>
     7f2:	81 30       	cpi	r24, 0x01	; 1
     7f4:	a9 f4       	brne	.+42     	; 0x820 <pcint2ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB2); setBit(DDRB, PB2);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB2); setBit(DDRB, PB2);	break;
     7f6:	2a 9a       	sbi	0x05, 2	; 5
     7f8:	06 c0       	rjmp	.+12     	; 0x806 <pcint2ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint2 and configures port mode in PB2
 * -------------------------------------------------------------------------- */

resultValue_t pcint2ActivateInterrupt(portMode_t port)
{
	switch(port){
     7fa:	83 30       	cpi	r24, 0x03	; 3
     7fc:	41 f0       	breq	.+16     	; 0x80e <pcint2ActivateInterrupt+0x26>
     7fe:	8f 3f       	cpi	r24, 0xFF	; 255
     800:	41 f0       	breq	.+16     	; 0x812 <pcint2ActivateInterrupt+0x2a>
     802:	0e c0       	rjmp	.+28     	; 0x820 <pcint2ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB2); setBit(DDRB, PB2);	break;
     804:	2a 98       	cbi	0x05, 2	; 5
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB2); setBit(DDRB, PB2);	break;
     806:	22 9a       	sbi	0x04, 2	; 4
     808:	04 c0       	rjmp	.+8      	; 0x812 <pcint2ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB2); clrBit(DDRB, PB2);	break;
     80a:	2a 98       	cbi	0x05, 2	; 5
     80c:	01 c0       	rjmp	.+2      	; 0x810 <pcint2ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB2); clrBit(DDRB, PB2);	break;
     80e:	2a 9a       	sbi	0x05, 2	; 5
     810:	22 98       	cbi	0x04, 2	; 4
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK0, PCINT2);
     812:	80 91 6b 00 	lds	r24, 0x006B
     816:	84 60       	ori	r24, 0x04	; 4
     818:	80 93 6b 00 	sts	0x006B, r24
	return RESULT_OK;
     81c:	80 e0       	ldi	r24, 0x00	; 0
     81e:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB2); setBit(DDRB, PB2);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB2); setBit(DDRB, PB2);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB2); clrBit(DDRB, PB2);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB2); clrBit(DDRB, PB2);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     820:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK0, PCINT2);
	return RESULT_OK;
}
     822:	08 95       	ret

00000824 <pcint2DeactivateInterrupt>:
 * Deactivates the external interrupt pcint2 in PB2
 * -------------------------------------------------------------------------- */

void pcint2DeactivateInterrupt(void)
{
	clrBit(PCMSK0, PCINT2);
     824:	eb e6       	ldi	r30, 0x6B	; 107
     826:	f0 e0       	ldi	r31, 0x00	; 0
     828:	80 81       	ld	r24, Z
     82a:	8b 7f       	andi	r24, 0xFB	; 251
     82c:	80 83       	st	Z, r24
     82e:	08 95       	ret

00000830 <pcint3ActivateInterrupt>:
 * Activates the external interrupt pcint3 and configures port mode in PB3
 * -------------------------------------------------------------------------- */

resultValue_t pcint3ActivateInterrupt(portMode_t port)
{
	switch(port){
     830:	82 30       	cpi	r24, 0x02	; 2
     832:	79 f0       	breq	.+30     	; 0x852 <pcint3ActivateInterrupt+0x22>
     834:	30 f4       	brcc	.+12     	; 0x842 <pcint3ActivateInterrupt+0x12>
     836:	88 23       	and	r24, r24
     838:	49 f0       	breq	.+18     	; 0x84c <pcint3ActivateInterrupt+0x1c>
     83a:	81 30       	cpi	r24, 0x01	; 1
     83c:	a9 f4       	brne	.+42     	; 0x868 <pcint3ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB3); setBit(DDRB, PB3);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB3); setBit(DDRB, PB3);	break;
     83e:	2b 9a       	sbi	0x05, 3	; 5
     840:	06 c0       	rjmp	.+12     	; 0x84e <pcint3ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint3 and configures port mode in PB3
 * -------------------------------------------------------------------------- */

resultValue_t pcint3ActivateInterrupt(portMode_t port)
{
	switch(port){
     842:	83 30       	cpi	r24, 0x03	; 3
     844:	41 f0       	breq	.+16     	; 0x856 <pcint3ActivateInterrupt+0x26>
     846:	8f 3f       	cpi	r24, 0xFF	; 255
     848:	41 f0       	breq	.+16     	; 0x85a <pcint3ActivateInterrupt+0x2a>
     84a:	0e c0       	rjmp	.+28     	; 0x868 <pcint3ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB3); setBit(DDRB, PB3);	break;
     84c:	2b 98       	cbi	0x05, 3	; 5
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB3); setBit(DDRB, PB3);	break;
     84e:	23 9a       	sbi	0x04, 3	; 4
     850:	04 c0       	rjmp	.+8      	; 0x85a <pcint3ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB3); clrBit(DDRB, PB3);	break;
     852:	2b 98       	cbi	0x05, 3	; 5
     854:	01 c0       	rjmp	.+2      	; 0x858 <pcint3ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB3); clrBit(DDRB, PB3);	break;
     856:	2b 9a       	sbi	0x05, 3	; 5
     858:	23 98       	cbi	0x04, 3	; 4
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK0, PCINT3);
     85a:	80 91 6b 00 	lds	r24, 0x006B
     85e:	88 60       	ori	r24, 0x08	; 8
     860:	80 93 6b 00 	sts	0x006B, r24
	return RESULT_OK;
     864:	80 e0       	ldi	r24, 0x00	; 0
     866:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB3); setBit(DDRB, PB3);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB3); setBit(DDRB, PB3);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB3); clrBit(DDRB, PB3);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB3); clrBit(DDRB, PB3);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     868:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK0, PCINT3);
	return RESULT_OK;
}
     86a:	08 95       	ret

0000086c <pcint3DeactivateInterrupt>:
 * Deactivates the external interrupt pcint3 in PB3
 * -------------------------------------------------------------------------- */

void pcint3DeactivateInterrupt(void)
{
	clrBit(PCMSK0, PCINT3);
     86c:	eb e6       	ldi	r30, 0x6B	; 107
     86e:	f0 e0       	ldi	r31, 0x00	; 0
     870:	80 81       	ld	r24, Z
     872:	87 7f       	andi	r24, 0xF7	; 247
     874:	80 83       	st	Z, r24
     876:	08 95       	ret

00000878 <pcint4ActivateInterrupt>:
 * Activates the external interrupt pcint4 and configures port mode in PB4
 * -------------------------------------------------------------------------- */

resultValue_t pcint4ActivateInterrupt(portMode_t port)
{
	switch(port){
     878:	82 30       	cpi	r24, 0x02	; 2
     87a:	79 f0       	breq	.+30     	; 0x89a <pcint4ActivateInterrupt+0x22>
     87c:	30 f4       	brcc	.+12     	; 0x88a <pcint4ActivateInterrupt+0x12>
     87e:	88 23       	and	r24, r24
     880:	49 f0       	breq	.+18     	; 0x894 <pcint4ActivateInterrupt+0x1c>
     882:	81 30       	cpi	r24, 0x01	; 1
     884:	a9 f4       	brne	.+42     	; 0x8b0 <pcint4ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB4); setBit(DDRB, PB4);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB4); setBit(DDRB, PB4);	break;
     886:	2c 9a       	sbi	0x05, 4	; 5
     888:	06 c0       	rjmp	.+12     	; 0x896 <pcint4ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint4 and configures port mode in PB4
 * -------------------------------------------------------------------------- */

resultValue_t pcint4ActivateInterrupt(portMode_t port)
{
	switch(port){
     88a:	83 30       	cpi	r24, 0x03	; 3
     88c:	41 f0       	breq	.+16     	; 0x89e <pcint4ActivateInterrupt+0x26>
     88e:	8f 3f       	cpi	r24, 0xFF	; 255
     890:	41 f0       	breq	.+16     	; 0x8a2 <pcint4ActivateInterrupt+0x2a>
     892:	0e c0       	rjmp	.+28     	; 0x8b0 <pcint4ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB4); setBit(DDRB, PB4);	break;
     894:	2c 98       	cbi	0x05, 4	; 5
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB4); setBit(DDRB, PB4);	break;
     896:	24 9a       	sbi	0x04, 4	; 4
     898:	04 c0       	rjmp	.+8      	; 0x8a2 <pcint4ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB4); clrBit(DDRB, PB4);	break;
     89a:	2c 98       	cbi	0x05, 4	; 5
     89c:	01 c0       	rjmp	.+2      	; 0x8a0 <pcint4ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB4); clrBit(DDRB, PB4);	break;
     89e:	2c 9a       	sbi	0x05, 4	; 5
     8a0:	24 98       	cbi	0x04, 4	; 4
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK0, PCINT4);
     8a2:	80 91 6b 00 	lds	r24, 0x006B
     8a6:	80 61       	ori	r24, 0x10	; 16
     8a8:	80 93 6b 00 	sts	0x006B, r24
	return RESULT_OK;
     8ac:	80 e0       	ldi	r24, 0x00	; 0
     8ae:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB4); setBit(DDRB, PB4);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB4); setBit(DDRB, PB4);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB4); clrBit(DDRB, PB4);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB4); clrBit(DDRB, PB4);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     8b0:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK0, PCINT4);
	return RESULT_OK;
}
     8b2:	08 95       	ret

000008b4 <pcint4DeactivateInterrupt>:
 * Deactivates the external interrupt pcint4 in PB4
 * -------------------------------------------------------------------------- */

void pcint4DeactivateInterrupt(void)
{
	clrBit(PCMSK0, PCINT4);
     8b4:	eb e6       	ldi	r30, 0x6B	; 107
     8b6:	f0 e0       	ldi	r31, 0x00	; 0
     8b8:	80 81       	ld	r24, Z
     8ba:	8f 7e       	andi	r24, 0xEF	; 239
     8bc:	80 83       	st	Z, r24
     8be:	08 95       	ret

000008c0 <pcint5ActivateInterrupt>:
 * Activates the external interrupt pcint5 and configures port mode in PB5
 * -------------------------------------------------------------------------- */

resultValue_t pcint5ActivateInterrupt(portMode_t port)
{
	switch(port){
     8c0:	82 30       	cpi	r24, 0x02	; 2
     8c2:	79 f0       	breq	.+30     	; 0x8e2 <pcint5ActivateInterrupt+0x22>
     8c4:	30 f4       	brcc	.+12     	; 0x8d2 <pcint5ActivateInterrupt+0x12>
     8c6:	88 23       	and	r24, r24
     8c8:	49 f0       	breq	.+18     	; 0x8dc <pcint5ActivateInterrupt+0x1c>
     8ca:	81 30       	cpi	r24, 0x01	; 1
     8cc:	a9 f4       	brne	.+42     	; 0x8f8 <pcint5ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB5); setBit(DDRB, PB5);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB5); setBit(DDRB, PB5);	break;
     8ce:	2d 9a       	sbi	0x05, 5	; 5
     8d0:	06 c0       	rjmp	.+12     	; 0x8de <pcint5ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint5 and configures port mode in PB5
 * -------------------------------------------------------------------------- */

resultValue_t pcint5ActivateInterrupt(portMode_t port)
{
	switch(port){
     8d2:	83 30       	cpi	r24, 0x03	; 3
     8d4:	41 f0       	breq	.+16     	; 0x8e6 <pcint5ActivateInterrupt+0x26>
     8d6:	8f 3f       	cpi	r24, 0xFF	; 255
     8d8:	41 f0       	breq	.+16     	; 0x8ea <pcint5ActivateInterrupt+0x2a>
     8da:	0e c0       	rjmp	.+28     	; 0x8f8 <pcint5ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB5); setBit(DDRB, PB5);	break;
     8dc:	2d 98       	cbi	0x05, 5	; 5
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB5); setBit(DDRB, PB5);	break;
     8de:	25 9a       	sbi	0x04, 5	; 4
     8e0:	04 c0       	rjmp	.+8      	; 0x8ea <pcint5ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB5); clrBit(DDRB, PB5);	break;
     8e2:	2d 98       	cbi	0x05, 5	; 5
     8e4:	01 c0       	rjmp	.+2      	; 0x8e8 <pcint5ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB5); clrBit(DDRB, PB5);	break;
     8e6:	2d 9a       	sbi	0x05, 5	; 5
     8e8:	25 98       	cbi	0x04, 5	; 4
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK0, PCINT5);
     8ea:	80 91 6b 00 	lds	r24, 0x006B
     8ee:	80 62       	ori	r24, 0x20	; 32
     8f0:	80 93 6b 00 	sts	0x006B, r24
	return RESULT_OK;
     8f4:	80 e0       	ldi	r24, 0x00	; 0
     8f6:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB5); setBit(DDRB, PB5);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB5); setBit(DDRB, PB5);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB5); clrBit(DDRB, PB5);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB5); clrBit(DDRB, PB5);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     8f8:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK0, PCINT5);
	return RESULT_OK;
}
     8fa:	08 95       	ret

000008fc <pcint5DeactivateInterrupt>:
 * Deactivates the external interrupt pcint5 in PB5
 * -------------------------------------------------------------------------- */

void pcint5DeactivateInterrupt(void)
{
	clrBit(PCMSK0, PCINT5);
     8fc:	eb e6       	ldi	r30, 0x6B	; 107
     8fe:	f0 e0       	ldi	r31, 0x00	; 0
     900:	80 81       	ld	r24, Z
     902:	8f 7d       	andi	r24, 0xDF	; 223
     904:	80 83       	st	Z, r24
     906:	08 95       	ret

00000908 <pcint6ActivateInterrupt>:
 * Activates the external interrupt pcint6 and configures port mode in PB6
 * -------------------------------------------------------------------------- */

resultValue_t pcint6ActivateInterrupt(portMode_t port)
{
	switch(port){
     908:	82 30       	cpi	r24, 0x02	; 2
     90a:	79 f0       	breq	.+30     	; 0x92a <pcint6ActivateInterrupt+0x22>
     90c:	30 f4       	brcc	.+12     	; 0x91a <pcint6ActivateInterrupt+0x12>
     90e:	88 23       	and	r24, r24
     910:	49 f0       	breq	.+18     	; 0x924 <pcint6ActivateInterrupt+0x1c>
     912:	81 30       	cpi	r24, 0x01	; 1
     914:	a9 f4       	brne	.+42     	; 0x940 <pcint6ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB6); setBit(DDRB, PB6);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB6); setBit(DDRB, PB6);	break;
     916:	2e 9a       	sbi	0x05, 6	; 5
     918:	06 c0       	rjmp	.+12     	; 0x926 <pcint6ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint6 and configures port mode in PB6
 * -------------------------------------------------------------------------- */

resultValue_t pcint6ActivateInterrupt(portMode_t port)
{
	switch(port){
     91a:	83 30       	cpi	r24, 0x03	; 3
     91c:	41 f0       	breq	.+16     	; 0x92e <pcint6ActivateInterrupt+0x26>
     91e:	8f 3f       	cpi	r24, 0xFF	; 255
     920:	41 f0       	breq	.+16     	; 0x932 <pcint6ActivateInterrupt+0x2a>
     922:	0e c0       	rjmp	.+28     	; 0x940 <pcint6ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB6); setBit(DDRB, PB6);	break;
     924:	2e 98       	cbi	0x05, 6	; 5
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB6); setBit(DDRB, PB6);	break;
     926:	26 9a       	sbi	0x04, 6	; 4
     928:	04 c0       	rjmp	.+8      	; 0x932 <pcint6ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB6); clrBit(DDRB, PB6);	break;
     92a:	2e 98       	cbi	0x05, 6	; 5
     92c:	01 c0       	rjmp	.+2      	; 0x930 <pcint6ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB6); clrBit(DDRB, PB6);	break;
     92e:	2e 9a       	sbi	0x05, 6	; 5
     930:	26 98       	cbi	0x04, 6	; 4
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK0, PCINT6);
     932:	80 91 6b 00 	lds	r24, 0x006B
     936:	80 64       	ori	r24, 0x40	; 64
     938:	80 93 6b 00 	sts	0x006B, r24
	return RESULT_OK;
     93c:	80 e0       	ldi	r24, 0x00	; 0
     93e:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB6); setBit(DDRB, PB6);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB6); setBit(DDRB, PB6);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB6); clrBit(DDRB, PB6);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB6); clrBit(DDRB, PB6);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     940:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK0, PCINT6);
	return RESULT_OK;
}
     942:	08 95       	ret

00000944 <pcint6DeactivateInterrupt>:
 * Deactivates the external interrupt pcint6 in PB6
 * -------------------------------------------------------------------------- */

void pcint6DeactivateInterrupt(void)
{
	clrBit(PCMSK0, PCINT6);
     944:	eb e6       	ldi	r30, 0x6B	; 107
     946:	f0 e0       	ldi	r31, 0x00	; 0
     948:	80 81       	ld	r24, Z
     94a:	8f 7b       	andi	r24, 0xBF	; 191
     94c:	80 83       	st	Z, r24
     94e:	08 95       	ret

00000950 <pcint7ActivateInterrupt>:
 * Activates the external interrupt pcint7 and configures port mode in PB7
 * -------------------------------------------------------------------------- */

resultValue_t pcint7ActivateInterrupt(portMode_t port)
{
	switch(port){
     950:	82 30       	cpi	r24, 0x02	; 2
     952:	79 f0       	breq	.+30     	; 0x972 <pcint7ActivateInterrupt+0x22>
     954:	30 f4       	brcc	.+12     	; 0x962 <pcint7ActivateInterrupt+0x12>
     956:	88 23       	and	r24, r24
     958:	49 f0       	breq	.+18     	; 0x96c <pcint7ActivateInterrupt+0x1c>
     95a:	81 30       	cpi	r24, 0x01	; 1
     95c:	a9 f4       	brne	.+42     	; 0x988 <pcint7ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB7); setBit(DDRB, PB7);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB7); setBit(DDRB, PB7);	break;
     95e:	2f 9a       	sbi	0x05, 7	; 5
     960:	06 c0       	rjmp	.+12     	; 0x96e <pcint7ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint7 and configures port mode in PB7
 * -------------------------------------------------------------------------- */

resultValue_t pcint7ActivateInterrupt(portMode_t port)
{
	switch(port){
     962:	83 30       	cpi	r24, 0x03	; 3
     964:	41 f0       	breq	.+16     	; 0x976 <pcint7ActivateInterrupt+0x26>
     966:	8f 3f       	cpi	r24, 0xFF	; 255
     968:	41 f0       	breq	.+16     	; 0x97a <pcint7ActivateInterrupt+0x2a>
     96a:	0e c0       	rjmp	.+28     	; 0x988 <pcint7ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB7); setBit(DDRB, PB7);	break;
     96c:	2f 98       	cbi	0x05, 7	; 5
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB7); setBit(DDRB, PB7);	break;
     96e:	27 9a       	sbi	0x04, 7	; 4
     970:	04 c0       	rjmp	.+8      	; 0x97a <pcint7ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB7); clrBit(DDRB, PB7);	break;
     972:	2f 98       	cbi	0x05, 7	; 5
     974:	01 c0       	rjmp	.+2      	; 0x978 <pcint7ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB7); clrBit(DDRB, PB7);	break;
     976:	2f 9a       	sbi	0x05, 7	; 5
     978:	27 98       	cbi	0x04, 7	; 4
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK0, PCINT7);
     97a:	80 91 6b 00 	lds	r24, 0x006B
     97e:	80 68       	ori	r24, 0x80	; 128
     980:	80 93 6b 00 	sts	0x006B, r24
	return RESULT_OK;
     984:	80 e0       	ldi	r24, 0x00	; 0
     986:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB7); setBit(DDRB, PB7);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB7); setBit(DDRB, PB7);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB7); clrBit(DDRB, PB7);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB7); clrBit(DDRB, PB7);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     988:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK0, PCINT7);
	return RESULT_OK;
}
     98a:	08 95       	ret

0000098c <pcint7DeactivateInterrupt>:
 * Deactivates the external interrupt pcint7 in PB7
 * -------------------------------------------------------------------------- */

void pcint7DeactivateInterrupt(void)
{
	clrBit(PCMSK0, PCINT7);
     98c:	eb e6       	ldi	r30, 0x6B	; 107
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	80 81       	ld	r24, Z
     992:	8f 77       	andi	r24, 0x7F	; 127
     994:	80 83       	st	Z, r24
     996:	08 95       	ret

00000998 <pcint14_8Enable>:
 * Enables the external interrupt pcint in port C
 * -------------------------------------------------------------------------- */

void pcint14_8Enable(void)
{
	setBit(PCICR, PCIE1);
     998:	e8 e6       	ldi	r30, 0x68	; 104
     99a:	f0 e0       	ldi	r31, 0x00	; 0
     99c:	80 81       	ld	r24, Z
     99e:	82 60       	ori	r24, 0x02	; 2
     9a0:	80 83       	st	Z, r24
     9a2:	08 95       	ret

000009a4 <pcint14_8Disable>:
 * Disables the external interrupt pcint in port C
 * -------------------------------------------------------------------------- */

void pcint14_8Disable(void)
{
	clrBit(PCICR, PCIE1);
     9a4:	e8 e6       	ldi	r30, 0x68	; 104
     9a6:	f0 e0       	ldi	r31, 0x00	; 0
     9a8:	80 81       	ld	r24, Z
     9aa:	8d 7f       	andi	r24, 0xFD	; 253
     9ac:	80 83       	st	Z, r24
     9ae:	08 95       	ret

000009b0 <pcint14_8ClearInterruptRequest>:
 * Disables the external interrupt pcint in port C
 * -------------------------------------------------------------------------- */

void pcint14_8ClearInterruptRequest(void)
{
	setBit(PCIFR, PCIF1);
     9b0:	d9 9a       	sbi	0x1b, 1	; 27
     9b2:	08 95       	ret

000009b4 <pcint8ActivateInterrupt>:
 * Activates the external interrupt pcint8 and configures port mode in PC0
 * -------------------------------------------------------------------------- */

resultValue_t pcint8ActivateInterrupt(portMode_t port)
{
	switch(port){
     9b4:	82 30       	cpi	r24, 0x02	; 2
     9b6:	79 f0       	breq	.+30     	; 0x9d6 <pcint8ActivateInterrupt+0x22>
     9b8:	30 f4       	brcc	.+12     	; 0x9c6 <pcint8ActivateInterrupt+0x12>
     9ba:	88 23       	and	r24, r24
     9bc:	49 f0       	breq	.+18     	; 0x9d0 <pcint8ActivateInterrupt+0x1c>
     9be:	81 30       	cpi	r24, 0x01	; 1
     9c0:	a9 f4       	brne	.+42     	; 0x9ec <pcint8ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC0); setBit(DDRC, PC0);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC0); setBit(DDRC, PC0);	break;
     9c2:	40 9a       	sbi	0x08, 0	; 8
     9c4:	06 c0       	rjmp	.+12     	; 0x9d2 <pcint8ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint8 and configures port mode in PC0
 * -------------------------------------------------------------------------- */

resultValue_t pcint8ActivateInterrupt(portMode_t port)
{
	switch(port){
     9c6:	83 30       	cpi	r24, 0x03	; 3
     9c8:	41 f0       	breq	.+16     	; 0x9da <pcint8ActivateInterrupt+0x26>
     9ca:	8f 3f       	cpi	r24, 0xFF	; 255
     9cc:	41 f0       	breq	.+16     	; 0x9de <pcint8ActivateInterrupt+0x2a>
     9ce:	0e c0       	rjmp	.+28     	; 0x9ec <pcint8ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC0); setBit(DDRC, PC0);	break;
     9d0:	40 98       	cbi	0x08, 0	; 8
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC0); setBit(DDRC, PC0);	break;
     9d2:	38 9a       	sbi	0x07, 0	; 7
     9d4:	04 c0       	rjmp	.+8      	; 0x9de <pcint8ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTC, PC0); clrBit(DDRC, PC0);	break;
     9d6:	40 98       	cbi	0x08, 0	; 8
     9d8:	01 c0       	rjmp	.+2      	; 0x9dc <pcint8ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTC, PC0); clrBit(DDRC, PC0);	break;
     9da:	40 9a       	sbi	0x08, 0	; 8
     9dc:	38 98       	cbi	0x07, 0	; 7
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK1, PCINT8);
     9de:	80 91 6c 00 	lds	r24, 0x006C
     9e2:	81 60       	ori	r24, 0x01	; 1
     9e4:	80 93 6c 00 	sts	0x006C, r24
	return RESULT_OK;
     9e8:	80 e0       	ldi	r24, 0x00	; 0
     9ea:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC0); setBit(DDRC, PC0);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC0); setBit(DDRC, PC0);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTC, PC0); clrBit(DDRC, PC0);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTC, PC0); clrBit(DDRC, PC0);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     9ec:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK1, PCINT8);
	return RESULT_OK;
}
     9ee:	08 95       	ret

000009f0 <pcint8DeactivateInterrupt>:
 * Deactivates the external interrupt pcint8 in PC0
 * -------------------------------------------------------------------------- */

void pcint8DeactivateInterrupt(void)
{
	clrBit(PCMSK1, PCINT8);
     9f0:	ec e6       	ldi	r30, 0x6C	; 108
     9f2:	f0 e0       	ldi	r31, 0x00	; 0
     9f4:	80 81       	ld	r24, Z
     9f6:	8e 7f       	andi	r24, 0xFE	; 254
     9f8:	80 83       	st	Z, r24
     9fa:	08 95       	ret

000009fc <pcint9ActivateInterrupt>:
 * Activates the external interrupt pcint9 and configures port mode in PC1
 * -------------------------------------------------------------------------- */

resultValue_t pcint9ActivateInterrupt(portMode_t port)
{
	switch(port){
     9fc:	82 30       	cpi	r24, 0x02	; 2
     9fe:	79 f0       	breq	.+30     	; 0xa1e <pcint9ActivateInterrupt+0x22>
     a00:	30 f4       	brcc	.+12     	; 0xa0e <pcint9ActivateInterrupt+0x12>
     a02:	88 23       	and	r24, r24
     a04:	49 f0       	breq	.+18     	; 0xa18 <pcint9ActivateInterrupt+0x1c>
     a06:	81 30       	cpi	r24, 0x01	; 1
     a08:	a9 f4       	brne	.+42     	; 0xa34 <pcint9ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC1); setBit(DDRC, PC1);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC1); setBit(DDRC, PC1);	break;
     a0a:	41 9a       	sbi	0x08, 1	; 8
     a0c:	06 c0       	rjmp	.+12     	; 0xa1a <pcint9ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint9 and configures port mode in PC1
 * -------------------------------------------------------------------------- */

resultValue_t pcint9ActivateInterrupt(portMode_t port)
{
	switch(port){
     a0e:	83 30       	cpi	r24, 0x03	; 3
     a10:	41 f0       	breq	.+16     	; 0xa22 <pcint9ActivateInterrupt+0x26>
     a12:	8f 3f       	cpi	r24, 0xFF	; 255
     a14:	41 f0       	breq	.+16     	; 0xa26 <pcint9ActivateInterrupt+0x2a>
     a16:	0e c0       	rjmp	.+28     	; 0xa34 <pcint9ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC1); setBit(DDRC, PC1);	break;
     a18:	41 98       	cbi	0x08, 1	; 8
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC1); setBit(DDRC, PC1);	break;
     a1a:	39 9a       	sbi	0x07, 1	; 7
     a1c:	04 c0       	rjmp	.+8      	; 0xa26 <pcint9ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTC, PC1); clrBit(DDRC, PC1);	break;
     a1e:	41 98       	cbi	0x08, 1	; 8
     a20:	01 c0       	rjmp	.+2      	; 0xa24 <pcint9ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTC, PC1); clrBit(DDRC, PC1);	break;
     a22:	41 9a       	sbi	0x08, 1	; 8
     a24:	39 98       	cbi	0x07, 1	; 7
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK1, PCINT9);
     a26:	80 91 6c 00 	lds	r24, 0x006C
     a2a:	82 60       	ori	r24, 0x02	; 2
     a2c:	80 93 6c 00 	sts	0x006C, r24
	return RESULT_OK;
     a30:	80 e0       	ldi	r24, 0x00	; 0
     a32:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC1); setBit(DDRC, PC1);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC1); setBit(DDRC, PC1);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTC, PC1); clrBit(DDRC, PC1);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTC, PC1); clrBit(DDRC, PC1);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     a34:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK1, PCINT9);
	return RESULT_OK;
}
     a36:	08 95       	ret

00000a38 <pcint9DeactivateInterrupt>:
 * Deactivates the external interrupt pcint9 in PC1
 * -------------------------------------------------------------------------- */

void pcint9DeactivateInterrupt(void)
{
	clrBit(PCMSK1, PCINT9);
     a38:	ec e6       	ldi	r30, 0x6C	; 108
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	80 81       	ld	r24, Z
     a3e:	8d 7f       	andi	r24, 0xFD	; 253
     a40:	80 83       	st	Z, r24
     a42:	08 95       	ret

00000a44 <pcint10ActivateInterrupt>:
 * Activates the external interrupt pcint10 and configures port mode in PC2
 * -------------------------------------------------------------------------- */

resultValue_t pcint10ActivateInterrupt(portMode_t port)
{
	switch(port){
     a44:	82 30       	cpi	r24, 0x02	; 2
     a46:	79 f0       	breq	.+30     	; 0xa66 <pcint10ActivateInterrupt+0x22>
     a48:	30 f4       	brcc	.+12     	; 0xa56 <pcint10ActivateInterrupt+0x12>
     a4a:	88 23       	and	r24, r24
     a4c:	49 f0       	breq	.+18     	; 0xa60 <pcint10ActivateInterrupt+0x1c>
     a4e:	81 30       	cpi	r24, 0x01	; 1
     a50:	a9 f4       	brne	.+42     	; 0xa7c <pcint10ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC2); setBit(DDRC, PC2);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC2); setBit(DDRC, PC2);	break;
     a52:	42 9a       	sbi	0x08, 2	; 8
     a54:	06 c0       	rjmp	.+12     	; 0xa62 <pcint10ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint10 and configures port mode in PC2
 * -------------------------------------------------------------------------- */

resultValue_t pcint10ActivateInterrupt(portMode_t port)
{
	switch(port){
     a56:	83 30       	cpi	r24, 0x03	; 3
     a58:	41 f0       	breq	.+16     	; 0xa6a <pcint10ActivateInterrupt+0x26>
     a5a:	8f 3f       	cpi	r24, 0xFF	; 255
     a5c:	41 f0       	breq	.+16     	; 0xa6e <pcint10ActivateInterrupt+0x2a>
     a5e:	0e c0       	rjmp	.+28     	; 0xa7c <pcint10ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC2); setBit(DDRC, PC2);	break;
     a60:	42 98       	cbi	0x08, 2	; 8
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC2); setBit(DDRC, PC2);	break;
     a62:	3a 9a       	sbi	0x07, 2	; 7
     a64:	04 c0       	rjmp	.+8      	; 0xa6e <pcint10ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTC, PC2); clrBit(DDRC, PC2);	break;
     a66:	42 98       	cbi	0x08, 2	; 8
     a68:	01 c0       	rjmp	.+2      	; 0xa6c <pcint10ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTC, PC2); clrBit(DDRC, PC2);	break;
     a6a:	42 9a       	sbi	0x08, 2	; 8
     a6c:	3a 98       	cbi	0x07, 2	; 7
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK1, PCINT10);
     a6e:	80 91 6c 00 	lds	r24, 0x006C
     a72:	84 60       	ori	r24, 0x04	; 4
     a74:	80 93 6c 00 	sts	0x006C, r24
	return RESULT_OK;
     a78:	80 e0       	ldi	r24, 0x00	; 0
     a7a:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC2); setBit(DDRC, PC2);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC2); setBit(DDRC, PC2);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTC, PC2); clrBit(DDRC, PC2);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTC, PC2); clrBit(DDRC, PC2);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     a7c:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK1, PCINT10);
	return RESULT_OK;
}
     a7e:	08 95       	ret

00000a80 <pcint10DeactivateInterrupt>:
 * Deactivates the external interrupt pcint10 in PC2
 * -------------------------------------------------------------------------- */

void pcint10DeactivateInterrupt(void)
{
	clrBit(PCMSK1, PCINT10);
     a80:	ec e6       	ldi	r30, 0x6C	; 108
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	80 81       	ld	r24, Z
     a86:	8b 7f       	andi	r24, 0xFB	; 251
     a88:	80 83       	st	Z, r24
     a8a:	08 95       	ret

00000a8c <pcint11ActivateInterrupt>:
 * Activates the external interrupt pcint11 and configures port mode in PC3
 * -------------------------------------------------------------------------- */

resultValue_t pcint11ActivateInterrupt(portMode_t port)
{
	switch(port){
     a8c:	82 30       	cpi	r24, 0x02	; 2
     a8e:	79 f0       	breq	.+30     	; 0xaae <pcint11ActivateInterrupt+0x22>
     a90:	30 f4       	brcc	.+12     	; 0xa9e <pcint11ActivateInterrupt+0x12>
     a92:	88 23       	and	r24, r24
     a94:	49 f0       	breq	.+18     	; 0xaa8 <pcint11ActivateInterrupt+0x1c>
     a96:	81 30       	cpi	r24, 0x01	; 1
     a98:	a9 f4       	brne	.+42     	; 0xac4 <pcint11ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC3); setBit(DDRC, PC3);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC3); setBit(DDRC, PC3);	break;
     a9a:	43 9a       	sbi	0x08, 3	; 8
     a9c:	06 c0       	rjmp	.+12     	; 0xaaa <pcint11ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint11 and configures port mode in PC3
 * -------------------------------------------------------------------------- */

resultValue_t pcint11ActivateInterrupt(portMode_t port)
{
	switch(port){
     a9e:	83 30       	cpi	r24, 0x03	; 3
     aa0:	41 f0       	breq	.+16     	; 0xab2 <pcint11ActivateInterrupt+0x26>
     aa2:	8f 3f       	cpi	r24, 0xFF	; 255
     aa4:	41 f0       	breq	.+16     	; 0xab6 <pcint11ActivateInterrupt+0x2a>
     aa6:	0e c0       	rjmp	.+28     	; 0xac4 <pcint11ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC3); setBit(DDRC, PC3);	break;
     aa8:	43 98       	cbi	0x08, 3	; 8
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC3); setBit(DDRC, PC3);	break;
     aaa:	3b 9a       	sbi	0x07, 3	; 7
     aac:	04 c0       	rjmp	.+8      	; 0xab6 <pcint11ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTC, PC3); clrBit(DDRC, PC3);	break;
     aae:	43 98       	cbi	0x08, 3	; 8
     ab0:	01 c0       	rjmp	.+2      	; 0xab4 <pcint11ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTC, PC3); clrBit(DDRC, PC3);	break;
     ab2:	43 9a       	sbi	0x08, 3	; 8
     ab4:	3b 98       	cbi	0x07, 3	; 7
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK1, PCINT11);
     ab6:	80 91 6c 00 	lds	r24, 0x006C
     aba:	88 60       	ori	r24, 0x08	; 8
     abc:	80 93 6c 00 	sts	0x006C, r24
	return RESULT_OK;
     ac0:	80 e0       	ldi	r24, 0x00	; 0
     ac2:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC3); setBit(DDRC, PC3);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC3); setBit(DDRC, PC3);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTC, PC3); clrBit(DDRC, PC3);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTC, PC3); clrBit(DDRC, PC3);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     ac4:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK1, PCINT11);
	return RESULT_OK;
}
     ac6:	08 95       	ret

00000ac8 <pcint11DeactivateInterrupt>:
 * Deactivates the external interrupt pcint11 in PC3
 * -------------------------------------------------------------------------- */

void pcint11DeactivateInterrupt(void)
{
	clrBit(PCMSK1, PCINT11);
     ac8:	ec e6       	ldi	r30, 0x6C	; 108
     aca:	f0 e0       	ldi	r31, 0x00	; 0
     acc:	80 81       	ld	r24, Z
     ace:	87 7f       	andi	r24, 0xF7	; 247
     ad0:	80 83       	st	Z, r24
     ad2:	08 95       	ret

00000ad4 <pcint12ActivateInterrupt>:
 * Activates the external interrupt pcint12 and configures port mode in PC4
 * -------------------------------------------------------------------------- */

resultValue_t pcint12ActivateInterrupt(portMode_t port)
{
	switch(port){
     ad4:	82 30       	cpi	r24, 0x02	; 2
     ad6:	79 f0       	breq	.+30     	; 0xaf6 <pcint12ActivateInterrupt+0x22>
     ad8:	30 f4       	brcc	.+12     	; 0xae6 <pcint12ActivateInterrupt+0x12>
     ada:	88 23       	and	r24, r24
     adc:	49 f0       	breq	.+18     	; 0xaf0 <pcint12ActivateInterrupt+0x1c>
     ade:	81 30       	cpi	r24, 0x01	; 1
     ae0:	a9 f4       	brne	.+42     	; 0xb0c <pcint12ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC4); setBit(DDRC, PC4);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC4); setBit(DDRC, PC4);	break;
     ae2:	44 9a       	sbi	0x08, 4	; 8
     ae4:	06 c0       	rjmp	.+12     	; 0xaf2 <pcint12ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint12 and configures port mode in PC4
 * -------------------------------------------------------------------------- */

resultValue_t pcint12ActivateInterrupt(portMode_t port)
{
	switch(port){
     ae6:	83 30       	cpi	r24, 0x03	; 3
     ae8:	41 f0       	breq	.+16     	; 0xafa <pcint12ActivateInterrupt+0x26>
     aea:	8f 3f       	cpi	r24, 0xFF	; 255
     aec:	41 f0       	breq	.+16     	; 0xafe <pcint12ActivateInterrupt+0x2a>
     aee:	0e c0       	rjmp	.+28     	; 0xb0c <pcint12ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC4); setBit(DDRC, PC4);	break;
     af0:	44 98       	cbi	0x08, 4	; 8
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC4); setBit(DDRC, PC4);	break;
     af2:	3c 9a       	sbi	0x07, 4	; 7
     af4:	04 c0       	rjmp	.+8      	; 0xafe <pcint12ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTC, PC4); clrBit(DDRC, PC4);	break;
     af6:	44 98       	cbi	0x08, 4	; 8
     af8:	01 c0       	rjmp	.+2      	; 0xafc <pcint12ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTC, PC4); clrBit(DDRC, PC4);	break;
     afa:	44 9a       	sbi	0x08, 4	; 8
     afc:	3c 98       	cbi	0x07, 4	; 7
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK1, PCINT12);
     afe:	80 91 6c 00 	lds	r24, 0x006C
     b02:	80 61       	ori	r24, 0x10	; 16
     b04:	80 93 6c 00 	sts	0x006C, r24
	return RESULT_OK;
     b08:	80 e0       	ldi	r24, 0x00	; 0
     b0a:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC4); setBit(DDRC, PC4);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC4); setBit(DDRC, PC4);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTC, PC4); clrBit(DDRC, PC4);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTC, PC4); clrBit(DDRC, PC4);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     b0c:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK1, PCINT12);
	return RESULT_OK;
}
     b0e:	08 95       	ret

00000b10 <pcint12DeactivateInterrupt>:
 * Deactivates the external interrupt pcint12 in PC4
 * -------------------------------------------------------------------------- */

void pcint12DeactivateInterrupt(void)
{
	clrBit(PCMSK1, PCINT12);
     b10:	ec e6       	ldi	r30, 0x6C	; 108
     b12:	f0 e0       	ldi	r31, 0x00	; 0
     b14:	80 81       	ld	r24, Z
     b16:	8f 7e       	andi	r24, 0xEF	; 239
     b18:	80 83       	st	Z, r24
     b1a:	08 95       	ret

00000b1c <pcint13ActivateInterrupt>:
 * Activates the external interrupt pcint13 and configures port mode in PC5
 * -------------------------------------------------------------------------- */

resultValue_t pcint13ActivateInterrupt(portMode_t port)
{
	switch(port){
     b1c:	82 30       	cpi	r24, 0x02	; 2
     b1e:	79 f0       	breq	.+30     	; 0xb3e <pcint13ActivateInterrupt+0x22>
     b20:	30 f4       	brcc	.+12     	; 0xb2e <pcint13ActivateInterrupt+0x12>
     b22:	88 23       	and	r24, r24
     b24:	49 f0       	breq	.+18     	; 0xb38 <pcint13ActivateInterrupt+0x1c>
     b26:	81 30       	cpi	r24, 0x01	; 1
     b28:	a9 f4       	brne	.+42     	; 0xb54 <pcint13ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC5); setBit(DDRC, PC5);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC5); setBit(DDRC, PC5);	break;
     b2a:	45 9a       	sbi	0x08, 5	; 8
     b2c:	06 c0       	rjmp	.+12     	; 0xb3a <pcint13ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint13 and configures port mode in PC5
 * -------------------------------------------------------------------------- */

resultValue_t pcint13ActivateInterrupt(portMode_t port)
{
	switch(port){
     b2e:	83 30       	cpi	r24, 0x03	; 3
     b30:	41 f0       	breq	.+16     	; 0xb42 <pcint13ActivateInterrupt+0x26>
     b32:	8f 3f       	cpi	r24, 0xFF	; 255
     b34:	41 f0       	breq	.+16     	; 0xb46 <pcint13ActivateInterrupt+0x2a>
     b36:	0e c0       	rjmp	.+28     	; 0xb54 <pcint13ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC5); setBit(DDRC, PC5);	break;
     b38:	45 98       	cbi	0x08, 5	; 8
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC5); setBit(DDRC, PC5);	break;
     b3a:	3d 9a       	sbi	0x07, 5	; 7
     b3c:	04 c0       	rjmp	.+8      	; 0xb46 <pcint13ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTC, PC5); clrBit(DDRC, PC5);	break;
     b3e:	45 98       	cbi	0x08, 5	; 8
     b40:	01 c0       	rjmp	.+2      	; 0xb44 <pcint13ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTC, PC5); clrBit(DDRC, PC5);	break;
     b42:	45 9a       	sbi	0x08, 5	; 8
     b44:	3d 98       	cbi	0x07, 5	; 7
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK1, PCINT13);
     b46:	80 91 6c 00 	lds	r24, 0x006C
     b4a:	80 62       	ori	r24, 0x20	; 32
     b4c:	80 93 6c 00 	sts	0x006C, r24
	return RESULT_OK;
     b50:	80 e0       	ldi	r24, 0x00	; 0
     b52:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC5); setBit(DDRC, PC5);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC5); setBit(DDRC, PC5);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTC, PC5); clrBit(DDRC, PC5);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTC, PC5); clrBit(DDRC, PC5);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     b54:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK1, PCINT13);
	return RESULT_OK;
}
     b56:	08 95       	ret

00000b58 <pcint13DeactivateInterrupt>:
 * Deactivates the external interrupt pcint13 in PC5
 * -------------------------------------------------------------------------- */

void pcint13DeactivateInterrupt(void)
{
	clrBit(PCMSK1, PCINT13);
     b58:	ec e6       	ldi	r30, 0x6C	; 108
     b5a:	f0 e0       	ldi	r31, 0x00	; 0
     b5c:	80 81       	ld	r24, Z
     b5e:	8f 7d       	andi	r24, 0xDF	; 223
     b60:	80 83       	st	Z, r24
     b62:	08 95       	ret

00000b64 <pcint14ActivateInterrupt>:
 * Activates the external interrupt pcint14 and configures port mode in PC6
 * -------------------------------------------------------------------------- */

resultValue_t pcint14ActivateInterrupt(portMode_t port)
{
	switch(port){
     b64:	82 30       	cpi	r24, 0x02	; 2
     b66:	79 f0       	breq	.+30     	; 0xb86 <pcint14ActivateInterrupt+0x22>
     b68:	30 f4       	brcc	.+12     	; 0xb76 <pcint14ActivateInterrupt+0x12>
     b6a:	88 23       	and	r24, r24
     b6c:	49 f0       	breq	.+18     	; 0xb80 <pcint14ActivateInterrupt+0x1c>
     b6e:	81 30       	cpi	r24, 0x01	; 1
     b70:	a9 f4       	brne	.+42     	; 0xb9c <pcint14ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC6); setBit(DDRC, PC6);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC6); setBit(DDRC, PC6);	break;
     b72:	46 9a       	sbi	0x08, 6	; 8
     b74:	06 c0       	rjmp	.+12     	; 0xb82 <pcint14ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint14 and configures port mode in PC6
 * -------------------------------------------------------------------------- */

resultValue_t pcint14ActivateInterrupt(portMode_t port)
{
	switch(port){
     b76:	83 30       	cpi	r24, 0x03	; 3
     b78:	41 f0       	breq	.+16     	; 0xb8a <pcint14ActivateInterrupt+0x26>
     b7a:	8f 3f       	cpi	r24, 0xFF	; 255
     b7c:	41 f0       	breq	.+16     	; 0xb8e <pcint14ActivateInterrupt+0x2a>
     b7e:	0e c0       	rjmp	.+28     	; 0xb9c <pcint14ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC6); setBit(DDRC, PC6);	break;
     b80:	46 98       	cbi	0x08, 6	; 8
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC6); setBit(DDRC, PC6);	break;
     b82:	3e 9a       	sbi	0x07, 6	; 7
     b84:	04 c0       	rjmp	.+8      	; 0xb8e <pcint14ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTC, PC6); clrBit(DDRC, PC6);	break;
     b86:	46 98       	cbi	0x08, 6	; 8
     b88:	01 c0       	rjmp	.+2      	; 0xb8c <pcint14ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTC, PC6); clrBit(DDRC, PC6);	break;
     b8a:	46 9a       	sbi	0x08, 6	; 8
     b8c:	3e 98       	cbi	0x07, 6	; 7
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK1, PCINT14);
     b8e:	80 91 6c 00 	lds	r24, 0x006C
     b92:	80 64       	ori	r24, 0x40	; 64
     b94:	80 93 6c 00 	sts	0x006C, r24
	return RESULT_OK;
     b98:	80 e0       	ldi	r24, 0x00	; 0
     b9a:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC6); setBit(DDRC, PC6);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC6); setBit(DDRC, PC6);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTC, PC6); clrBit(DDRC, PC6);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTC, PC6); clrBit(DDRC, PC6);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     b9c:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK1, PCINT14);
	return RESULT_OK;
}
     b9e:	08 95       	ret

00000ba0 <pcint14DeactivateInterrupt>:
 * Deactivates the external interrupt pcint14 in PC6
 * -------------------------------------------------------------------------- */

void pcint14DeactivateInterrupt(void)
{
	clrBit(PCMSK1, PCINT14);
     ba0:	ec e6       	ldi	r30, 0x6C	; 108
     ba2:	f0 e0       	ldi	r31, 0x00	; 0
     ba4:	80 81       	ld	r24, Z
     ba6:	8f 7b       	andi	r24, 0xBF	; 191
     ba8:	80 83       	st	Z, r24
     baa:	08 95       	ret

00000bac <pcint23_16Enable>:
 * Enables the external interrupt pcint in port D
 * -------------------------------------------------------------------------- */

void pcint23_16Enable(void)
{
	setBit(PCICR, PCIE2);
     bac:	e8 e6       	ldi	r30, 0x68	; 104
     bae:	f0 e0       	ldi	r31, 0x00	; 0
     bb0:	80 81       	ld	r24, Z
     bb2:	84 60       	ori	r24, 0x04	; 4
     bb4:	80 83       	st	Z, r24
     bb6:	08 95       	ret

00000bb8 <pcint23_16Disable>:
 * Disables the external interrupt pcint in port D
 * -------------------------------------------------------------------------- */

void pcint23_16Disable(void)
{
	clrBit(PCICR, PCIE2);
     bb8:	e8 e6       	ldi	r30, 0x68	; 104
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	80 81       	ld	r24, Z
     bbe:	8b 7f       	andi	r24, 0xFB	; 251
     bc0:	80 83       	st	Z, r24
     bc2:	08 95       	ret

00000bc4 <pcint23_16ClearInterruptRequest>:
 * Disables the external interrupt pcint in port D
 * -------------------------------------------------------------------------- */

void pcint23_16ClearInterruptRequest(void)
{
	setBit(PCIFR, PCIF2);
     bc4:	da 9a       	sbi	0x1b, 2	; 27
     bc6:	08 95       	ret

00000bc8 <pcint16ActivateInterrupt>:
 * Activates the external interrupt pcint16 and configures port mode in PD0
 * -------------------------------------------------------------------------- */

resultValue_t pcint16ActivateInterrupt(portMode_t port)
{
	switch(port){
     bc8:	82 30       	cpi	r24, 0x02	; 2
     bca:	79 f0       	breq	.+30     	; 0xbea <pcint16ActivateInterrupt+0x22>
     bcc:	30 f4       	brcc	.+12     	; 0xbda <pcint16ActivateInterrupt+0x12>
     bce:	88 23       	and	r24, r24
     bd0:	49 f0       	breq	.+18     	; 0xbe4 <pcint16ActivateInterrupt+0x1c>
     bd2:	81 30       	cpi	r24, 0x01	; 1
     bd4:	a9 f4       	brne	.+42     	; 0xc00 <pcint16ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD0); setBit(DDRD, PD0);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD0); setBit(DDRD, PD0);	break;
     bd6:	58 9a       	sbi	0x0b, 0	; 11
     bd8:	06 c0       	rjmp	.+12     	; 0xbe6 <pcint16ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint16 and configures port mode in PD0
 * -------------------------------------------------------------------------- */

resultValue_t pcint16ActivateInterrupt(portMode_t port)
{
	switch(port){
     bda:	83 30       	cpi	r24, 0x03	; 3
     bdc:	41 f0       	breq	.+16     	; 0xbee <pcint16ActivateInterrupt+0x26>
     bde:	8f 3f       	cpi	r24, 0xFF	; 255
     be0:	41 f0       	breq	.+16     	; 0xbf2 <pcint16ActivateInterrupt+0x2a>
     be2:	0e c0       	rjmp	.+28     	; 0xc00 <pcint16ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD0); setBit(DDRD, PD0);	break;
     be4:	58 98       	cbi	0x0b, 0	; 11
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD0); setBit(DDRD, PD0);	break;
     be6:	50 9a       	sbi	0x0a, 0	; 10
     be8:	04 c0       	rjmp	.+8      	; 0xbf2 <pcint16ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD0); clrBit(DDRD, PD0);	break;
     bea:	58 98       	cbi	0x0b, 0	; 11
     bec:	01 c0       	rjmp	.+2      	; 0xbf0 <pcint16ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD0); clrBit(DDRD, PD0);	break;
     bee:	58 9a       	sbi	0x0b, 0	; 11
     bf0:	50 98       	cbi	0x0a, 0	; 10
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK2, PCINT16);
     bf2:	80 91 6d 00 	lds	r24, 0x006D
     bf6:	81 60       	ori	r24, 0x01	; 1
     bf8:	80 93 6d 00 	sts	0x006D, r24
	return RESULT_OK;
     bfc:	80 e0       	ldi	r24, 0x00	; 0
     bfe:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD0); setBit(DDRD, PD0);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD0); setBit(DDRD, PD0);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD0); clrBit(DDRD, PD0);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD0); clrBit(DDRD, PD0);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     c00:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK2, PCINT16);
	return RESULT_OK;
}
     c02:	08 95       	ret

00000c04 <pcint16DeactivateInterrupt>:
 * Deactivates the external interrupt pcint16 in PD0
 * -------------------------------------------------------------------------- */

void pcint16DeactivateInterrupt(void)
{
	clrBit(PCMSK2, PCINT16);
     c04:	ed e6       	ldi	r30, 0x6D	; 109
     c06:	f0 e0       	ldi	r31, 0x00	; 0
     c08:	80 81       	ld	r24, Z
     c0a:	8e 7f       	andi	r24, 0xFE	; 254
     c0c:	80 83       	st	Z, r24
     c0e:	08 95       	ret

00000c10 <pcint17ActivateInterrupt>:
 * Activates the external interrupt pcint17 and configures port mode in PD1
 * -------------------------------------------------------------------------- */

resultValue_t pcint17ActivateInterrupt(portMode_t port)
{
	switch(port){
     c10:	82 30       	cpi	r24, 0x02	; 2
     c12:	79 f0       	breq	.+30     	; 0xc32 <pcint17ActivateInterrupt+0x22>
     c14:	30 f4       	brcc	.+12     	; 0xc22 <pcint17ActivateInterrupt+0x12>
     c16:	88 23       	and	r24, r24
     c18:	49 f0       	breq	.+18     	; 0xc2c <pcint17ActivateInterrupt+0x1c>
     c1a:	81 30       	cpi	r24, 0x01	; 1
     c1c:	a9 f4       	brne	.+42     	; 0xc48 <pcint17ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD1); setBit(DDRD, PD1);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD1); setBit(DDRD, PD1);	break;
     c1e:	59 9a       	sbi	0x0b, 1	; 11
     c20:	06 c0       	rjmp	.+12     	; 0xc2e <pcint17ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint17 and configures port mode in PD1
 * -------------------------------------------------------------------------- */

resultValue_t pcint17ActivateInterrupt(portMode_t port)
{
	switch(port){
     c22:	83 30       	cpi	r24, 0x03	; 3
     c24:	41 f0       	breq	.+16     	; 0xc36 <pcint17ActivateInterrupt+0x26>
     c26:	8f 3f       	cpi	r24, 0xFF	; 255
     c28:	41 f0       	breq	.+16     	; 0xc3a <pcint17ActivateInterrupt+0x2a>
     c2a:	0e c0       	rjmp	.+28     	; 0xc48 <pcint17ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD1); setBit(DDRD, PD1);	break;
     c2c:	59 98       	cbi	0x0b, 1	; 11
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD1); setBit(DDRD, PD1);	break;
     c2e:	51 9a       	sbi	0x0a, 1	; 10
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <pcint17ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD1); clrBit(DDRD, PD1);	break;
     c32:	59 98       	cbi	0x0b, 1	; 11
     c34:	01 c0       	rjmp	.+2      	; 0xc38 <pcint17ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD1); clrBit(DDRD, PD1);	break;
     c36:	59 9a       	sbi	0x0b, 1	; 11
     c38:	51 98       	cbi	0x0a, 1	; 10
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK2, PCINT17);
     c3a:	80 91 6d 00 	lds	r24, 0x006D
     c3e:	82 60       	ori	r24, 0x02	; 2
     c40:	80 93 6d 00 	sts	0x006D, r24
	return RESULT_OK;
     c44:	80 e0       	ldi	r24, 0x00	; 0
     c46:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD1); setBit(DDRD, PD1);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD1); setBit(DDRD, PD1);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD1); clrBit(DDRD, PD1);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD1); clrBit(DDRD, PD1);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     c48:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK2, PCINT17);
	return RESULT_OK;
}
     c4a:	08 95       	ret

00000c4c <pcint17DeactivateInterrupt>:
 * Deactivates the external interrupt pcint17 in PD1
 * -------------------------------------------------------------------------- */

void pcint17DeactivateInterrupt(void)
{
	clrBit(PCMSK2, PCINT17);
     c4c:	ed e6       	ldi	r30, 0x6D	; 109
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	80 81       	ld	r24, Z
     c52:	8d 7f       	andi	r24, 0xFD	; 253
     c54:	80 83       	st	Z, r24
     c56:	08 95       	ret

00000c58 <pcint18ActivateInterrupt>:
 * Activates the external interrupt pcint18 and configures port mode in PD2
 * -------------------------------------------------------------------------- */

resultValue_t pcint18ActivateInterrupt(portMode_t port)
{
	switch(port){
     c58:	82 30       	cpi	r24, 0x02	; 2
     c5a:	79 f0       	breq	.+30     	; 0xc7a <pcint18ActivateInterrupt+0x22>
     c5c:	30 f4       	brcc	.+12     	; 0xc6a <pcint18ActivateInterrupt+0x12>
     c5e:	88 23       	and	r24, r24
     c60:	49 f0       	breq	.+18     	; 0xc74 <pcint18ActivateInterrupt+0x1c>
     c62:	81 30       	cpi	r24, 0x01	; 1
     c64:	a9 f4       	brne	.+42     	; 0xc90 <pcint18ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD2); setBit(DDRD, PD2);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD2); setBit(DDRD, PD2);	break;
     c66:	5a 9a       	sbi	0x0b, 2	; 11
     c68:	06 c0       	rjmp	.+12     	; 0xc76 <pcint18ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint18 and configures port mode in PD2
 * -------------------------------------------------------------------------- */

resultValue_t pcint18ActivateInterrupt(portMode_t port)
{
	switch(port){
     c6a:	83 30       	cpi	r24, 0x03	; 3
     c6c:	41 f0       	breq	.+16     	; 0xc7e <pcint18ActivateInterrupt+0x26>
     c6e:	8f 3f       	cpi	r24, 0xFF	; 255
     c70:	41 f0       	breq	.+16     	; 0xc82 <pcint18ActivateInterrupt+0x2a>
     c72:	0e c0       	rjmp	.+28     	; 0xc90 <pcint18ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD2); setBit(DDRD, PD2);	break;
     c74:	5a 98       	cbi	0x0b, 2	; 11
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD2); setBit(DDRD, PD2);	break;
     c76:	52 9a       	sbi	0x0a, 2	; 10
     c78:	04 c0       	rjmp	.+8      	; 0xc82 <pcint18ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD2); clrBit(DDRD, PD2);	break;
     c7a:	5a 98       	cbi	0x0b, 2	; 11
     c7c:	01 c0       	rjmp	.+2      	; 0xc80 <pcint18ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD2); clrBit(DDRD, PD2);	break;
     c7e:	5a 9a       	sbi	0x0b, 2	; 11
     c80:	52 98       	cbi	0x0a, 2	; 10
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK2, PCINT18);
     c82:	80 91 6d 00 	lds	r24, 0x006D
     c86:	84 60       	ori	r24, 0x04	; 4
     c88:	80 93 6d 00 	sts	0x006D, r24
	return RESULT_OK;
     c8c:	80 e0       	ldi	r24, 0x00	; 0
     c8e:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD2); setBit(DDRD, PD2);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD2); setBit(DDRD, PD2);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD2); clrBit(DDRD, PD2);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD2); clrBit(DDRD, PD2);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     c90:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK2, PCINT18);
	return RESULT_OK;
}
     c92:	08 95       	ret

00000c94 <pcint18DeactivateInterrupt>:
 * Deactivates the external interrupt pcint18 in PD2
 * -------------------------------------------------------------------------- */

void pcint18DeactivateInterrupt(void)
{
	clrBit(PCMSK2, PCINT18);
     c94:	ed e6       	ldi	r30, 0x6D	; 109
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	80 81       	ld	r24, Z
     c9a:	8b 7f       	andi	r24, 0xFB	; 251
     c9c:	80 83       	st	Z, r24
     c9e:	08 95       	ret

00000ca0 <pcint19ActivateInterrupt>:
 * Activates the external interrupt pcint19 and configures port mode in PD3
 * -------------------------------------------------------------------------- */

resultValue_t pcint19ActivateInterrupt(portMode_t port)
{
	switch(port){
     ca0:	82 30       	cpi	r24, 0x02	; 2
     ca2:	79 f0       	breq	.+30     	; 0xcc2 <pcint19ActivateInterrupt+0x22>
     ca4:	30 f4       	brcc	.+12     	; 0xcb2 <pcint19ActivateInterrupt+0x12>
     ca6:	88 23       	and	r24, r24
     ca8:	49 f0       	breq	.+18     	; 0xcbc <pcint19ActivateInterrupt+0x1c>
     caa:	81 30       	cpi	r24, 0x01	; 1
     cac:	a9 f4       	brne	.+42     	; 0xcd8 <pcint19ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD3); setBit(DDRD, PD3);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD3); setBit(DDRD, PD3);	break;
     cae:	5b 9a       	sbi	0x0b, 3	; 11
     cb0:	06 c0       	rjmp	.+12     	; 0xcbe <pcint19ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint19 and configures port mode in PD3
 * -------------------------------------------------------------------------- */

resultValue_t pcint19ActivateInterrupt(portMode_t port)
{
	switch(port){
     cb2:	83 30       	cpi	r24, 0x03	; 3
     cb4:	41 f0       	breq	.+16     	; 0xcc6 <pcint19ActivateInterrupt+0x26>
     cb6:	8f 3f       	cpi	r24, 0xFF	; 255
     cb8:	41 f0       	breq	.+16     	; 0xcca <pcint19ActivateInterrupt+0x2a>
     cba:	0e c0       	rjmp	.+28     	; 0xcd8 <pcint19ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD3); setBit(DDRD, PD3);	break;
     cbc:	5b 98       	cbi	0x0b, 3	; 11
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD3); setBit(DDRD, PD3);	break;
     cbe:	53 9a       	sbi	0x0a, 3	; 10
     cc0:	04 c0       	rjmp	.+8      	; 0xcca <pcint19ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD3); clrBit(DDRD, PD3);	break;
     cc2:	5b 98       	cbi	0x0b, 3	; 11
     cc4:	01 c0       	rjmp	.+2      	; 0xcc8 <pcint19ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD3); clrBit(DDRD, PD3);	break;
     cc6:	5b 9a       	sbi	0x0b, 3	; 11
     cc8:	53 98       	cbi	0x0a, 3	; 10
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK2, PCINT19);
     cca:	80 91 6d 00 	lds	r24, 0x006D
     cce:	88 60       	ori	r24, 0x08	; 8
     cd0:	80 93 6d 00 	sts	0x006D, r24
	return RESULT_OK;
     cd4:	80 e0       	ldi	r24, 0x00	; 0
     cd6:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD3); setBit(DDRD, PD3);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD3); setBit(DDRD, PD3);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD3); clrBit(DDRD, PD3);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD3); clrBit(DDRD, PD3);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     cd8:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK2, PCINT19);
	return RESULT_OK;
}
     cda:	08 95       	ret

00000cdc <pcint19DeactivateInterrupt>:
 * Deactivates the external interrupt pcint19 in PD3
 * -------------------------------------------------------------------------- */

void pcint19DeactivateInterrupt(void)
{
	clrBit(PCMSK2, PCINT19);
     cdc:	ed e6       	ldi	r30, 0x6D	; 109
     cde:	f0 e0       	ldi	r31, 0x00	; 0
     ce0:	80 81       	ld	r24, Z
     ce2:	87 7f       	andi	r24, 0xF7	; 247
     ce4:	80 83       	st	Z, r24
     ce6:	08 95       	ret

00000ce8 <pcint20ActivateInterrupt>:
 * Activates the external interrupt pcint20 and configures port mode in PD4
 * -------------------------------------------------------------------------- */

resultValue_t pcint20ActivateInterrupt(portMode_t port)
{
	switch(port){
     ce8:	82 30       	cpi	r24, 0x02	; 2
     cea:	79 f0       	breq	.+30     	; 0xd0a <pcint20ActivateInterrupt+0x22>
     cec:	30 f4       	brcc	.+12     	; 0xcfa <pcint20ActivateInterrupt+0x12>
     cee:	88 23       	and	r24, r24
     cf0:	49 f0       	breq	.+18     	; 0xd04 <pcint20ActivateInterrupt+0x1c>
     cf2:	81 30       	cpi	r24, 0x01	; 1
     cf4:	a9 f4       	brne	.+42     	; 0xd20 <pcint20ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD4); setBit(DDRD, PD4);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD4); setBit(DDRD, PD4);	break;
     cf6:	5c 9a       	sbi	0x0b, 4	; 11
     cf8:	06 c0       	rjmp	.+12     	; 0xd06 <pcint20ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint20 and configures port mode in PD4
 * -------------------------------------------------------------------------- */

resultValue_t pcint20ActivateInterrupt(portMode_t port)
{
	switch(port){
     cfa:	83 30       	cpi	r24, 0x03	; 3
     cfc:	41 f0       	breq	.+16     	; 0xd0e <pcint20ActivateInterrupt+0x26>
     cfe:	8f 3f       	cpi	r24, 0xFF	; 255
     d00:	41 f0       	breq	.+16     	; 0xd12 <pcint20ActivateInterrupt+0x2a>
     d02:	0e c0       	rjmp	.+28     	; 0xd20 <pcint20ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD4); setBit(DDRD, PD4);	break;
     d04:	5c 98       	cbi	0x0b, 4	; 11
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD4); setBit(DDRD, PD4);	break;
     d06:	54 9a       	sbi	0x0a, 4	; 10
     d08:	04 c0       	rjmp	.+8      	; 0xd12 <pcint20ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD4); clrBit(DDRD, PD4);	break;
     d0a:	5c 98       	cbi	0x0b, 4	; 11
     d0c:	01 c0       	rjmp	.+2      	; 0xd10 <pcint20ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD4); clrBit(DDRD, PD4);	break;
     d0e:	5c 9a       	sbi	0x0b, 4	; 11
     d10:	54 98       	cbi	0x0a, 4	; 10
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK2, PCINT20);
     d12:	80 91 6d 00 	lds	r24, 0x006D
     d16:	80 61       	ori	r24, 0x10	; 16
     d18:	80 93 6d 00 	sts	0x006D, r24
	return RESULT_OK;
     d1c:	80 e0       	ldi	r24, 0x00	; 0
     d1e:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD4); setBit(DDRD, PD4);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD4); setBit(DDRD, PD4);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD4); clrBit(DDRD, PD4);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD4); clrBit(DDRD, PD4);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     d20:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK2, PCINT20);
	return RESULT_OK;
}
     d22:	08 95       	ret

00000d24 <pcint20DeactivateInterrupt>:
 * Deactivates the external interrupt pcint20 in PD4
 * -------------------------------------------------------------------------- */

void pcint20DeactivateInterrupt(void)
{
	clrBit(PCMSK2, PCINT20);
     d24:	ed e6       	ldi	r30, 0x6D	; 109
     d26:	f0 e0       	ldi	r31, 0x00	; 0
     d28:	80 81       	ld	r24, Z
     d2a:	8f 7e       	andi	r24, 0xEF	; 239
     d2c:	80 83       	st	Z, r24
     d2e:	08 95       	ret

00000d30 <pcint21ActivateInterrupt>:
 * Activates the external interrupt pcint21 and configures port mode in PD5
 * -------------------------------------------------------------------------- */

resultValue_t pcint21ActivateInterrupt(portMode_t port)
{
	switch(port){
     d30:	82 30       	cpi	r24, 0x02	; 2
     d32:	79 f0       	breq	.+30     	; 0xd52 <pcint21ActivateInterrupt+0x22>
     d34:	30 f4       	brcc	.+12     	; 0xd42 <pcint21ActivateInterrupt+0x12>
     d36:	88 23       	and	r24, r24
     d38:	49 f0       	breq	.+18     	; 0xd4c <pcint21ActivateInterrupt+0x1c>
     d3a:	81 30       	cpi	r24, 0x01	; 1
     d3c:	a9 f4       	brne	.+42     	; 0xd68 <pcint21ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD5); setBit(DDRD, PD5);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD5); setBit(DDRD, PD5);	break;
     d3e:	5d 9a       	sbi	0x0b, 5	; 11
     d40:	06 c0       	rjmp	.+12     	; 0xd4e <pcint21ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint21 and configures port mode in PD5
 * -------------------------------------------------------------------------- */

resultValue_t pcint21ActivateInterrupt(portMode_t port)
{
	switch(port){
     d42:	83 30       	cpi	r24, 0x03	; 3
     d44:	41 f0       	breq	.+16     	; 0xd56 <pcint21ActivateInterrupt+0x26>
     d46:	8f 3f       	cpi	r24, 0xFF	; 255
     d48:	41 f0       	breq	.+16     	; 0xd5a <pcint21ActivateInterrupt+0x2a>
     d4a:	0e c0       	rjmp	.+28     	; 0xd68 <pcint21ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD5); setBit(DDRD, PD5);	break;
     d4c:	5d 98       	cbi	0x0b, 5	; 11
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD5); setBit(DDRD, PD5);	break;
     d4e:	55 9a       	sbi	0x0a, 5	; 10
     d50:	04 c0       	rjmp	.+8      	; 0xd5a <pcint21ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD5); clrBit(DDRD, PD5);	break;
     d52:	5d 98       	cbi	0x0b, 5	; 11
     d54:	01 c0       	rjmp	.+2      	; 0xd58 <pcint21ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD5); clrBit(DDRD, PD5);	break;
     d56:	5d 9a       	sbi	0x0b, 5	; 11
     d58:	55 98       	cbi	0x0a, 5	; 10
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK2, PCINT21);
     d5a:	80 91 6d 00 	lds	r24, 0x006D
     d5e:	80 62       	ori	r24, 0x20	; 32
     d60:	80 93 6d 00 	sts	0x006D, r24
	return RESULT_OK;
     d64:	80 e0       	ldi	r24, 0x00	; 0
     d66:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD5); setBit(DDRD, PD5);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD5); setBit(DDRD, PD5);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD5); clrBit(DDRD, PD5);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD5); clrBit(DDRD, PD5);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     d68:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK2, PCINT21);
	return RESULT_OK;
}
     d6a:	08 95       	ret

00000d6c <pcint21DeactivateInterrupt>:
 * Deactivates the external interrupt pcint21 in PD5
 * -------------------------------------------------------------------------- */

void pcint21DeactivateInterrupt(void)
{
	clrBit(PCMSK2, PCINT21);
     d6c:	ed e6       	ldi	r30, 0x6D	; 109
     d6e:	f0 e0       	ldi	r31, 0x00	; 0
     d70:	80 81       	ld	r24, Z
     d72:	8f 7d       	andi	r24, 0xDF	; 223
     d74:	80 83       	st	Z, r24
     d76:	08 95       	ret

00000d78 <pcint22ActivateInterrupt>:
 * Activates the external interrupt pcint22 and configures port mode in PD6
 * -------------------------------------------------------------------------- */

resultValue_t pcint22ActivateInterrupt(portMode_t port)
{
	switch(port){
     d78:	82 30       	cpi	r24, 0x02	; 2
     d7a:	79 f0       	breq	.+30     	; 0xd9a <pcint22ActivateInterrupt+0x22>
     d7c:	30 f4       	brcc	.+12     	; 0xd8a <pcint22ActivateInterrupt+0x12>
     d7e:	88 23       	and	r24, r24
     d80:	49 f0       	breq	.+18     	; 0xd94 <pcint22ActivateInterrupt+0x1c>
     d82:	81 30       	cpi	r24, 0x01	; 1
     d84:	a9 f4       	brne	.+42     	; 0xdb0 <pcint22ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD6); setBit(DDRD, PD6);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD6); setBit(DDRD, PD6);	break;
     d86:	5e 9a       	sbi	0x0b, 6	; 11
     d88:	06 c0       	rjmp	.+12     	; 0xd96 <pcint22ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint22 and configures port mode in PD6
 * -------------------------------------------------------------------------- */

resultValue_t pcint22ActivateInterrupt(portMode_t port)
{
	switch(port){
     d8a:	83 30       	cpi	r24, 0x03	; 3
     d8c:	41 f0       	breq	.+16     	; 0xd9e <pcint22ActivateInterrupt+0x26>
     d8e:	8f 3f       	cpi	r24, 0xFF	; 255
     d90:	41 f0       	breq	.+16     	; 0xda2 <pcint22ActivateInterrupt+0x2a>
     d92:	0e c0       	rjmp	.+28     	; 0xdb0 <pcint22ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD6); setBit(DDRD, PD6);	break;
     d94:	5e 98       	cbi	0x0b, 6	; 11
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD6); setBit(DDRD, PD6);	break;
     d96:	56 9a       	sbi	0x0a, 6	; 10
     d98:	04 c0       	rjmp	.+8      	; 0xda2 <pcint22ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD6); clrBit(DDRD, PD6);	break;
     d9a:	5e 98       	cbi	0x0b, 6	; 11
     d9c:	01 c0       	rjmp	.+2      	; 0xda0 <pcint22ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD6); clrBit(DDRD, PD6);	break;
     d9e:	5e 9a       	sbi	0x0b, 6	; 11
     da0:	56 98       	cbi	0x0a, 6	; 10
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK2, PCINT22);
     da2:	80 91 6d 00 	lds	r24, 0x006D
     da6:	80 64       	ori	r24, 0x40	; 64
     da8:	80 93 6d 00 	sts	0x006D, r24
	return RESULT_OK;
     dac:	80 e0       	ldi	r24, 0x00	; 0
     dae:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD6); setBit(DDRD, PD6);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD6); setBit(DDRD, PD6);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD6); clrBit(DDRD, PD6);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD6); clrBit(DDRD, PD6);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     db0:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK2, PCINT22);
	return RESULT_OK;
}
     db2:	08 95       	ret

00000db4 <pcint22DeactivateInterrupt>:
 * Deactivates the external interrupt pcint22 in PD6
 * -------------------------------------------------------------------------- */

void pcint22DeactivateInterrupt(void)
{
	clrBit(PCMSK2, PCINT22);
     db4:	ed e6       	ldi	r30, 0x6D	; 109
     db6:	f0 e0       	ldi	r31, 0x00	; 0
     db8:	80 81       	ld	r24, Z
     dba:	8f 7b       	andi	r24, 0xBF	; 191
     dbc:	80 83       	st	Z, r24
     dbe:	08 95       	ret

00000dc0 <pcint23ActivateInterrupt>:
 * Activates the external interrupt pcint23 and configures port mode in PD7
 * -------------------------------------------------------------------------- */

resultValue_t pcint23ActivateInterrupt(portMode_t port)
{
	switch(port){
     dc0:	82 30       	cpi	r24, 0x02	; 2
     dc2:	79 f0       	breq	.+30     	; 0xde2 <pcint23ActivateInterrupt+0x22>
     dc4:	30 f4       	brcc	.+12     	; 0xdd2 <pcint23ActivateInterrupt+0x12>
     dc6:	88 23       	and	r24, r24
     dc8:	49 f0       	breq	.+18     	; 0xddc <pcint23ActivateInterrupt+0x1c>
     dca:	81 30       	cpi	r24, 0x01	; 1
     dcc:	a9 f4       	brne	.+42     	; 0xdf8 <pcint23ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD7); setBit(DDRD, PD7);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD7); setBit(DDRD, PD7);	break;
     dce:	5f 9a       	sbi	0x0b, 7	; 11
     dd0:	06 c0       	rjmp	.+12     	; 0xdde <pcint23ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint23 and configures port mode in PD7
 * -------------------------------------------------------------------------- */

resultValue_t pcint23ActivateInterrupt(portMode_t port)
{
	switch(port){
     dd2:	83 30       	cpi	r24, 0x03	; 3
     dd4:	41 f0       	breq	.+16     	; 0xde6 <pcint23ActivateInterrupt+0x26>
     dd6:	8f 3f       	cpi	r24, 0xFF	; 255
     dd8:	41 f0       	breq	.+16     	; 0xdea <pcint23ActivateInterrupt+0x2a>
     dda:	0e c0       	rjmp	.+28     	; 0xdf8 <pcint23ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD7); setBit(DDRD, PD7);	break;
     ddc:	5f 98       	cbi	0x0b, 7	; 11
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD7); setBit(DDRD, PD7);	break;
     dde:	57 9a       	sbi	0x0a, 7	; 10
     de0:	04 c0       	rjmp	.+8      	; 0xdea <pcint23ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD7); clrBit(DDRD, PD7);	break;
     de2:	5f 98       	cbi	0x0b, 7	; 11
     de4:	01 c0       	rjmp	.+2      	; 0xde8 <pcint23ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD7); clrBit(DDRD, PD7);	break;
     de6:	5f 9a       	sbi	0x0b, 7	; 11
     de8:	57 98       	cbi	0x0a, 7	; 10
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK2, PCINT23);
     dea:	80 91 6d 00 	lds	r24, 0x006D
     dee:	80 68       	ori	r24, 0x80	; 128
     df0:	80 93 6d 00 	sts	0x006D, r24
	return RESULT_OK;
     df4:	80 e0       	ldi	r24, 0x00	; 0
     df6:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD7); setBit(DDRD, PD7);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD7); setBit(DDRD, PD7);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD7); clrBit(DDRD, PD7);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD7); clrBit(DDRD, PD7);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     df8:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK2, PCINT23);
	return RESULT_OK;
}
     dfa:	08 95       	ret

00000dfc <pcint23DeactivateInterrupt>:
 * Deactivates the external interrupt pcint23 in PD7
 * -------------------------------------------------------------------------- */

void pcint23DeactivateInterrupt(void)
{
	clrBit(PCMSK2, PCINT23);
     dfc:	ed e6       	ldi	r30, 0x6D	; 109
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	80 81       	ld	r24, Z
     e02:	8f 77       	andi	r24, 0x7F	; 127
     e04:	80 83       	st	Z, r24
     e06:	08 95       	ret

00000e08 <timer0Config>:
 * Configures the timer0 mode and prescaler
 * -------------------------------------------------------------------------- */

resultValue_t timer0Config(timerModeA_t mode, timerPrescalerValueA_t prescaler)
{
	uint8 regA = TCCR0A;
     e08:	24 b5       	in	r18, 0x24	; 36
	uint8 regB = TCCR0B;
     e0a:	95 b5       	in	r25, 0x25	; 37

	if(prescaler != TIMER_A_PRESCALER_NO_CHANGE){
     e0c:	6f 3f       	cpi	r22, 0xFF	; 255
     e0e:	c1 f0       	breq	.+48     	; 0xe40 <timer0Config+0x38>
		regB &= ~(0x07 << CS00);
     e10:	98 7f       	andi	r25, 0xF8	; 248
		switch(prescaler){
     e12:	46 2f       	mov	r20, r22
     e14:	50 e0       	ldi	r21, 0x00	; 0
     e16:	48 30       	cpi	r20, 0x08	; 8
     e18:	51 05       	cpc	r21, r1
     e1a:	80 f5       	brcc	.+96     	; 0xe7c <timer0Config+0x74>
     e1c:	fa 01       	movw	r30, r20
     e1e:	eb 5a       	subi	r30, 0xAB	; 171
     e20:	ff 4f       	sbci	r31, 0xFF	; 255
     e22:	0c 94 71 0d 	jmp	0x1ae2	; 0x1ae2 <__tablejump2__>
			case TIMER_A_CLOCK_DISABLE:					break;
			case TIMER_A_PRESCALER_OFF:					regB |= (1 << CS00);	break;
     e26:	91 60       	ori	r25, 0x01	; 1
     e28:	0b c0       	rjmp	.+22     	; 0xe40 <timer0Config+0x38>
			case TIMER_A_PRESCALER_8:					regB |= (2 << CS00);	break;
     e2a:	92 60       	ori	r25, 0x02	; 2
     e2c:	09 c0       	rjmp	.+18     	; 0xe40 <timer0Config+0x38>
			case TIMER_A_PRESCALER_64:					regB |= (3 << CS00);	break;
     e2e:	93 60       	ori	r25, 0x03	; 3
     e30:	07 c0       	rjmp	.+14     	; 0xe40 <timer0Config+0x38>
			case TIMER_A_PRESCALER_256:					regB |= (4 << CS00);	break;
     e32:	94 60       	ori	r25, 0x04	; 4
     e34:	05 c0       	rjmp	.+10     	; 0xe40 <timer0Config+0x38>
			case TIMER_A_PRESCALER_1024:				regB |= (5 << CS00);	break;
     e36:	95 60       	ori	r25, 0x05	; 5
     e38:	03 c0       	rjmp	.+6      	; 0xe40 <timer0Config+0x38>
			case TIMER_A_PRESCALER_T0_FALLING_EDGE:		regB |= (6 << CS00);	break;
     e3a:	96 60       	ori	r25, 0x06	; 6
     e3c:	01 c0       	rjmp	.+2      	; 0xe40 <timer0Config+0x38>
			case TIMER_A_PRESCALER_T0_RISING_EDGE:		regB |= (7 << CS00);	break;
     e3e:	97 60       	ori	r25, 0x07	; 7
			case TIMER_A_PRESCALER_NO_CHANGE:			break;
			default:									return RESULT_TIMER_PRESCALER_VALUE_UNSUPPORTED;	break;
		}
	}

	if(mode != TIMER_A_MODE_NO_CHANGE){
     e40:	8f 3f       	cpi	r24, 0xFF	; 255
     e42:	c1 f0       	breq	.+48     	; 0xe74 <timer0Config+0x6c>
		regA &= ~(0x03 << WGM00);
     e44:	2c 7f       	andi	r18, 0xFC	; 252
		clrBit(regB, WGM02);
     e46:	97 7f       	andi	r25, 0xF7	; 247
		switch(mode){
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	69 f0       	breq	.+26     	; 0xe66 <timer0Config+0x5e>
     e4c:	28 f4       	brcc	.+10     	; 0xe58 <timer0Config+0x50>
     e4e:	88 23       	and	r24, r24
     e50:	89 f0       	breq	.+34     	; 0xe74 <timer0Config+0x6c>
     e52:	81 30       	cpi	r24, 0x01	; 1
     e54:	59 f0       	breq	.+22     	; 0xe6c <timer0Config+0x64>
     e56:	14 c0       	rjmp	.+40     	; 0xe80 <timer0Config+0x78>
     e58:	85 30       	cpi	r24, 0x05	; 5
     e5a:	39 f0       	breq	.+14     	; 0xe6a <timer0Config+0x62>
     e5c:	87 30       	cpi	r24, 0x07	; 7
     e5e:	41 f0       	breq	.+16     	; 0xe70 <timer0Config+0x68>
     e60:	83 30       	cpi	r24, 0x03	; 3
     e62:	71 f4       	brne	.+28     	; 0xe80 <timer0Config+0x78>
     e64:	06 c0       	rjmp	.+12     	; 0xe72 <timer0Config+0x6a>
			case TIMER_A_MODE_NORMAL:						break;
			case TIMER_A_MODE_PWM_PHASE_CORRECTED_MAX:		regA |= (1 << WGM00);	break;
			case TIMER_A_MODE_CTC:							regA |= (2 << WGM00);	break;
     e66:	22 60       	ori	r18, 0x02	; 2
     e68:	05 c0       	rjmp	.+10     	; 0xe74 <timer0Config+0x6c>
			case TIMER_A_MODE_FAST_PWM_MAX:					regA |= (3 << WGM00);	break;
			case TIMER_A_MODE_PWM_PHASE_CORRECTED_OCRA:		setBit(regB, WGM02);regA |= (1 << WGM00);	break;
     e6a:	98 60       	ori	r25, 0x08	; 8
     e6c:	21 60       	ori	r18, 0x01	; 1
     e6e:	02 c0       	rjmp	.+4      	; 0xe74 <timer0Config+0x6c>
			case TIMER_A_MODE_FAST_PWM_OCRA:				setBit(regB, WGM02);regA |= (3 << WGM00);	break;
     e70:	98 60       	ori	r25, 0x08	; 8
     e72:	23 60       	ori	r18, 0x03	; 3
			case TIMER_A_MODE_NO_CHANGE:					break;
			default:										return RESULT_TIMER_MODE_VALUE_UNSUPPORTED;	break;
		}
	}
	TCCR0A = regA;
     e74:	24 bd       	out	0x24, r18	; 36
	TCCR0B = regB;
     e76:	95 bd       	out	0x25, r25	; 37

	return RESULT_OK;
     e78:	80 e0       	ldi	r24, 0x00	; 0
     e7a:	08 95       	ret
			case TIMER_A_PRESCALER_256:					regB |= (4 << CS00);	break;
			case TIMER_A_PRESCALER_1024:				regB |= (5 << CS00);	break;
			case TIMER_A_PRESCALER_T0_FALLING_EDGE:		regB |= (6 << CS00);	break;
			case TIMER_A_PRESCALER_T0_RISING_EDGE:		regB |= (7 << CS00);	break;
			case TIMER_A_PRESCALER_NO_CHANGE:			break;
			default:									return RESULT_TIMER_PRESCALER_VALUE_UNSUPPORTED;	break;
     e7c:	83 e0       	ldi	r24, 0x03	; 3
     e7e:	08 95       	ret
			case TIMER_A_MODE_CTC:							regA |= (2 << WGM00);	break;
			case TIMER_A_MODE_FAST_PWM_MAX:					regA |= (3 << WGM00);	break;
			case TIMER_A_MODE_PWM_PHASE_CORRECTED_OCRA:		setBit(regB, WGM02);regA |= (1 << WGM00);	break;
			case TIMER_A_MODE_FAST_PWM_OCRA:				setBit(regB, WGM02);regA |= (3 << WGM00);	break;
			case TIMER_A_MODE_NO_CHANGE:					break;
			default:										return RESULT_TIMER_MODE_VALUE_UNSUPPORTED;	break;
     e80:	84 e0       	ldi	r24, 0x04	; 4
	}
	TCCR0A = regA;
	TCCR0B = regB;

	return RESULT_OK;
}
     e82:	08 95       	ret

00000e84 <timer0OutputConfig>:
 * Configures the timer0 compare outputs
 * -------------------------------------------------------------------------- */

resultValue_t timer0OutputConfig(timerOutput_t compA, timerOutput_t compB)
{
	uint8 reg = TCCR0A;
     e84:	94 b5       	in	r25, 0x24	; 36

	if(compA != TIMER_PORT_NO_CHANGE){
     e86:	8f 3f       	cpi	r24, 0xFF	; 255
     e88:	69 f0       	breq	.+26     	; 0xea4 <timer0OutputConfig+0x20>
		reg &= ~(0x03 << COM0A0);
     e8a:	9f 73       	andi	r25, 0x3F	; 63
		switch(compA){
     e8c:	81 30       	cpi	r24, 0x01	; 1
     e8e:	39 f0       	breq	.+14     	; 0xe9e <timer0OutputConfig+0x1a>
     e90:	48 f0       	brcs	.+18     	; 0xea4 <timer0OutputConfig+0x20>
     e92:	82 30       	cpi	r24, 0x02	; 2
     e94:	31 f0       	breq	.+12     	; 0xea2 <timer0OutputConfig+0x1e>
     e96:	83 30       	cpi	r24, 0x03	; 3
     e98:	e1 f4       	brne	.+56     	; 0xed2 <timer0OutputConfig+0x4e>
			case TIMER_PORT_NORMAL:				break;
			case TIMER_PORT_TOGGLE_ON_COMPARE:	reg |= (1 << COM0A0);	break;
			case TIMER_PORT_CLEAR_ON_COMPARE:	reg |= (2 << COM0A0);	break;
			case TIMER_PORT_SET_ON_COMPARE:		reg |= (3 << COM0A0);	break;
     e9a:	90 6c       	ori	r25, 0xC0	; 192
     e9c:	03 c0       	rjmp	.+6      	; 0xea4 <timer0OutputConfig+0x20>

	if(compA != TIMER_PORT_NO_CHANGE){
		reg &= ~(0x03 << COM0A0);
		switch(compA){
			case TIMER_PORT_NORMAL:				break;
			case TIMER_PORT_TOGGLE_ON_COMPARE:	reg |= (1 << COM0A0);	break;
     e9e:	90 64       	ori	r25, 0x40	; 64
     ea0:	01 c0       	rjmp	.+2      	; 0xea4 <timer0OutputConfig+0x20>
			case TIMER_PORT_CLEAR_ON_COMPARE:	reg |= (2 << COM0A0);	break;
     ea2:	90 68       	ori	r25, 0x80	; 128
			case TIMER_PORT_SET_ON_COMPARE:		reg |= (3 << COM0A0);	break;
			case TIMER_PORT_NO_CHANGE:			break;
			default:							return RESULT_PORT_VALUE_UNSUPPORTED;	break;
		}
	}
	if(compB != TIMER_PORT_NO_CHANGE){
     ea4:	6f 3f       	cpi	r22, 0xFF	; 255
     ea6:	91 f0       	breq	.+36     	; 0xecc <timer0OutputConfig+0x48>
		reg &= ~(0x03 << COM0B0);
     ea8:	9f 7c       	andi	r25, 0xCF	; 207
		switch(compA){
     eaa:	82 30       	cpi	r24, 0x02	; 2
     eac:	61 f0       	breq	.+24     	; 0xec6 <timer0OutputConfig+0x42>
     eae:	30 f4       	brcc	.+12     	; 0xebc <timer0OutputConfig+0x38>
     eb0:	88 23       	and	r24, r24
     eb2:	61 f0       	breq	.+24     	; 0xecc <timer0OutputConfig+0x48>
     eb4:	81 30       	cpi	r24, 0x01	; 1
     eb6:	69 f4       	brne	.+26     	; 0xed2 <timer0OutputConfig+0x4e>
			case TIMER_PORT_NORMAL:				break;
			case TIMER_PORT_TOGGLE_ON_COMPARE:	reg |= (1 << COM0B0);	break;
     eb8:	90 61       	ori	r25, 0x10	; 16
     eba:	08 c0       	rjmp	.+16     	; 0xecc <timer0OutputConfig+0x48>
			default:							return RESULT_PORT_VALUE_UNSUPPORTED;	break;
		}
	}
	if(compB != TIMER_PORT_NO_CHANGE){
		reg &= ~(0x03 << COM0B0);
		switch(compA){
     ebc:	83 30       	cpi	r24, 0x03	; 3
     ebe:	29 f0       	breq	.+10     	; 0xeca <timer0OutputConfig+0x46>
     ec0:	8f 3f       	cpi	r24, 0xFF	; 255
     ec2:	21 f0       	breq	.+8      	; 0xecc <timer0OutputConfig+0x48>
     ec4:	06 c0       	rjmp	.+12     	; 0xed2 <timer0OutputConfig+0x4e>
			case TIMER_PORT_NORMAL:				break;
			case TIMER_PORT_TOGGLE_ON_COMPARE:	reg |= (1 << COM0B0);	break;
			case TIMER_PORT_CLEAR_ON_COMPARE:	reg |= (2 << COM0B0);	break;
     ec6:	90 62       	ori	r25, 0x20	; 32
     ec8:	01 c0       	rjmp	.+2      	; 0xecc <timer0OutputConfig+0x48>
			case TIMER_PORT_SET_ON_COMPARE:		reg |= (3 << COM0B0);	break;
     eca:	90 63       	ori	r25, 0x30	; 48
			case TIMER_PORT_NO_CHANGE:			break;
			default:							return RESULT_PORT_VALUE_UNSUPPORTED;	break;
		}
	}
	TCCR0A = reg;
     ecc:	94 bd       	out	0x24, r25	; 36
	return RESULT_OK;
     ece:	80 e0       	ldi	r24, 0x00	; 0
     ed0:	08 95       	ret
			case TIMER_PORT_NORMAL:				break;
			case TIMER_PORT_TOGGLE_ON_COMPARE:	reg |= (1 << COM0B0);	break;
			case TIMER_PORT_CLEAR_ON_COMPARE:	reg |= (2 << COM0B0);	break;
			case TIMER_PORT_SET_ON_COMPARE:		reg |= (3 << COM0B0);	break;
			case TIMER_PORT_NO_CHANGE:			break;
			default:							return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     ed2:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	TCCR0A = reg;
	return RESULT_OK;
}
     ed4:	08 95       	ret

00000ed6 <timer0ActivateOverflowInterrupt>:
 * Activates the timer0 overflow interrupt
 * -------------------------------------------------------------------------- */

void timer0ActivateOverflowInterrupt(void)
{
	setBit(TIMSK0, TOIE0);
     ed6:	ee e6       	ldi	r30, 0x6E	; 110
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	80 81       	ld	r24, Z
     edc:	81 60       	ori	r24, 0x01	; 1
     ede:	80 83       	st	Z, r24
     ee0:	08 95       	ret

00000ee2 <timer0DeactivateOverflowInterrupt>:
 * Deactivates the timer0 overflow interrupt
 * -------------------------------------------------------------------------- */

void timer0DeactivateOverflowInterrupt(void)
{
	clrBit(TIMSK0, TOIE0);
     ee2:	ee e6       	ldi	r30, 0x6E	; 110
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	80 81       	ld	r24, Z
     ee8:	8e 7f       	andi	r24, 0xFE	; 254
     eea:	80 83       	st	Z, r24
     eec:	08 95       	ret

00000eee <timer0ClearOverflowInterruptRequest>:
 * Clears the timer0 overflow interrupt request
 * -------------------------------------------------------------------------- */

void timer0ClearOverflowInterruptRequest(void)
{
	setBit(TIFR0, TOV0);
     eee:	a8 9a       	sbi	0x15, 0	; 21
     ef0:	08 95       	ret

00000ef2 <timer0ActivateCompareAInterrupt>:
 * Activates the timer0 compare A interrupt
 * -------------------------------------------------------------------------- */

void timer0ActivateCompareAInterrupt(void)
{
	setBit(TIMSK0, OCIE0A);
     ef2:	ee e6       	ldi	r30, 0x6E	; 110
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	80 81       	ld	r24, Z
     ef8:	82 60       	ori	r24, 0x02	; 2
     efa:	80 83       	st	Z, r24
     efc:	08 95       	ret

00000efe <timer0DeactivateCompareAInterrupt>:
 * Deactivates the timer0 compare A interrupt
 * -------------------------------------------------------------------------- */

void timer0DeactivateCompareAInterrupt(void)
{
	clrBit(TIMSK0, OCIE0A);
     efe:	ee e6       	ldi	r30, 0x6E	; 110
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	80 81       	ld	r24, Z
     f04:	8d 7f       	andi	r24, 0xFD	; 253
     f06:	80 83       	st	Z, r24
     f08:	08 95       	ret

00000f0a <timer0ClearCompareAInterruptRequest>:
 * Clears the timer0 compare A interrupt request
 * -------------------------------------------------------------------------- */

void timer0ClearCompareAInterruptRequest(void)
{
	setBit(TIFR0, OCF0A);
     f0a:	a9 9a       	sbi	0x15, 1	; 21
     f0c:	08 95       	ret

00000f0e <timer0ActivateCompareBInterrupt>:
 * Activates the timer0 compare B interrupt
 * -------------------------------------------------------------------------- */

void timer0ActivateCompareBInterrupt(void)
{
	setBit(TIMSK0, OCIE0B);
     f0e:	ee e6       	ldi	r30, 0x6E	; 110
     f10:	f0 e0       	ldi	r31, 0x00	; 0
     f12:	80 81       	ld	r24, Z
     f14:	84 60       	ori	r24, 0x04	; 4
     f16:	80 83       	st	Z, r24
     f18:	08 95       	ret

00000f1a <timer0DeactivateCompareBInterrupt>:
 * Deactivates the timer0 compare B interrupt
 * -------------------------------------------------------------------------- */

void timer0DeactivateCompareBInterrupt(void)
{
	clrBit(TIMSK0, OCIE0B);
     f1a:	ee e6       	ldi	r30, 0x6E	; 110
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	80 81       	ld	r24, Z
     f20:	8b 7f       	andi	r24, 0xFB	; 251
     f22:	80 83       	st	Z, r24
     f24:	08 95       	ret

00000f26 <timer0ClearCompareBInterruptRequest>:
 * Clears the timer0 compare B interrupt request
 * -------------------------------------------------------------------------- */

void timer0ClearCompareBInterruptRequest(void)
{
	setBit(TIFR0, OCF0B);
     f26:	aa 9a       	sbi	0x15, 2	; 21
     f28:	08 95       	ret

00000f2a <timer0ForceCompareA>:
 * Forces a comparison on the output compare A of the timer0
 * -------------------------------------------------------------------------- */

void timer0ForceCompareA(void)
{
	setBit(TCCR0B, FOC0A);
     f2a:	85 b5       	in	r24, 0x25	; 37
     f2c:	80 68       	ori	r24, 0x80	; 128
     f2e:	85 bd       	out	0x25, r24	; 37
     f30:	08 95       	ret

00000f32 <timer0ForceCompareB>:
 * Forces a comparison on the output compare B of the timer0
 * -------------------------------------------------------------------------- */

void timer0ForceCompareB(void)
{
	setBit(TCCR0B, FOC0B);
     f32:	85 b5       	in	r24, 0x25	; 37
     f34:	80 64       	ori	r24, 0x40	; 64
     f36:	85 bd       	out	0x25, r24	; 37
     f38:	08 95       	ret

00000f3a <timer0SetCounterValue>:
 * Sets the timer0 counter value
 * -------------------------------------------------------------------------- */

void timer0SetCounterValue(uint8 value)
{
	TCNT0 = value;
     f3a:	86 bd       	out	0x26, r24	; 38
     f3c:	08 95       	ret

00000f3e <timer0GetCounterValue>:
 * Gets the timer0 counter value
 * -------------------------------------------------------------------------- */

uint8 timer0GetCounterValue(void)
{
	return TCNT0;
     f3e:	86 b5       	in	r24, 0x26	; 38
}
     f40:	08 95       	ret

00000f42 <timer0SetCompareAValue>:
 * Sets the timer0 compare A value
 * -------------------------------------------------------------------------- */

void timer0SetCompareAValue(uint8 value)
{
	OCR0A = value;
     f42:	87 bd       	out	0x27, r24	; 39
     f44:	08 95       	ret

00000f46 <timer0GetCompareAValue>:
 * Gets the timer0 compare A value
 * -------------------------------------------------------------------------- */

uint8 timer0GetCompareAValue(void)
{
	return OCR0A;
     f46:	87 b5       	in	r24, 0x27	; 39
}
     f48:	08 95       	ret

00000f4a <timer0SetCompareBValue>:
 * Sets the timer0 compare B value
 * -------------------------------------------------------------------------- */

void timer0SetCompareBValue(uint8 value)
{
	OCR0B = value;
     f4a:	88 bd       	out	0x28, r24	; 40
     f4c:	08 95       	ret

00000f4e <timer0GetCompareBValue>:
 * Gets the timer0 compare B value
 * -------------------------------------------------------------------------- */

uint8 timer0GetCompareBValue(void)
{
	return OCR0B;
     f4e:	88 b5       	in	r24, 0x28	; 40
}
     f50:	08 95       	ret

00000f52 <timer1Config>:
 * Configures the timer1 mode and prescaler
 * -------------------------------------------------------------------------- */

resultValue_t timer1Config(timerModeB_t mode, timerPrescalerValueA_t prescaler)
{
	uint8 reg1 = TCCR1A;
     f52:	20 91 80 00 	lds	r18, 0x0080
	uint8 reg2 = TCCR1B;
     f56:	90 91 81 00 	lds	r25, 0x0081

	if(prescaler != TIMER_A_PRESCALER_NO_CHANGE){
     f5a:	6f 3f       	cpi	r22, 0xFF	; 255
     f5c:	11 f0       	breq	.+4      	; 0xf62 <timer1Config+0x10>
		reg2 &= ~(0x07 << CS10);
     f5e:	98 7f       	andi	r25, 0xF8	; 248
		reg2 |= prescaler;
     f60:	96 2b       	or	r25, r22
	}

	if(mode != TIMER_B_MODE_NO_CHANGE){
     f62:	8f 3f       	cpi	r24, 0xFF	; 255
     f64:	69 f0       	breq	.+26     	; 0xf80 <timer1Config+0x2e>
		if(isBitSet(mode, 3))
     f66:	83 ff       	sbrs	r24, 3
     f68:	02 c0       	rjmp	.+4      	; 0xf6e <timer1Config+0x1c>
			setBit(reg2, WGM13);
     f6a:	90 61       	ori	r25, 0x10	; 16
     f6c:	01 c0       	rjmp	.+2      	; 0xf70 <timer1Config+0x1e>
		else
			clrBit(reg2, WGM13);
     f6e:	9f 7e       	andi	r25, 0xEF	; 239
		if(isBitSet(mode, 2))
     f70:	82 ff       	sbrs	r24, 2
     f72:	02 c0       	rjmp	.+4      	; 0xf78 <timer1Config+0x26>
			setBit(reg2, WGM12);
     f74:	98 60       	ori	r25, 0x08	; 8
     f76:	01 c0       	rjmp	.+2      	; 0xf7a <timer1Config+0x28>
		else
			clrBit(reg2, WGM12);
     f78:	97 7f       	andi	r25, 0xF7	; 247
		reg1 &= ~(0x03 << WGM10);
		reg1 |= (mode & 0x03);
     f7a:	83 70       	andi	r24, 0x03	; 3
			clrBit(reg2, WGM13);
		if(isBitSet(mode, 2))
			setBit(reg2, WGM12);
		else
			clrBit(reg2, WGM12);
		reg1 &= ~(0x03 << WGM10);
     f7c:	2c 7f       	andi	r18, 0xFC	; 252
		reg1 |= (mode & 0x03);
     f7e:	28 2b       	or	r18, r24
	}
	TCCR1A = reg1;
     f80:	20 93 80 00 	sts	0x0080, r18
	TCCR1B = reg2;
     f84:	90 93 81 00 	sts	0x0081, r25

	return RESULT_OK;
}
     f88:	80 e0       	ldi	r24, 0x00	; 0
     f8a:	08 95       	ret

00000f8c <timer1OutputConfig>:
 * Configures the timer1 compare outputs
 * -------------------------------------------------------------------------- */

resultValue_t timer1OutputConfig(timerOutput_t compA, timerOutput_t compB)
{
	uint8 aux8 = TCCR1A;
     f8c:	20 91 80 00 	lds	r18, 0x0080

	if(compA != TIMER_PORT_NO_CHANGE){
     f90:	8f 3f       	cpi	r24, 0xFF	; 255
     f92:	31 f0       	breq	.+12     	; 0xfa0 <timer1OutputConfig+0x14>
		aux8 &= ~(0x03 << COM1A0);
		aux8 |= (compA << COM1A0); 
     f94:	30 e4       	ldi	r19, 0x40	; 64
     f96:	83 9f       	mul	r24, r19
     f98:	c0 01       	movw	r24, r0
     f9a:	11 24       	eor	r1, r1
resultValue_t timer1OutputConfig(timerOutput_t compA, timerOutput_t compB)
{
	uint8 aux8 = TCCR1A;

	if(compA != TIMER_PORT_NO_CHANGE){
		aux8 &= ~(0x03 << COM1A0);
     f9c:	2f 73       	andi	r18, 0x3F	; 63
		aux8 |= (compA << COM1A0); 
     f9e:	28 2b       	or	r18, r24
	}
	if(compB != TIMER_PORT_NO_CHANGE){
     fa0:	6f 3f       	cpi	r22, 0xFF	; 255
     fa2:	31 f0       	breq	.+12     	; 0xfb0 <timer1OutputConfig+0x24>
		aux8 &= ~(0x03 << COM1B0);
     fa4:	2f 7c       	andi	r18, 0xCF	; 207
		aux8 |= (compB << COM1B0); 
     fa6:	80 e1       	ldi	r24, 0x10	; 16
     fa8:	68 9f       	mul	r22, r24
     faa:	b0 01       	movw	r22, r0
     fac:	11 24       	eor	r1, r1
     fae:	26 2b       	or	r18, r22
	}
	TCCR1A = aux8;
     fb0:	20 93 80 00 	sts	0x0080, r18
	return RESULT_OK;
}
     fb4:	80 e0       	ldi	r24, 0x00	; 0
     fb6:	08 95       	ret

00000fb8 <timer1InputCaptureNoiseCancelerConfig>:
 * Configures the noise canceler of input capture of timer1
 * -------------------------------------------------------------------------- */

resultValue_t	timer1InputCaptureNoiseCancelerConfig(timerInputCaptureNoiseCanceler_t mode)
{
	uint8 aux8 = TCCR1B;
     fb8:	e1 e8       	ldi	r30, 0x81	; 129
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	90 81       	ld	r25, Z

	aux8 &= ~(0x03 << ICES1);
     fbe:	9f 73       	andi	r25, 0x3F	; 63
	aux8 |= mode;
     fc0:	98 2b       	or	r25, r24

	TCCR1B = aux8;
     fc2:	90 83       	st	Z, r25
	return RESULT_OK;
}
     fc4:	80 e0       	ldi	r24, 0x00	; 0
     fc6:	08 95       	ret

00000fc8 <timer1ActivateOverflowInterrupt>:
 * Activates the timer1 overflow interrupt
 * -------------------------------------------------------------------------- */

resultValue_t timer1ActivateOverflowInterrupt(void)
{
	setBit(TIMSK1, TOIE1);
     fc8:	ef e6       	ldi	r30, 0x6F	; 111
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	80 81       	ld	r24, Z
     fce:	81 60       	ori	r24, 0x01	; 1
     fd0:	80 83       	st	Z, r24
	return RESULT_OK;
}
     fd2:	80 e0       	ldi	r24, 0x00	; 0
     fd4:	08 95       	ret

00000fd6 <timer1DeactivateOverflowInterrupt>:
 * Deactivates the timer1 overflow interrupt
 * -------------------------------------------------------------------------- */

resultValue_t timer1DeactivateOverflowInterrupt(void)
{
	clrBit(TIMSK1, TOIE1);
     fd6:	ef e6       	ldi	r30, 0x6F	; 111
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	80 81       	ld	r24, Z
     fdc:	8e 7f       	andi	r24, 0xFE	; 254
     fde:	80 83       	st	Z, r24
	return RESULT_OK;
}
     fe0:	80 e0       	ldi	r24, 0x00	; 0
     fe2:	08 95       	ret

00000fe4 <timer1ClearOverflowInterruptRequest>:
 * Clears the timer1 overflow interrupt request
 * -------------------------------------------------------------------------- */

resultValue_t timer1ClearOverflowInterruptRequest(void)
{
	setBit(TIFR1, TOV1);
     fe4:	b0 9a       	sbi	0x16, 0	; 22
	return RESULT_OK;
}
     fe6:	80 e0       	ldi	r24, 0x00	; 0
     fe8:	08 95       	ret

00000fea <timer1ActivateCompareAInterrupt>:
 * Activates the timer1 compare A interrupt
 * -------------------------------------------------------------------------- */

resultValue_t timer1ActivateCompareAInterrupt(void)
{
	setBit(TIMSK1, OCIE1A);
     fea:	ef e6       	ldi	r30, 0x6F	; 111
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	80 81       	ld	r24, Z
     ff0:	82 60       	ori	r24, 0x02	; 2
     ff2:	80 83       	st	Z, r24
	return RESULT_OK;
}
     ff4:	80 e0       	ldi	r24, 0x00	; 0
     ff6:	08 95       	ret

00000ff8 <timer1DeactivateCompareAInterrupt>:
 * Deactivates the timer1 compare A interrupt
 * -------------------------------------------------------------------------- */

resultValue_t timer1DeactivateCompareAInterrupt(void)
{
	clrBit(TIMSK1, OCIE1A);
     ff8:	ef e6       	ldi	r30, 0x6F	; 111
     ffa:	f0 e0       	ldi	r31, 0x00	; 0
     ffc:	80 81       	ld	r24, Z
     ffe:	8d 7f       	andi	r24, 0xFD	; 253
    1000:	80 83       	st	Z, r24
	return RESULT_OK;
}
    1002:	80 e0       	ldi	r24, 0x00	; 0
    1004:	08 95       	ret

00001006 <timer1ClearCompareAInterruptRequest>:
 * Clears the timer1 compare A interrupt request
 * -------------------------------------------------------------------------- */

resultValue_t timer1ClearCompareAInterruptRequest(void)
{
	setBit(TIFR1, OCF1A);
    1006:	b1 9a       	sbi	0x16, 1	; 22
	return RESULT_OK;
}
    1008:	80 e0       	ldi	r24, 0x00	; 0
    100a:	08 95       	ret

0000100c <timer1ActivateCompareBInterrupt>:
 * Activates the timer1 compare B interrupt
 * -------------------------------------------------------------------------- */

resultValue_t timer1ActivateCompareBInterrupt(void)
{
	setBit(TIMSK1, OCIE1B);
    100c:	ef e6       	ldi	r30, 0x6F	; 111
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	80 81       	ld	r24, Z
    1012:	84 60       	ori	r24, 0x04	; 4
    1014:	80 83       	st	Z, r24
	return RESULT_OK;
}
    1016:	80 e0       	ldi	r24, 0x00	; 0
    1018:	08 95       	ret

0000101a <timer1DeactivateCompareBInterrupt>:
 * Deactivates the timer1 compare B interrupt
 * -------------------------------------------------------------------------- */

resultValue_t timer1DeactivateCompareBInterrupt(void)
{
	clrBit(TIMSK1, OCIE1B);
    101a:	ef e6       	ldi	r30, 0x6F	; 111
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	80 81       	ld	r24, Z
    1020:	8b 7f       	andi	r24, 0xFB	; 251
    1022:	80 83       	st	Z, r24
	return RESULT_OK;
}
    1024:	80 e0       	ldi	r24, 0x00	; 0
    1026:	08 95       	ret

00001028 <timer1ClearCompareBInterruptRequest>:
 * Clears the timer1 compare B interrupt request
 * -------------------------------------------------------------------------- */

resultValue_t timer1ClearCompareBInterruptRequest(void)
{
	setBit(TIFR1, OCF1B);
    1028:	b2 9a       	sbi	0x16, 2	; 22
	return RESULT_OK;
}
    102a:	80 e0       	ldi	r24, 0x00	; 0
    102c:	08 95       	ret

0000102e <timer1ActivateInputCaptureInterrupt>:
 * Activates the timer1 input capture interrupt
 * -------------------------------------------------------------------------- */

resultValue_t timer1ActivateInputCaptureInterrupt(void)
{
	setBit(TIMSK1, ICIE1);
    102e:	ef e6       	ldi	r30, 0x6F	; 111
    1030:	f0 e0       	ldi	r31, 0x00	; 0
    1032:	80 81       	ld	r24, Z
    1034:	80 62       	ori	r24, 0x20	; 32
    1036:	80 83       	st	Z, r24
	return RESULT_OK;
}
    1038:	80 e0       	ldi	r24, 0x00	; 0
    103a:	08 95       	ret

0000103c <timer1DeactivateInputCaptureInterrupt>:
 * Deactivates the timer1 input capture interrupt
 * -------------------------------------------------------------------------- */

resultValue_t timer1DeactivateInputCaptureInterrupt(void)
{
	clrBit(TIMSK1, ICIE1);
    103c:	ef e6       	ldi	r30, 0x6F	; 111
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	80 81       	ld	r24, Z
    1042:	8f 7d       	andi	r24, 0xDF	; 223
    1044:	80 83       	st	Z, r24
	return RESULT_OK;
}
    1046:	80 e0       	ldi	r24, 0x00	; 0
    1048:	08 95       	ret

0000104a <timer1ClearInputCaptureInterruptRequest>:
 * Clears the timer1 input capture interrupt request
 * -------------------------------------------------------------------------- */

resultValue_t timer1ClearInputCaptureInterruptRequest(void)
{
	setBit(TIFR1, ICF1);
    104a:	b5 9a       	sbi	0x16, 5	; 22
	return RESULT_OK;
}
    104c:	80 e0       	ldi	r24, 0x00	; 0
    104e:	08 95       	ret

00001050 <timer1ForceCompareA>:
 * Forces a comparison on the output compare A of the timer1
 * -------------------------------------------------------------------------- */

resultValue_t timer1ForceCompareA(void)
{
	setBit(TCCR1C, FOC1A);
    1050:	e2 e8       	ldi	r30, 0x82	; 130
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	80 81       	ld	r24, Z
    1056:	80 68       	ori	r24, 0x80	; 128
    1058:	80 83       	st	Z, r24
	return RESULT_OK;
}
    105a:	80 e0       	ldi	r24, 0x00	; 0
    105c:	08 95       	ret

0000105e <timer1ForceCompareB>:
 * Forces a comparison on the output compare B of the timer1
 * -------------------------------------------------------------------------- */

resultValue_t timer1ForceCompareB(void)
{
	setBit(TCCR1C, FOC1B);
    105e:	e2 e8       	ldi	r30, 0x82	; 130
    1060:	f0 e0       	ldi	r31, 0x00	; 0
    1062:	80 81       	ld	r24, Z
    1064:	80 64       	ori	r24, 0x40	; 64
    1066:	80 83       	st	Z, r24
	return RESULT_OK;
}
    1068:	80 e0       	ldi	r24, 0x00	; 0
    106a:	08 95       	ret

0000106c <timer1SetCounterValue>:
 * Sets the timer1 counter value
 * -------------------------------------------------------------------------- */

resultValue_t timer1SetCounterValue(uint16 value)
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    106c:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    106e:	f8 94       	cli
		TCNT1 = value;
    1070:	90 93 85 00 	sts	0x0085, r25
    1074:	80 93 84 00 	sts	0x0084, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1078:	2f bf       	out	0x3f, r18	; 63
	}
	return RESULT_OK;
}
    107a:	80 e0       	ldi	r24, 0x00	; 0
    107c:	08 95       	ret

0000107e <timer1GetCounterValue>:
 * Gets the timer1 counter value
 * -------------------------------------------------------------------------- */

uint16 timer1GetCounterValue(void)
{
	return TCNT1;
    107e:	80 91 84 00 	lds	r24, 0x0084
    1082:	90 91 85 00 	lds	r25, 0x0085
}
    1086:	08 95       	ret

00001088 <timer1SetCompareAValue>:
 * Sets the timer1 compare A value
 * -------------------------------------------------------------------------- */

resultValue_t timer1SetCompareAValue(uint16 value)
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    1088:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    108a:	f8 94       	cli
		OCR1A = value;
    108c:	90 93 89 00 	sts	0x0089, r25
    1090:	80 93 88 00 	sts	0x0088, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1094:	2f bf       	out	0x3f, r18	; 63
	}
	return RESULT_OK;
}
    1096:	80 e0       	ldi	r24, 0x00	; 0
    1098:	08 95       	ret

0000109a <timer1GetCompareAValue>:
 * Gets the timer1 compare A value
 * -------------------------------------------------------------------------- */

uint16 timer1GetCompareAValue(void)
{
	return OCR1A;
    109a:	80 91 88 00 	lds	r24, 0x0088
    109e:	90 91 89 00 	lds	r25, 0x0089
}
    10a2:	08 95       	ret

000010a4 <timer1SetCompareBValue>:
 * Sets the timer1 compare B value
 * -------------------------------------------------------------------------- */

resultValue_t timer1SetCompareBValue(uint16 value)
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    10a4:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    10a6:	f8 94       	cli
		OCR1B = value;
    10a8:	90 93 8b 00 	sts	0x008B, r25
    10ac:	80 93 8a 00 	sts	0x008A, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    10b0:	2f bf       	out	0x3f, r18	; 63
	}
	return RESULT_OK;
}
    10b2:	80 e0       	ldi	r24, 0x00	; 0
    10b4:	08 95       	ret

000010b6 <timer1GetCompareBValue>:
 * Gets the timer1 compare B value
 * -------------------------------------------------------------------------- */

uint16 timer1GetCompareBValue(void)
{
	return OCR1B;
    10b6:	80 91 8a 00 	lds	r24, 0x008A
    10ba:	90 91 8b 00 	lds	r25, 0x008B
}
    10be:	08 95       	ret

000010c0 <timer1SetInputCaptureValue>:
 * Sets the timer1 input capture value
 * -------------------------------------------------------------------------- */

resultValue_t timer1SetInputCaptureValue(uint16 value)
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    10c0:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    10c2:	f8 94       	cli
		ICR1 = value;
    10c4:	90 93 87 00 	sts	0x0087, r25
    10c8:	80 93 86 00 	sts	0x0086, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    10cc:	2f bf       	out	0x3f, r18	; 63
	}
	return RESULT_OK;
}
    10ce:	80 e0       	ldi	r24, 0x00	; 0
    10d0:	08 95       	ret

000010d2 <timer1GetInputCaptureValue>:
 * Gets the timer1 input capture value
 * -------------------------------------------------------------------------- */

uint16 timer1GetInputCaptureValue(void)
{
	return ICR1;
    10d2:	80 91 86 00 	lds	r24, 0x0086
    10d6:	90 91 87 00 	lds	r25, 0x0087
}
    10da:	08 95       	ret

000010dc <timer2Config>:
 * Configures the timer2 mode and prescaler
 * -------------------------------------------------------------------------- */

resultValue_t timer2Config(timerModeA_t mode, timerPrescalerValueB_t prescaler)
{
	uint8 reg1 = TCCR2A;
    10dc:	20 91 b0 00 	lds	r18, 0x00B0
	uint8 reg2 = TCCR2B;
    10e0:	90 91 b1 00 	lds	r25, 0x00B1

	if(prescaler != TIMER_B_PRESCALER_NO_CHANGE){
    10e4:	6f 3f       	cpi	r22, 0xFF	; 255
    10e6:	11 f0       	breq	.+4      	; 0x10ec <timer2Config+0x10>
		reg2 &= ~(0x07 << CS20);
    10e8:	98 7f       	andi	r25, 0xF8	; 248
		reg2 |= prescaler;
    10ea:	96 2b       	or	r25, r22
	}

	if(mode != TIMER_A_MODE_NO_CHANGE){
    10ec:	8f 3f       	cpi	r24, 0xFF	; 255
    10ee:	41 f0       	breq	.+16     	; 0x1100 <timer2Config+0x24>
		if(isBitSet(mode, 2))
    10f0:	82 ff       	sbrs	r24, 2
    10f2:	02 c0       	rjmp	.+4      	; 0x10f8 <timer2Config+0x1c>
			setBit(reg2, WGM22);
    10f4:	98 60       	ori	r25, 0x08	; 8
    10f6:	01 c0       	rjmp	.+2      	; 0x10fa <timer2Config+0x1e>
		else
			clrBit(reg2, WGM22);
    10f8:	97 7f       	andi	r25, 0xF7	; 247
		reg1 &= ~(0x03 << WGM20);
		reg1 |= (mode & 0x03);
    10fa:	83 70       	andi	r24, 0x03	; 3
	if(mode != TIMER_A_MODE_NO_CHANGE){
		if(isBitSet(mode, 2))
			setBit(reg2, WGM22);
		else
			clrBit(reg2, WGM22);
		reg1 &= ~(0x03 << WGM20);
    10fc:	2c 7f       	andi	r18, 0xFC	; 252
		reg1 |= (mode & 0x03);
    10fe:	28 2b       	or	r18, r24
	}
	TCCR2A = reg1;
    1100:	20 93 b0 00 	sts	0x00B0, r18
	TCCR2B = reg2;
    1104:	90 93 b1 00 	sts	0x00B1, r25

	return RESULT_OK;
}
    1108:	80 e0       	ldi	r24, 0x00	; 0
    110a:	08 95       	ret

0000110c <timer2OutputConfig>:
 * Configures the timer2 compare outputs
 * -------------------------------------------------------------------------- */

resultValue_t timer2OutputConfig(timerOutput_t compA, timerOutput_t compB)
{
	uint8 aux8 = TCCR2A;
    110c:	20 91 b0 00 	lds	r18, 0x00B0

	if(compA != TIMER_PORT_NO_CHANGE){
    1110:	8f 3f       	cpi	r24, 0xFF	; 255
    1112:	31 f0       	breq	.+12     	; 0x1120 <timer2OutputConfig+0x14>
		aux8 &= ~(0x03 << COM2A0);
		aux8 |= (compA << COM2A0); 
    1114:	30 e4       	ldi	r19, 0x40	; 64
    1116:	83 9f       	mul	r24, r19
    1118:	c0 01       	movw	r24, r0
    111a:	11 24       	eor	r1, r1
resultValue_t timer2OutputConfig(timerOutput_t compA, timerOutput_t compB)
{
	uint8 aux8 = TCCR2A;

	if(compA != TIMER_PORT_NO_CHANGE){
		aux8 &= ~(0x03 << COM2A0);
    111c:	2f 73       	andi	r18, 0x3F	; 63
		aux8 |= (compA << COM2A0); 
    111e:	28 2b       	or	r18, r24
	}
	if(compB != TIMER_PORT_NO_CHANGE){
    1120:	6f 3f       	cpi	r22, 0xFF	; 255
    1122:	31 f0       	breq	.+12     	; 0x1130 <timer2OutputConfig+0x24>
		aux8 &= ~(0x03 << COM2B0);
    1124:	2f 7c       	andi	r18, 0xCF	; 207
		aux8 |= (compB << COM2B0); 
    1126:	80 e1       	ldi	r24, 0x10	; 16
    1128:	68 9f       	mul	r22, r24
    112a:	b0 01       	movw	r22, r0
    112c:	11 24       	eor	r1, r1
    112e:	26 2b       	or	r18, r22
	}
	TCCR2A = aux8;
    1130:	20 93 b0 00 	sts	0x00B0, r18
	return RESULT_OK;
}
    1134:	80 e0       	ldi	r24, 0x00	; 0
    1136:	08 95       	ret

00001138 <timer2ActivateOverflowInterrupt>:
 * Activates the timer2 overflow interrupt
 * -------------------------------------------------------------------------- */

resultValue_t timer2ActivateOverflowInterrupt(void)
{
	setBit(TIMSK2, TOIE2);
    1138:	e0 e7       	ldi	r30, 0x70	; 112
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	80 81       	ld	r24, Z
    113e:	81 60       	ori	r24, 0x01	; 1
    1140:	80 83       	st	Z, r24
	return RESULT_OK;
}
    1142:	80 e0       	ldi	r24, 0x00	; 0
    1144:	08 95       	ret

00001146 <timer2DeactivateOverflowInterrupt>:
 * Deactivates the timer2 overflow interrupt
 * -------------------------------------------------------------------------- */

resultValue_t timer2DeactivateOverflowInterrupt(void)
{
	clrBit(TIMSK2, TOIE2);
    1146:	e0 e7       	ldi	r30, 0x70	; 112
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	80 81       	ld	r24, Z
    114c:	8e 7f       	andi	r24, 0xFE	; 254
    114e:	80 83       	st	Z, r24
	return RESULT_OK;
}
    1150:	80 e0       	ldi	r24, 0x00	; 0
    1152:	08 95       	ret

00001154 <timer2ClearOverflowInterruptRequest>:
 * Clears the timer2 overflow interrupt request
 * -------------------------------------------------------------------------- */

resultValue_t timer2ClearOverflowInterruptRequest(void)
{
	setBit(TIFR2, TOV2);
    1154:	b8 9a       	sbi	0x17, 0	; 23
	return RESULT_OK;
}
    1156:	80 e0       	ldi	r24, 0x00	; 0
    1158:	08 95       	ret

0000115a <timer2ActivateCompareAInterrupt>:
 * Activates the timer2 compare A interrupt
 * -------------------------------------------------------------------------- */

resultValue_t timer2ActivateCompareAInterrupt(void)
{
	setBit(TIMSK2, OCIE2A);
    115a:	e0 e7       	ldi	r30, 0x70	; 112
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	80 81       	ld	r24, Z
    1160:	82 60       	ori	r24, 0x02	; 2
    1162:	80 83       	st	Z, r24
	return RESULT_OK;
}
    1164:	80 e0       	ldi	r24, 0x00	; 0
    1166:	08 95       	ret

00001168 <timer2DeactivateCompareAInterrupt>:
 * Deactivates the timer2 compare A interrupt
 * -------------------------------------------------------------------------- */

resultValue_t timer2DeactivateCompareAInterrupt(void)
{
	clrBit(TIMSK2, OCIE2A);
    1168:	e0 e7       	ldi	r30, 0x70	; 112
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	80 81       	ld	r24, Z
    116e:	8d 7f       	andi	r24, 0xFD	; 253
    1170:	80 83       	st	Z, r24
	return RESULT_OK;
}
    1172:	80 e0       	ldi	r24, 0x00	; 0
    1174:	08 95       	ret

00001176 <timer2ClearCompareAInterruptRequest>:
 * Clears the timer2 compare A interrupt request
 * -------------------------------------------------------------------------- */

resultValue_t timer2ClearCompareAInterruptRequest(void)
{
	setBit(TIFR2, OCF2A);
    1176:	b9 9a       	sbi	0x17, 1	; 23
	return RESULT_OK;
}
    1178:	80 e0       	ldi	r24, 0x00	; 0
    117a:	08 95       	ret

0000117c <timer2ActivateCompareBInterrupt>:
 * Activates the timer2 compare B interrupt
 * -------------------------------------------------------------------------- */

resultValue_t timer2ActivateCompareBInterrupt(void)
{
	setBit(TIMSK2, OCIE2B);
    117c:	e0 e7       	ldi	r30, 0x70	; 112
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	80 81       	ld	r24, Z
    1182:	84 60       	ori	r24, 0x04	; 4
    1184:	80 83       	st	Z, r24
	return RESULT_OK;
}
    1186:	80 e0       	ldi	r24, 0x00	; 0
    1188:	08 95       	ret

0000118a <timer2DeactivateCompareBInterrupt>:
 * Deactivates the timer2 compare B interrupt
 * -------------------------------------------------------------------------- */

resultValue_t timer2DeactivateCompareBInterrupt(void)
{
	clrBit(TIMSK2, OCIE2B);
    118a:	e0 e7       	ldi	r30, 0x70	; 112
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	80 81       	ld	r24, Z
    1190:	8b 7f       	andi	r24, 0xFB	; 251
    1192:	80 83       	st	Z, r24
	return RESULT_OK;
}
    1194:	80 e0       	ldi	r24, 0x00	; 0
    1196:	08 95       	ret

00001198 <timer2ClearCompareBInterruptRequest>:
 * Clears the timer2 compare B interrupt request
 * -------------------------------------------------------------------------- */

resultValue_t timer2ClearCompareBInterruptRequest(void)
{
	setBit(TIFR2, OCF2B);
    1198:	ba 9a       	sbi	0x17, 2	; 23
	return RESULT_OK;
}
    119a:	80 e0       	ldi	r24, 0x00	; 0
    119c:	08 95       	ret

0000119e <timer2ForceCompareA>:
 * Forces a comparison on the output compare A of the timer2
 * -------------------------------------------------------------------------- */

resultValue_t timer2ForceCompareA(void)
{
	setBit(TCCR2B, FOC2A);
    119e:	e1 eb       	ldi	r30, 0xB1	; 177
    11a0:	f0 e0       	ldi	r31, 0x00	; 0
    11a2:	80 81       	ld	r24, Z
    11a4:	80 68       	ori	r24, 0x80	; 128
    11a6:	80 83       	st	Z, r24
	return RESULT_OK;
}
    11a8:	80 e0       	ldi	r24, 0x00	; 0
    11aa:	08 95       	ret

000011ac <timer2ForceCompareB>:
 * Forces a comparison on the output compare B of the timer2
 * -------------------------------------------------------------------------- */

resultValue_t timer2ForceCompareB(void)
{
	setBit(TCCR2B, FOC2B);
    11ac:	e1 eb       	ldi	r30, 0xB1	; 177
    11ae:	f0 e0       	ldi	r31, 0x00	; 0
    11b0:	80 81       	ld	r24, Z
    11b2:	80 64       	ori	r24, 0x40	; 64
    11b4:	80 83       	st	Z, r24
	return RESULT_OK;
}
    11b6:	80 e0       	ldi	r24, 0x00	; 0
    11b8:	08 95       	ret

000011ba <timer2SetCounterValue>:
 * Sets the timer2 counter value
 * -------------------------------------------------------------------------- */

resultValue_t timer2SetCounterValue(uint8 value)
{
	TCNT2 = value;
    11ba:	80 93 b2 00 	sts	0x00B2, r24
	return RESULT_OK;
}
    11be:	80 e0       	ldi	r24, 0x00	; 0
    11c0:	08 95       	ret

000011c2 <timer2GetCounterValue>:
 * Gets the timer2 counter value
 * -------------------------------------------------------------------------- */

uint8 timer2GetCounterValue(void)
{
	return TCNT2;
    11c2:	80 91 b2 00 	lds	r24, 0x00B2
}
    11c6:	08 95       	ret

000011c8 <timer2SetCompareAValue>:
 * Sets the timer2 compare A value
 * -------------------------------------------------------------------------- */

resultValue_t timer2SetCompareAValue(uint8 value)
{
	OCR2A = value;
    11c8:	80 93 b3 00 	sts	0x00B3, r24
	return RESULT_OK;
}
    11cc:	80 e0       	ldi	r24, 0x00	; 0
    11ce:	08 95       	ret

000011d0 <timer2GetCompareAValue>:
 * Gets the timer2 compare A value
 * -------------------------------------------------------------------------- */

uint8 timer2GetCompareAValue(void)
{
	return OCR2A;
    11d0:	80 91 b3 00 	lds	r24, 0x00B3
}
    11d4:	08 95       	ret

000011d6 <timer2SetCompareBValue>:
 * Sets the timer2 compare B value
 * -------------------------------------------------------------------------- */

resultValue_t timer2SetCompareBValue(uint8 value)
{
	OCR2B = value;
    11d6:	80 93 b4 00 	sts	0x00B4, r24
	return RESULT_OK;
}
    11da:	80 e0       	ldi	r24, 0x00	; 0
    11dc:	08 95       	ret

000011de <timer2GetCompareBValue>:
 * Gets the timer2 compare B value
 * -------------------------------------------------------------------------- */

uint8 timer2GetCompareBValue(void)
{
	return OCR2B;
    11de:	80 91 b4 00 	lds	r24, 0x00B4
}
    11e2:	08 95       	ret

000011e4 <adcConfig>:

resultValue_t adcConfig(adcMode_t mode, adcReference_t reference, adcPrescaler_t  prescaler)
{
	uint8 reg = 0;

	if(reference != ADC_REFERENCE_NO_CHANGE){
    11e4:	6f 3f       	cpi	r22, 0xFF	; 255
    11e6:	51 f0       	breq	.+20     	; 0x11fc <adcConfig+0x18>
		reg = ADMUX;
    11e8:	90 91 7c 00 	lds	r25, 0x007C
		reg &= ~(0x03 << REFS0);
		reg |= reference << REFS0;
    11ec:	20 e4       	ldi	r18, 0x40	; 64
    11ee:	62 9f       	mul	r22, r18
    11f0:	b0 01       	movw	r22, r0
    11f2:	11 24       	eor	r1, r1
{
	uint8 reg = 0;

	if(reference != ADC_REFERENCE_NO_CHANGE){
		reg = ADMUX;
		reg &= ~(0x03 << REFS0);
    11f4:	9f 73       	andi	r25, 0x3F	; 63
		reg |= reference << REFS0;
    11f6:	96 2b       	or	r25, r22
		ADMUX = reg;
    11f8:	90 93 7c 00 	sts	0x007C, r25
	}

	if(prescaler != ADC_PRESCALER_NO_CHANGE){
    11fc:	4f 3f       	cpi	r20, 0xFF	; 255
    11fe:	31 f0       	breq	.+12     	; 0x120c <adcConfig+0x28>
		reg = ADCSRA;
    1200:	90 91 7a 00 	lds	r25, 0x007A
		reg &= ~(0x07 << ADPS0);
    1204:	98 7f       	andi	r25, 0xF8	; 248
		reg |= prescaler << ADPS0;
    1206:	94 2b       	or	r25, r20
		ADCSRA = reg;
    1208:	90 93 7a 00 	sts	0x007A, r25
	}

	if(mode != ADC_MODE_NO_CHANGE){
    120c:	8f 3f       	cpi	r24, 0xFF	; 255
    120e:	39 f1       	breq	.+78     	; 0x125e <adcConfig+0x7a>
		if(mode == ADC_MODE_SINGLE_CONVERSION)
    1210:	81 11       	cpse	r24, r1
    1212:	04 c0       	rjmp	.+8      	; 0x121c <adcConfig+0x38>
			clrBit(ADCSRA, ADATE);
    1214:	80 91 7a 00 	lds	r24, 0x007A
    1218:	8f 7d       	andi	r24, 0xDF	; 223
    121a:	1f c0       	rjmp	.+62     	; 0x125a <adcConfig+0x76>
		else{
			reg = ADCSRB;
    121c:	20 91 7b 00 	lds	r18, 0x007B
			reg &= ~(0x07 << ADTS0);
    1220:	28 7f       	andi	r18, 0xF8	; 248
			switch(mode){
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	fc 01       	movw	r30, r24
    1226:	32 97       	sbiw	r30, 0x02	; 2
    1228:	e7 30       	cpi	r30, 0x07	; 7
    122a:	f1 05       	cpc	r31, r1
    122c:	d0 f4       	brcc	.+52     	; 0x1262 <adcConfig+0x7e>
    122e:	e3 5a       	subi	r30, 0xA3	; 163
    1230:	ff 4f       	sbci	r31, 0xFF	; 255
    1232:	0c 94 71 0d 	jmp	0x1ae2	; 0x1ae2 <__tablejump2__>
				case ADC_MODE_AUTO_ANALOG_COMP:		reg |= (1 << ADTS0);	break;
    1236:	21 60       	ori	r18, 0x01	; 1
    1238:	0b c0       	rjmp	.+22     	; 0x1250 <adcConfig+0x6c>
				case ADC_MODE_AUTO_INT0:			reg |= (2 << ADTS0);	break;
    123a:	22 60       	ori	r18, 0x02	; 2
    123c:	09 c0       	rjmp	.+18     	; 0x1250 <adcConfig+0x6c>
				case ADC_MODE_AUTO_TIMER0_COMPA:	reg |= (3 << ADTS0);	break;
    123e:	23 60       	ori	r18, 0x03	; 3
    1240:	07 c0       	rjmp	.+14     	; 0x1250 <adcConfig+0x6c>
				case ADC_MODE_AUTO_TIMER0_OVERFLOW:	reg |= (4 << ADTS0);	break;
    1242:	24 60       	ori	r18, 0x04	; 4
    1244:	05 c0       	rjmp	.+10     	; 0x1250 <adcConfig+0x6c>
				case ADC_MODE_AUTO_TIMER1_COMPB:	reg |= (5 << ADTS0);	break;
    1246:	25 60       	ori	r18, 0x05	; 5
    1248:	03 c0       	rjmp	.+6      	; 0x1250 <adcConfig+0x6c>
				case ADC_MODE_AUTO_TIMER1_OVERFLOW:	reg |= (6 << ADTS0);	break;
    124a:	26 60       	ori	r18, 0x06	; 6
    124c:	01 c0       	rjmp	.+2      	; 0x1250 <adcConfig+0x6c>
				case ADC_MODE_AUTO_TIMER1_CAPTURE:	reg |= (7 << ADTS0);	break;
    124e:	27 60       	ori	r18, 0x07	; 7
				default:							return RESULT_UNSUPPORTED_VALUE;	break;
			}
			ADCSRB = reg;
    1250:	20 93 7b 00 	sts	0x007B, r18
			setBit(ADCSRA, ADATE);
    1254:	80 91 7a 00 	lds	r24, 0x007A
    1258:	80 62       	ori	r24, 0x20	; 32
    125a:	80 93 7a 00 	sts	0x007A, r24
		}
	}

	return RESULT_OK;
    125e:	80 e0       	ldi	r24, 0x00	; 0
    1260:	08 95       	ret
				case ADC_MODE_AUTO_TIMER0_COMPA:	reg |= (3 << ADTS0);	break;
				case ADC_MODE_AUTO_TIMER0_OVERFLOW:	reg |= (4 << ADTS0);	break;
				case ADC_MODE_AUTO_TIMER1_COMPB:	reg |= (5 << ADTS0);	break;
				case ADC_MODE_AUTO_TIMER1_OVERFLOW:	reg |= (6 << ADTS0);	break;
				case ADC_MODE_AUTO_TIMER1_CAPTURE:	reg |= (7 << ADTS0);	break;
				default:							return RESULT_UNSUPPORTED_VALUE;	break;
    1262:	87 e0       	ldi	r24, 0x07	; 7
			setBit(ADCSRA, ADATE);
		}
	}

	return RESULT_OK;
 }
    1264:	08 95       	ret

00001266 <adcSelectChannel>:
 * Selects the adc channel
 * -------------------------------------------------------------------------- */

resultValue_t adcSelectChannel(adcChannel_t channel)
{
	uint8 reg = ADMUX;
    1266:	ec e7       	ldi	r30, 0x7C	; 124
    1268:	f0 e0       	ldi	r31, 0x00	; 0
    126a:	90 81       	ld	r25, Z

	reg &= ~(0x0F << MUX0);
    126c:	90 7f       	andi	r25, 0xF0	; 240
	reg |= (channel << MUX0);
    126e:	98 2b       	or	r25, r24
	ADMUX = reg;
    1270:	90 83       	st	Z, r25

	return RESULT_OK;
}
    1272:	80 e0       	ldi	r24, 0x00	; 0
    1274:	08 95       	ret

00001276 <adcEnableDigitalInput>:
 * Enable adc digital inputs
 * -------------------------------------------------------------------------- */

resultValue_t adcEnableDigitalInput(uint8 flagInputs)
{
	DIDR0 &= (~flagInputs);
    1276:	ee e7       	ldi	r30, 0x7E	; 126
    1278:	f0 e0       	ldi	r31, 0x00	; 0
    127a:	90 81       	ld	r25, Z
    127c:	80 95       	com	r24
    127e:	89 23       	and	r24, r25
    1280:	80 83       	st	Z, r24

	return RESULT_OK;
}
    1282:	80 e0       	ldi	r24, 0x00	; 0
    1284:	08 95       	ret

00001286 <adcDisableDigitalInput>:
 * Enable adc digital inputs
 * -------------------------------------------------------------------------- */

resultValue_t adcDisableDigitalInput(uint8 flagInputs)
{
	DIDR0 |= flagInputs;
    1286:	ee e7       	ldi	r30, 0x7E	; 126
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	90 81       	ld	r25, Z
    128c:	98 2b       	or	r25, r24
    128e:	90 83       	st	Z, r25

	return RESULT_OK;
}
    1290:	80 e0       	ldi	r24, 0x00	; 0
    1292:	08 95       	ret

00001294 <adcDataPresentation>:
 * Sets the adc data presentation
 * -------------------------------------------------------------------------- */

resultValue_t adcDataPresentation(adcDataPresentation_t presentation)
{
	if(presentation == ADC_LEFT_ADJUSTED)
    1294:	81 11       	cpse	r24, r1
    1296:	04 c0       	rjmp	.+8      	; 0x12a0 <adcDataPresentation+0xc>
		setBit(ADMUX, ADLAR);
    1298:	80 91 7c 00 	lds	r24, 0x007C
    129c:	80 62       	ori	r24, 0x20	; 32
    129e:	03 c0       	rjmp	.+6      	; 0x12a6 <adcDataPresentation+0x12>
	else
		clrBit(ADMUX, ADLAR);
    12a0:	80 91 7c 00 	lds	r24, 0x007C
    12a4:	8f 7d       	andi	r24, 0xDF	; 223
    12a6:	80 93 7c 00 	sts	0x007C, r24

	return RESULT_OK;
}
    12aa:	80 e0       	ldi	r24, 0x00	; 0
    12ac:	08 95       	ret

000012ae <adcEnable>:
 * Enables the adc module
 * -------------------------------------------------------------------------- */

resultValue_t adcEnable(void)
{
	setBit(ADCSRA, ADEN);
    12ae:	ea e7       	ldi	r30, 0x7A	; 122
    12b0:	f0 e0       	ldi	r31, 0x00	; 0
    12b2:	80 81       	ld	r24, Z
    12b4:	80 68       	ori	r24, 0x80	; 128
    12b6:	80 83       	st	Z, r24

	return RESULT_OK;
}
    12b8:	80 e0       	ldi	r24, 0x00	; 0
    12ba:	08 95       	ret

000012bc <adcDisable>:
 * Disables the adc module
 * -------------------------------------------------------------------------- */

resultValue_t adcDisable(void)
{
	clrBit(ADCSRA, ADEN);
    12bc:	ea e7       	ldi	r30, 0x7A	; 122
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	80 81       	ld	r24, Z
    12c2:	8f 77       	andi	r24, 0x7F	; 127
    12c4:	80 83       	st	Z, r24

	return RESULT_OK;
}
    12c6:	80 e0       	ldi	r24, 0x00	; 0
    12c8:	08 95       	ret

000012ca <adcClearInterruptRequest>:
 * Clears the adc interrupt request
 * -------------------------------------------------------------------------- */

resultValue_t adcClearInterruptRequest(void)
{
	setBit(ADCSRA, ADIF);
    12ca:	ea e7       	ldi	r30, 0x7A	; 122
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
    12ce:	80 81       	ld	r24, Z
    12d0:	80 61       	ori	r24, 0x10	; 16
    12d2:	80 83       	st	Z, r24

	return RESULT_OK;
}
    12d4:	80 e0       	ldi	r24, 0x00	; 0
    12d6:	08 95       	ret

000012d8 <adcActivateInterrupt>:
 * Enables the adc interrupt
 * -------------------------------------------------------------------------- */

resultValue_t adcActivateInterrupt(void)
{
	setBit(ADCSRA, ADIE);
    12d8:	ea e7       	ldi	r30, 0x7A	; 122
    12da:	f0 e0       	ldi	r31, 0x00	; 0
    12dc:	80 81       	ld	r24, Z
    12de:	88 60       	ori	r24, 0x08	; 8
    12e0:	80 83       	st	Z, r24

	return RESULT_OK;
}
    12e2:	80 e0       	ldi	r24, 0x00	; 0
    12e4:	08 95       	ret

000012e6 <adcDeactivateInterrupt>:
 * Disables the adc interrupt
 * -------------------------------------------------------------------------- */

resultValue_t adcDeactivateInterrupt(void)
{
	clrBit(ADCSRA, ADIE);
    12e6:	ea e7       	ldi	r30, 0x7A	; 122
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	80 81       	ld	r24, Z
    12ec:	87 7f       	andi	r24, 0xF7	; 247
    12ee:	80 83       	st	Z, r24

	return RESULT_OK;
}
    12f0:	80 e0       	ldi	r24, 0x00	; 0
    12f2:	08 95       	ret

000012f4 <adcStartConversion>:
 * Starts an adc conversion
 * -------------------------------------------------------------------------- */

resultValue_t adcStartConversion(void)
{
	setBit(ADCSRA, ADSC);
    12f4:	ea e7       	ldi	r30, 0x7A	; 122
    12f6:	f0 e0       	ldi	r31, 0x00	; 0
    12f8:	80 81       	ld	r24, Z
    12fa:	80 64       	ori	r24, 0x40	; 64
    12fc:	80 83       	st	Z, r24

	return RESULT_OK;
}
    12fe:	80 e0       	ldi	r24, 0x00	; 0
    1300:	08 95       	ret

00001302 <adcIsBusy>:
 * Returns if an adc conversion is running
 * -------------------------------------------------------------------------- */

bool_t adcIsBusy(void)
{
	return isBitSet(ADCSRA, ADSC);
    1302:	80 91 7a 00 	lds	r24, 0x007A
}
    1306:	86 fb       	bst	r24, 6
    1308:	88 27       	eor	r24, r24
    130a:	80 f9       	bld	r24, 0
    130c:	08 95       	ret

0000130e <adcWaitUntilConversionFinish>:
 * Waits until the current conversion is finished
 * -------------------------------------------------------------------------- */

resultValue_t adcWaitUntilConversionFinish(void)
{
	waitUntilBitIsClear(ADCSRA, ADSC);
    130e:	80 91 7a 00 	lds	r24, 0x007A
    1312:	86 fd       	sbrc	r24, 6
    1314:	fc cf       	rjmp	.-8      	; 0x130e <adcWaitUntilConversionFinish>
	return RESULT_OK;
}
    1316:	80 e0       	ldi	r24, 0x00	; 0
    1318:	08 95       	ret

0000131a <usartConfig>:
/* -----------------------------------------------------------------------------
 * Configures the USART controller
 * -------------------------------------------------------------------------- */

resultValue_t usartConfig(usartMode_t mode, usartBaudRate_t baudRate, usartDataBits_t dataBits, usartParity_t parity, usartStopBits_t stopBits)
{
    131a:	8f 92       	push	r8
    131c:	9f 92       	push	r9
    131e:	af 92       	push	r10
    1320:	bf 92       	push	r11
    1322:	cf 92       	push	r12
    1324:	df 92       	push	r13
    1326:	ef 92       	push	r14
    1328:	ff 92       	push	r15
    132a:	0f 93       	push	r16
    132c:	4a 01       	movw	r8, r20
    132e:	5b 01       	movw	r10, r22
    1330:	9e 2d       	mov	r25, r14
	uint8 reg1 = UCSR0A;
    1332:	30 91 c0 00 	lds	r19, 0x00C0
	uint8 reg2 = UCSR0B;
    1336:	30 91 c1 00 	lds	r19, 0x00C1
	uint8 reg3 = UCSR0C;
    133a:	30 91 c2 00 	lds	r19, 0x00C2

	// Clear errors
	reg1 &= ~((1 << FE0) | (1 << DOR0) | (1 << UPE0));

	// USART stop bits
	if(stopBits != USART_STOP_BIT_NO_CHANGE){
    133e:	9f 3f       	cpi	r25, 0xFF	; 255
    1340:	19 f0       	breq	.+6      	; 0x1348 <usartConfig+0x2e>
		switch(stopBits){
    1342:	92 30       	cpi	r25, 0x02	; 2
    1344:	08 f0       	brcs	.+2      	; 0x1348 <usartConfig+0x2e>
    1346:	5f c0       	rjmp	.+190    	; 0x1406 <usartConfig+0xec>
			default:					return RESULT_UNSUPPORTED_VALUE;	break;
		}
	}

	// USART parity bits
	if(parity != USART_PARITY_NO_CHANGE){
    1348:	0f 3f       	cpi	r16, 0xFF	; 255
    134a:	19 f0       	breq	.+6      	; 0x1352 <usartConfig+0x38>
		reg3 &= ~(0x03 << UPM00);
		switch(parity){
    134c:	03 30       	cpi	r16, 0x03	; 3
    134e:	08 f0       	brcs	.+2      	; 0x1352 <usartConfig+0x38>
    1350:	5c c0       	rjmp	.+184    	; 0x140a <usartConfig+0xf0>
			default:					return RESULT_USART_PARITY_UNSUPORTED;	break;
		}
	}

	// USART data bits
	if(dataBits != USART_DATA_BITS_NO_CHANGE){
    1352:	2f 3f       	cpi	r18, 0xFF	; 255
    1354:	19 f0       	breq	.+6      	; 0x135c <usartConfig+0x42>
		clrBit(reg2, UCSZ02);
		reg3 &= ~(0x03 << UCSZ00);
		switch(dataBits){
    1356:	25 30       	cpi	r18, 0x05	; 5
    1358:	08 f0       	brcs	.+2      	; 0x135c <usartConfig+0x42>
    135a:	57 c0       	rjmp	.+174    	; 0x140a <usartConfig+0xf0>
			break;
		}
	}

	// USART mode
	if(mode != USART_MODE_NO_CHANGE){
    135c:	8f 3f       	cpi	r24, 0xFF	; 255
    135e:	79 f4       	brne	.+30     	; 0x137e <usartConfig+0x64>
			reg3 |= (3 << UMSEL00);		// Synchronous SPI Mode
			setBit(reg3, UCPOL0);		// Polarity
			break;
		}
	}else{
		aux8 = (0x03 & (UCSR0C >> UMSEL00));
    1360:	80 91 c2 00 	lds	r24, 0x00C2
    1364:	82 95       	swap	r24
    1366:	86 95       	lsr	r24
    1368:	86 95       	lsr	r24
    136a:	83 70       	andi	r24, 0x03	; 3
		switch(aux8){
    136c:	21 f0       	breq	.+8      	; 0x1376 <usartConfig+0x5c>
    136e:	83 30       	cpi	r24, 0x03	; 3
    1370:	e9 f0       	breq	.+58     	; 0x13ac <usartConfig+0x92>
resultValue_t usartConfig(usartMode_t mode, usartBaudRate_t baudRate, usartDataBits_t dataBits, usartParity_t parity, usartStopBits_t stopBits)
{
	uint8 reg1 = UCSR0A;
	uint8 reg2 = UCSR0B;
	uint8 reg3 = UCSR0C;
	uint8 modeAux = 0;
    1372:	80 e0       	ldi	r24, 0x00	; 0
    1374:	04 c0       	rjmp	.+8      	; 0x137e <usartConfig+0x64>
		}
	}else{
		aux8 = (0x03 & (UCSR0C >> UMSEL00));
		switch(aux8){
		case 0:	// Asynchronous mode
			if(isBitClr(UCSR0A, U2X0)){	// Single speed
    1376:	80 91 c0 00 	lds	r24, 0x00C0
    137a:	86 95       	lsr	r24
    137c:	81 70       	andi	r24, 0x01	; 1
			modeAux = USART_MODE_SYNCHRONOUS_SPI;
			break;
		}
	}

	if(baudRate != USART_BAUD_NO_CHANGE){
    137e:	9f ef       	ldi	r25, 0xFF	; 255
    1380:	89 16       	cp	r8, r25
    1382:	99 06       	cpc	r9, r25
    1384:	a9 06       	cpc	r10, r25
    1386:	b9 06       	cpc	r11, r25
    1388:	09 f4       	brne	.+2      	; 0x138c <usartConfig+0x72>
    138a:	41 c0       	rjmp	.+130    	; 0x140e <usartConfig+0xf4>
		switch(modeAux){
    138c:	81 30       	cpi	r24, 0x01	; 1
    138e:	49 f0       	breq	.+18     	; 0x13a2 <usartConfig+0x88>
    1390:	18 f0       	brcs	.+6      	; 0x1398 <usartConfig+0x7e>
    1392:	84 30       	cpi	r24, 0x04	; 4
    1394:	89 f0       	breq	.+34     	; 0x13b8 <usartConfig+0x9e>
    1396:	22 c0       	rjmp	.+68     	; 0x13dc <usartConfig+0xc2>
		case USART_MODE_ASYNCHRONOUS:
			aux64 = (F_CPU / 16 / baudRate) - 1;
    1398:	60 e4       	ldi	r22, 0x40	; 64
    139a:	72 e4       	ldi	r23, 0x42	; 66
    139c:	8f e0       	ldi	r24, 0x0F	; 15
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	0f c0       	rjmp	.+30     	; 0x13c0 <usartConfig+0xa6>
			break;
		case USART_MODE_ASYNCHRONOUS_DOUBLE_SPEED:
			aux64 = (F_CPU / 8 / baudRate) - 1;
    13a2:	60 e8       	ldi	r22, 0x80	; 128
    13a4:	74 e8       	ldi	r23, 0x84	; 132
    13a6:	8e e1       	ldi	r24, 0x1E	; 30
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	0a c0       	rjmp	.+20     	; 0x13c0 <usartConfig+0xa6>
			modeAux = USART_MODE_SYNCHRONOUS_SPI;
			break;
		}
	}

	if(baudRate != USART_BAUD_NO_CHANGE){
    13ac:	8f ef       	ldi	r24, 0xFF	; 255
    13ae:	88 16       	cp	r8, r24
    13b0:	98 06       	cpc	r9, r24
    13b2:	a8 06       	cpc	r10, r24
    13b4:	b8 06       	cpc	r11, r24
    13b6:	59 f1       	breq	.+86     	; 0x140e <usartConfig+0xf4>
			break;
		case USART_MODE_ASYNCHRONOUS_DOUBLE_SPEED:
			aux64 = (F_CPU / 8 / baudRate) - 1;
			break;
		case USART_MODE_SYNCHRONOUS_SPI:
			aux64 = (F_CPU / 2 / baudRate) - 1;
    13b8:	60 e0       	ldi	r22, 0x00	; 0
    13ba:	72 e1       	ldi	r23, 0x12	; 18
    13bc:	8a e7       	ldi	r24, 0x7A	; 122
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	a5 01       	movw	r20, r10
    13c2:	94 01       	movw	r18, r8
    13c4:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <__udivmodsi4>
    13c8:	21 50       	subi	r18, 0x01	; 1
    13ca:	31 09       	sbc	r19, r1
    13cc:	41 09       	sbc	r20, r1
    13ce:	51 09       	sbc	r21, r1
    13d0:	49 01       	movw	r8, r18
    13d2:	5a 01       	movw	r10, r20
    13d4:	c1 2c       	mov	r12, r1
    13d6:	d1 2c       	mov	r13, r1
    13d8:	76 01       	movw	r14, r12
			break;
    13da:	08 c0       	rjmp	.+16     	; 0x13ec <usartConfig+0xd2>
	uint8 reg1 = UCSR0A;
	uint8 reg2 = UCSR0B;
	uint8 reg3 = UCSR0C;
	uint8 modeAux = 0;
	uint8 aux8 = 0;
	uint64 aux64 = 0;
    13dc:	81 2c       	mov	r8, r1
    13de:	91 2c       	mov	r9, r1
    13e0:	a1 2c       	mov	r10, r1
    13e2:	b1 2c       	mov	r11, r1
    13e4:	c1 2c       	mov	r12, r1
    13e6:	d1 2c       	mov	r13, r1
    13e8:	e1 2c       	mov	r14, r1
    13ea:	f1 2c       	mov	r15, r1
			aux64 = (F_CPU / 2 / baudRate) - 1;
			break;
		}
//		if((aux64 > (1.05 * baudRate)) || (aux64 < (0.95 * baudRate)))
//			return RESULT_USART_BAUD_RATE_UNSUPORTED;
		UBRR0H = 0x0F & (aux64 >> 8);
    13ec:	94 01       	movw	r18, r8
    13ee:	a5 01       	movw	r20, r10
    13f0:	b6 01       	movw	r22, r12
    13f2:	c7 01       	movw	r24, r14
    13f4:	08 e0       	ldi	r16, 0x08	; 8
    13f6:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <__lshrdi3>
    13fa:	2f 70       	andi	r18, 0x0F	; 15
    13fc:	20 93 c5 00 	sts	0x00C5, r18
		UBRR0L = (0xFF & aux64);
    1400:	80 92 c4 00 	sts	0x00C4, r8
    1404:	04 c0       	rjmp	.+8      	; 0x140e <usartConfig+0xf4>
	// USART stop bits
	if(stopBits != USART_STOP_BIT_NO_CHANGE){
		switch(stopBits){
			case USART_STOP_BIT_SINGLE:	clrBit(reg3, USBS0);				break;
			case USART_STOP_BIT_DOUBLE:	setBit(reg3, USBS0);				break;
			default:					return RESULT_UNSUPPORTED_VALUE;	break;
    1406:	87 e0       	ldi	r24, 0x07	; 7
    1408:	03 c0       	rjmp	.+6      	; 0x1410 <usartConfig+0xf6>
		case USART_DATA_BITS_9:
			setBit(reg2, UCSZ02);
			reg3 |= (0x03 << UCSZ00);
			break;
		default:
			return RESULT_USART_PARITY_UNSUPORTED;
    140a:	85 e0       	ldi	r24, 0x05	; 5
    140c:	01 c0       	rjmp	.+2      	; 0x1410 <usartConfig+0xf6>
//			return RESULT_USART_BAUD_RATE_UNSUPORTED;
		UBRR0H = 0x0F & (aux64 >> 8);
		UBRR0L = (0xFF & aux64);
	}

	return RESULT_OK;
    140e:	80 e0       	ldi	r24, 0x00	; 0
}
    1410:	0f 91       	pop	r16
    1412:	ff 90       	pop	r15
    1414:	ef 90       	pop	r14
    1416:	df 90       	pop	r13
    1418:	cf 90       	pop	r12
    141a:	bf 90       	pop	r11
    141c:	af 90       	pop	r10
    141e:	9f 90       	pop	r9
    1420:	8f 90       	pop	r8
    1422:	08 95       	ret

00001424 <usartEnableReceiver>:
 * Enables USART reception module
 * -------------------------------------------------------------------------- */

resultValue_t usartEnableReceiver(void)
{
	setBit(UCSR0B, RXEN0);
    1424:	e1 ec       	ldi	r30, 0xC1	; 193
    1426:	f0 e0       	ldi	r31, 0x00	; 0
    1428:	80 81       	ld	r24, Z
    142a:	80 61       	ori	r24, 0x10	; 16
    142c:	80 83       	st	Z, r24
	return RESULT_OK;
}
    142e:	80 e0       	ldi	r24, 0x00	; 0
    1430:	08 95       	ret

00001432 <usartDisableReceiver>:
 * Disables USART reception module
 * -------------------------------------------------------------------------- */

resultValue_t usartDisableReceiver(void)
{
	clrBit(UCSR0B, RXEN0);
    1432:	e1 ec       	ldi	r30, 0xC1	; 193
    1434:	f0 e0       	ldi	r31, 0x00	; 0
    1436:	80 81       	ld	r24, Z
    1438:	8f 7e       	andi	r24, 0xEF	; 239
    143a:	80 83       	st	Z, r24
	return RESULT_OK;
}
    143c:	80 e0       	ldi	r24, 0x00	; 0
    143e:	08 95       	ret

00001440 <usartEnableTransmitter>:
 * Enables USART transmission module
 * -------------------------------------------------------------------------- */

resultValue_t usartEnableTransmitter(void)
{
	setBit(UCSR0B, TXEN0);
    1440:	e1 ec       	ldi	r30, 0xC1	; 193
    1442:	f0 e0       	ldi	r31, 0x00	; 0
    1444:	80 81       	ld	r24, Z
    1446:	88 60       	ori	r24, 0x08	; 8
    1448:	80 83       	st	Z, r24
	return RESULT_OK;
}
    144a:	80 e0       	ldi	r24, 0x00	; 0
    144c:	08 95       	ret

0000144e <usartDisableTransmitter>:
 * Disables USART transmission module
 * -------------------------------------------------------------------------- */

resultValue_t usartDisableTransmitter(void)
{
	clrBit(UCSR0B, TXEN0);
    144e:	e1 ec       	ldi	r30, 0xC1	; 193
    1450:	f0 e0       	ldi	r31, 0x00	; 0
    1452:	80 81       	ld	r24, Z
    1454:	87 7f       	andi	r24, 0xF7	; 247
    1456:	80 83       	st	Z, r24
	return RESULT_OK;
}
    1458:	80 e0       	ldi	r24, 0x00	; 0
    145a:	08 95       	ret

0000145c <usartActivateReceptionCompleteInterrupt>:
 * Activates USART reception complete interrupt
 * -------------------------------------------------------------------------- */

resultValue_t usartActivateReceptionCompleteInterrupt(void)
{
	setBit(UCSR0B, RXCIE0);
    145c:	e1 ec       	ldi	r30, 0xC1	; 193
    145e:	f0 e0       	ldi	r31, 0x00	; 0
    1460:	80 81       	ld	r24, Z
    1462:	80 68       	ori	r24, 0x80	; 128
    1464:	80 83       	st	Z, r24
	return RESULT_OK;
}
    1466:	80 e0       	ldi	r24, 0x00	; 0
    1468:	08 95       	ret

0000146a <usartDeactivateReceptionCompleteInterrupt>:
 * Deactivates USART reception complete interrupt
 * -------------------------------------------------------------------------- */

resultValue_t usartDeactivateReceptionCompleteInterrupt(void)
{
	clrBit(UCSR0B, RXCIE0);
    146a:	e1 ec       	ldi	r30, 0xC1	; 193
    146c:	f0 e0       	ldi	r31, 0x00	; 0
    146e:	80 81       	ld	r24, Z
    1470:	8f 77       	andi	r24, 0x7F	; 127
    1472:	80 83       	st	Z, r24
	return RESULT_OK;
}
    1474:	80 e0       	ldi	r24, 0x00	; 0
    1476:	08 95       	ret

00001478 <usartActivateTransmissionCompleteInterrupt>:
 * Activates USART transmission complete interrupt
 * -------------------------------------------------------------------------- */

resultValue_t usartActivateTransmissionCompleteInterrupt(void)
{
	setBit(UCSR0B, TXCIE0);
    1478:	e1 ec       	ldi	r30, 0xC1	; 193
    147a:	f0 e0       	ldi	r31, 0x00	; 0
    147c:	80 81       	ld	r24, Z
    147e:	80 64       	ori	r24, 0x40	; 64
    1480:	80 83       	st	Z, r24
	return RESULT_OK;
}
    1482:	80 e0       	ldi	r24, 0x00	; 0
    1484:	08 95       	ret

00001486 <usartDeactivateTransmissionCompleteInterrupt>:
 * Deactivates USART transmission complete interrupt
 * -------------------------------------------------------------------------- */

resultValue_t usartDeactivateTransmissionCompleteInterrupt(void)
{
	clrBit(UCSR0B, TXCIE0);
    1486:	e1 ec       	ldi	r30, 0xC1	; 193
    1488:	f0 e0       	ldi	r31, 0x00	; 0
    148a:	80 81       	ld	r24, Z
    148c:	8f 7b       	andi	r24, 0xBF	; 191
    148e:	80 83       	st	Z, r24
	return RESULT_OK;
}
    1490:	80 e0       	ldi	r24, 0x00	; 0
    1492:	08 95       	ret

00001494 <usartActivateBufferEmptyInterrupt>:
 * Activates USART buffer empty interrupt
 * -------------------------------------------------------------------------- */

resultValue_t usartActivateBufferEmptyInterrupt(void)
{
	setBit(UCSR0B, UDRIE0);
    1494:	e1 ec       	ldi	r30, 0xC1	; 193
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	80 81       	ld	r24, Z
    149a:	80 62       	ori	r24, 0x20	; 32
    149c:	80 83       	st	Z, r24
	return RESULT_OK;
}
    149e:	80 e0       	ldi	r24, 0x00	; 0
    14a0:	08 95       	ret

000014a2 <usartDeactivateBufferEmptyInterrupt>:
 * Deactivates USART buffer empty interrupt
 * -------------------------------------------------------------------------- */

resultValue_t usartDeactivateBufferEmptyInterrupt(void)
{
	clrBit(UCSR0B, UDRIE0);
    14a2:	e1 ec       	ldi	r30, 0xC1	; 193
    14a4:	f0 e0       	ldi	r31, 0x00	; 0
    14a6:	80 81       	ld	r24, Z
    14a8:	8f 7d       	andi	r24, 0xDF	; 223
    14aa:	80 83       	st	Z, r24
	return RESULT_OK;
}
    14ac:	80 e0       	ldi	r24, 0x00	; 0
    14ae:	08 95       	ret

000014b0 <usartStdio>:
 * Changes the std handlers to usart module
 * -------------------------------------------------------------------------- */

resultValue_t usartStdio(void)
{
	stdin = stdout = stderr = &usartStream;
    14b0:	89 e0       	ldi	r24, 0x09	; 9
    14b2:	91 e0       	ldi	r25, 0x01	; 1
    14b4:	90 93 7a 01 	sts	0x017A, r25
    14b8:	80 93 79 01 	sts	0x0179, r24
    14bc:	90 93 78 01 	sts	0x0178, r25
    14c0:	80 93 77 01 	sts	0x0177, r24
    14c4:	90 93 76 01 	sts	0x0176, r25
    14c8:	80 93 75 01 	sts	0x0175, r24
	return RESULT_OK;
}
    14cc:	80 e0       	ldi	r24, 0x00	; 0
    14ce:	08 95       	ret

000014d0 <usartIsReceptionComplete>:
 * Checks if a reception has been completed
 * -------------------------------------------------------------------------- */

bool_t usartIsReceptionComplete(void)
{
	return isBitSet(UCSR0A, RXC0);
    14d0:	80 91 c0 00 	lds	r24, 0x00C0
}
    14d4:	88 1f       	adc	r24, r24
    14d6:	88 27       	eor	r24, r24
    14d8:	88 1f       	adc	r24, r24
    14da:	08 95       	ret

000014dc <usartIsTransmissionComplete>:
 * Checks if a transmission has been completed
 * -------------------------------------------------------------------------- */

bool_t usartIsTransmissionComplete(void)
{
	return isBitSet(UCSR0A, TXC0);
    14dc:	80 91 c0 00 	lds	r24, 0x00C0
}
    14e0:	86 fb       	bst	r24, 6
    14e2:	88 27       	eor	r24, r24
    14e4:	80 f9       	bld	r24, 0
    14e6:	08 95       	ret

000014e8 <usartIsBufferEmpty>:
 * Checks if the buffer is empty
 * -------------------------------------------------------------------------- */

bool_t usartIsBufferEmpty(void)
{
	return isBitSet(UCSR0A, UDRE0);
    14e8:	80 91 c0 00 	lds	r24, 0x00C0
}
    14ec:	85 fb       	bst	r24, 5
    14ee:	88 27       	eor	r24, r24
    14f0:	80 f9       	bld	r24, 0
    14f2:	08 95       	ret

000014f4 <usartTransmitStd>:
 * Transmits data in 5, 6, 7 or 8 bits modes using the USART controller and
 * standard output heandler
 * -------------------------------------------------------------------------- */

resultValue_t usartTransmitStd(int8 data, FILE * stream)
{
    14f4:	cf 93       	push	r28
    14f6:	c8 2f       	mov	r28, r24
	while(!usartIsBufferEmpty())
    14f8:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <usartIsBufferEmpty>
    14fc:	88 23       	and	r24, r24
    14fe:	e1 f3       	breq	.-8      	; 0x14f8 <usartTransmitStd+0x4>
		;	// Waits until last transmission ends
	UDR0 = data;
    1500:	c0 93 c6 00 	sts	0x00C6, r28
	return RESULT_OK;
}
    1504:	80 e0       	ldi	r24, 0x00	; 0
    1506:	cf 91       	pop	r28
    1508:	08 95       	ret

0000150a <usartCheckError>:

usartError_t usartCheckError(void)
{
	usartError_t error = 0;

	if(isBitSet(UCSR0A, FE0))
    150a:	80 91 c0 00 	lds	r24, 0x00C0
    150e:	84 fd       	sbrc	r24, 4
    1510:	02 c0       	rjmp	.+4      	; 0x1516 <usartCheckError+0xc>
 * Checks if an error occurred during transmission or reception
 * -------------------------------------------------------------------------- */

usartError_t usartCheckError(void)
{
	usartError_t error = 0;
    1512:	80 e0       	ldi	r24, 0x00	; 0
    1514:	01 c0       	rjmp	.+2      	; 0x1518 <usartCheckError+0xe>

	if(isBitSet(UCSR0A, FE0))
		error |= USART_FRAME_ERROR;
    1516:	82 e0       	ldi	r24, 0x02	; 2
	if(isBitSet(UCSR0A, DOR0))
    1518:	90 91 c0 00 	lds	r25, 0x00C0
    151c:	93 fd       	sbrc	r25, 3
		error |= USART_PARITY_ERROR;
    151e:	84 60       	ori	r24, 0x04	; 4
	if(isBitSet(UCSR0A, UPE0))
    1520:	90 91 c0 00 	lds	r25, 0x00C0
    1524:	92 ff       	sbrs	r25, 2
    1526:	02 c0       	rjmp	.+4      	; 0x152c <usartCheckError+0x22>
		error |= USART_BUFFER_OVERFLOW_ERROR;
    1528:	88 60       	ori	r24, 0x08	; 8
    152a:	08 95       	ret

	if(error == 0)
    152c:	81 11       	cpse	r24, r1
    152e:	01 c0       	rjmp	.+2      	; 0x1532 <usartCheckError+0x28>
		return USART_OK;
    1530:	81 e0       	ldi	r24, 0x01	; 1
	return error;
}
    1532:	08 95       	ret

00001534 <usartTransmit>:
/* -----------------------------------------------------------------------------
 * Transmits data in 5, 6, 7 or 8 bits modes using the USART controller
 * -------------------------------------------------------------------------- */

resultValue_t usartTransmit(int8 data)
{
    1534:	cf 93       	push	r28
    1536:	c8 2f       	mov	r28, r24
	while(!usartIsBufferEmpty())
    1538:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <usartIsBufferEmpty>
    153c:	88 23       	and	r24, r24
    153e:	e1 f3       	breq	.-8      	; 0x1538 <usartTransmit+0x4>
		;	// Waits until last transmission ends
	UDR0 = data;
    1540:	c0 93 c6 00 	sts	0x00C6, r28
	return RESULT_OK;
}
    1544:	80 e0       	ldi	r24, 0x00	; 0
    1546:	cf 91       	pop	r28
    1548:	08 95       	ret

0000154a <usartTransmit9bits>:
/* -----------------------------------------------------------------------------
 * Transmits data in 9 bits mode using the USART controller
 * -------------------------------------------------------------------------- */

resultValue_t usartTransmit9bits(uint16 data)
{
    154a:	cf 93       	push	r28
    154c:	df 93       	push	r29
    154e:	ec 01       	movw	r28, r24
	uint8 aux;

	while(!usartIsBufferEmpty())
    1550:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <usartIsBufferEmpty>
    1554:	88 23       	and	r24, r24
    1556:	e1 f3       	breq	.-8      	; 0x1550 <usartTransmit9bits+0x6>
		;	// Waits until last transmission ends
	aux = ((data & 0x100) >> 8);
    1558:	ce 01       	movw	r24, r28
    155a:	88 27       	eor	r24, r24
    155c:	91 70       	andi	r25, 0x01	; 1
	if(aux)
		setBit(UCSR0B, TXB80);
    155e:	80 91 c1 00 	lds	r24, 0x00C1
	uint8 aux;

	while(!usartIsBufferEmpty())
		;	// Waits until last transmission ends
	aux = ((data & 0x100) >> 8);
	if(aux)
    1562:	99 23       	and	r25, r25
    1564:	11 f0       	breq	.+4      	; 0x156a <usartTransmit9bits+0x20>
		setBit(UCSR0B, TXB80);
    1566:	81 60       	ori	r24, 0x01	; 1
    1568:	01 c0       	rjmp	.+2      	; 0x156c <usartTransmit9bits+0x22>
	else
		clrBit(UCSR0B, TXB80);
    156a:	8e 7f       	andi	r24, 0xFE	; 254
    156c:	80 93 c1 00 	sts	0x00C1, r24
	UDR0 = (uint8)data;
    1570:	c0 93 c6 00 	sts	0x00C6, r28
	return RESULT_OK;
}
    1574:	80 e0       	ldi	r24, 0x00	; 0
    1576:	df 91       	pop	r29
    1578:	cf 91       	pop	r28
    157a:	08 95       	ret

0000157c <usartReceive>:
 * Checks if a reception has been completed
 * -------------------------------------------------------------------------- */

bool_t usartIsReceptionComplete(void)
{
	return isBitSet(UCSR0A, RXC0);
    157c:	80 91 c0 00 	lds	r24, 0x00C0

uint8 usartReceive(void)
{
	uint8 status;

	while(!usartIsReceptionComplete())
    1580:	87 ff       	sbrs	r24, 7
    1582:	fc cf       	rjmp	.-8      	; 0x157c <usartReceive>
		;	// Waits until last reception ends
	status = UCSR0A;
    1584:	80 91 c0 00 	lds	r24, 0x00C0
	return UDR0;
    1588:	80 91 c6 00 	lds	r24, 0x00C6
}
    158c:	08 95       	ret

0000158e <usartReceive9bits>:
 * Checks if a reception has been completed
 * -------------------------------------------------------------------------- */

bool_t usartIsReceptionComplete(void)
{
	return isBitSet(UCSR0A, RXC0);
    158e:	80 91 c0 00 	lds	r24, 0x00C0
	uint8 status;
	uint8 byteh;
	uint8 bytel;
	uint16 byte;

	while(!usartIsReceptionComplete())
    1592:	87 ff       	sbrs	r24, 7
    1594:	fc cf       	rjmp	.-8      	; 0x158e <usartReceive9bits>
		;	// Waits until last reception ends
	status = UCSR0A;
    1596:	80 91 c0 00 	lds	r24, 0x00C0
	byteh = UCSR0B;
    159a:	80 91 c1 00 	lds	r24, 0x00C1
	bytel = UDR0;
    159e:	20 91 c6 00 	lds	r18, 0x00C6

	byte = (uint16)(byteh & 0x02) << 7;
    15a2:	82 70       	andi	r24, 0x02	; 2
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	96 95       	lsr	r25
    15a8:	98 2f       	mov	r25, r24
    15aa:	88 27       	eor	r24, r24
    15ac:	97 95       	ror	r25
    15ae:	87 95       	ror	r24
	byte |= bytel;
	return  byte;
}
    15b0:	82 2b       	or	r24, r18
    15b2:	08 95       	ret

000015b4 <usartClearReceptionBuffer>:
 * Checks if a reception has been completed
 * -------------------------------------------------------------------------- */

bool_t usartIsReceptionComplete(void)
{
	return isBitSet(UCSR0A, RXC0);
    15b4:	80 91 c0 00 	lds	r24, 0x00C0
 * -------------------------------------------------------------------------- */

void usartClearReceptionBuffer(void)
{
	uint8 aux;
	while(usartIsReceptionComplete())
    15b8:	87 ff       	sbrs	r24, 7
    15ba:	03 c0       	rjmp	.+6      	; 0x15c2 <usartClearReceptionBuffer+0xe>
		aux = UDR0;
    15bc:	80 91 c6 00 	lds	r24, 0x00C6
    15c0:	f9 cf       	rjmp	.-14     	; 0x15b4 <usartClearReceptionBuffer>
	return;
}
    15c2:	08 95       	ret

000015c4 <usartAddDataToReceiverBuffer>:
/* -----------------------------------------------------------------------------
 * Adds data to the reception buffer. The function has NO CONTROL of lost data.
 * -------------------------------------------------------------------------- */

void usartAddDataToReceiverBuffer(uint8 data)
{
    15c4:	ff 92       	push	r15
    15c6:	0f 93       	push	r16
    15c8:	1f 93       	push	r17
    15ca:	cf 93       	push	r28
    15cc:	df 93       	push	r29
    15ce:	f8 2e       	mov	r15, r24
	if(((usartReceiverBufferNextWrite + 1) % USART_RECEIVER_BUFFER_SIZE) != usartReceiverBufferNextRead){
    15d0:	c0 91 72 01 	lds	r28, 0x0172
    15d4:	d0 e0       	ldi	r29, 0x00	; 0
    15d6:	be 01       	movw	r22, r28
    15d8:	6f 5f       	subi	r22, 0xFF	; 255
    15da:	7f 4f       	sbci	r23, 0xFF	; 255
    15dc:	88 27       	eor	r24, r24
    15de:	77 fd       	sbrc	r23, 7
    15e0:	80 95       	com	r24
    15e2:	98 2f       	mov	r25, r24
    15e4:	22 e3       	ldi	r18, 0x32	; 50
    15e6:	30 e0       	ldi	r19, 0x00	; 0
    15e8:	40 e0       	ldi	r20, 0x00	; 0
    15ea:	50 e0       	ldi	r21, 0x00	; 0
    15ec:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <__udivmodsi4>
    15f0:	00 91 74 01 	lds	r16, 0x0174
    15f4:	10 e0       	ldi	r17, 0x00	; 0
    15f6:	20 e0       	ldi	r18, 0x00	; 0
    15f8:	30 e0       	ldi	r19, 0x00	; 0
    15fa:	60 17       	cp	r22, r16
    15fc:	71 07       	cpc	r23, r17
    15fe:	82 07       	cpc	r24, r18
    1600:	93 07       	cpc	r25, r19
    1602:	51 f0       	breq	.+20     	; 0x1618 <usartAddDataToReceiverBuffer+0x54>
		usartReceiverBuffer[usartReceiverBufferNextWrite] = data;
    1604:	c0 5c       	subi	r28, 0xC0	; 192
    1606:	de 4f       	sbci	r29, 0xFE	; 254
    1608:	f8 82       	st	Y, r15
		usartReceiverBufferNextWrite = (usartReceiverBufferNextWrite + 1) % USART_RECEIVER_BUFFER_SIZE;
    160a:	60 93 72 01 	sts	0x0172, r22
		usartReceiverBufferLength++;
    160e:	80 91 73 01 	lds	r24, 0x0173
    1612:	8f 5f       	subi	r24, 0xFF	; 255
    1614:	80 93 73 01 	sts	0x0173, r24
	}
	return;
}
    1618:	df 91       	pop	r29
    161a:	cf 91       	pop	r28
    161c:	1f 91       	pop	r17
    161e:	0f 91       	pop	r16
    1620:	ff 90       	pop	r15
    1622:	08 95       	ret

00001624 <usartGetDataFromReceiverBuffer>:
 * usartIsReceiverBufferEmpty() function must be called to check if there is new
 * data in the buffer.
 * -------------------------------------------------------------------------- */

uint8 usartGetDataFromReceiverBuffer(void)
{
    1624:	cf 93       	push	r28
    1626:	df 93       	push	r29
	uint8 data = usartReceiverBuffer[usartReceiverBufferNextRead];
    1628:	60 91 74 01 	lds	r22, 0x0174
    162c:	70 e0       	ldi	r23, 0x00	; 0
    162e:	fb 01       	movw	r30, r22
    1630:	e0 5c       	subi	r30, 0xC0	; 192
    1632:	fe 4f       	sbci	r31, 0xFE	; 254
    1634:	d0 81       	ld	r29, Z
	if(usartReceiverBufferLength > 0){
    1636:	c0 91 73 01 	lds	r28, 0x0173
    163a:	cc 23       	and	r28, r28
    163c:	89 f0       	breq	.+34     	; 0x1660 <usartGetDataFromReceiverBuffer+0x3c>
		usartReceiverBufferNextRead = (usartReceiverBufferNextRead + 1) % USART_RECEIVER_BUFFER_SIZE;
    163e:	6f 5f       	subi	r22, 0xFF	; 255
    1640:	7f 4f       	sbci	r23, 0xFF	; 255
    1642:	88 27       	eor	r24, r24
    1644:	77 fd       	sbrc	r23, 7
    1646:	80 95       	com	r24
    1648:	98 2f       	mov	r25, r24
    164a:	22 e3       	ldi	r18, 0x32	; 50
    164c:	30 e0       	ldi	r19, 0x00	; 0
    164e:	40 e0       	ldi	r20, 0x00	; 0
    1650:	50 e0       	ldi	r21, 0x00	; 0
    1652:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <__udivmodsi4>
    1656:	60 93 74 01 	sts	0x0174, r22
		usartReceiverBufferLength--;
    165a:	c1 50       	subi	r28, 0x01	; 1
    165c:	c0 93 73 01 	sts	0x0173, r28
	}
	return data;
}
    1660:	8d 2f       	mov	r24, r29
    1662:	df 91       	pop	r29
    1664:	cf 91       	pop	r28
    1666:	08 95       	ret

00001668 <usartIsReceiverBufferEmpty>:
 * reading the buffer.
 * -------------------------------------------------------------------------- */

uint8 usartIsReceiverBufferEmpty(void)
{
	if(usartReceiverBufferLength == 0)
    1668:	81 e0       	ldi	r24, 0x01	; 1
    166a:	90 91 73 01 	lds	r25, 0x0173
    166e:	91 11       	cpse	r25, r1
    1670:	80 e0       	ldi	r24, 0x00	; 0
		return TRUE;
	return FALSE;
}
    1672:	08 95       	ret

00001674 <usartGetCurrentBaudRate>:
//	case 2:
//		aux32 = F_CPU / 2 / (UBRR0 + 1);
//		break;
//	}
	return aux32;
 }
    1674:	60 e0       	ldi	r22, 0x00	; 0
    1676:	70 e0       	ldi	r23, 0x00	; 0
    1678:	cb 01       	movw	r24, r22
    167a:	08 95       	ret

0000167c <spiInit>:
/* -----------------------------------------------------------------------------
 * Configures the SPI controller
 * -------------------------------------------------------------------------- */

void spiInit(void)
{
    167c:	08 95       	ret

0000167e <spiMasterTransmit>:
 * Transmit data at the SPI bus in master mode
 * -------------------------------------------------------------------------- */

uint8 spiMasterTransmit(uint8 data)
{
	SPDR = data;
    167e:	8e bd       	out	0x2e, r24	; 46
	waitUntilBitIsClear(SPSR, SPIF);
    1680:	0d b4       	in	r0, 0x2d	; 45
    1682:	07 fc       	sbrc	r0, 7
    1684:	fd cf       	rjmp	.-6      	; 0x1680 <spiMasterTransmit+0x2>
	return SPDR;
    1686:	8e b5       	in	r24, 0x2e	; 46
}
    1688:	08 95       	ret

0000168a <spiSlaveTransmit>:
 * Receives data from the SPI bus
 * -------------------------------------------------------------------------- */

uint8 spiSlaveTransmit(void)
{
	waitUntilBitIsClear(SPSR, SPIF);
    168a:	0d b4       	in	r0, 0x2d	; 45
    168c:	07 fc       	sbrc	r0, 7
    168e:	fd cf       	rjmp	.-6      	; 0x168a <spiSlaveTransmit>
	return SPDR;
    1690:	8e b5       	in	r24, 0x2e	; 46
}
    1692:	08 95       	ret

00001694 <main>:
	+ (str[2]-48)*10 + str[3]-48);
	return value;
}

int main(void)
{
    1694:	cf 93       	push	r28
    1696:	df 93       	push	r29
    1698:	cd b7       	in	r28, 0x3d	; 61
    169a:	de b7       	in	r29, 0x3e	; 62
    169c:	ce 59       	subi	r28, 0x9E	; 158
    169e:	d1 09       	sbc	r29, r1
    16a0:	0f b6       	in	r0, 0x3f	; 63
    16a2:	f8 94       	cli
    16a4:	de bf       	out	0x3e, r29	; 62
    16a6:	0f be       	out	0x3f, r0	; 63
    16a8:	cd bf       	out	0x3d, r28	; 61
	//_delay_ms(1000);
	flags.mode = POT_MODE;
    16aa:	80 91 36 01 	lds	r24, 0x0136
    16ae:	83 7f       	andi	r24, 0xF3	; 243
    16b0:	88 60       	ori	r24, 0x08	; 8
    16b2:	80 93 36 01 	sts	0x0136, r24
	status.freq = 1000;
    16b6:	88 ee       	ldi	r24, 0xE8	; 232
    16b8:	93 e0       	ldi	r25, 0x03	; 3
    16ba:	90 93 38 01 	sts	0x0138, r25
    16be:	80 93 37 01 	sts	0x0137, r24
	status.on = 0;			//indica que o sistema inicia sem acionar o motor
    16c2:	10 92 3f 01 	sts	0x013F, r1
	status.dc = 0;
    16c6:	10 92 3b 01 	sts	0x013B, r1

	// VARIAVEIS LOCAIS;
	char frameData[50];
	uint8 frameIndex = 0;
	char recebido[100] = "";
    16ca:	19 82       	std	Y+1, r1	; 0x01
    16cc:	1a 82       	std	Y+2, r1	; 0x02
    16ce:	1b 82       	std	Y+3, r1	; 0x03
    16d0:	1c 82       	std	Y+4, r1	; 0x04
    16d2:	fe 01       	movw	r30, r28
    16d4:	35 96       	adiw	r30, 0x05	; 5
    16d6:	80 e6       	ldi	r24, 0x60	; 96
    16d8:	df 01       	movw	r26, r30
    16da:	1d 92       	st	X+, r1
    16dc:	8a 95       	dec	r24
    16de:	e9 f7       	brne	.-6      	; 0x16da <main+0x46>
	char msgToSend[8] = "";
    16e0:	c9 56       	subi	r28, 0x69	; 105
    16e2:	df 4f       	sbci	r29, 0xFF	; 255
    16e4:	18 82       	st	Y, r1
    16e6:	19 82       	std	Y+1, r1	; 0x01
    16e8:	1a 82       	std	Y+2, r1	; 0x02
    16ea:	1b 82       	std	Y+3, r1	; 0x03
    16ec:	c7 59       	subi	r28, 0x97	; 151
    16ee:	d0 40       	sbci	r29, 0x00	; 0
    16f0:	c5 56       	subi	r28, 0x65	; 101
    16f2:	df 4f       	sbci	r29, 0xFF	; 255
    16f4:	18 82       	st	Y, r1
    16f6:	19 82       	std	Y+1, r1	; 0x01
    16f8:	1a 82       	std	Y+2, r1	; 0x02
    16fa:	1b 82       	std	Y+3, r1	; 0x03
    16fc:	cb 59       	subi	r28, 0x9B	; 155
    16fe:	d0 40       	sbci	r29, 0x00	; 0
	uint8 pos =  0;
	
	// CONFIGURA ADC
	clrBit(DDRC,POT_BIT);		//SETA O PINO DO ADC COMO ENTRADA
    1700:	39 98       	cbi	0x07, 1	; 7
	clrBit(DDRD,FAULT_BIT);     //SETA O PINO DO FAULT DO DRIVER COMO ENTRADA
    1702:	53 98       	cbi	0x0a, 3	; 10
	clrBit(PORTD,FAULT_BIT);	//DESABILITA O PULL-UP NO PINO PD3 DO ATmega328
    1704:	5b 98       	cbi	0x0b, 3	; 11
	adcConfig(ADC_MODE_SINGLE_CONVERSION, ADC_REFRENCE_POWER_SUPPLY , ADC_PRESCALER_128);
    1706:	47 e0       	ldi	r20, 0x07	; 7
    1708:	61 e0       	ldi	r22, 0x01	; 1
    170a:	80 e0       	ldi	r24, 0x00	; 0
    170c:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <adcConfig>
	adcSelectChannel(POT_CHANNEL);
    1710:	81 e0       	ldi	r24, 0x01	; 1
    1712:	0e 94 33 09 	call	0x1266	; 0x1266 <adcSelectChannel>
	adcClearInterruptRequest();
    1716:	0e 94 65 09 	call	0x12ca	; 0x12ca <adcClearInterruptRequest>
	adcActivateInterrupt();
    171a:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <adcActivateInterrupt>
	adcEnable();
    171e:	0e 94 57 09 	call	0x12ae	; 0x12ae <adcEnable>
	adcStartConversion();
    1722:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <adcStartConversion>
	
	// CONFIGURA PWM
	timer1Config(TIMER_B_MODE_CTC, TIMER_A_PRESCALER_64);
    1726:	63 e0       	ldi	r22, 0x03	; 3
    1728:	84 e0       	ldi	r24, 0x04	; 4
    172a:	0e 94 a9 07 	call	0xf52	; 0xf52 <timer1Config>
	timer1ClearCompareBInterruptRequest();									
    172e:	0e 94 14 08 	call	0x1028	; 0x1028 <timer1ClearCompareBInterruptRequest>
	timer1ClearCompareAInterruptRequest();
    1732:	0e 94 03 08 	call	0x1006	; 0x1006 <timer1ClearCompareAInterruptRequest>
	timer1ActivateCompareBInterrupt();									//ativa a interrupcao do compA
    1736:	0e 94 06 08 	call	0x100c	; 0x100c <timer1ActivateCompareBInterrupt>
	timer1ActivateCompareAInterrupt();									//ativa a interrupcao do compB
    173a:	0e 94 f5 07 	call	0xfea	; 0xfea <timer1ActivateCompareAInterrupt>
	timer1SetCompareAValue((F_CPU/64)/status.freq);							//valor do comparador A,  define a frequencia
    173e:	20 91 37 01 	lds	r18, 0x0137
    1742:	30 91 38 01 	lds	r19, 0x0138
    1746:	40 e0       	ldi	r20, 0x00	; 0
    1748:	50 e0       	ldi	r21, 0x00	; 0
    174a:	60 e9       	ldi	r22, 0x90	; 144
    174c:	70 ed       	ldi	r23, 0xD0	; 208
    174e:	83 e0       	ldi	r24, 0x03	; 3
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <__udivmodsi4>
    1756:	c9 01       	movw	r24, r18
    1758:	0e 94 44 08 	call	0x1088	; 0x1088 <timer1SetCompareAValue>
	timer1SetCompareBValue((status.dc * (timer1GetCompareAValue()))/100);		//valor do comparador B,  define Duty Cicle
    175c:	00 91 3b 01 	lds	r16, 0x013B
    1760:	10 e0       	ldi	r17, 0x00	; 0
    1762:	0e 94 4d 08 	call	0x109a	; 0x109a <timer1GetCompareAValue>
    1766:	9c 01       	movw	r18, r24
    1768:	20 9f       	mul	r18, r16
    176a:	c0 01       	movw	r24, r0
    176c:	21 9f       	mul	r18, r17
    176e:	90 0d       	add	r25, r0
    1770:	30 9f       	mul	r19, r16
    1772:	90 0d       	add	r25, r0
    1774:	11 24       	eor	r1, r1
    1776:	64 e6       	ldi	r22, 0x64	; 100
    1778:	70 e0       	ldi	r23, 0x00	; 0
    177a:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <__udivmodhi4>
    177e:	cb 01       	movw	r24, r22
    1780:	0e 94 52 08 	call	0x10a4	; 0x10a4 <timer1SetCompareBValue>

	// CONFIGURA A INTERRUPÇÃO DE CONTROLE(60Hz)
	timer0Config(TIMER_A_MODE_NORMAL, TIMER_A_PRESCALER_1024);			
    1784:	65 e0       	ldi	r22, 0x05	; 5
    1786:	80 e0       	ldi	r24, 0x00	; 0
    1788:	0e 94 04 07 	call	0xe08	; 0xe08 <timer0Config>
	timer0ClearOverflowInterruptRequest();								//limpa a interrupcao de OVF
    178c:	0e 94 77 07 	call	0xeee	; 0xeee <timer0ClearOverflowInterruptRequest>
	timer0ActivateOverflowInterrupt();
    1790:	0e 94 6b 07 	call	0xed6	; 0xed6 <timer0ActivateOverflowInterrupt>
						
	// CONFIGURA A USART
	usartConfig(USART_MODE_ASYNCHRONOUS,USART_BAUD_9600 ,USART_DATA_BITS_8,USART_PARITY_NONE,USART_STOP_BIT_SINGLE);
    1794:	e1 2c       	mov	r14, r1
    1796:	00 e0       	ldi	r16, 0x00	; 0
    1798:	23 e0       	ldi	r18, 0x03	; 3
    179a:	40 e8       	ldi	r20, 0x80	; 128
    179c:	55 e2       	ldi	r21, 0x25	; 37
    179e:	60 e0       	ldi	r22, 0x00	; 0
    17a0:	70 e0       	ldi	r23, 0x00	; 0
    17a2:	80 e0       	ldi	r24, 0x00	; 0
    17a4:	0e 94 8d 09 	call	0x131a	; 0x131a <usartConfig>
	usartEnableReceiver();
    17a8:	0e 94 12 0a 	call	0x1424	; 0x1424 <usartEnableReceiver>
	usartEnableTransmitter();
    17ac:	0e 94 20 0a 	call	0x1440	; 0x1440 <usartEnableTransmitter>
	usartActivateReceptionCompleteInterrupt();
    17b0:	0e 94 2e 0a 	call	0x145c	; 0x145c <usartActivateReceptionCompleteInterrupt>

	sei();
    17b4:	78 94       	sei
	
	setBit(PWM_DDR,PWM_BIT);			//define o pino do pwm como saída
    17b6:	21 9a       	sbi	0x04, 1	; 4

	setBit(ON_PORT,ON_BIT);				//habilita o pull-up da chave on
    17b8:	5d 9a       	sbi	0x0b, 5	; 11
	setBit(DMS_PORT,DMS_BIT);			//habilita o pull-up da chave dms
    17ba:	5c 9a       	sbi	0x0b, 4	; 11

	//configura o buzzer e da sinal de alerta de ligação
	setBit(BUZZER_DDR,BUZZER_BIT);			
    17bc:	3c 9a       	sbi	0x07, 4	; 7
	setBit(BUZZER_PORT,BUZZER_BIT);
    17be:	44 9a       	sbi	0x08, 4	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    17c0:	3f ef       	ldi	r19, 0xFF	; 255
    17c2:	83 ed       	ldi	r24, 0xD3	; 211
    17c4:	90 e3       	ldi	r25, 0x30	; 48
    17c6:	31 50       	subi	r19, 0x01	; 1
    17c8:	80 40       	sbci	r24, 0x00	; 0
    17ca:	90 40       	sbci	r25, 0x00	; 0
    17cc:	e1 f7       	brne	.-8      	; 0x17c6 <main+0x132>
    17ce:	00 c0       	rjmp	.+0      	; 0x17d0 <main+0x13c>
    17d0:	00 00       	nop
	_delay_ms(1000);
	clrBit(BUZZER_PORT,BUZZER_BIT);
    17d2:	44 98       	cbi	0x08, 4	; 8
			status.freq = MAX_FREQ;
		else
			status.freq = freqReq;
	}
	seta_dc(0);//faz com que o dc va a 0 na mudanca de frequencia
	timer1SetCompareAValue((F_CPU/1024)/status.freq);
    17d4:	09 e0       	ldi	r16, 0x09	; 9
    17d6:	1d e3       	ldi	r17, 0x3D	; 61
{
	if(freqReq < MIN_FREQ)
		status.freq = MIN_FREQ;
	else{
		if(freqReq > MAX_FREQ)
			status.freq = MAX_FREQ;
    17d8:	88 ee       	ldi	r24, 0xE8	; 232
    17da:	e8 2e       	mov	r14, r24
    17dc:	83 e0       	ldi	r24, 0x03	; 3
    17de:	f8 2e       	mov	r15, r24
}

inline void seta_freq(uint16 freqReq)		//função para definição da frequencia do PWM
{
	if(freqReq < MIN_FREQ)
		status.freq = MIN_FREQ;
    17e0:	94 ef       	ldi	r25, 0xF4	; 244
    17e2:	c9 2e       	mov	r12, r25
    17e4:	dd 24       	eor	r13, r13
    17e6:	d3 94       	inc	r13
	+ (str[2]-48)*10 + str[3]-48);
	return value;
}

int main(void)
{
    17e8:	a1 2c       	mov	r10, r1
	clrBit(BUZZER_PORT,BUZZER_BIT);

    while(1)
    {
    	
    	while(!usartIsReceiverBufferEmpty())
    17ea:	0e 94 34 0b 	call	0x1668	; 0x1668 <usartIsReceiverBufferEmpty>
    17ee:	81 11       	cpse	r24, r1
    17f0:	fc cf       	rjmp	.-8      	; 0x17ea <main+0x156>
    	{
			frameData[frameIndex++] = usartGetDataFromReceiverBuffer();
    17f2:	bb 24       	eor	r11, r11
    17f4:	b3 94       	inc	r11
    17f6:	ba 0c       	add	r11, r10
    17f8:	0e 94 12 0b 	call	0x1624	; 0x1624 <usartGetDataFromReceiverBuffer>
    17fc:	e5 e6       	ldi	r30, 0x65	; 101
    17fe:	f0 e0       	ldi	r31, 0x00	; 0
    1800:	ec 0f       	add	r30, r28
    1802:	fd 1f       	adc	r31, r29
    1804:	ea 0d       	add	r30, r10
    1806:	f1 1d       	adc	r31, r1
    1808:	80 83       	st	Z, r24
			if ((frameData[frameIndex-1] == FINALDOPACOTE))
    180a:	e5 e6       	ldi	r30, 0x65	; 101
    180c:	f0 e0       	ldi	r31, 0x00	; 0
    180e:	ec 0f       	add	r30, r28
    1810:	fd 1f       	adc	r31, r29
    1812:	eb 0d       	add	r30, r11
    1814:	f1 1d       	adc	r31, r1
    1816:	31 97       	sbiw	r30, 0x01	; 1
    1818:	80 81       	ld	r24, Z
    181a:	8a 32       	cpi	r24, 0x2A	; 42
    181c:	11 f0       	breq	.+4      	; 0x1822 <main+0x18e>
    while(1)
    {
    	
    	while(!usartIsReceiverBufferEmpty())
    	{
			frameData[frameIndex++] = usartGetDataFromReceiverBuffer();
    181e:	ab 2c       	mov	r10, r11
    1820:	e4 cf       	rjmp	.-56     	; 0x17ea <main+0x156>
			if ((frameData[frameIndex-1] == FINALDOPACOTE))
			{//se esta no final da palavra
				if(frameData[0] == INICIODOPACOTE )
    1822:	a6 96       	adiw	r28, 0x26	; 38
    1824:	8f ad       	ldd	r24, Y+63	; 0x3f
    1826:	a6 97       	sbiw	r28, 0x26	; 38
    1828:	80 34       	cpi	r24, 0x40	; 64
    182a:	09 f0       	breq	.+2      	; 0x182e <main+0x19a>
    182c:	21 c1       	rjmp	.+578    	; 0x1a70 <main+0x3dc>
				{//verifica se o inicio da palavra esta correto
					strcpy(recebido,frameData);
    182e:	be 01       	movw	r22, r28
    1830:	6b 59       	subi	r22, 0x9B	; 155
    1832:	7f 4f       	sbci	r23, 0xFF	; 255
    1834:	ce 01       	movw	r24, r28
    1836:	01 96       	adiw	r24, 0x01	; 1
    1838:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <strcpy>
					pos = (recebido[2]-48) + (recebido[1] - 48)*10;
    183c:	4b 81       	ldd	r20, Y+3	; 0x03
    183e:	40 53       	subi	r20, 0x30	; 48
    1840:	8a 81       	ldd	r24, Y+2	; 0x02
    1842:	88 0f       	add	r24, r24
    1844:	80 56       	subi	r24, 0x60	; 96
    1846:	98 2f       	mov	r25, r24
    1848:	99 0f       	add	r25, r25
    184a:	99 0f       	add	r25, r25
    184c:	98 0f       	add	r25, r24
    184e:	49 0f       	add	r20, r25
					if(frameIndex == GETWORDSIZE)
    1850:	a4 e0       	ldi	r26, 0x04	; 4
    1852:	ba 12       	cpse	r11, r26
    1854:	6c c0       	rjmp	.+216    	; 0x192e <main+0x29a>
					{
						memcpy( recebido,  (recebido+1), 2);
    1856:	8a 81       	ldd	r24, Y+2	; 0x02
    1858:	9b 81       	ldd	r25, Y+3	; 0x03
    185a:	9a 83       	std	Y+2, r25	; 0x02
    185c:	89 83       	std	Y+1, r24	; 0x01
						recebido[2] = '\0';//isola o id
    185e:	1b 82       	std	Y+3, r1	; 0x03
						switch (pos)
    1860:	50 e0       	ldi	r21, 0x00	; 0
    1862:	4e 30       	cpi	r20, 0x0E	; 14
    1864:	51 05       	cpc	r21, r1
    1866:	08 f0       	brcs	.+2      	; 0x186a <main+0x1d6>
    1868:	48 c0       	rjmp	.+144    	; 0x18fa <main+0x266>
    186a:	fa 01       	movw	r30, r20
    186c:	ec 5c       	subi	r30, 0xCC	; 204
    186e:	ff 4f       	sbci	r31, 0xFF	; 255
    1870:	0c 94 71 0d 	jmp	0x1ae2	; 0x1ae2 <__tablejump2__>
						{
							case 0:
								strcpy(msgToSend,"OK");
    1874:	67 e1       	ldi	r22, 0x17	; 23
    1876:	71 e0       	ldi	r23, 0x01	; 1
    1878:	42 c0       	rjmp	.+132    	; 0x18fe <main+0x26a>
								break;
							case 1:
								uint16ToString4(msgToSend,status.freq);
    187a:	60 91 37 01 	lds	r22, 0x0137
    187e:	70 91 38 01 	lds	r23, 0x0138
    1882:	ce 01       	movw	r24, r28
    1884:	89 56       	subi	r24, 0x69	; 105
    1886:	9f 4f       	sbci	r25, 0xFF	; 255
    1888:	0e 94 c8 00 	call	0x190	; 0x190 <uint16ToString4>
								break;
    188c:	3d c0       	rjmp	.+122    	; 0x1908 <main+0x274>
							case 2:
								uint8ToString4(msgToSend,maxCurrent);
    188e:	60 91 06 01 	lds	r22, 0x0106
    1892:	22 c0       	rjmp	.+68     	; 0x18d8 <main+0x244>
								break;
							case 3:
								uint8ToString4(msgToSend,maxDC);
    1894:	60 91 04 01 	lds	r22, 0x0104
    1898:	1f c0       	rjmp	.+62     	; 0x18d8 <main+0x244>
								break;
							case 4:
								uint8ToString4(msgToSend,minDC);
    189a:	60 91 05 01 	lds	r22, 0x0105
    189e:	1c c0       	rjmp	.+56     	; 0x18d8 <main+0x244>
								break;
							case 5:
								uint8ToString4(msgToSend,maxDV);
    18a0:	60 91 03 01 	lds	r22, 0x0103
    18a4:	19 c0       	rjmp	.+50     	; 0x18d8 <main+0x244>
								break;
							case 6 :
								if(flags.on)
    18a6:	80 91 36 01 	lds	r24, 0x0136
    18aa:	84 ff       	sbrs	r24, 4
    18ac:	07 c0       	rjmp	.+14     	; 0x18bc <main+0x228>
									strcpy(msgToSend, "0001");
    18ae:	6a e1       	ldi	r22, 0x1A	; 26
    18b0:	71 e0       	ldi	r23, 0x01	; 1
    18b2:	25 c0       	rjmp	.+74     	; 0x18fe <main+0x26a>
								else
									strcpy(msgToSend, "0000");
								break;
							case 7:
								if(flags.dms)
    18b4:	80 91 36 01 	lds	r24, 0x0136
    18b8:	85 fd       	sbrc	r24, 5
    18ba:	f9 cf       	rjmp	.-14     	; 0x18ae <main+0x21a>
								break;
							case 6 :
								if(flags.on)
									strcpy(msgToSend, "0001");
								else
									strcpy(msgToSend, "0000");
    18bc:	6f e1       	ldi	r22, 0x1F	; 31
    18be:	71 e0       	ldi	r23, 0x01	; 1
    18c0:	1e c0       	rjmp	.+60     	; 0x18fe <main+0x26a>
									strcpy(msgToSend, "0001");
								else
									strcpy(msgToSend, "0000");
								break;
							case 8:
								uint8ToString4(msgToSend,maxTemp);
    18c2:	60 91 02 01 	lds	r22, 0x0102
    18c6:	08 c0       	rjmp	.+16     	; 0x18d8 <main+0x244>
								break;
							case 9:
								uint8ToString4(msgToSend,minVoltage);
    18c8:	60 91 00 01 	lds	r22, 0x0100
    18cc:	05 c0       	rjmp	.+10     	; 0x18d8 <main+0x244>
								break;
							case 10:
								uint8ToString4(msgToSend,status.dc);
    18ce:	60 91 3b 01 	lds	r22, 0x013B
    18d2:	02 c0       	rjmp	.+4      	; 0x18d8 <main+0x244>
								break;
							case 11:
								uint8ToString4(msgToSend,status.temperature);
    18d4:	60 91 3c 01 	lds	r22, 0x013C
    18d8:	70 e0       	ldi	r23, 0x00	; 0
    18da:	09 c0       	rjmp	.+18     	; 0x18ee <main+0x25a>
								break;
							case 12:
								uint8ToString4(msgToSend,status.current);
    18dc:	60 91 39 01 	lds	r22, 0x0139
    18e0:	70 91 3a 01 	lds	r23, 0x013A
    18e4:	04 c0       	rjmp	.+8      	; 0x18ee <main+0x25a>
								break;
							case 13:
								uint8ToString4(msgToSend,status.voltage);
    18e6:	60 91 3d 01 	lds	r22, 0x013D
    18ea:	70 91 3e 01 	lds	r23, 0x013E
    18ee:	ce 01       	movw	r24, r28
    18f0:	89 56       	subi	r24, 0x69	; 105
    18f2:	9f 4f       	sbci	r25, 0xFF	; 255
    18f4:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <uint8ToString4>
								break;
    18f8:	07 c0       	rjmp	.+14     	; 0x1908 <main+0x274>
							default:
								strcpy(msgToSend,"ERRO");
    18fa:	64 e2       	ldi	r22, 0x24	; 36
    18fc:	71 e0       	ldi	r23, 0x01	; 1
    18fe:	ce 01       	movw	r24, r28
    1900:	89 56       	subi	r24, 0x69	; 105
    1902:	9f 4f       	sbci	r25, 0xFF	; 255
    1904:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <strcpy>
						}
						strcat(recebido,msgToSend);
    1908:	be 01       	movw	r22, r28
    190a:	69 56       	subi	r22, 0x69	; 105
    190c:	7f 4f       	sbci	r23, 0xFF	; 255
    190e:	ce 01       	movw	r24, r28
    1910:	01 96       	adiw	r24, 0x01	; 1
    1912:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <strcat>
						strcpy(msgToSend,recebido);
    1916:	be 01       	movw	r22, r28
    1918:	6f 5f       	subi	r22, 0xFF	; 255
    191a:	7f 4f       	sbci	r23, 0xFF	; 255
    191c:	ce 01       	movw	r24, r28
    191e:	89 56       	subi	r24, 0x69	; 105
    1920:	9f 4f       	sbci	r25, 0xFF	; 255
    1922:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <strcpy>

						stringTransmit(msgToSend);
    1926:	ce 01       	movw	r24, r28
    1928:	89 56       	subi	r24, 0x69	; 105
    192a:	9f 4f       	sbci	r25, 0xFF	; 255
    192c:	9a c0       	rjmp	.+308    	; 0x1a62 <main+0x3ce>
					}
					else
					{
						if(frameIndex == SETWORDSIZE)
    192e:	b8 e0       	ldi	r27, 0x08	; 8
    1930:	bb 12       	cpse	r11, r27
    1932:	9a c0       	rjmp	.+308    	; 0x1a68 <main+0x3d4>
						{
							if(flags.mode == SERIAL_MODE){
    1934:	80 91 36 01 	lds	r24, 0x0136
    1938:	8c 70       	andi	r24, 0x0C	; 12
    193a:	84 30       	cpi	r24, 0x04	; 4
    193c:	09 f0       	breq	.+2      	; 0x1940 <main+0x2ac>
    193e:	54 cf       	rjmp	.-344    	; 0x17e8 <main+0x154>
								memcpy((void *) recebido, (void *) (recebido+3), 4);//isola somente o valor, usando 4 caracteres
    1940:	8c 81       	ldd	r24, Y+4	; 0x04
    1942:	9d 81       	ldd	r25, Y+5	; 0x05
    1944:	ae 81       	ldd	r26, Y+6	; 0x06
    1946:	bf 81       	ldd	r27, Y+7	; 0x07
    1948:	89 83       	std	Y+1, r24	; 0x01
    194a:	9a 83       	std	Y+2, r25	; 0x02
    194c:	ab 83       	std	Y+3, r26	; 0x03
    194e:	bc 83       	std	Y+4, r27	; 0x04
								recebido[4] = '\0';
    1950:	1d 82       	std	Y+5, r1	; 0x05

								switch (pos){
    1952:	50 e0       	ldi	r21, 0x00	; 0
    1954:	fa 01       	movw	r30, r20
    1956:	31 97       	sbiw	r30, 0x01	; 1
    1958:	ea 30       	cpi	r30, 0x0A	; 10
    195a:	f1 05       	cpc	r31, r1
    195c:	08 f0       	brcs	.+2      	; 0x1960 <main+0x2cc>
    195e:	7f c0       	rjmp	.+254    	; 0x1a5e <main+0x3ca>
    1960:	ee 5b       	subi	r30, 0xBE	; 190
    1962:	ff 4f       	sbci	r31, 0xFF	; 255
    1964:	0c 94 71 0d 	jmp	0x1ae2	; 0x1ae2 <__tablejump2__>
									case 1:
										seta_freq(string4ToUint16(recebido));
    1968:	ce 01       	movw	r24, r28
    196a:	01 96       	adiw	r24, 0x01	; 1
    196c:	0e 94 27 01 	call	0x24e	; 0x24e <string4ToUint16>
	}
}

inline void seta_freq(uint16 freqReq)		//função para definição da frequencia do PWM
{
	if(freqReq < MIN_FREQ)
    1970:	84 3f       	cpi	r24, 0xF4	; 244
    1972:	21 e0       	ldi	r18, 0x01	; 1
    1974:	92 07       	cpc	r25, r18
    1976:	28 f4       	brcc	.+10     	; 0x1982 <main+0x2ee>
		status.freq = MIN_FREQ;
    1978:	d0 92 38 01 	sts	0x0138, r13
    197c:	c0 92 37 01 	sts	0x0137, r12
    1980:	0d c0       	rjmp	.+26     	; 0x199c <main+0x308>
	else{
		if(freqReq > MAX_FREQ)
    1982:	89 3e       	cpi	r24, 0xE9	; 233
    1984:	33 e0       	ldi	r19, 0x03	; 3
    1986:	93 07       	cpc	r25, r19
    1988:	28 f0       	brcs	.+10     	; 0x1994 <main+0x300>
			status.freq = MAX_FREQ;
    198a:	f0 92 38 01 	sts	0x0138, r15
    198e:	e0 92 37 01 	sts	0x0137, r14
    1992:	04 c0       	rjmp	.+8      	; 0x199c <main+0x308>
		else
			status.freq = freqReq;
    1994:	90 93 38 01 	sts	0x0138, r25
    1998:	80 93 37 01 	sts	0x0137, r24
	}
	seta_dc(0);//faz com que o dc va a 0 na mudanca de frequencia
    199c:	80 e0       	ldi	r24, 0x00	; 0
    199e:	0e 94 83 00 	call	0x106	; 0x106 <seta_dc>
	timer1SetCompareAValue((F_CPU/1024)/status.freq);
    19a2:	60 91 37 01 	lds	r22, 0x0137
    19a6:	70 91 38 01 	lds	r23, 0x0138
    19aa:	c8 01       	movw	r24, r16
    19ac:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <__udivmodhi4>
    19b0:	cb 01       	movw	r24, r22
    19b2:	0e 94 44 08 	call	0x1088	; 0x1088 <timer1SetCompareAValue>
    19b6:	18 cf       	rjmp	.-464    	; 0x17e8 <main+0x154>
								switch (pos){
									case 1:
										seta_freq(string4ToUint16(recebido));
										break;
									case 2:
										maxCurrent = string4Touint8(recebido);
    19b8:	ce 01       	movw	r24, r28
    19ba:	01 96       	adiw	r24, 0x01	; 1
    19bc:	0e 94 52 01 	call	0x2a4	; 0x2a4 <string4Touint8>
    19c0:	80 93 06 01 	sts	0x0106, r24
										break;
    19c4:	11 cf       	rjmp	.-478    	; 0x17e8 <main+0x154>
									case 3:
										maxDC = string4Touint8(recebido);
    19c6:	ce 01       	movw	r24, r28
    19c8:	01 96       	adiw	r24, 0x01	; 1
    19ca:	0e 94 52 01 	call	0x2a4	; 0x2a4 <string4Touint8>
    19ce:	80 93 04 01 	sts	0x0104, r24
										break;
    19d2:	0a cf       	rjmp	.-492    	; 0x17e8 <main+0x154>
									case 4:
										minDC = string4Touint8(recebido);
    19d4:	ce 01       	movw	r24, r28
    19d6:	01 96       	adiw	r24, 0x01	; 1
    19d8:	0e 94 52 01 	call	0x2a4	; 0x2a4 <string4Touint8>
    19dc:	80 93 05 01 	sts	0x0105, r24
										seta_dc(dcReq);
    19e0:	80 91 34 01 	lds	r24, 0x0134
    19e4:	0e 94 83 00 	call	0x106	; 0x106 <seta_dc>
										break;
    19e8:	ff ce       	rjmp	.-514    	; 0x17e8 <main+0x154>
									case 5:
										maxDV = string4Touint8(recebido);
    19ea:	ce 01       	movw	r24, r28
    19ec:	01 96       	adiw	r24, 0x01	; 1
    19ee:	0e 94 52 01 	call	0x2a4	; 0x2a4 <string4Touint8>
    19f2:	80 93 03 01 	sts	0x0103, r24
										break;
    19f6:	f8 ce       	rjmp	.-528    	; 0x17e8 <main+0x154>
									case 6 :
										if(recebido[3] == '1')
    19f8:	8c 81       	ldd	r24, Y+4	; 0x04
    19fa:	81 33       	cpi	r24, 0x31	; 49
    19fc:	21 f4       	brne	.+8      	; 0x1a06 <main+0x372>
											flags.on = 1;
    19fe:	80 91 36 01 	lds	r24, 0x0136
    1a02:	80 61       	ori	r24, 0x10	; 16
    1a04:	06 c0       	rjmp	.+12     	; 0x1a12 <main+0x37e>
										if(recebido[3] == '0')
    1a06:	80 33       	cpi	r24, 0x30	; 48
    1a08:	09 f0       	breq	.+2      	; 0x1a0c <main+0x378>
    1a0a:	ee ce       	rjmp	.-548    	; 0x17e8 <main+0x154>
											flags.on = 0;
    1a0c:	80 91 36 01 	lds	r24, 0x0136
    1a10:	8f 7e       	andi	r24, 0xEF	; 239
    1a12:	80 93 36 01 	sts	0x0136, r24
    1a16:	e8 ce       	rjmp	.-560    	; 0x17e8 <main+0x154>
										break;
									case 7:
										if(recebido[3] == '1')
    1a18:	8c 81       	ldd	r24, Y+4	; 0x04
    1a1a:	81 33       	cpi	r24, 0x31	; 49
    1a1c:	21 f4       	brne	.+8      	; 0x1a26 <main+0x392>
											flags.dms = 1;
    1a1e:	80 91 36 01 	lds	r24, 0x0136
    1a22:	80 62       	ori	r24, 0x20	; 32
    1a24:	f6 cf       	rjmp	.-20     	; 0x1a12 <main+0x37e>
										if(recebido[3] == '0')
    1a26:	80 33       	cpi	r24, 0x30	; 48
    1a28:	09 f0       	breq	.+2      	; 0x1a2c <main+0x398>
    1a2a:	de ce       	rjmp	.-580    	; 0x17e8 <main+0x154>
											flags.dms = 0;
    1a2c:	80 91 36 01 	lds	r24, 0x0136
    1a30:	8f 7d       	andi	r24, 0xDF	; 223
    1a32:	ef cf       	rjmp	.-34     	; 0x1a12 <main+0x37e>
										break;
									case 8:
										maxTemp = string4Touint8(recebido);
    1a34:	ce 01       	movw	r24, r28
    1a36:	01 96       	adiw	r24, 0x01	; 1
    1a38:	0e 94 52 01 	call	0x2a4	; 0x2a4 <string4Touint8>
    1a3c:	80 93 02 01 	sts	0x0102, r24
										break;
    1a40:	d3 ce       	rjmp	.-602    	; 0x17e8 <main+0x154>
									case 9:
										minVoltage = string4Touint8(recebido);
    1a42:	ce 01       	movw	r24, r28
    1a44:	01 96       	adiw	r24, 0x01	; 1
    1a46:	0e 94 52 01 	call	0x2a4	; 0x2a4 <string4Touint8>
    1a4a:	80 93 00 01 	sts	0x0100, r24
										break;
    1a4e:	cc ce       	rjmp	.-616    	; 0x17e8 <main+0x154>
									case 10:
										//seta_dc(string4Touint8(recebido));
										dcReq = string4Touint8(recebido);
    1a50:	ce 01       	movw	r24, r28
    1a52:	01 96       	adiw	r24, 0x01	; 1
    1a54:	0e 94 52 01 	call	0x2a4	; 0x2a4 <string4Touint8>
    1a58:	80 93 34 01 	sts	0x0134, r24
										break;
    1a5c:	c5 ce       	rjmp	.-630    	; 0x17e8 <main+0x154>
									case 11:
									case 12:
									case 13:

									default:
										stringTransmit("ERRO");
    1a5e:	84 e2       	ldi	r24, 0x24	; 36
    1a60:	91 e0       	ldi	r25, 0x01	; 1
    1a62:	0e 94 b0 00 	call	0x160	; 0x160 <stringTransmit>
    1a66:	c0 ce       	rjmp	.-640    	; 0x17e8 <main+0x154>
								}
							}
						}
						else
						{
							stringTransmit("wrong size");	
    1a68:	89 e2       	ldi	r24, 0x29	; 41
    1a6a:	91 e0       	ldi	r25, 0x01	; 1
    1a6c:	0e 94 b0 00 	call	0x160	; 0x160 <stringTransmit>
						}
					}
				}
				else
				{//se o inicio da palavra nao esta correto
					esvaziaBuffer();
    1a70:	0e 94 a8 00 	call	0x150	; 0x150 <esvaziaBuffer>
    1a74:	b9 ce       	rjmp	.-654    	; 0x17e8 <main+0x154>

00001a76 <__udivmodhi4>:
    1a76:	aa 1b       	sub	r26, r26
    1a78:	bb 1b       	sub	r27, r27
    1a7a:	51 e1       	ldi	r21, 0x11	; 17
    1a7c:	07 c0       	rjmp	.+14     	; 0x1a8c <__udivmodhi4_ep>

00001a7e <__udivmodhi4_loop>:
    1a7e:	aa 1f       	adc	r26, r26
    1a80:	bb 1f       	adc	r27, r27
    1a82:	a6 17       	cp	r26, r22
    1a84:	b7 07       	cpc	r27, r23
    1a86:	10 f0       	brcs	.+4      	; 0x1a8c <__udivmodhi4_ep>
    1a88:	a6 1b       	sub	r26, r22
    1a8a:	b7 0b       	sbc	r27, r23

00001a8c <__udivmodhi4_ep>:
    1a8c:	88 1f       	adc	r24, r24
    1a8e:	99 1f       	adc	r25, r25
    1a90:	5a 95       	dec	r21
    1a92:	a9 f7       	brne	.-22     	; 0x1a7e <__udivmodhi4_loop>
    1a94:	80 95       	com	r24
    1a96:	90 95       	com	r25
    1a98:	bc 01       	movw	r22, r24
    1a9a:	cd 01       	movw	r24, r26
    1a9c:	08 95       	ret

00001a9e <__udivmodsi4>:
    1a9e:	a1 e2       	ldi	r26, 0x21	; 33
    1aa0:	1a 2e       	mov	r1, r26
    1aa2:	aa 1b       	sub	r26, r26
    1aa4:	bb 1b       	sub	r27, r27
    1aa6:	fd 01       	movw	r30, r26
    1aa8:	0d c0       	rjmp	.+26     	; 0x1ac4 <__udivmodsi4_ep>

00001aaa <__udivmodsi4_loop>:
    1aaa:	aa 1f       	adc	r26, r26
    1aac:	bb 1f       	adc	r27, r27
    1aae:	ee 1f       	adc	r30, r30
    1ab0:	ff 1f       	adc	r31, r31
    1ab2:	a2 17       	cp	r26, r18
    1ab4:	b3 07       	cpc	r27, r19
    1ab6:	e4 07       	cpc	r30, r20
    1ab8:	f5 07       	cpc	r31, r21
    1aba:	20 f0       	brcs	.+8      	; 0x1ac4 <__udivmodsi4_ep>
    1abc:	a2 1b       	sub	r26, r18
    1abe:	b3 0b       	sbc	r27, r19
    1ac0:	e4 0b       	sbc	r30, r20
    1ac2:	f5 0b       	sbc	r31, r21

00001ac4 <__udivmodsi4_ep>:
    1ac4:	66 1f       	adc	r22, r22
    1ac6:	77 1f       	adc	r23, r23
    1ac8:	88 1f       	adc	r24, r24
    1aca:	99 1f       	adc	r25, r25
    1acc:	1a 94       	dec	r1
    1ace:	69 f7       	brne	.-38     	; 0x1aaa <__udivmodsi4_loop>
    1ad0:	60 95       	com	r22
    1ad2:	70 95       	com	r23
    1ad4:	80 95       	com	r24
    1ad6:	90 95       	com	r25
    1ad8:	9b 01       	movw	r18, r22
    1ada:	ac 01       	movw	r20, r24
    1adc:	bd 01       	movw	r22, r26
    1ade:	cf 01       	movw	r24, r30
    1ae0:	08 95       	ret

00001ae2 <__tablejump2__>:
    1ae2:	ee 0f       	add	r30, r30
    1ae4:	ff 1f       	adc	r31, r31

00001ae6 <__tablejump__>:
    1ae6:	05 90       	lpm	r0, Z+
    1ae8:	f4 91       	lpm	r31, Z
    1aea:	e0 2d       	mov	r30, r0
    1aec:	09 94       	ijmp

00001aee <__ashrdi3>:
    1aee:	97 fb       	bst	r25, 7
    1af0:	10 f8       	bld	r1, 0

00001af2 <__lshrdi3>:
    1af2:	16 94       	lsr	r1
    1af4:	00 08       	sbc	r0, r0
    1af6:	0f 93       	push	r16
    1af8:	08 30       	cpi	r16, 0x08	; 8
    1afa:	98 f0       	brcs	.+38     	; 0x1b22 <__lshrdi3+0x30>
    1afc:	08 50       	subi	r16, 0x08	; 8
    1afe:	23 2f       	mov	r18, r19
    1b00:	34 2f       	mov	r19, r20
    1b02:	45 2f       	mov	r20, r21
    1b04:	56 2f       	mov	r21, r22
    1b06:	67 2f       	mov	r22, r23
    1b08:	78 2f       	mov	r23, r24
    1b0a:	89 2f       	mov	r24, r25
    1b0c:	90 2d       	mov	r25, r0
    1b0e:	f4 cf       	rjmp	.-24     	; 0x1af8 <__lshrdi3+0x6>
    1b10:	05 94       	asr	r0
    1b12:	97 95       	ror	r25
    1b14:	87 95       	ror	r24
    1b16:	77 95       	ror	r23
    1b18:	67 95       	ror	r22
    1b1a:	57 95       	ror	r21
    1b1c:	47 95       	ror	r20
    1b1e:	37 95       	ror	r19
    1b20:	27 95       	ror	r18
    1b22:	0a 95       	dec	r16
    1b24:	aa f7       	brpl	.-22     	; 0x1b10 <__lshrdi3+0x1e>
    1b26:	0f 91       	pop	r16
    1b28:	08 95       	ret

00001b2a <strcat>:
    1b2a:	fb 01       	movw	r30, r22
    1b2c:	dc 01       	movw	r26, r24
    1b2e:	0d 90       	ld	r0, X+
    1b30:	00 20       	and	r0, r0
    1b32:	e9 f7       	brne	.-6      	; 0x1b2e <strcat+0x4>
    1b34:	11 97       	sbiw	r26, 0x01	; 1
    1b36:	01 90       	ld	r0, Z+
    1b38:	0d 92       	st	X+, r0
    1b3a:	00 20       	and	r0, r0
    1b3c:	e1 f7       	brne	.-8      	; 0x1b36 <strcat+0xc>
    1b3e:	08 95       	ret

00001b40 <strcpy>:
    1b40:	fb 01       	movw	r30, r22
    1b42:	dc 01       	movw	r26, r24
    1b44:	01 90       	ld	r0, Z+
    1b46:	0d 92       	st	X+, r0
    1b48:	00 20       	and	r0, r0
    1b4a:	e1 f7       	brne	.-8      	; 0x1b44 <strcpy+0x4>
    1b4c:	08 95       	ret

00001b4e <_exit>:
    1b4e:	f8 94       	cli

00001b50 <__stop_program>:
    1b50:	ff cf       	rjmp	.-2      	; 0x1b50 <__stop_program>
