
placaAdicionalChopper.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000032  00800100  00001b70  00001c04  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b70  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000047  00800132  00800132  00001c36  2**0
                  ALLOC
  3 .stab         00000c54  00000000  00000000  00001c38  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d41  00000000  00000000  0000288c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000022  00000000  00000000  000035cd  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000048  00000000  00000000  000035ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000033fb  00000000  00000000  00003637  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000006cc  00000000  00000000  00006a32  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000834  00000000  00000000  000070fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000de8  00000000  00000000  00007934  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002639  00000000  00000000  0000871c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001b1d  00000000  00000000  0000ad55  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c872  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__ctors_end>
       4:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
       8:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
       c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      10:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      14:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      18:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      1c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      20:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      24:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      28:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      2c:	0c 94 ca 01 	jmp	0x394	; 0x394 <__vector_11>
      30:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__vector_12>
      34:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      38:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      3c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      40:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__vector_16>
      44:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      48:	0c 94 a7 02 	jmp	0x54e	; 0x54e <__vector_18>
      4c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      50:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      54:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__vector_21>
      58:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      5c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      60:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      64:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      68:	44 0c       	add	r4, r4
      6a:	47 0c       	add	r4, r7
      6c:	51 0c       	add	r5, r1
      6e:	54 0c       	add	r5, r4
      70:	57 0c       	add	r5, r7
      72:	5a 0c       	add	r5, r10
      74:	5d 0c       	add	r5, r13
      76:	64 0c       	add	r6, r4
      78:	6b 0c       	add	r6, r11
      7a:	6e 0c       	add	r6, r14
      7c:	71 0c       	add	r7, r1
      7e:	74 0c       	add	r7, r4
      80:	77 0c       	add	r7, r7
      82:	7a 0c       	add	r7, r10
      84:	b4 0c       	add	r11, r4
      86:	ec 0c       	add	r14, r12
      88:	f3 0c       	add	r15, r3
      8a:	fa 0c       	add	r15, r10
      8c:	05 0d       	add	r16, r5
      8e:	0c 0d       	add	r16, r12
      90:	19 0d       	add	r17, r9
      92:	28 0d       	add	r18, r8
      94:	2f 0d       	add	r18, r15
      96:	36 0d       	add	r19, r6
      98:	e2 02       	muls	r30, r18
      9a:	f2 02       	muls	r31, r18
      9c:	e4 02       	muls	r30, r20
      9e:	e6 02       	muls	r30, r22
      a0:	e8 02       	muls	r30, r24
      a2:	ea 02       	muls	r30, r26
      a4:	ec 02       	muls	r30, r28
      a6:	ee 02       	muls	r30, r30
      a8:	f0 02       	muls	r31, r16
      aa:	15 07       	cpc	r17, r21
      ac:	08 07       	cpc	r16, r24
      ae:	0a 07       	cpc	r16, r26
      b0:	0c 07       	cpc	r16, r28
      b2:	0e 07       	cpc	r16, r30
      b4:	10 07       	cpc	r17, r16
      b6:	12 07       	cpc	r17, r18
      b8:	14 07       	cpc	r17, r20
      ba:	10 09       	sbc	r17, r0
      bc:	12 09       	sbc	r17, r2
      be:	14 09       	sbc	r17, r4
      c0:	16 09       	sbc	r17, r6
      c2:	18 09       	sbc	r17, r8
      c4:	1a 09       	sbc	r17, r10
      c6:	1c 09       	sbc	r17, r12

000000c8 <__ctors_end>:
      c8:	11 24       	eor	r1, r1
      ca:	1f be       	out	0x3f, r1	; 63
      cc:	cf ef       	ldi	r28, 0xFF	; 255
      ce:	d8 e0       	ldi	r29, 0x08	; 8
      d0:	de bf       	out	0x3e, r29	; 62
      d2:	cd bf       	out	0x3d, r28	; 61

000000d4 <__do_copy_data>:
      d4:	11 e0       	ldi	r17, 0x01	; 1
      d6:	a0 e0       	ldi	r26, 0x00	; 0
      d8:	b1 e0       	ldi	r27, 0x01	; 1
      da:	e0 e7       	ldi	r30, 0x70	; 112
      dc:	fb e1       	ldi	r31, 0x1B	; 27
      de:	02 c0       	rjmp	.+4      	; 0xe4 <__do_copy_data+0x10>
      e0:	05 90       	lpm	r0, Z+
      e2:	0d 92       	st	X+, r0
      e4:	a2 33       	cpi	r26, 0x32	; 50
      e6:	b1 07       	cpc	r27, r17
      e8:	d9 f7       	brne	.-10     	; 0xe0 <__do_copy_data+0xc>

000000ea <__do_clear_bss>:
      ea:	11 e0       	ldi	r17, 0x01	; 1
      ec:	a2 e3       	ldi	r26, 0x32	; 50
      ee:	b1 e0       	ldi	r27, 0x01	; 1
      f0:	01 c0       	rjmp	.+2      	; 0xf4 <.do_clear_bss_start>

000000f2 <.do_clear_bss_loop>:
      f2:	1d 92       	st	X+, r1

000000f4 <.do_clear_bss_start>:
      f4:	a9 37       	cpi	r26, 0x79	; 121
      f6:	b1 07       	cpc	r27, r17
      f8:	e1 f7       	brne	.-8      	; 0xf2 <.do_clear_bss_loop>
      fa:	0e 94 3f 0b 	call	0x167e	; 0x167e <main>
      fe:	0c 94 b6 0d 	jmp	0x1b6c	; 0x1b6c <_exit>

00000102 <__bad_interrupt>:
     102:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000106 <seta_dc>:
uint8 maxTemp = 70;				//temperatura maxima, desliga o sistema
uint8 criticalTemp = 60;		//temperatura critica
uint8 minVoltage = 30;

void seta_dc(uint8 d_cycle)		//função para definição do Duty Cicle do PWM
{
     106:	cf 93       	push	r28
     108:	c8 2f       	mov	r28, r24
	if(d_cycle < minDC)				// Comparação com o valor mínimo de Duty Cicle
     10a:	80 91 05 01 	lds	r24, 0x0105
     10e:	c8 17       	cp	r28, r24
     110:	18 f4       	brcc	.+6      	; 0x118 <seta_dc+0x12>
		status.dc = 0;
     112:	10 92 3a 01 	sts	0x013A, r1
     116:	1a c0       	rjmp	.+52     	; 0x14c <seta_dc+0x46>
	else
	{
		if(d_cycle > maxDC)			//Comparação com o valor máximo de Duty Cicle
     118:	80 91 04 01 	lds	r24, 0x0104
     11c:	8c 17       	cp	r24, r28
     11e:	20 f4       	brcc	.+8      	; 0x128 <seta_dc+0x22>
			status.dc = 100;
     120:	84 e6       	ldi	r24, 0x64	; 100
     122:	80 93 3a 01 	sts	0x013A, r24
     126:	12 c0       	rjmp	.+36     	; 0x14c <seta_dc+0x46>
		else
		{
			status.dc = d_cycle;
     128:	c0 93 3a 01 	sts	0x013A, r28
			timer1SetCompareBValue((status.dc * (timer1GetCompareAValue()))/100);		//seta o valor do comparador B para gerar o DC requerido
     12c:	0e 94 42 08 	call	0x1084	; 0x1084 <timer1GetCompareAValue>
     130:	9c 01       	movw	r18, r24
     132:	c2 9f       	mul	r28, r18
     134:	c0 01       	movw	r24, r0
     136:	c3 9f       	mul	r28, r19
     138:	90 0d       	add	r25, r0
     13a:	11 24       	eor	r1, r1
     13c:	64 e6       	ldi	r22, 0x64	; 100
     13e:	70 e0       	ldi	r23, 0x00	; 0
     140:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <__udivmodhi4>
     144:	cb 01       	movw	r24, r22
		}
	}
}
     146:	cf 91       	pop	r28
		if(d_cycle > maxDC)			//Comparação com o valor máximo de Duty Cicle
			status.dc = 100;
		else
		{
			status.dc = d_cycle;
			timer1SetCompareBValue((status.dc * (timer1GetCompareAValue()))/100);		//seta o valor do comparador B para gerar o DC requerido
     148:	0c 94 47 08 	jmp	0x108e	; 0x108e <timer1SetCompareBValue>
		}
	}
}
     14c:	cf 91       	pop	r28
     14e:	08 95       	ret

00000150 <esvaziaBuffer>:
}

//esvazia o buffer de entrada da usart
void esvaziaBuffer()
{
	while(!usartIsReceiverBufferEmpty())
     150:	0e 94 29 0b 	call	0x1652	; 0x1652 <usartIsReceiverBufferEmpty>
     154:	81 11       	cpse	r24, r1
     156:	03 c0       	rjmp	.+6      	; 0x15e <esvaziaBuffer+0xe>
		usartGetDataFromReceiverBuffer();
     158:	0e 94 07 0b 	call	0x160e	; 0x160e <usartGetDataFromReceiverBuffer>
     15c:	f9 cf       	rjmp	.-14     	; 0x150 <esvaziaBuffer>
}
     15e:	08 95       	ret

00000160 <stringTransmit>:

//envia uma msg usando o protocolo GUI
void stringTransmit(char* texto)
{
     160:	1f 93       	push	r17
     162:	cf 93       	push	r28
     164:	df 93       	push	r29
     166:	ec 01       	movw	r28, r24
	uint8 i = 0;
	usartTransmit(INICIODOPACOTE);
     168:	80 e4       	ldi	r24, 0x40	; 64
     16a:	0e 94 8f 0a 	call	0x151e	; 0x151e <usartTransmit>
	for(i = 0; texto[i] != '\0'; i++)
     16e:	10 e0       	ldi	r17, 0x00	; 0
     170:	fe 01       	movw	r30, r28
     172:	e1 0f       	add	r30, r17
     174:	f1 1d       	adc	r31, r1
     176:	80 81       	ld	r24, Z
     178:	88 23       	and	r24, r24
     17a:	21 f0       	breq	.+8      	; 0x184 <stringTransmit+0x24>
		usartTransmit(texto[i]);
     17c:	0e 94 8f 0a 	call	0x151e	; 0x151e <usartTransmit>
//envia uma msg usando o protocolo GUI
void stringTransmit(char* texto)
{
	uint8 i = 0;
	usartTransmit(INICIODOPACOTE);
	for(i = 0; texto[i] != '\0'; i++)
     180:	1f 5f       	subi	r17, 0xFF	; 255
     182:	f6 cf       	rjmp	.-20     	; 0x170 <stringTransmit+0x10>
		usartTransmit(texto[i]);
	usartTransmit(FINALDOPACOTE);
     184:	8a e2       	ldi	r24, 0x2A	; 42
}
     186:	df 91       	pop	r29
     188:	cf 91       	pop	r28
     18a:	1f 91       	pop	r17
{
	uint8 i = 0;
	usartTransmit(INICIODOPACOTE);
	for(i = 0; texto[i] != '\0'; i++)
		usartTransmit(texto[i]);
	usartTransmit(FINALDOPACOTE);
     18c:	0c 94 8f 0a 	jmp	0x151e	; 0x151e <usartTransmit>

00000190 <uint16ToString4>:
}

//convert uint16 to string of 4 characters
void uint16ToString4(char* str,uint16 value)
{
     190:	0f 93       	push	r16
     192:	1f 93       	push	r17
     194:	cf 93       	push	r28
     196:	df 93       	push	r29
     198:	fc 01       	movw	r30, r24
     19a:	9b 01       	movw	r18, r22
	str[4] = '\0';
     19c:	14 82       	std	Z+4, r1	; 0x04
	str[3] = (char ) (value%10 + 48);
     19e:	ca e0       	ldi	r28, 0x0A	; 10
     1a0:	d0 e0       	ldi	r29, 0x00	; 0
     1a2:	cb 01       	movw	r24, r22
     1a4:	be 01       	movw	r22, r28
     1a6:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <__udivmodhi4>
     1aa:	80 5d       	subi	r24, 0xD0	; 208
     1ac:	83 83       	std	Z+3, r24	; 0x03
	str[2] = (char) ((value%100) / 10 + 48);
     1ae:	04 e6       	ldi	r16, 0x64	; 100
     1b0:	10 e0       	ldi	r17, 0x00	; 0
     1b2:	c9 01       	movw	r24, r18
     1b4:	b8 01       	movw	r22, r16
     1b6:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <__udivmodhi4>
     1ba:	be 01       	movw	r22, r28
     1bc:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <__udivmodhi4>
     1c0:	60 5d       	subi	r22, 0xD0	; 208
     1c2:	62 83       	std	Z+2, r22	; 0x02
	str[1] = (char) ((value%1000) / 100 + 48);
     1c4:	c8 ee       	ldi	r28, 0xE8	; 232
     1c6:	d3 e0       	ldi	r29, 0x03	; 3
     1c8:	c9 01       	movw	r24, r18
     1ca:	be 01       	movw	r22, r28
     1cc:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <__udivmodhi4>
     1d0:	b8 01       	movw	r22, r16
     1d2:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <__udivmodhi4>
     1d6:	60 5d       	subi	r22, 0xD0	; 208
     1d8:	61 83       	std	Z+1, r22	; 0x01
	str[0] = (char) ((value%10000) / 1000 + 48);
     1da:	c9 01       	movw	r24, r18
     1dc:	60 e1       	ldi	r22, 0x10	; 16
     1de:	77 e2       	ldi	r23, 0x27	; 39
     1e0:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <__udivmodhi4>
     1e4:	be 01       	movw	r22, r28
     1e6:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <__udivmodhi4>
     1ea:	60 5d       	subi	r22, 0xD0	; 208
     1ec:	60 83       	st	Z, r22
}
     1ee:	df 91       	pop	r29
     1f0:	cf 91       	pop	r28
     1f2:	1f 91       	pop	r17
     1f4:	0f 91       	pop	r16
     1f6:	08 95       	ret

000001f8 <uint8ToString4>:

//convert uint8 to string of 4 characters
void uint8ToString4(char* str,uint16 value)
{
     1f8:	0f 93       	push	r16
     1fa:	1f 93       	push	r17
     1fc:	cf 93       	push	r28
     1fe:	df 93       	push	r29
     200:	fc 01       	movw	r30, r24
     202:	9b 01       	movw	r18, r22
	str[4] = '\0';
     204:	14 82       	std	Z+4, r1	; 0x04
	str[3] = (char ) (value%10 + 48);
     206:	0a e0       	ldi	r16, 0x0A	; 10
     208:	10 e0       	ldi	r17, 0x00	; 0
     20a:	cb 01       	movw	r24, r22
     20c:	b8 01       	movw	r22, r16
     20e:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <__udivmodhi4>
     212:	80 5d       	subi	r24, 0xD0	; 208
     214:	83 83       	std	Z+3, r24	; 0x03
	str[2] = (char) ((value%100) / 10 + 48);
     216:	c4 e6       	ldi	r28, 0x64	; 100
     218:	d0 e0       	ldi	r29, 0x00	; 0
     21a:	c9 01       	movw	r24, r18
     21c:	be 01       	movw	r22, r28
     21e:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <__udivmodhi4>
     222:	b8 01       	movw	r22, r16
     224:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <__udivmodhi4>
     228:	60 5d       	subi	r22, 0xD0	; 208
     22a:	62 83       	std	Z+2, r22	; 0x02
	str[1] = (char) ((value%1000) / 100 + 48);
     22c:	c9 01       	movw	r24, r18
     22e:	68 ee       	ldi	r22, 0xE8	; 232
     230:	73 e0       	ldi	r23, 0x03	; 3
     232:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <__udivmodhi4>
     236:	be 01       	movw	r22, r28
     238:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <__udivmodhi4>
     23c:	60 5d       	subi	r22, 0xD0	; 208
     23e:	61 83       	std	Z+1, r22	; 0x01
	str[0] = '0';
     240:	80 e3       	ldi	r24, 0x30	; 48
     242:	80 83       	st	Z, r24
}
     244:	df 91       	pop	r29
     246:	cf 91       	pop	r28
     248:	1f 91       	pop	r17
     24a:	0f 91       	pop	r16
     24c:	08 95       	ret

0000024e <string4ToUint16>:

//convert string of 4 characters uint16
uint16 string4ToUint16(char* str)
{
     24e:	fc 01       	movw	r30, r24
	uint16 value;
	value = (uint16) (str[0]-48)*1000 + (str[1]-48)*100 
	+ (str[2]-48)*10 + str[3]-48;
     250:	23 81       	ldd	r18, Z+3	; 0x03
     252:	30 e0       	ldi	r19, 0x00	; 0

//convert string of 4 characters uint16
uint16 string4ToUint16(char* str)
{
	uint16 value;
	value = (uint16) (str[0]-48)*1000 + (str[1]-48)*100 
     254:	20 53       	subi	r18, 0x30	; 48
     256:	31 09       	sbc	r19, r1
     258:	80 81       	ld	r24, Z
     25a:	90 e0       	ldi	r25, 0x00	; 0
     25c:	c0 97       	sbiw	r24, 0x30	; 48
     25e:	68 ee       	ldi	r22, 0xE8	; 232
     260:	73 e0       	ldi	r23, 0x03	; 3
     262:	86 9f       	mul	r24, r22
     264:	a0 01       	movw	r20, r0
     266:	87 9f       	mul	r24, r23
     268:	50 0d       	add	r21, r0
     26a:	96 9f       	mul	r25, r22
     26c:	50 0d       	add	r21, r0
     26e:	11 24       	eor	r1, r1
	+ (str[2]-48)*10 + str[3]-48;
     270:	24 0f       	add	r18, r20
     272:	35 1f       	adc	r19, r21

//convert string of 4 characters uint16
uint16 string4ToUint16(char* str)
{
	uint16 value;
	value = (uint16) (str[0]-48)*1000 + (str[1]-48)*100 
     274:	81 81       	ldd	r24, Z+1	; 0x01
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	c0 97       	sbiw	r24, 0x30	; 48
     27a:	64 e6       	ldi	r22, 0x64	; 100
     27c:	68 9f       	mul	r22, r24
     27e:	a0 01       	movw	r20, r0
     280:	69 9f       	mul	r22, r25
     282:	50 0d       	add	r21, r0
     284:	11 24       	eor	r1, r1
	+ (str[2]-48)*10 + str[3]-48;
     286:	24 0f       	add	r18, r20
     288:	35 1f       	adc	r19, r21
     28a:	42 81       	ldd	r20, Z+2	; 0x02
     28c:	50 e0       	ldi	r21, 0x00	; 0
     28e:	40 53       	subi	r20, 0x30	; 48
     290:	51 09       	sbc	r21, r1
     292:	6a e0       	ldi	r22, 0x0A	; 10
     294:	64 9f       	mul	r22, r20
     296:	c0 01       	movw	r24, r0
     298:	65 9f       	mul	r22, r21
     29a:	90 0d       	add	r25, r0
     29c:	11 24       	eor	r1, r1
	return value;
}
     29e:	82 0f       	add	r24, r18
     2a0:	93 1f       	adc	r25, r19
     2a2:	08 95       	ret

000002a4 <string4Touint8>:

//convert string of 4 characters uint8
uint8 string4Touint8(char* str)
{
     2a4:	fc 01       	movw	r30, r24
	uint8 value;
	value = (uint8) ((str[1]-48)*100 
     2a6:	83 81       	ldd	r24, Z+3	; 0x03
     2a8:	80 53       	subi	r24, 0x30	; 48
     2aa:	91 81       	ldd	r25, Z+1	; 0x01
     2ac:	90 53       	subi	r25, 0x30	; 48
     2ae:	24 e6       	ldi	r18, 0x64	; 100
     2b0:	92 9f       	mul	r25, r18
     2b2:	80 0d       	add	r24, r0
     2b4:	11 24       	eor	r1, r1
	+ (str[2]-48)*10 + str[3]-48);
     2b6:	92 81       	ldd	r25, Z+2	; 0x02
     2b8:	99 0f       	add	r25, r25

//convert string of 4 characters uint8
uint8 string4Touint8(char* str)
{
	uint8 value;
	value = (uint8) ((str[1]-48)*100 
     2ba:	90 56       	subi	r25, 0x60	; 96
     2bc:	29 2f       	mov	r18, r25
     2be:	22 0f       	add	r18, r18
     2c0:	22 0f       	add	r18, r18
     2c2:	29 0f       	add	r18, r25
	+ (str[2]-48)*10 + str[3]-48);
	return value;
}
     2c4:	82 0f       	add	r24, r18
     2c6:	08 95       	ret

000002c8 <__vector_21>:
		}
    }
}

ISR(ADC_vect)
{
     2c8:	1f 92       	push	r1
     2ca:	0f 92       	push	r0
     2cc:	0f b6       	in	r0, 0x3f	; 63
     2ce:	0f 92       	push	r0
     2d0:	11 24       	eor	r1, r1
     2d2:	2f 93       	push	r18
     2d4:	3f 93       	push	r19
     2d6:	4f 93       	push	r20
     2d8:	5f 93       	push	r21
     2da:	6f 93       	push	r22
     2dc:	7f 93       	push	r23
     2de:	8f 93       	push	r24
     2e0:	9f 93       	push	r25
     2e2:	af 93       	push	r26
     2e4:	bf 93       	push	r27
     2e6:	ef 93       	push	r30
     2e8:	ff 93       	push	r31
	switch (channel)
     2ea:	80 91 33 01 	lds	r24, 0x0133
     2ee:	81 30       	cpi	r24, 0x01	; 1
     2f0:	f1 f0       	breq	.+60     	; 0x32e <__vector_21+0x66>
     2f2:	70 f1       	brcs	.+92     	; 0x350 <__vector_21+0x88>
     2f4:	82 30       	cpi	r24, 0x02	; 2
     2f6:	79 f0       	breq	.+30     	; 0x316 <__vector_21+0x4e>
     2f8:	83 30       	cpi	r24, 0x03	; 3
     2fa:	91 f5       	brne	.+100    	; 0x360 <__vector_21+0x98>
			if(flags.mode == POT_MODE)
				dcReq = ADC / 10;
			channel = VOLTAGE_CHANNEL;
			break;
		case VOLTAGE_CHANNEL:
			status.voltage = ADC / 21;
     2fc:	80 91 78 00 	lds	r24, 0x0078
     300:	90 91 79 00 	lds	r25, 0x0079
     304:	65 e1       	ldi	r22, 0x15	; 21
     306:	70 e0       	ldi	r23, 0x00	; 0
     308:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <__udivmodhi4>
     30c:	60 93 3c 01 	sts	0x013C, r22
			channel = TEMP_CHANNEL;
     310:	10 92 33 01 	sts	0x0133, r1
			break;
     314:	28 c0       	rjmp	.+80     	; 0x366 <__vector_21+0x9e>
ISR(ADC_vect)
{
	switch (channel)
	{
		case CURRENT_CHANNEL:
			status.current = ADC / 5;
     316:	80 91 78 00 	lds	r24, 0x0078
     31a:	90 91 79 00 	lds	r25, 0x0079
     31e:	65 e0       	ldi	r22, 0x05	; 5
     320:	70 e0       	ldi	r23, 0x00	; 0
     322:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <__udivmodhi4>
     326:	60 93 39 01 	sts	0x0139, r22
			channel = POT_CHANNEL;
     32a:	81 e0       	ldi	r24, 0x01	; 1
     32c:	1a c0       	rjmp	.+52     	; 0x362 <__vector_21+0x9a>
			break;
		case POT_CHANNEL:
			if(flags.mode == POT_MODE)
     32e:	80 91 36 01 	lds	r24, 0x0136
     332:	8c 70       	andi	r24, 0x0C	; 12
     334:	88 30       	cpi	r24, 0x08	; 8
     336:	51 f4       	brne	.+20     	; 0x34c <__vector_21+0x84>
				dcReq = ADC / 10;
     338:	80 91 78 00 	lds	r24, 0x0078
     33c:	90 91 79 00 	lds	r25, 0x0079
     340:	6a e0       	ldi	r22, 0x0A	; 10
     342:	70 e0       	ldi	r23, 0x00	; 0
     344:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <__udivmodhi4>
     348:	60 93 32 01 	sts	0x0132, r22
			channel = VOLTAGE_CHANNEL;
     34c:	83 e0       	ldi	r24, 0x03	; 3
     34e:	09 c0       	rjmp	.+18     	; 0x362 <__vector_21+0x9a>
		case VOLTAGE_CHANNEL:
			status.voltage = ADC / 21;
			channel = TEMP_CHANNEL;
			break;
		case TEMP_CHANNEL:
			status.temperature = ADC / 2;
     350:	80 91 78 00 	lds	r24, 0x0078
     354:	90 91 79 00 	lds	r25, 0x0079
     358:	96 95       	lsr	r25
     35a:	87 95       	ror	r24
     35c:	80 93 3b 01 	sts	0x013B, r24
		default:
			channel = CURRENT_CHANNEL;
     360:	82 e0       	ldi	r24, 0x02	; 2
     362:	80 93 33 01 	sts	0x0133, r24
	/*if(channel == LAST_CHANNEL)
		channel = FIRST_CHANNEL;
	else
		channel ++;
	*/
	adcSelectChannel(channel);
     366:	80 91 33 01 	lds	r24, 0x0133
     36a:	0e 94 28 09 	call	0x1250	; 0x1250 <adcSelectChannel>
	adcStartConversion();
     36e:	0e 94 6f 09 	call	0x12de	; 0x12de <adcStartConversion>
}
     372:	ff 91       	pop	r31
     374:	ef 91       	pop	r30
     376:	bf 91       	pop	r27
     378:	af 91       	pop	r26
     37a:	9f 91       	pop	r25
     37c:	8f 91       	pop	r24
     37e:	7f 91       	pop	r23
     380:	6f 91       	pop	r22
     382:	5f 91       	pop	r21
     384:	4f 91       	pop	r20
     386:	3f 91       	pop	r19
     388:	2f 91       	pop	r18
     38a:	0f 90       	pop	r0
     38c:	0f be       	out	0x3f, r0	; 63
     38e:	0f 90       	pop	r0
     390:	1f 90       	pop	r1
     392:	18 95       	reti

00000394 <__vector_11>:

ISR(TIMER1_COMPA_vect)
{
     394:	1f 92       	push	r1
     396:	0f 92       	push	r0
     398:	0f b6       	in	r0, 0x3f	; 63
     39a:	0f 92       	push	r0
     39c:	11 24       	eor	r1, r1
     39e:	8f 93       	push	r24
	if(status.dc > 0 && flags.on && flags.dms)
     3a0:	80 91 3a 01 	lds	r24, 0x013A
     3a4:	88 23       	and	r24, r24
     3a6:	31 f0       	breq	.+12     	; 0x3b4 <__vector_11+0x20>
     3a8:	80 91 36 01 	lds	r24, 0x0136
     3ac:	80 73       	andi	r24, 0x30	; 48
     3ae:	80 33       	cpi	r24, 0x30	; 48
     3b0:	09 f4       	brne	.+2      	; 0x3b4 <__vector_11+0x20>
		setBit(PWM_PORT,PWM_BIT);		//Inicia o período em nível alto do PWM
     3b2:	29 9a       	sbi	0x05, 1	; 5
}
     3b4:	8f 91       	pop	r24
     3b6:	0f 90       	pop	r0
     3b8:	0f be       	out	0x3f, r0	; 63
     3ba:	0f 90       	pop	r0
     3bc:	1f 90       	pop	r1
     3be:	18 95       	reti

000003c0 <__vector_12>:

ISR(TIMER1_COMPB_vect)
{
     3c0:	1f 92       	push	r1
     3c2:	0f 92       	push	r0
     3c4:	0f b6       	in	r0, 0x3f	; 63
     3c6:	0f 92       	push	r0
     3c8:	11 24       	eor	r1, r1
     3ca:	8f 93       	push	r24
	if(status.dc < 100)
     3cc:	80 91 3a 01 	lds	r24, 0x013A
     3d0:	84 36       	cpi	r24, 0x64	; 100
     3d2:	08 f4       	brcc	.+2      	; 0x3d6 <__vector_12+0x16>
		clrBit(PWM_PORT,PWM_BIT);		//Inicia o período em nível baixo do PWM
     3d4:	29 98       	cbi	0x05, 1	; 5
}
     3d6:	8f 91       	pop	r24
     3d8:	0f 90       	pop	r0
     3da:	0f be       	out	0x3f, r0	; 63
     3dc:	0f 90       	pop	r0
     3de:	1f 90       	pop	r1
     3e0:	18 95       	reti

000003e2 <__vector_16>:

//controle 60Hz
ISR(TIMER0_OVF_vect)
{
     3e2:	1f 92       	push	r1
     3e4:	0f 92       	push	r0
     3e6:	0f b6       	in	r0, 0x3f	; 63
     3e8:	0f 92       	push	r0
     3ea:	11 24       	eor	r1, r1
     3ec:	2f 93       	push	r18
     3ee:	3f 93       	push	r19
     3f0:	4f 93       	push	r20
     3f2:	5f 93       	push	r21
     3f4:	6f 93       	push	r22
     3f6:	7f 93       	push	r23
     3f8:	8f 93       	push	r24
     3fa:	9f 93       	push	r25
     3fc:	af 93       	push	r26
     3fe:	bf 93       	push	r27
     400:	ef 93       	push	r30
     402:	ff 93       	push	r31
	if(flags.mode == POT_MODE)
     404:	90 91 36 01 	lds	r25, 0x0136
     408:	89 2f       	mov	r24, r25
     40a:	8c 70       	andi	r24, 0x0C	; 12
     40c:	88 30       	cpi	r24, 0x08	; 8
     40e:	91 f4       	brne	.+36     	; 0x434 <__vector_16+0x52>
	{
		flags.on = isBitClr(ON_PIN,ON_BIT);
     410:	89 b1       	in	r24, 0x09	; 9
     412:	85 fb       	bst	r24, 5
     414:	88 27       	eor	r24, r24
     416:	80 f9       	bld	r24, 0
     418:	21 e0       	ldi	r18, 0x01	; 1
     41a:	82 27       	eor	r24, r18
     41c:	80 fb       	bst	r24, 0
     41e:	94 f9       	bld	r25, 4
     420:	90 93 36 01 	sts	0x0136, r25
		flags.dms = isBitClr(DMS_PIN,DMS_BIT);
     424:	89 b1       	in	r24, 0x09	; 9
     426:	82 95       	swap	r24
     428:	81 70       	andi	r24, 0x01	; 1
     42a:	82 27       	eor	r24, r18
     42c:	80 fb       	bst	r24, 0
     42e:	95 f9       	bld	r25, 5
     430:	90 93 36 01 	sts	0x0136, r25
	}
	if(!(flags.on && flags.dms))					//informa ao sistema para nao acionar o motor caso botão ON e DMS estejam desligados.
     434:	90 91 36 01 	lds	r25, 0x0136
     438:	90 73       	andi	r25, 0x30	; 48
     43a:	90 33       	cpi	r25, 0x30	; 48
     43c:	11 f0       	breq	.+4      	; 0x442 <__vector_16+0x60>
		status.on = 0;
     43e:	10 92 3d 01 	sts	0x013D, r1
	if(dcReq<minDC && flags.on && flags.dms)		//informa ao sistema para acionar o motor apenas quando botão ON e DMS estejam ligados
     442:	80 91 32 01 	lds	r24, 0x0132
     446:	60 91 05 01 	lds	r22, 0x0105
     44a:	86 17       	cp	r24, r22
     44c:	28 f4       	brcc	.+10     	; 0x458 <__vector_16+0x76>
     44e:	90 33       	cpi	r25, 0x30	; 48
     450:	19 f4       	brne	.+6      	; 0x458 <__vector_16+0x76>
		status.on = 1;								//e o potenciometro esteja numa posicao correspondente a menos de 10% do DC do PWM.
     452:	91 e0       	ldi	r25, 0x01	; 1
     454:	90 93 3d 01 	sts	0x013D, r25

	if(status.on)		//inicia o acionamento do motor, com os as condições preliminares acima satisfeitas.
     458:	20 91 3d 01 	lds	r18, 0x013D
     45c:	90 91 3a 01 	lds	r25, 0x013A
     460:	22 23       	and	r18, r18
     462:	59 f1       	breq	.+86     	; 0x4ba <__vector_16+0xd8>
	{
		//stringTransmit("@teste*");
    	if(status.dc != dcReq)
     464:	98 17       	cp	r25, r24
     466:	71 f1       	breq	.+92     	; 0x4c4 <__vector_16+0xe2>
    	{
    		if(dcReq > status.dc && dcReq > (minDC + 5))
     468:	98 17       	cp	r25, r24
     46a:	20 f5       	brcc	.+72     	; 0x4b4 <__vector_16+0xd2>
     46c:	48 2f       	mov	r20, r24
     46e:	50 e0       	ldi	r21, 0x00	; 0
     470:	26 2f       	mov	r18, r22
     472:	30 e0       	ldi	r19, 0x00	; 0
     474:	2b 5f       	subi	r18, 0xFB	; 251
     476:	3f 4f       	sbci	r19, 0xFF	; 255
     478:	24 17       	cp	r18, r20
     47a:	35 07       	cpc	r19, r21
     47c:	dc f4       	brge	.+54     	; 0x4b4 <__vector_16+0xd2>
    		{
    			if(cont == maxCont)
     47e:	20 91 34 01 	lds	r18, 0x0134
     482:	30 91 35 01 	lds	r19, 0x0135
     486:	23 30       	cpi	r18, 0x03	; 3
     488:	31 05       	cpc	r19, r1
     48a:	69 f4       	brne	.+26     	; 0x4a6 <__vector_16+0xc4>
    			{
    				if(status.dc == 0)
     48c:	91 11       	cpse	r25, r1
     48e:	02 c0       	rjmp	.+4      	; 0x494 <__vector_16+0xb2>
    					seta_dc(minDC);
     490:	86 2f       	mov	r24, r22
     492:	02 c0       	rjmp	.+4      	; 0x498 <__vector_16+0xb6>
    				else
    					seta_dc(status.dc+1);
     494:	81 e0       	ldi	r24, 0x01	; 1
     496:	89 0f       	add	r24, r25
     498:	0e 94 83 00 	call	0x106	; 0x106 <seta_dc>
    				cont = 0;
     49c:	10 92 35 01 	sts	0x0135, r1
     4a0:	10 92 34 01 	sts	0x0134, r1
     4a4:	0f c0       	rjmp	.+30     	; 0x4c4 <__vector_16+0xe2>
    			}
    			else
    				cont++;
     4a6:	2f 5f       	subi	r18, 0xFF	; 255
     4a8:	3f 4f       	sbci	r19, 0xFF	; 255
     4aa:	30 93 35 01 	sts	0x0135, r19
     4ae:	20 93 34 01 	sts	0x0134, r18
     4b2:	08 c0       	rjmp	.+16     	; 0x4c4 <__vector_16+0xe2>
    		}
    		else
    			if (dcReq < status.dc)
     4b4:	89 17       	cp	r24, r25
     4b6:	30 f4       	brcc	.+12     	; 0x4c4 <__vector_16+0xe2>
     4b8:	03 c0       	rjmp	.+6      	; 0x4c0 <__vector_16+0xde>
    				seta_dc(dcReq);			//definição do Duty Cicle do PWM
    	}
	}
	else
	{
		if(status.dc != 0)					//se o sistema ainda nao esta desligado
     4ba:	99 23       	and	r25, r25
     4bc:	19 f0       	breq	.+6      	; 0x4c4 <__vector_16+0xe2>
			seta_dc(0);						//desliga o sistema
     4be:	80 e0       	ldi	r24, 0x00	; 0
     4c0:	0e 94 83 00 	call	0x106	; 0x106 <seta_dc>
	}
	if(status.dc>minDC && (status.current>maxCurrent || status.voltage<minVoltage))
     4c4:	80 91 3a 01 	lds	r24, 0x013A
     4c8:	90 91 05 01 	lds	r25, 0x0105
     4cc:	98 17       	cp	r25, r24
     4ce:	a0 f4       	brcc	.+40     	; 0x4f8 <__vector_16+0x116>
     4d0:	20 91 39 01 	lds	r18, 0x0139
     4d4:	90 91 06 01 	lds	r25, 0x0106
     4d8:	92 17       	cp	r25, r18
     4da:	30 f0       	brcs	.+12     	; 0x4e8 <__vector_16+0x106>
     4dc:	20 91 3c 01 	lds	r18, 0x013C
     4e0:	90 91 00 01 	lds	r25, 0x0100
     4e4:	29 17       	cp	r18, r25
     4e6:	40 f4       	brcc	.+16     	; 0x4f8 <__vector_16+0x116>
	{
		if(status.dc==100)
     4e8:	84 36       	cpi	r24, 0x64	; 100
     4ea:	19 f4       	brne	.+6      	; 0x4f2 <__vector_16+0x110>
			seta_dc(status.dc-(100 - maxDC));
     4ec:	80 91 04 01 	lds	r24, 0x0104
     4f0:	01 c0       	rjmp	.+2      	; 0x4f4 <__vector_16+0x112>
		else
			seta_dc(status.dc-2);
     4f2:	82 50       	subi	r24, 0x02	; 2
     4f4:	0e 94 83 00 	call	0x106	; 0x106 <seta_dc>
	}
	if(status.temperature > criticalTemp && !flags.warning)
     4f8:	90 91 3b 01 	lds	r25, 0x013B
     4fc:	80 91 01 01 	lds	r24, 0x0101
     500:	89 17       	cp	r24, r25
     502:	50 f4       	brcc	.+20     	; 0x518 <__vector_16+0x136>
     504:	20 91 36 01 	lds	r18, 0x0136
     508:	20 fd       	sbrc	r18, 0
     50a:	06 c0       	rjmp	.+12     	; 0x518 <__vector_16+0x136>
	{
		flags.warning = 1;
     50c:	82 2f       	mov	r24, r18
     50e:	81 60       	ori	r24, 0x01	; 1
     510:	80 93 36 01 	sts	0x0136, r24
		setBit(BUZZER_PORT,BUZZER_BIT);
     514:	44 9a       	sbi	0x08, 4	; 8
     516:	0a c0       	rjmp	.+20     	; 0x52c <__vector_16+0x14a>
	}
	else
		if(status.temperature < criticalTemp && flags.warning)
     518:	98 17       	cp	r25, r24
     51a:	40 f4       	brcc	.+16     	; 0x52c <__vector_16+0x14a>
     51c:	80 91 36 01 	lds	r24, 0x0136
     520:	80 ff       	sbrs	r24, 0
     522:	04 c0       	rjmp	.+8      	; 0x52c <__vector_16+0x14a>
		{
			flags.warning = 0;
     524:	8e 7f       	andi	r24, 0xFE	; 254
     526:	80 93 36 01 	sts	0x0136, r24
			clrBit(BUZZER_PORT,BUZZER_BIT);
     52a:	44 98       	cbi	0x08, 4	; 8
		}
}
     52c:	ff 91       	pop	r31
     52e:	ef 91       	pop	r30
     530:	bf 91       	pop	r27
     532:	af 91       	pop	r26
     534:	9f 91       	pop	r25
     536:	8f 91       	pop	r24
     538:	7f 91       	pop	r23
     53a:	6f 91       	pop	r22
     53c:	5f 91       	pop	r21
     53e:	4f 91       	pop	r20
     540:	3f 91       	pop	r19
     542:	2f 91       	pop	r18
     544:	0f 90       	pop	r0
     546:	0f be       	out	0x3f, r0	; 63
     548:	0f 90       	pop	r0
     54a:	1f 90       	pop	r1
     54c:	18 95       	reti

0000054e <__vector_18>:

ISR(USART_RX_vect)
{
     54e:	1f 92       	push	r1
     550:	0f 92       	push	r0
     552:	0f b6       	in	r0, 0x3f	; 63
     554:	0f 92       	push	r0
     556:	11 24       	eor	r1, r1
     558:	2f 93       	push	r18
     55a:	3f 93       	push	r19
     55c:	4f 93       	push	r20
     55e:	5f 93       	push	r21
     560:	6f 93       	push	r22
     562:	7f 93       	push	r23
     564:	8f 93       	push	r24
     566:	9f 93       	push	r25
     568:	af 93       	push	r26
     56a:	bf 93       	push	r27
     56c:	ef 93       	push	r30
     56e:	ff 93       	push	r31
	usartAddDataToReceiverBuffer(UDR0);
     570:	80 91 c6 00 	lds	r24, 0x00C6
     574:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <usartAddDataToReceiverBuffer>
     578:	ff 91       	pop	r31
     57a:	ef 91       	pop	r30
     57c:	bf 91       	pop	r27
     57e:	af 91       	pop	r26
     580:	9f 91       	pop	r25
     582:	8f 91       	pop	r24
     584:	7f 91       	pop	r23
     586:	6f 91       	pop	r22
     588:	5f 91       	pop	r21
     58a:	4f 91       	pop	r20
     58c:	3f 91       	pop	r19
     58e:	2f 91       	pop	r18
     590:	0f 90       	pop	r0
     592:	0f be       	out	0x3f, r0	; 63
     594:	0f 90       	pop	r0
     596:	1f 90       	pop	r1
     598:	18 95       	reti

0000059a <usartReceiveStd>:
     59a:	80 91 c0 00 	lds	r24, 0x00C0
     59e:	87 ff       	sbrs	r24, 7
     5a0:	fc cf       	rjmp	.-8      	; 0x59a <usartReceiveStd>
     5a2:	80 91 c6 00 	lds	r24, 0x00C6
     5a6:	90 e0       	ldi	r25, 0x00	; 0
     5a8:	08 95       	ret

000005aa <globalInterruptEnable>:
     5aa:	78 94       	sei
     5ac:	08 95       	ret

000005ae <globalInterruptDisable>:
     5ae:	f8 94       	cli
     5b0:	08 95       	ret

000005b2 <systemClockSetPrescaler>:
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	89 30       	cpi	r24, 0x09	; 9
     5b6:	91 05       	cpc	r25, r1
     5b8:	00 f5       	brcc	.+64     	; 0x5fa <systemClockSetPrescaler+0x48>
     5ba:	fc 01       	movw	r30, r24
     5bc:	e4 5b       	subi	r30, 0xB4	; 180
     5be:	ff 4f       	sbci	r31, 0xFF	; 255
     5c0:	0c 94 80 0d 	jmp	0x1b00	; 0x1b00 <__tablejump2__>
     5c4:	80 e0       	ldi	r24, 0x00	; 0
     5c6:	0f c0       	rjmp	.+30     	; 0x5e6 <systemClockSetPrescaler+0x34>
     5c8:	82 e0       	ldi	r24, 0x02	; 2
     5ca:	0d c0       	rjmp	.+26     	; 0x5e6 <systemClockSetPrescaler+0x34>
     5cc:	83 e0       	ldi	r24, 0x03	; 3
     5ce:	0b c0       	rjmp	.+22     	; 0x5e6 <systemClockSetPrescaler+0x34>
     5d0:	84 e0       	ldi	r24, 0x04	; 4
     5d2:	09 c0       	rjmp	.+18     	; 0x5e6 <systemClockSetPrescaler+0x34>
     5d4:	85 e0       	ldi	r24, 0x05	; 5
     5d6:	07 c0       	rjmp	.+14     	; 0x5e6 <systemClockSetPrescaler+0x34>
     5d8:	86 e0       	ldi	r24, 0x06	; 6
     5da:	05 c0       	rjmp	.+10     	; 0x5e6 <systemClockSetPrescaler+0x34>
     5dc:	87 e0       	ldi	r24, 0x07	; 7
     5de:	03 c0       	rjmp	.+6      	; 0x5e6 <systemClockSetPrescaler+0x34>
     5e0:	88 e0       	ldi	r24, 0x08	; 8
     5e2:	01 c0       	rjmp	.+2      	; 0x5e6 <systemClockSetPrescaler+0x34>
     5e4:	81 e0       	ldi	r24, 0x01	; 1
     5e6:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     5e8:	f8 94       	cli
     5ea:	20 e8       	ldi	r18, 0x80	; 128
     5ec:	20 93 61 00 	sts	0x0061, r18
     5f0:	80 93 61 00 	sts	0x0061, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     5f4:	9f bf       	out	0x3f, r25	; 63
     5f6:	80 e0       	ldi	r24, 0x00	; 0
     5f8:	08 95       	ret
     5fa:	87 e0       	ldi	r24, 0x07	; 7
     5fc:	08 95       	ret

000005fe <eepromSetOperationMode>:
     5fe:	2f b3       	in	r18, 0x1f	; 31
     600:	30 e1       	ldi	r19, 0x10	; 16
     602:	83 9f       	mul	r24, r19
     604:	c0 01       	movw	r24, r0
     606:	11 24       	eor	r1, r1
     608:	2f 7c       	andi	r18, 0xCF	; 207
     60a:	28 2b       	or	r18, r24
     60c:	2f bb       	out	0x1f, r18	; 31
     60e:	08 95       	ret

00000610 <eepromReadyActivateInterrupt>:
     610:	fb 9a       	sbi	0x1f, 3	; 31
     612:	08 95       	ret

00000614 <eepromReadyDeactivateInterrupt>:
     614:	fb 98       	cbi	0x1f, 3	; 31
     616:	08 95       	ret

00000618 <eepromWrite>:
     618:	f9 99       	sbic	0x1f, 1	; 31
     61a:	fe cf       	rjmp	.-4      	; 0x618 <eepromWrite>
     61c:	27 b7       	in	r18, 0x37	; 55
     61e:	93 70       	andi	r25, 0x03	; 3
     620:	92 bd       	out	0x22, r25	; 34
     622:	81 bd       	out	0x21, r24	; 33
     624:	60 bd       	out	0x20, r22	; 32
     626:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     628:	f8 94       	cli
     62a:	fa 9a       	sbi	0x1f, 2	; 31
     62c:	f9 9a       	sbi	0x1f, 1	; 31
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     62e:	8f bf       	out	0x3f, r24	; 63
    __asm__ volatile ("" ::: "memory");
     630:	08 95       	ret

00000632 <eepromRead>:
     632:	f9 99       	sbic	0x1f, 1	; 31
     634:	fe cf       	rjmp	.-4      	; 0x632 <eepromRead>
     636:	93 70       	andi	r25, 0x03	; 3
     638:	92 bd       	out	0x22, r25	; 34
     63a:	81 bd       	out	0x21, r24	; 33
     63c:	f8 9a       	sbi	0x1f, 0	; 31
     63e:	80 b5       	in	r24, 0x20	; 32
     640:	08 95       	ret

00000642 <globalPullUpEnable>:
     642:	85 b7       	in	r24, 0x35	; 53
     644:	8f 7e       	andi	r24, 0xEF	; 239
     646:	85 bf       	out	0x35, r24	; 53
     648:	08 95       	ret

0000064a <pullUpDisable>:
     64a:	85 b7       	in	r24, 0x35	; 53
     64c:	80 61       	ori	r24, 0x10	; 16
     64e:	85 bf       	out	0x35, r24	; 53
     650:	08 95       	ret

00000652 <int0Config>:
     652:	82 30       	cpi	r24, 0x02	; 2
     654:	79 f0       	breq	.+30     	; 0x674 <int0Config+0x22>
     656:	30 f4       	brcc	.+12     	; 0x664 <int0Config+0x12>
     658:	88 23       	and	r24, r24
     65a:	49 f0       	breq	.+18     	; 0x66e <int0Config+0x1c>
     65c:	81 30       	cpi	r24, 0x01	; 1
     65e:	11 f5       	brne	.+68     	; 0x6a4 <int0Config+0x52>
     660:	5a 9a       	sbi	0x0b, 2	; 11
     662:	06 c0       	rjmp	.+12     	; 0x670 <int0Config+0x1e>
     664:	83 30       	cpi	r24, 0x03	; 3
     666:	41 f0       	breq	.+16     	; 0x678 <int0Config+0x26>
     668:	8f 3f       	cpi	r24, 0xFF	; 255
     66a:	41 f0       	breq	.+16     	; 0x67c <int0Config+0x2a>
     66c:	1b c0       	rjmp	.+54     	; 0x6a4 <int0Config+0x52>
     66e:	5a 98       	cbi	0x0b, 2	; 11
     670:	52 9a       	sbi	0x0a, 2	; 10
     672:	04 c0       	rjmp	.+8      	; 0x67c <int0Config+0x2a>
     674:	5a 98       	cbi	0x0b, 2	; 11
     676:	01 c0       	rjmp	.+2      	; 0x67a <int0Config+0x28>
     678:	5a 9a       	sbi	0x0b, 2	; 11
     67a:	52 98       	cbi	0x0a, 2	; 10
     67c:	6f 3f       	cpi	r22, 0xFF	; 255
     67e:	a1 f0       	breq	.+40     	; 0x6a8 <int0Config+0x56>
     680:	80 91 69 00 	lds	r24, 0x0069
     684:	8c 7f       	andi	r24, 0xFC	; 252
     686:	61 30       	cpi	r22, 0x01	; 1
     688:	39 f0       	breq	.+14     	; 0x698 <int0Config+0x46>
     68a:	48 f0       	brcs	.+18     	; 0x69e <int0Config+0x4c>
     68c:	62 30       	cpi	r22, 0x02	; 2
     68e:	31 f0       	breq	.+12     	; 0x69c <int0Config+0x4a>
     690:	63 30       	cpi	r22, 0x03	; 3
     692:	61 f4       	brne	.+24     	; 0x6ac <int0Config+0x5a>
     694:	83 60       	ori	r24, 0x03	; 3
     696:	03 c0       	rjmp	.+6      	; 0x69e <int0Config+0x4c>
     698:	81 60       	ori	r24, 0x01	; 1
     69a:	01 c0       	rjmp	.+2      	; 0x69e <int0Config+0x4c>
     69c:	82 60       	ori	r24, 0x02	; 2
     69e:	80 93 69 00 	sts	0x0069, r24
     6a2:	02 c0       	rjmp	.+4      	; 0x6a8 <int0Config+0x56>
     6a4:	81 e0       	ldi	r24, 0x01	; 1
     6a6:	08 95       	ret
     6a8:	80 e0       	ldi	r24, 0x00	; 0
     6aa:	08 95       	ret
     6ac:	82 e0       	ldi	r24, 0x02	; 2
     6ae:	08 95       	ret

000006b0 <int0ActivateInterrupt>:
     6b0:	e8 9a       	sbi	0x1d, 0	; 29
     6b2:	08 95       	ret

000006b4 <int0DeactivateInterrupt>:
     6b4:	e8 98       	cbi	0x1d, 0	; 29
     6b6:	08 95       	ret

000006b8 <int0ClearInterruptRequest>:
     6b8:	e0 9a       	sbi	0x1c, 0	; 28
     6ba:	08 95       	ret

000006bc <int1Config>:
     6bc:	82 30       	cpi	r24, 0x02	; 2
     6be:	79 f0       	breq	.+30     	; 0x6de <int1Config+0x22>
     6c0:	30 f4       	brcc	.+12     	; 0x6ce <int1Config+0x12>
     6c2:	88 23       	and	r24, r24
     6c4:	49 f0       	breq	.+18     	; 0x6d8 <int1Config+0x1c>
     6c6:	81 30       	cpi	r24, 0x01	; 1
     6c8:	11 f5       	brne	.+68     	; 0x70e <int1Config+0x52>
     6ca:	5b 9a       	sbi	0x0b, 3	; 11
     6cc:	06 c0       	rjmp	.+12     	; 0x6da <int1Config+0x1e>
     6ce:	83 30       	cpi	r24, 0x03	; 3
     6d0:	41 f0       	breq	.+16     	; 0x6e2 <int1Config+0x26>
     6d2:	8f 3f       	cpi	r24, 0xFF	; 255
     6d4:	41 f0       	breq	.+16     	; 0x6e6 <int1Config+0x2a>
     6d6:	1b c0       	rjmp	.+54     	; 0x70e <int1Config+0x52>
     6d8:	5b 98       	cbi	0x0b, 3	; 11
     6da:	53 9a       	sbi	0x0a, 3	; 10
     6dc:	04 c0       	rjmp	.+8      	; 0x6e6 <int1Config+0x2a>
     6de:	5b 98       	cbi	0x0b, 3	; 11
     6e0:	01 c0       	rjmp	.+2      	; 0x6e4 <int1Config+0x28>
     6e2:	5b 9a       	sbi	0x0b, 3	; 11
     6e4:	53 98       	cbi	0x0a, 3	; 10
     6e6:	6f 3f       	cpi	r22, 0xFF	; 255
     6e8:	a1 f0       	breq	.+40     	; 0x712 <int1Config+0x56>
     6ea:	80 91 69 00 	lds	r24, 0x0069
     6ee:	83 7f       	andi	r24, 0xF3	; 243
     6f0:	61 30       	cpi	r22, 0x01	; 1
     6f2:	39 f0       	breq	.+14     	; 0x702 <int1Config+0x46>
     6f4:	48 f0       	brcs	.+18     	; 0x708 <int1Config+0x4c>
     6f6:	62 30       	cpi	r22, 0x02	; 2
     6f8:	31 f0       	breq	.+12     	; 0x706 <int1Config+0x4a>
     6fa:	63 30       	cpi	r22, 0x03	; 3
     6fc:	61 f4       	brne	.+24     	; 0x716 <int1Config+0x5a>
     6fe:	8c 60       	ori	r24, 0x0C	; 12
     700:	03 c0       	rjmp	.+6      	; 0x708 <int1Config+0x4c>
     702:	84 60       	ori	r24, 0x04	; 4
     704:	01 c0       	rjmp	.+2      	; 0x708 <int1Config+0x4c>
     706:	88 60       	ori	r24, 0x08	; 8
     708:	80 93 69 00 	sts	0x0069, r24
     70c:	02 c0       	rjmp	.+4      	; 0x712 <int1Config+0x56>
     70e:	81 e0       	ldi	r24, 0x01	; 1
     710:	08 95       	ret
     712:	80 e0       	ldi	r24, 0x00	; 0
     714:	08 95       	ret
     716:	82 e0       	ldi	r24, 0x02	; 2
     718:	08 95       	ret

0000071a <int1ActivateInterrupt>:
     71a:	e9 9a       	sbi	0x1d, 1	; 29
     71c:	08 95       	ret

0000071e <int1DeactivateInterrupt>:
     71e:	e9 98       	cbi	0x1d, 1	; 29
     720:	08 95       	ret

00000722 <int1ClearInterruptRequest>:
     722:	e1 9a       	sbi	0x1c, 1	; 28
     724:	08 95       	ret

00000726 <pcint7_0Enable>:
     726:	e8 e6       	ldi	r30, 0x68	; 104
     728:	f0 e0       	ldi	r31, 0x00	; 0
     72a:	80 81       	ld	r24, Z
     72c:	81 60       	ori	r24, 0x01	; 1
     72e:	80 83       	st	Z, r24
     730:	08 95       	ret

00000732 <pcint7_0Disable>:
     732:	e8 e6       	ldi	r30, 0x68	; 104
     734:	f0 e0       	ldi	r31, 0x00	; 0
     736:	80 81       	ld	r24, Z
     738:	8e 7f       	andi	r24, 0xFE	; 254
     73a:	80 83       	st	Z, r24
     73c:	08 95       	ret

0000073e <pcint7_0ClearInterruptRequest>:
     73e:	d8 9a       	sbi	0x1b, 0	; 27
     740:	08 95       	ret

00000742 <pcint0ActivateInterrupt>:
     742:	82 30       	cpi	r24, 0x02	; 2
     744:	79 f0       	breq	.+30     	; 0x764 <pcint0ActivateInterrupt+0x22>
     746:	30 f4       	brcc	.+12     	; 0x754 <pcint0ActivateInterrupt+0x12>
     748:	88 23       	and	r24, r24
     74a:	49 f0       	breq	.+18     	; 0x75e <pcint0ActivateInterrupt+0x1c>
     74c:	81 30       	cpi	r24, 0x01	; 1
     74e:	a9 f4       	brne	.+42     	; 0x77a <pcint0ActivateInterrupt+0x38>
     750:	28 9a       	sbi	0x05, 0	; 5
     752:	06 c0       	rjmp	.+12     	; 0x760 <pcint0ActivateInterrupt+0x1e>
     754:	83 30       	cpi	r24, 0x03	; 3
     756:	41 f0       	breq	.+16     	; 0x768 <pcint0ActivateInterrupt+0x26>
     758:	8f 3f       	cpi	r24, 0xFF	; 255
     75a:	41 f0       	breq	.+16     	; 0x76c <pcint0ActivateInterrupt+0x2a>
     75c:	0e c0       	rjmp	.+28     	; 0x77a <pcint0ActivateInterrupt+0x38>
     75e:	28 98       	cbi	0x05, 0	; 5
     760:	20 9a       	sbi	0x04, 0	; 4
     762:	04 c0       	rjmp	.+8      	; 0x76c <pcint0ActivateInterrupt+0x2a>
     764:	28 98       	cbi	0x05, 0	; 5
     766:	01 c0       	rjmp	.+2      	; 0x76a <pcint0ActivateInterrupt+0x28>
     768:	28 9a       	sbi	0x05, 0	; 5
     76a:	20 98       	cbi	0x04, 0	; 4
     76c:	80 91 6b 00 	lds	r24, 0x006B
     770:	81 60       	ori	r24, 0x01	; 1
     772:	80 93 6b 00 	sts	0x006B, r24
     776:	80 e0       	ldi	r24, 0x00	; 0
     778:	08 95       	ret
     77a:	81 e0       	ldi	r24, 0x01	; 1
     77c:	08 95       	ret

0000077e <pcint0DeactivateInterrupt>:
     77e:	eb e6       	ldi	r30, 0x6B	; 107
     780:	f0 e0       	ldi	r31, 0x00	; 0
     782:	80 81       	ld	r24, Z
     784:	8e 7f       	andi	r24, 0xFE	; 254
     786:	80 83       	st	Z, r24
     788:	08 95       	ret

0000078a <pcint1ActivateInterrupt>:
     78a:	82 30       	cpi	r24, 0x02	; 2
     78c:	79 f0       	breq	.+30     	; 0x7ac <pcint1ActivateInterrupt+0x22>
     78e:	30 f4       	brcc	.+12     	; 0x79c <pcint1ActivateInterrupt+0x12>
     790:	88 23       	and	r24, r24
     792:	49 f0       	breq	.+18     	; 0x7a6 <pcint1ActivateInterrupt+0x1c>
     794:	81 30       	cpi	r24, 0x01	; 1
     796:	a9 f4       	brne	.+42     	; 0x7c2 <pcint1ActivateInterrupt+0x38>
     798:	29 9a       	sbi	0x05, 1	; 5
     79a:	06 c0       	rjmp	.+12     	; 0x7a8 <pcint1ActivateInterrupt+0x1e>
     79c:	83 30       	cpi	r24, 0x03	; 3
     79e:	41 f0       	breq	.+16     	; 0x7b0 <pcint1ActivateInterrupt+0x26>
     7a0:	8f 3f       	cpi	r24, 0xFF	; 255
     7a2:	41 f0       	breq	.+16     	; 0x7b4 <pcint1ActivateInterrupt+0x2a>
     7a4:	0e c0       	rjmp	.+28     	; 0x7c2 <pcint1ActivateInterrupt+0x38>
     7a6:	29 98       	cbi	0x05, 1	; 5
     7a8:	21 9a       	sbi	0x04, 1	; 4
     7aa:	04 c0       	rjmp	.+8      	; 0x7b4 <pcint1ActivateInterrupt+0x2a>
     7ac:	29 98       	cbi	0x05, 1	; 5
     7ae:	01 c0       	rjmp	.+2      	; 0x7b2 <pcint1ActivateInterrupt+0x28>
     7b0:	29 9a       	sbi	0x05, 1	; 5
     7b2:	21 98       	cbi	0x04, 1	; 4
     7b4:	80 91 6b 00 	lds	r24, 0x006B
     7b8:	82 60       	ori	r24, 0x02	; 2
     7ba:	80 93 6b 00 	sts	0x006B, r24
     7be:	80 e0       	ldi	r24, 0x00	; 0
     7c0:	08 95       	ret
     7c2:	81 e0       	ldi	r24, 0x01	; 1
     7c4:	08 95       	ret

000007c6 <pcint1DeactivateInterrupt>:
     7c6:	eb e6       	ldi	r30, 0x6B	; 107
     7c8:	f0 e0       	ldi	r31, 0x00	; 0
     7ca:	80 81       	ld	r24, Z
     7cc:	8d 7f       	andi	r24, 0xFD	; 253
     7ce:	80 83       	st	Z, r24
     7d0:	08 95       	ret

000007d2 <pcint2ActivateInterrupt>:
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	79 f0       	breq	.+30     	; 0x7f4 <pcint2ActivateInterrupt+0x22>
     7d6:	30 f4       	brcc	.+12     	; 0x7e4 <pcint2ActivateInterrupt+0x12>
     7d8:	88 23       	and	r24, r24
     7da:	49 f0       	breq	.+18     	; 0x7ee <pcint2ActivateInterrupt+0x1c>
     7dc:	81 30       	cpi	r24, 0x01	; 1
     7de:	a9 f4       	brne	.+42     	; 0x80a <pcint2ActivateInterrupt+0x38>
     7e0:	2a 9a       	sbi	0x05, 2	; 5
     7e2:	06 c0       	rjmp	.+12     	; 0x7f0 <pcint2ActivateInterrupt+0x1e>
     7e4:	83 30       	cpi	r24, 0x03	; 3
     7e6:	41 f0       	breq	.+16     	; 0x7f8 <pcint2ActivateInterrupt+0x26>
     7e8:	8f 3f       	cpi	r24, 0xFF	; 255
     7ea:	41 f0       	breq	.+16     	; 0x7fc <pcint2ActivateInterrupt+0x2a>
     7ec:	0e c0       	rjmp	.+28     	; 0x80a <pcint2ActivateInterrupt+0x38>
     7ee:	2a 98       	cbi	0x05, 2	; 5
     7f0:	22 9a       	sbi	0x04, 2	; 4
     7f2:	04 c0       	rjmp	.+8      	; 0x7fc <pcint2ActivateInterrupt+0x2a>
     7f4:	2a 98       	cbi	0x05, 2	; 5
     7f6:	01 c0       	rjmp	.+2      	; 0x7fa <pcint2ActivateInterrupt+0x28>
     7f8:	2a 9a       	sbi	0x05, 2	; 5
     7fa:	22 98       	cbi	0x04, 2	; 4
     7fc:	80 91 6b 00 	lds	r24, 0x006B
     800:	84 60       	ori	r24, 0x04	; 4
     802:	80 93 6b 00 	sts	0x006B, r24
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	08 95       	ret
     80a:	81 e0       	ldi	r24, 0x01	; 1
     80c:	08 95       	ret

0000080e <pcint2DeactivateInterrupt>:
     80e:	eb e6       	ldi	r30, 0x6B	; 107
     810:	f0 e0       	ldi	r31, 0x00	; 0
     812:	80 81       	ld	r24, Z
     814:	8b 7f       	andi	r24, 0xFB	; 251
     816:	80 83       	st	Z, r24
     818:	08 95       	ret

0000081a <pcint3ActivateInterrupt>:
     81a:	82 30       	cpi	r24, 0x02	; 2
     81c:	79 f0       	breq	.+30     	; 0x83c <pcint3ActivateInterrupt+0x22>
     81e:	30 f4       	brcc	.+12     	; 0x82c <pcint3ActivateInterrupt+0x12>
     820:	88 23       	and	r24, r24
     822:	49 f0       	breq	.+18     	; 0x836 <pcint3ActivateInterrupt+0x1c>
     824:	81 30       	cpi	r24, 0x01	; 1
     826:	a9 f4       	brne	.+42     	; 0x852 <pcint3ActivateInterrupt+0x38>
     828:	2b 9a       	sbi	0x05, 3	; 5
     82a:	06 c0       	rjmp	.+12     	; 0x838 <pcint3ActivateInterrupt+0x1e>
     82c:	83 30       	cpi	r24, 0x03	; 3
     82e:	41 f0       	breq	.+16     	; 0x840 <pcint3ActivateInterrupt+0x26>
     830:	8f 3f       	cpi	r24, 0xFF	; 255
     832:	41 f0       	breq	.+16     	; 0x844 <pcint3ActivateInterrupt+0x2a>
     834:	0e c0       	rjmp	.+28     	; 0x852 <pcint3ActivateInterrupt+0x38>
     836:	2b 98       	cbi	0x05, 3	; 5
     838:	23 9a       	sbi	0x04, 3	; 4
     83a:	04 c0       	rjmp	.+8      	; 0x844 <pcint3ActivateInterrupt+0x2a>
     83c:	2b 98       	cbi	0x05, 3	; 5
     83e:	01 c0       	rjmp	.+2      	; 0x842 <pcint3ActivateInterrupt+0x28>
     840:	2b 9a       	sbi	0x05, 3	; 5
     842:	23 98       	cbi	0x04, 3	; 4
     844:	80 91 6b 00 	lds	r24, 0x006B
     848:	88 60       	ori	r24, 0x08	; 8
     84a:	80 93 6b 00 	sts	0x006B, r24
     84e:	80 e0       	ldi	r24, 0x00	; 0
     850:	08 95       	ret
     852:	81 e0       	ldi	r24, 0x01	; 1
     854:	08 95       	ret

00000856 <pcint3DeactivateInterrupt>:
     856:	eb e6       	ldi	r30, 0x6B	; 107
     858:	f0 e0       	ldi	r31, 0x00	; 0
     85a:	80 81       	ld	r24, Z
     85c:	87 7f       	andi	r24, 0xF7	; 247
     85e:	80 83       	st	Z, r24
     860:	08 95       	ret

00000862 <pcint4ActivateInterrupt>:
     862:	82 30       	cpi	r24, 0x02	; 2
     864:	79 f0       	breq	.+30     	; 0x884 <pcint4ActivateInterrupt+0x22>
     866:	30 f4       	brcc	.+12     	; 0x874 <pcint4ActivateInterrupt+0x12>
     868:	88 23       	and	r24, r24
     86a:	49 f0       	breq	.+18     	; 0x87e <pcint4ActivateInterrupt+0x1c>
     86c:	81 30       	cpi	r24, 0x01	; 1
     86e:	a9 f4       	brne	.+42     	; 0x89a <pcint4ActivateInterrupt+0x38>
     870:	2c 9a       	sbi	0x05, 4	; 5
     872:	06 c0       	rjmp	.+12     	; 0x880 <pcint4ActivateInterrupt+0x1e>
     874:	83 30       	cpi	r24, 0x03	; 3
     876:	41 f0       	breq	.+16     	; 0x888 <pcint4ActivateInterrupt+0x26>
     878:	8f 3f       	cpi	r24, 0xFF	; 255
     87a:	41 f0       	breq	.+16     	; 0x88c <pcint4ActivateInterrupt+0x2a>
     87c:	0e c0       	rjmp	.+28     	; 0x89a <pcint4ActivateInterrupt+0x38>
     87e:	2c 98       	cbi	0x05, 4	; 5
     880:	24 9a       	sbi	0x04, 4	; 4
     882:	04 c0       	rjmp	.+8      	; 0x88c <pcint4ActivateInterrupt+0x2a>
     884:	2c 98       	cbi	0x05, 4	; 5
     886:	01 c0       	rjmp	.+2      	; 0x88a <pcint4ActivateInterrupt+0x28>
     888:	2c 9a       	sbi	0x05, 4	; 5
     88a:	24 98       	cbi	0x04, 4	; 4
     88c:	80 91 6b 00 	lds	r24, 0x006B
     890:	80 61       	ori	r24, 0x10	; 16
     892:	80 93 6b 00 	sts	0x006B, r24
     896:	80 e0       	ldi	r24, 0x00	; 0
     898:	08 95       	ret
     89a:	81 e0       	ldi	r24, 0x01	; 1
     89c:	08 95       	ret

0000089e <pcint4DeactivateInterrupt>:
     89e:	eb e6       	ldi	r30, 0x6B	; 107
     8a0:	f0 e0       	ldi	r31, 0x00	; 0
     8a2:	80 81       	ld	r24, Z
     8a4:	8f 7e       	andi	r24, 0xEF	; 239
     8a6:	80 83       	st	Z, r24
     8a8:	08 95       	ret

000008aa <pcint5ActivateInterrupt>:
     8aa:	82 30       	cpi	r24, 0x02	; 2
     8ac:	79 f0       	breq	.+30     	; 0x8cc <pcint5ActivateInterrupt+0x22>
     8ae:	30 f4       	brcc	.+12     	; 0x8bc <pcint5ActivateInterrupt+0x12>
     8b0:	88 23       	and	r24, r24
     8b2:	49 f0       	breq	.+18     	; 0x8c6 <pcint5ActivateInterrupt+0x1c>
     8b4:	81 30       	cpi	r24, 0x01	; 1
     8b6:	a9 f4       	brne	.+42     	; 0x8e2 <pcint5ActivateInterrupt+0x38>
     8b8:	2d 9a       	sbi	0x05, 5	; 5
     8ba:	06 c0       	rjmp	.+12     	; 0x8c8 <pcint5ActivateInterrupt+0x1e>
     8bc:	83 30       	cpi	r24, 0x03	; 3
     8be:	41 f0       	breq	.+16     	; 0x8d0 <pcint5ActivateInterrupt+0x26>
     8c0:	8f 3f       	cpi	r24, 0xFF	; 255
     8c2:	41 f0       	breq	.+16     	; 0x8d4 <pcint5ActivateInterrupt+0x2a>
     8c4:	0e c0       	rjmp	.+28     	; 0x8e2 <pcint5ActivateInterrupt+0x38>
     8c6:	2d 98       	cbi	0x05, 5	; 5
     8c8:	25 9a       	sbi	0x04, 5	; 4
     8ca:	04 c0       	rjmp	.+8      	; 0x8d4 <pcint5ActivateInterrupt+0x2a>
     8cc:	2d 98       	cbi	0x05, 5	; 5
     8ce:	01 c0       	rjmp	.+2      	; 0x8d2 <pcint5ActivateInterrupt+0x28>
     8d0:	2d 9a       	sbi	0x05, 5	; 5
     8d2:	25 98       	cbi	0x04, 5	; 4
     8d4:	80 91 6b 00 	lds	r24, 0x006B
     8d8:	80 62       	ori	r24, 0x20	; 32
     8da:	80 93 6b 00 	sts	0x006B, r24
     8de:	80 e0       	ldi	r24, 0x00	; 0
     8e0:	08 95       	ret
     8e2:	81 e0       	ldi	r24, 0x01	; 1
     8e4:	08 95       	ret

000008e6 <pcint5DeactivateInterrupt>:
     8e6:	eb e6       	ldi	r30, 0x6B	; 107
     8e8:	f0 e0       	ldi	r31, 0x00	; 0
     8ea:	80 81       	ld	r24, Z
     8ec:	8f 7d       	andi	r24, 0xDF	; 223
     8ee:	80 83       	st	Z, r24
     8f0:	08 95       	ret

000008f2 <pcint6ActivateInterrupt>:
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	79 f0       	breq	.+30     	; 0x914 <__stack+0x15>
     8f6:	30 f4       	brcc	.+12     	; 0x904 <__stack+0x5>
     8f8:	88 23       	and	r24, r24
     8fa:	49 f0       	breq	.+18     	; 0x90e <__stack+0xf>
     8fc:	81 30       	cpi	r24, 0x01	; 1
     8fe:	a9 f4       	brne	.+42     	; 0x92a <__stack+0x2b>
     900:	2e 9a       	sbi	0x05, 6	; 5
     902:	06 c0       	rjmp	.+12     	; 0x910 <__stack+0x11>
     904:	83 30       	cpi	r24, 0x03	; 3
     906:	41 f0       	breq	.+16     	; 0x918 <__stack+0x19>
     908:	8f 3f       	cpi	r24, 0xFF	; 255
     90a:	41 f0       	breq	.+16     	; 0x91c <__stack+0x1d>
     90c:	0e c0       	rjmp	.+28     	; 0x92a <__stack+0x2b>
     90e:	2e 98       	cbi	0x05, 6	; 5
     910:	26 9a       	sbi	0x04, 6	; 4
     912:	04 c0       	rjmp	.+8      	; 0x91c <__stack+0x1d>
     914:	2e 98       	cbi	0x05, 6	; 5
     916:	01 c0       	rjmp	.+2      	; 0x91a <__stack+0x1b>
     918:	2e 9a       	sbi	0x05, 6	; 5
     91a:	26 98       	cbi	0x04, 6	; 4
     91c:	80 91 6b 00 	lds	r24, 0x006B
     920:	80 64       	ori	r24, 0x40	; 64
     922:	80 93 6b 00 	sts	0x006B, r24
     926:	80 e0       	ldi	r24, 0x00	; 0
     928:	08 95       	ret
     92a:	81 e0       	ldi	r24, 0x01	; 1
     92c:	08 95       	ret

0000092e <pcint6DeactivateInterrupt>:
     92e:	eb e6       	ldi	r30, 0x6B	; 107
     930:	f0 e0       	ldi	r31, 0x00	; 0
     932:	80 81       	ld	r24, Z
     934:	8f 7b       	andi	r24, 0xBF	; 191
     936:	80 83       	st	Z, r24
     938:	08 95       	ret

0000093a <pcint7ActivateInterrupt>:
     93a:	82 30       	cpi	r24, 0x02	; 2
     93c:	79 f0       	breq	.+30     	; 0x95c <pcint7ActivateInterrupt+0x22>
     93e:	30 f4       	brcc	.+12     	; 0x94c <pcint7ActivateInterrupt+0x12>
     940:	88 23       	and	r24, r24
     942:	49 f0       	breq	.+18     	; 0x956 <pcint7ActivateInterrupt+0x1c>
     944:	81 30       	cpi	r24, 0x01	; 1
     946:	a9 f4       	brne	.+42     	; 0x972 <pcint7ActivateInterrupt+0x38>
     948:	2f 9a       	sbi	0x05, 7	; 5
     94a:	06 c0       	rjmp	.+12     	; 0x958 <pcint7ActivateInterrupt+0x1e>
     94c:	83 30       	cpi	r24, 0x03	; 3
     94e:	41 f0       	breq	.+16     	; 0x960 <pcint7ActivateInterrupt+0x26>
     950:	8f 3f       	cpi	r24, 0xFF	; 255
     952:	41 f0       	breq	.+16     	; 0x964 <pcint7ActivateInterrupt+0x2a>
     954:	0e c0       	rjmp	.+28     	; 0x972 <pcint7ActivateInterrupt+0x38>
     956:	2f 98       	cbi	0x05, 7	; 5
     958:	27 9a       	sbi	0x04, 7	; 4
     95a:	04 c0       	rjmp	.+8      	; 0x964 <pcint7ActivateInterrupt+0x2a>
     95c:	2f 98       	cbi	0x05, 7	; 5
     95e:	01 c0       	rjmp	.+2      	; 0x962 <pcint7ActivateInterrupt+0x28>
     960:	2f 9a       	sbi	0x05, 7	; 5
     962:	27 98       	cbi	0x04, 7	; 4
     964:	80 91 6b 00 	lds	r24, 0x006B
     968:	80 68       	ori	r24, 0x80	; 128
     96a:	80 93 6b 00 	sts	0x006B, r24
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	08 95       	ret
     972:	81 e0       	ldi	r24, 0x01	; 1
     974:	08 95       	ret

00000976 <pcint7DeactivateInterrupt>:
     976:	eb e6       	ldi	r30, 0x6B	; 107
     978:	f0 e0       	ldi	r31, 0x00	; 0
     97a:	80 81       	ld	r24, Z
     97c:	8f 77       	andi	r24, 0x7F	; 127
     97e:	80 83       	st	Z, r24
     980:	08 95       	ret

00000982 <pcint14_8Enable>:
     982:	e8 e6       	ldi	r30, 0x68	; 104
     984:	f0 e0       	ldi	r31, 0x00	; 0
     986:	80 81       	ld	r24, Z
     988:	82 60       	ori	r24, 0x02	; 2
     98a:	80 83       	st	Z, r24
     98c:	08 95       	ret

0000098e <pcint14_8Disable>:
     98e:	e8 e6       	ldi	r30, 0x68	; 104
     990:	f0 e0       	ldi	r31, 0x00	; 0
     992:	80 81       	ld	r24, Z
     994:	8d 7f       	andi	r24, 0xFD	; 253
     996:	80 83       	st	Z, r24
     998:	08 95       	ret

0000099a <pcint14_8ClearInterruptRequest>:
     99a:	d9 9a       	sbi	0x1b, 1	; 27
     99c:	08 95       	ret

0000099e <pcint8ActivateInterrupt>:
     99e:	82 30       	cpi	r24, 0x02	; 2
     9a0:	79 f0       	breq	.+30     	; 0x9c0 <pcint8ActivateInterrupt+0x22>
     9a2:	30 f4       	brcc	.+12     	; 0x9b0 <pcint8ActivateInterrupt+0x12>
     9a4:	88 23       	and	r24, r24
     9a6:	49 f0       	breq	.+18     	; 0x9ba <pcint8ActivateInterrupt+0x1c>
     9a8:	81 30       	cpi	r24, 0x01	; 1
     9aa:	a9 f4       	brne	.+42     	; 0x9d6 <pcint8ActivateInterrupt+0x38>
     9ac:	40 9a       	sbi	0x08, 0	; 8
     9ae:	06 c0       	rjmp	.+12     	; 0x9bc <pcint8ActivateInterrupt+0x1e>
     9b0:	83 30       	cpi	r24, 0x03	; 3
     9b2:	41 f0       	breq	.+16     	; 0x9c4 <pcint8ActivateInterrupt+0x26>
     9b4:	8f 3f       	cpi	r24, 0xFF	; 255
     9b6:	41 f0       	breq	.+16     	; 0x9c8 <pcint8ActivateInterrupt+0x2a>
     9b8:	0e c0       	rjmp	.+28     	; 0x9d6 <pcint8ActivateInterrupt+0x38>
     9ba:	40 98       	cbi	0x08, 0	; 8
     9bc:	38 9a       	sbi	0x07, 0	; 7
     9be:	04 c0       	rjmp	.+8      	; 0x9c8 <pcint8ActivateInterrupt+0x2a>
     9c0:	40 98       	cbi	0x08, 0	; 8
     9c2:	01 c0       	rjmp	.+2      	; 0x9c6 <pcint8ActivateInterrupt+0x28>
     9c4:	40 9a       	sbi	0x08, 0	; 8
     9c6:	38 98       	cbi	0x07, 0	; 7
     9c8:	80 91 6c 00 	lds	r24, 0x006C
     9cc:	81 60       	ori	r24, 0x01	; 1
     9ce:	80 93 6c 00 	sts	0x006C, r24
     9d2:	80 e0       	ldi	r24, 0x00	; 0
     9d4:	08 95       	ret
     9d6:	81 e0       	ldi	r24, 0x01	; 1
     9d8:	08 95       	ret

000009da <pcint8DeactivateInterrupt>:
     9da:	ec e6       	ldi	r30, 0x6C	; 108
     9dc:	f0 e0       	ldi	r31, 0x00	; 0
     9de:	80 81       	ld	r24, Z
     9e0:	8e 7f       	andi	r24, 0xFE	; 254
     9e2:	80 83       	st	Z, r24
     9e4:	08 95       	ret

000009e6 <pcint9ActivateInterrupt>:
     9e6:	82 30       	cpi	r24, 0x02	; 2
     9e8:	79 f0       	breq	.+30     	; 0xa08 <pcint9ActivateInterrupt+0x22>
     9ea:	30 f4       	brcc	.+12     	; 0x9f8 <pcint9ActivateInterrupt+0x12>
     9ec:	88 23       	and	r24, r24
     9ee:	49 f0       	breq	.+18     	; 0xa02 <pcint9ActivateInterrupt+0x1c>
     9f0:	81 30       	cpi	r24, 0x01	; 1
     9f2:	a9 f4       	brne	.+42     	; 0xa1e <pcint9ActivateInterrupt+0x38>
     9f4:	41 9a       	sbi	0x08, 1	; 8
     9f6:	06 c0       	rjmp	.+12     	; 0xa04 <pcint9ActivateInterrupt+0x1e>
     9f8:	83 30       	cpi	r24, 0x03	; 3
     9fa:	41 f0       	breq	.+16     	; 0xa0c <pcint9ActivateInterrupt+0x26>
     9fc:	8f 3f       	cpi	r24, 0xFF	; 255
     9fe:	41 f0       	breq	.+16     	; 0xa10 <pcint9ActivateInterrupt+0x2a>
     a00:	0e c0       	rjmp	.+28     	; 0xa1e <pcint9ActivateInterrupt+0x38>
     a02:	41 98       	cbi	0x08, 1	; 8
     a04:	39 9a       	sbi	0x07, 1	; 7
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <pcint9ActivateInterrupt+0x2a>
     a08:	41 98       	cbi	0x08, 1	; 8
     a0a:	01 c0       	rjmp	.+2      	; 0xa0e <pcint9ActivateInterrupt+0x28>
     a0c:	41 9a       	sbi	0x08, 1	; 8
     a0e:	39 98       	cbi	0x07, 1	; 7
     a10:	80 91 6c 00 	lds	r24, 0x006C
     a14:	82 60       	ori	r24, 0x02	; 2
     a16:	80 93 6c 00 	sts	0x006C, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	08 95       	ret
     a1e:	81 e0       	ldi	r24, 0x01	; 1
     a20:	08 95       	ret

00000a22 <pcint9DeactivateInterrupt>:
     a22:	ec e6       	ldi	r30, 0x6C	; 108
     a24:	f0 e0       	ldi	r31, 0x00	; 0
     a26:	80 81       	ld	r24, Z
     a28:	8d 7f       	andi	r24, 0xFD	; 253
     a2a:	80 83       	st	Z, r24
     a2c:	08 95       	ret

00000a2e <pcint10ActivateInterrupt>:
     a2e:	82 30       	cpi	r24, 0x02	; 2
     a30:	79 f0       	breq	.+30     	; 0xa50 <pcint10ActivateInterrupt+0x22>
     a32:	30 f4       	brcc	.+12     	; 0xa40 <pcint10ActivateInterrupt+0x12>
     a34:	88 23       	and	r24, r24
     a36:	49 f0       	breq	.+18     	; 0xa4a <pcint10ActivateInterrupt+0x1c>
     a38:	81 30       	cpi	r24, 0x01	; 1
     a3a:	a9 f4       	brne	.+42     	; 0xa66 <pcint10ActivateInterrupt+0x38>
     a3c:	42 9a       	sbi	0x08, 2	; 8
     a3e:	06 c0       	rjmp	.+12     	; 0xa4c <pcint10ActivateInterrupt+0x1e>
     a40:	83 30       	cpi	r24, 0x03	; 3
     a42:	41 f0       	breq	.+16     	; 0xa54 <pcint10ActivateInterrupt+0x26>
     a44:	8f 3f       	cpi	r24, 0xFF	; 255
     a46:	41 f0       	breq	.+16     	; 0xa58 <pcint10ActivateInterrupt+0x2a>
     a48:	0e c0       	rjmp	.+28     	; 0xa66 <pcint10ActivateInterrupt+0x38>
     a4a:	42 98       	cbi	0x08, 2	; 8
     a4c:	3a 9a       	sbi	0x07, 2	; 7
     a4e:	04 c0       	rjmp	.+8      	; 0xa58 <pcint10ActivateInterrupt+0x2a>
     a50:	42 98       	cbi	0x08, 2	; 8
     a52:	01 c0       	rjmp	.+2      	; 0xa56 <pcint10ActivateInterrupt+0x28>
     a54:	42 9a       	sbi	0x08, 2	; 8
     a56:	3a 98       	cbi	0x07, 2	; 7
     a58:	80 91 6c 00 	lds	r24, 0x006C
     a5c:	84 60       	ori	r24, 0x04	; 4
     a5e:	80 93 6c 00 	sts	0x006C, r24
     a62:	80 e0       	ldi	r24, 0x00	; 0
     a64:	08 95       	ret
     a66:	81 e0       	ldi	r24, 0x01	; 1
     a68:	08 95       	ret

00000a6a <pcint10DeactivateInterrupt>:
     a6a:	ec e6       	ldi	r30, 0x6C	; 108
     a6c:	f0 e0       	ldi	r31, 0x00	; 0
     a6e:	80 81       	ld	r24, Z
     a70:	8b 7f       	andi	r24, 0xFB	; 251
     a72:	80 83       	st	Z, r24
     a74:	08 95       	ret

00000a76 <pcint11ActivateInterrupt>:
     a76:	82 30       	cpi	r24, 0x02	; 2
     a78:	79 f0       	breq	.+30     	; 0xa98 <pcint11ActivateInterrupt+0x22>
     a7a:	30 f4       	brcc	.+12     	; 0xa88 <pcint11ActivateInterrupt+0x12>
     a7c:	88 23       	and	r24, r24
     a7e:	49 f0       	breq	.+18     	; 0xa92 <pcint11ActivateInterrupt+0x1c>
     a80:	81 30       	cpi	r24, 0x01	; 1
     a82:	a9 f4       	brne	.+42     	; 0xaae <pcint11ActivateInterrupt+0x38>
     a84:	43 9a       	sbi	0x08, 3	; 8
     a86:	06 c0       	rjmp	.+12     	; 0xa94 <pcint11ActivateInterrupt+0x1e>
     a88:	83 30       	cpi	r24, 0x03	; 3
     a8a:	41 f0       	breq	.+16     	; 0xa9c <pcint11ActivateInterrupt+0x26>
     a8c:	8f 3f       	cpi	r24, 0xFF	; 255
     a8e:	41 f0       	breq	.+16     	; 0xaa0 <pcint11ActivateInterrupt+0x2a>
     a90:	0e c0       	rjmp	.+28     	; 0xaae <pcint11ActivateInterrupt+0x38>
     a92:	43 98       	cbi	0x08, 3	; 8
     a94:	3b 9a       	sbi	0x07, 3	; 7
     a96:	04 c0       	rjmp	.+8      	; 0xaa0 <pcint11ActivateInterrupt+0x2a>
     a98:	43 98       	cbi	0x08, 3	; 8
     a9a:	01 c0       	rjmp	.+2      	; 0xa9e <pcint11ActivateInterrupt+0x28>
     a9c:	43 9a       	sbi	0x08, 3	; 8
     a9e:	3b 98       	cbi	0x07, 3	; 7
     aa0:	80 91 6c 00 	lds	r24, 0x006C
     aa4:	88 60       	ori	r24, 0x08	; 8
     aa6:	80 93 6c 00 	sts	0x006C, r24
     aaa:	80 e0       	ldi	r24, 0x00	; 0
     aac:	08 95       	ret
     aae:	81 e0       	ldi	r24, 0x01	; 1
     ab0:	08 95       	ret

00000ab2 <pcint11DeactivateInterrupt>:
     ab2:	ec e6       	ldi	r30, 0x6C	; 108
     ab4:	f0 e0       	ldi	r31, 0x00	; 0
     ab6:	80 81       	ld	r24, Z
     ab8:	87 7f       	andi	r24, 0xF7	; 247
     aba:	80 83       	st	Z, r24
     abc:	08 95       	ret

00000abe <pcint12ActivateInterrupt>:
     abe:	82 30       	cpi	r24, 0x02	; 2
     ac0:	79 f0       	breq	.+30     	; 0xae0 <pcint12ActivateInterrupt+0x22>
     ac2:	30 f4       	brcc	.+12     	; 0xad0 <pcint12ActivateInterrupt+0x12>
     ac4:	88 23       	and	r24, r24
     ac6:	49 f0       	breq	.+18     	; 0xada <pcint12ActivateInterrupt+0x1c>
     ac8:	81 30       	cpi	r24, 0x01	; 1
     aca:	a9 f4       	brne	.+42     	; 0xaf6 <pcint12ActivateInterrupt+0x38>
     acc:	44 9a       	sbi	0x08, 4	; 8
     ace:	06 c0       	rjmp	.+12     	; 0xadc <pcint12ActivateInterrupt+0x1e>
     ad0:	83 30       	cpi	r24, 0x03	; 3
     ad2:	41 f0       	breq	.+16     	; 0xae4 <pcint12ActivateInterrupt+0x26>
     ad4:	8f 3f       	cpi	r24, 0xFF	; 255
     ad6:	41 f0       	breq	.+16     	; 0xae8 <pcint12ActivateInterrupt+0x2a>
     ad8:	0e c0       	rjmp	.+28     	; 0xaf6 <pcint12ActivateInterrupt+0x38>
     ada:	44 98       	cbi	0x08, 4	; 8
     adc:	3c 9a       	sbi	0x07, 4	; 7
     ade:	04 c0       	rjmp	.+8      	; 0xae8 <pcint12ActivateInterrupt+0x2a>
     ae0:	44 98       	cbi	0x08, 4	; 8
     ae2:	01 c0       	rjmp	.+2      	; 0xae6 <pcint12ActivateInterrupt+0x28>
     ae4:	44 9a       	sbi	0x08, 4	; 8
     ae6:	3c 98       	cbi	0x07, 4	; 7
     ae8:	80 91 6c 00 	lds	r24, 0x006C
     aec:	80 61       	ori	r24, 0x10	; 16
     aee:	80 93 6c 00 	sts	0x006C, r24
     af2:	80 e0       	ldi	r24, 0x00	; 0
     af4:	08 95       	ret
     af6:	81 e0       	ldi	r24, 0x01	; 1
     af8:	08 95       	ret

00000afa <pcint12DeactivateInterrupt>:
     afa:	ec e6       	ldi	r30, 0x6C	; 108
     afc:	f0 e0       	ldi	r31, 0x00	; 0
     afe:	80 81       	ld	r24, Z
     b00:	8f 7e       	andi	r24, 0xEF	; 239
     b02:	80 83       	st	Z, r24
     b04:	08 95       	ret

00000b06 <pcint13ActivateInterrupt>:
     b06:	82 30       	cpi	r24, 0x02	; 2
     b08:	79 f0       	breq	.+30     	; 0xb28 <pcint13ActivateInterrupt+0x22>
     b0a:	30 f4       	brcc	.+12     	; 0xb18 <pcint13ActivateInterrupt+0x12>
     b0c:	88 23       	and	r24, r24
     b0e:	49 f0       	breq	.+18     	; 0xb22 <pcint13ActivateInterrupt+0x1c>
     b10:	81 30       	cpi	r24, 0x01	; 1
     b12:	a9 f4       	brne	.+42     	; 0xb3e <pcint13ActivateInterrupt+0x38>
     b14:	45 9a       	sbi	0x08, 5	; 8
     b16:	06 c0       	rjmp	.+12     	; 0xb24 <pcint13ActivateInterrupt+0x1e>
     b18:	83 30       	cpi	r24, 0x03	; 3
     b1a:	41 f0       	breq	.+16     	; 0xb2c <pcint13ActivateInterrupt+0x26>
     b1c:	8f 3f       	cpi	r24, 0xFF	; 255
     b1e:	41 f0       	breq	.+16     	; 0xb30 <pcint13ActivateInterrupt+0x2a>
     b20:	0e c0       	rjmp	.+28     	; 0xb3e <pcint13ActivateInterrupt+0x38>
     b22:	45 98       	cbi	0x08, 5	; 8
     b24:	3d 9a       	sbi	0x07, 5	; 7
     b26:	04 c0       	rjmp	.+8      	; 0xb30 <pcint13ActivateInterrupt+0x2a>
     b28:	45 98       	cbi	0x08, 5	; 8
     b2a:	01 c0       	rjmp	.+2      	; 0xb2e <pcint13ActivateInterrupt+0x28>
     b2c:	45 9a       	sbi	0x08, 5	; 8
     b2e:	3d 98       	cbi	0x07, 5	; 7
     b30:	80 91 6c 00 	lds	r24, 0x006C
     b34:	80 62       	ori	r24, 0x20	; 32
     b36:	80 93 6c 00 	sts	0x006C, r24
     b3a:	80 e0       	ldi	r24, 0x00	; 0
     b3c:	08 95       	ret
     b3e:	81 e0       	ldi	r24, 0x01	; 1
     b40:	08 95       	ret

00000b42 <pcint13DeactivateInterrupt>:
     b42:	ec e6       	ldi	r30, 0x6C	; 108
     b44:	f0 e0       	ldi	r31, 0x00	; 0
     b46:	80 81       	ld	r24, Z
     b48:	8f 7d       	andi	r24, 0xDF	; 223
     b4a:	80 83       	st	Z, r24
     b4c:	08 95       	ret

00000b4e <pcint14ActivateInterrupt>:
     b4e:	82 30       	cpi	r24, 0x02	; 2
     b50:	79 f0       	breq	.+30     	; 0xb70 <pcint14ActivateInterrupt+0x22>
     b52:	30 f4       	brcc	.+12     	; 0xb60 <pcint14ActivateInterrupt+0x12>
     b54:	88 23       	and	r24, r24
     b56:	49 f0       	breq	.+18     	; 0xb6a <pcint14ActivateInterrupt+0x1c>
     b58:	81 30       	cpi	r24, 0x01	; 1
     b5a:	a9 f4       	brne	.+42     	; 0xb86 <pcint14ActivateInterrupt+0x38>
     b5c:	46 9a       	sbi	0x08, 6	; 8
     b5e:	06 c0       	rjmp	.+12     	; 0xb6c <pcint14ActivateInterrupt+0x1e>
     b60:	83 30       	cpi	r24, 0x03	; 3
     b62:	41 f0       	breq	.+16     	; 0xb74 <pcint14ActivateInterrupt+0x26>
     b64:	8f 3f       	cpi	r24, 0xFF	; 255
     b66:	41 f0       	breq	.+16     	; 0xb78 <pcint14ActivateInterrupt+0x2a>
     b68:	0e c0       	rjmp	.+28     	; 0xb86 <pcint14ActivateInterrupt+0x38>
     b6a:	46 98       	cbi	0x08, 6	; 8
     b6c:	3e 9a       	sbi	0x07, 6	; 7
     b6e:	04 c0       	rjmp	.+8      	; 0xb78 <pcint14ActivateInterrupt+0x2a>
     b70:	46 98       	cbi	0x08, 6	; 8
     b72:	01 c0       	rjmp	.+2      	; 0xb76 <pcint14ActivateInterrupt+0x28>
     b74:	46 9a       	sbi	0x08, 6	; 8
     b76:	3e 98       	cbi	0x07, 6	; 7
     b78:	80 91 6c 00 	lds	r24, 0x006C
     b7c:	80 64       	ori	r24, 0x40	; 64
     b7e:	80 93 6c 00 	sts	0x006C, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	08 95       	ret
     b86:	81 e0       	ldi	r24, 0x01	; 1
     b88:	08 95       	ret

00000b8a <pcint14DeactivateInterrupt>:
     b8a:	ec e6       	ldi	r30, 0x6C	; 108
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	8f 7b       	andi	r24, 0xBF	; 191
     b92:	80 83       	st	Z, r24
     b94:	08 95       	ret

00000b96 <pcint23_16Enable>:
     b96:	e8 e6       	ldi	r30, 0x68	; 104
     b98:	f0 e0       	ldi	r31, 0x00	; 0
     b9a:	80 81       	ld	r24, Z
     b9c:	84 60       	ori	r24, 0x04	; 4
     b9e:	80 83       	st	Z, r24
     ba0:	08 95       	ret

00000ba2 <pcint23_16Disable>:
     ba2:	e8 e6       	ldi	r30, 0x68	; 104
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	80 81       	ld	r24, Z
     ba8:	8b 7f       	andi	r24, 0xFB	; 251
     baa:	80 83       	st	Z, r24
     bac:	08 95       	ret

00000bae <pcint23_16ClearInterruptRequest>:
     bae:	da 9a       	sbi	0x1b, 2	; 27
     bb0:	08 95       	ret

00000bb2 <pcint16ActivateInterrupt>:
     bb2:	82 30       	cpi	r24, 0x02	; 2
     bb4:	79 f0       	breq	.+30     	; 0xbd4 <pcint16ActivateInterrupt+0x22>
     bb6:	30 f4       	brcc	.+12     	; 0xbc4 <pcint16ActivateInterrupt+0x12>
     bb8:	88 23       	and	r24, r24
     bba:	49 f0       	breq	.+18     	; 0xbce <pcint16ActivateInterrupt+0x1c>
     bbc:	81 30       	cpi	r24, 0x01	; 1
     bbe:	a9 f4       	brne	.+42     	; 0xbea <pcint16ActivateInterrupt+0x38>
     bc0:	58 9a       	sbi	0x0b, 0	; 11
     bc2:	06 c0       	rjmp	.+12     	; 0xbd0 <pcint16ActivateInterrupt+0x1e>
     bc4:	83 30       	cpi	r24, 0x03	; 3
     bc6:	41 f0       	breq	.+16     	; 0xbd8 <pcint16ActivateInterrupt+0x26>
     bc8:	8f 3f       	cpi	r24, 0xFF	; 255
     bca:	41 f0       	breq	.+16     	; 0xbdc <pcint16ActivateInterrupt+0x2a>
     bcc:	0e c0       	rjmp	.+28     	; 0xbea <pcint16ActivateInterrupt+0x38>
     bce:	58 98       	cbi	0x0b, 0	; 11
     bd0:	50 9a       	sbi	0x0a, 0	; 10
     bd2:	04 c0       	rjmp	.+8      	; 0xbdc <pcint16ActivateInterrupt+0x2a>
     bd4:	58 98       	cbi	0x0b, 0	; 11
     bd6:	01 c0       	rjmp	.+2      	; 0xbda <pcint16ActivateInterrupt+0x28>
     bd8:	58 9a       	sbi	0x0b, 0	; 11
     bda:	50 98       	cbi	0x0a, 0	; 10
     bdc:	80 91 6d 00 	lds	r24, 0x006D
     be0:	81 60       	ori	r24, 0x01	; 1
     be2:	80 93 6d 00 	sts	0x006D, r24
     be6:	80 e0       	ldi	r24, 0x00	; 0
     be8:	08 95       	ret
     bea:	81 e0       	ldi	r24, 0x01	; 1
     bec:	08 95       	ret

00000bee <pcint16DeactivateInterrupt>:
     bee:	ed e6       	ldi	r30, 0x6D	; 109
     bf0:	f0 e0       	ldi	r31, 0x00	; 0
     bf2:	80 81       	ld	r24, Z
     bf4:	8e 7f       	andi	r24, 0xFE	; 254
     bf6:	80 83       	st	Z, r24
     bf8:	08 95       	ret

00000bfa <pcint17ActivateInterrupt>:
     bfa:	82 30       	cpi	r24, 0x02	; 2
     bfc:	79 f0       	breq	.+30     	; 0xc1c <pcint17ActivateInterrupt+0x22>
     bfe:	30 f4       	brcc	.+12     	; 0xc0c <pcint17ActivateInterrupt+0x12>
     c00:	88 23       	and	r24, r24
     c02:	49 f0       	breq	.+18     	; 0xc16 <pcint17ActivateInterrupt+0x1c>
     c04:	81 30       	cpi	r24, 0x01	; 1
     c06:	a9 f4       	brne	.+42     	; 0xc32 <pcint17ActivateInterrupt+0x38>
     c08:	59 9a       	sbi	0x0b, 1	; 11
     c0a:	06 c0       	rjmp	.+12     	; 0xc18 <pcint17ActivateInterrupt+0x1e>
     c0c:	83 30       	cpi	r24, 0x03	; 3
     c0e:	41 f0       	breq	.+16     	; 0xc20 <pcint17ActivateInterrupt+0x26>
     c10:	8f 3f       	cpi	r24, 0xFF	; 255
     c12:	41 f0       	breq	.+16     	; 0xc24 <pcint17ActivateInterrupt+0x2a>
     c14:	0e c0       	rjmp	.+28     	; 0xc32 <pcint17ActivateInterrupt+0x38>
     c16:	59 98       	cbi	0x0b, 1	; 11
     c18:	51 9a       	sbi	0x0a, 1	; 10
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <pcint17ActivateInterrupt+0x2a>
     c1c:	59 98       	cbi	0x0b, 1	; 11
     c1e:	01 c0       	rjmp	.+2      	; 0xc22 <pcint17ActivateInterrupt+0x28>
     c20:	59 9a       	sbi	0x0b, 1	; 11
     c22:	51 98       	cbi	0x0a, 1	; 10
     c24:	80 91 6d 00 	lds	r24, 0x006D
     c28:	82 60       	ori	r24, 0x02	; 2
     c2a:	80 93 6d 00 	sts	0x006D, r24
     c2e:	80 e0       	ldi	r24, 0x00	; 0
     c30:	08 95       	ret
     c32:	81 e0       	ldi	r24, 0x01	; 1
     c34:	08 95       	ret

00000c36 <pcint17DeactivateInterrupt>:
     c36:	ed e6       	ldi	r30, 0x6D	; 109
     c38:	f0 e0       	ldi	r31, 0x00	; 0
     c3a:	80 81       	ld	r24, Z
     c3c:	8d 7f       	andi	r24, 0xFD	; 253
     c3e:	80 83       	st	Z, r24
     c40:	08 95       	ret

00000c42 <pcint18ActivateInterrupt>:
     c42:	82 30       	cpi	r24, 0x02	; 2
     c44:	79 f0       	breq	.+30     	; 0xc64 <pcint18ActivateInterrupt+0x22>
     c46:	30 f4       	brcc	.+12     	; 0xc54 <pcint18ActivateInterrupt+0x12>
     c48:	88 23       	and	r24, r24
     c4a:	49 f0       	breq	.+18     	; 0xc5e <pcint18ActivateInterrupt+0x1c>
     c4c:	81 30       	cpi	r24, 0x01	; 1
     c4e:	a9 f4       	brne	.+42     	; 0xc7a <pcint18ActivateInterrupt+0x38>
     c50:	5a 9a       	sbi	0x0b, 2	; 11
     c52:	06 c0       	rjmp	.+12     	; 0xc60 <pcint18ActivateInterrupt+0x1e>
     c54:	83 30       	cpi	r24, 0x03	; 3
     c56:	41 f0       	breq	.+16     	; 0xc68 <pcint18ActivateInterrupt+0x26>
     c58:	8f 3f       	cpi	r24, 0xFF	; 255
     c5a:	41 f0       	breq	.+16     	; 0xc6c <pcint18ActivateInterrupt+0x2a>
     c5c:	0e c0       	rjmp	.+28     	; 0xc7a <pcint18ActivateInterrupt+0x38>
     c5e:	5a 98       	cbi	0x0b, 2	; 11
     c60:	52 9a       	sbi	0x0a, 2	; 10
     c62:	04 c0       	rjmp	.+8      	; 0xc6c <pcint18ActivateInterrupt+0x2a>
     c64:	5a 98       	cbi	0x0b, 2	; 11
     c66:	01 c0       	rjmp	.+2      	; 0xc6a <pcint18ActivateInterrupt+0x28>
     c68:	5a 9a       	sbi	0x0b, 2	; 11
     c6a:	52 98       	cbi	0x0a, 2	; 10
     c6c:	80 91 6d 00 	lds	r24, 0x006D
     c70:	84 60       	ori	r24, 0x04	; 4
     c72:	80 93 6d 00 	sts	0x006D, r24
     c76:	80 e0       	ldi	r24, 0x00	; 0
     c78:	08 95       	ret
     c7a:	81 e0       	ldi	r24, 0x01	; 1
     c7c:	08 95       	ret

00000c7e <pcint18DeactivateInterrupt>:
     c7e:	ed e6       	ldi	r30, 0x6D	; 109
     c80:	f0 e0       	ldi	r31, 0x00	; 0
     c82:	80 81       	ld	r24, Z
     c84:	8b 7f       	andi	r24, 0xFB	; 251
     c86:	80 83       	st	Z, r24
     c88:	08 95       	ret

00000c8a <pcint19ActivateInterrupt>:
     c8a:	82 30       	cpi	r24, 0x02	; 2
     c8c:	79 f0       	breq	.+30     	; 0xcac <pcint19ActivateInterrupt+0x22>
     c8e:	30 f4       	brcc	.+12     	; 0xc9c <pcint19ActivateInterrupt+0x12>
     c90:	88 23       	and	r24, r24
     c92:	49 f0       	breq	.+18     	; 0xca6 <pcint19ActivateInterrupt+0x1c>
     c94:	81 30       	cpi	r24, 0x01	; 1
     c96:	a9 f4       	brne	.+42     	; 0xcc2 <pcint19ActivateInterrupt+0x38>
     c98:	5b 9a       	sbi	0x0b, 3	; 11
     c9a:	06 c0       	rjmp	.+12     	; 0xca8 <pcint19ActivateInterrupt+0x1e>
     c9c:	83 30       	cpi	r24, 0x03	; 3
     c9e:	41 f0       	breq	.+16     	; 0xcb0 <pcint19ActivateInterrupt+0x26>
     ca0:	8f 3f       	cpi	r24, 0xFF	; 255
     ca2:	41 f0       	breq	.+16     	; 0xcb4 <pcint19ActivateInterrupt+0x2a>
     ca4:	0e c0       	rjmp	.+28     	; 0xcc2 <pcint19ActivateInterrupt+0x38>
     ca6:	5b 98       	cbi	0x0b, 3	; 11
     ca8:	53 9a       	sbi	0x0a, 3	; 10
     caa:	04 c0       	rjmp	.+8      	; 0xcb4 <pcint19ActivateInterrupt+0x2a>
     cac:	5b 98       	cbi	0x0b, 3	; 11
     cae:	01 c0       	rjmp	.+2      	; 0xcb2 <pcint19ActivateInterrupt+0x28>
     cb0:	5b 9a       	sbi	0x0b, 3	; 11
     cb2:	53 98       	cbi	0x0a, 3	; 10
     cb4:	80 91 6d 00 	lds	r24, 0x006D
     cb8:	88 60       	ori	r24, 0x08	; 8
     cba:	80 93 6d 00 	sts	0x006D, r24
     cbe:	80 e0       	ldi	r24, 0x00	; 0
     cc0:	08 95       	ret
     cc2:	81 e0       	ldi	r24, 0x01	; 1
     cc4:	08 95       	ret

00000cc6 <pcint19DeactivateInterrupt>:
     cc6:	ed e6       	ldi	r30, 0x6D	; 109
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	80 81       	ld	r24, Z
     ccc:	87 7f       	andi	r24, 0xF7	; 247
     cce:	80 83       	st	Z, r24
     cd0:	08 95       	ret

00000cd2 <pcint20ActivateInterrupt>:
     cd2:	82 30       	cpi	r24, 0x02	; 2
     cd4:	79 f0       	breq	.+30     	; 0xcf4 <pcint20ActivateInterrupt+0x22>
     cd6:	30 f4       	brcc	.+12     	; 0xce4 <pcint20ActivateInterrupt+0x12>
     cd8:	88 23       	and	r24, r24
     cda:	49 f0       	breq	.+18     	; 0xcee <pcint20ActivateInterrupt+0x1c>
     cdc:	81 30       	cpi	r24, 0x01	; 1
     cde:	a9 f4       	brne	.+42     	; 0xd0a <pcint20ActivateInterrupt+0x38>
     ce0:	5c 9a       	sbi	0x0b, 4	; 11
     ce2:	06 c0       	rjmp	.+12     	; 0xcf0 <pcint20ActivateInterrupt+0x1e>
     ce4:	83 30       	cpi	r24, 0x03	; 3
     ce6:	41 f0       	breq	.+16     	; 0xcf8 <pcint20ActivateInterrupt+0x26>
     ce8:	8f 3f       	cpi	r24, 0xFF	; 255
     cea:	41 f0       	breq	.+16     	; 0xcfc <pcint20ActivateInterrupt+0x2a>
     cec:	0e c0       	rjmp	.+28     	; 0xd0a <pcint20ActivateInterrupt+0x38>
     cee:	5c 98       	cbi	0x0b, 4	; 11
     cf0:	54 9a       	sbi	0x0a, 4	; 10
     cf2:	04 c0       	rjmp	.+8      	; 0xcfc <pcint20ActivateInterrupt+0x2a>
     cf4:	5c 98       	cbi	0x0b, 4	; 11
     cf6:	01 c0       	rjmp	.+2      	; 0xcfa <pcint20ActivateInterrupt+0x28>
     cf8:	5c 9a       	sbi	0x0b, 4	; 11
     cfa:	54 98       	cbi	0x0a, 4	; 10
     cfc:	80 91 6d 00 	lds	r24, 0x006D
     d00:	80 61       	ori	r24, 0x10	; 16
     d02:	80 93 6d 00 	sts	0x006D, r24
     d06:	80 e0       	ldi	r24, 0x00	; 0
     d08:	08 95       	ret
     d0a:	81 e0       	ldi	r24, 0x01	; 1
     d0c:	08 95       	ret

00000d0e <pcint20DeactivateInterrupt>:
     d0e:	ed e6       	ldi	r30, 0x6D	; 109
     d10:	f0 e0       	ldi	r31, 0x00	; 0
     d12:	80 81       	ld	r24, Z
     d14:	8f 7e       	andi	r24, 0xEF	; 239
     d16:	80 83       	st	Z, r24
     d18:	08 95       	ret

00000d1a <pcint21ActivateInterrupt>:
     d1a:	82 30       	cpi	r24, 0x02	; 2
     d1c:	79 f0       	breq	.+30     	; 0xd3c <pcint21ActivateInterrupt+0x22>
     d1e:	30 f4       	brcc	.+12     	; 0xd2c <pcint21ActivateInterrupt+0x12>
     d20:	88 23       	and	r24, r24
     d22:	49 f0       	breq	.+18     	; 0xd36 <pcint21ActivateInterrupt+0x1c>
     d24:	81 30       	cpi	r24, 0x01	; 1
     d26:	a9 f4       	brne	.+42     	; 0xd52 <pcint21ActivateInterrupt+0x38>
     d28:	5d 9a       	sbi	0x0b, 5	; 11
     d2a:	06 c0       	rjmp	.+12     	; 0xd38 <pcint21ActivateInterrupt+0x1e>
     d2c:	83 30       	cpi	r24, 0x03	; 3
     d2e:	41 f0       	breq	.+16     	; 0xd40 <pcint21ActivateInterrupt+0x26>
     d30:	8f 3f       	cpi	r24, 0xFF	; 255
     d32:	41 f0       	breq	.+16     	; 0xd44 <pcint21ActivateInterrupt+0x2a>
     d34:	0e c0       	rjmp	.+28     	; 0xd52 <pcint21ActivateInterrupt+0x38>
     d36:	5d 98       	cbi	0x0b, 5	; 11
     d38:	55 9a       	sbi	0x0a, 5	; 10
     d3a:	04 c0       	rjmp	.+8      	; 0xd44 <pcint21ActivateInterrupt+0x2a>
     d3c:	5d 98       	cbi	0x0b, 5	; 11
     d3e:	01 c0       	rjmp	.+2      	; 0xd42 <pcint21ActivateInterrupt+0x28>
     d40:	5d 9a       	sbi	0x0b, 5	; 11
     d42:	55 98       	cbi	0x0a, 5	; 10
     d44:	80 91 6d 00 	lds	r24, 0x006D
     d48:	80 62       	ori	r24, 0x20	; 32
     d4a:	80 93 6d 00 	sts	0x006D, r24
     d4e:	80 e0       	ldi	r24, 0x00	; 0
     d50:	08 95       	ret
     d52:	81 e0       	ldi	r24, 0x01	; 1
     d54:	08 95       	ret

00000d56 <pcint21DeactivateInterrupt>:
     d56:	ed e6       	ldi	r30, 0x6D	; 109
     d58:	f0 e0       	ldi	r31, 0x00	; 0
     d5a:	80 81       	ld	r24, Z
     d5c:	8f 7d       	andi	r24, 0xDF	; 223
     d5e:	80 83       	st	Z, r24
     d60:	08 95       	ret

00000d62 <pcint22ActivateInterrupt>:
     d62:	82 30       	cpi	r24, 0x02	; 2
     d64:	79 f0       	breq	.+30     	; 0xd84 <pcint22ActivateInterrupt+0x22>
     d66:	30 f4       	brcc	.+12     	; 0xd74 <pcint22ActivateInterrupt+0x12>
     d68:	88 23       	and	r24, r24
     d6a:	49 f0       	breq	.+18     	; 0xd7e <pcint22ActivateInterrupt+0x1c>
     d6c:	81 30       	cpi	r24, 0x01	; 1
     d6e:	a9 f4       	brne	.+42     	; 0xd9a <pcint22ActivateInterrupt+0x38>
     d70:	5e 9a       	sbi	0x0b, 6	; 11
     d72:	06 c0       	rjmp	.+12     	; 0xd80 <pcint22ActivateInterrupt+0x1e>
     d74:	83 30       	cpi	r24, 0x03	; 3
     d76:	41 f0       	breq	.+16     	; 0xd88 <pcint22ActivateInterrupt+0x26>
     d78:	8f 3f       	cpi	r24, 0xFF	; 255
     d7a:	41 f0       	breq	.+16     	; 0xd8c <pcint22ActivateInterrupt+0x2a>
     d7c:	0e c0       	rjmp	.+28     	; 0xd9a <pcint22ActivateInterrupt+0x38>
     d7e:	5e 98       	cbi	0x0b, 6	; 11
     d80:	56 9a       	sbi	0x0a, 6	; 10
     d82:	04 c0       	rjmp	.+8      	; 0xd8c <pcint22ActivateInterrupt+0x2a>
     d84:	5e 98       	cbi	0x0b, 6	; 11
     d86:	01 c0       	rjmp	.+2      	; 0xd8a <pcint22ActivateInterrupt+0x28>
     d88:	5e 9a       	sbi	0x0b, 6	; 11
     d8a:	56 98       	cbi	0x0a, 6	; 10
     d8c:	80 91 6d 00 	lds	r24, 0x006D
     d90:	80 64       	ori	r24, 0x40	; 64
     d92:	80 93 6d 00 	sts	0x006D, r24
     d96:	80 e0       	ldi	r24, 0x00	; 0
     d98:	08 95       	ret
     d9a:	81 e0       	ldi	r24, 0x01	; 1
     d9c:	08 95       	ret

00000d9e <pcint22DeactivateInterrupt>:
     d9e:	ed e6       	ldi	r30, 0x6D	; 109
     da0:	f0 e0       	ldi	r31, 0x00	; 0
     da2:	80 81       	ld	r24, Z
     da4:	8f 7b       	andi	r24, 0xBF	; 191
     da6:	80 83       	st	Z, r24
     da8:	08 95       	ret

00000daa <pcint23ActivateInterrupt>:
     daa:	82 30       	cpi	r24, 0x02	; 2
     dac:	79 f0       	breq	.+30     	; 0xdcc <pcint23ActivateInterrupt+0x22>
     dae:	30 f4       	brcc	.+12     	; 0xdbc <pcint23ActivateInterrupt+0x12>
     db0:	88 23       	and	r24, r24
     db2:	49 f0       	breq	.+18     	; 0xdc6 <pcint23ActivateInterrupt+0x1c>
     db4:	81 30       	cpi	r24, 0x01	; 1
     db6:	a9 f4       	brne	.+42     	; 0xde2 <pcint23ActivateInterrupt+0x38>
     db8:	5f 9a       	sbi	0x0b, 7	; 11
     dba:	06 c0       	rjmp	.+12     	; 0xdc8 <pcint23ActivateInterrupt+0x1e>
     dbc:	83 30       	cpi	r24, 0x03	; 3
     dbe:	41 f0       	breq	.+16     	; 0xdd0 <pcint23ActivateInterrupt+0x26>
     dc0:	8f 3f       	cpi	r24, 0xFF	; 255
     dc2:	41 f0       	breq	.+16     	; 0xdd4 <pcint23ActivateInterrupt+0x2a>
     dc4:	0e c0       	rjmp	.+28     	; 0xde2 <pcint23ActivateInterrupt+0x38>
     dc6:	5f 98       	cbi	0x0b, 7	; 11
     dc8:	57 9a       	sbi	0x0a, 7	; 10
     dca:	04 c0       	rjmp	.+8      	; 0xdd4 <pcint23ActivateInterrupt+0x2a>
     dcc:	5f 98       	cbi	0x0b, 7	; 11
     dce:	01 c0       	rjmp	.+2      	; 0xdd2 <pcint23ActivateInterrupt+0x28>
     dd0:	5f 9a       	sbi	0x0b, 7	; 11
     dd2:	57 98       	cbi	0x0a, 7	; 10
     dd4:	80 91 6d 00 	lds	r24, 0x006D
     dd8:	80 68       	ori	r24, 0x80	; 128
     dda:	80 93 6d 00 	sts	0x006D, r24
     dde:	80 e0       	ldi	r24, 0x00	; 0
     de0:	08 95       	ret
     de2:	81 e0       	ldi	r24, 0x01	; 1
     de4:	08 95       	ret

00000de6 <pcint23DeactivateInterrupt>:
     de6:	ed e6       	ldi	r30, 0x6D	; 109
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	80 81       	ld	r24, Z
     dec:	8f 77       	andi	r24, 0x7F	; 127
     dee:	80 83       	st	Z, r24
     df0:	08 95       	ret

00000df2 <timer0Config>:
     df2:	24 b5       	in	r18, 0x24	; 36
     df4:	95 b5       	in	r25, 0x25	; 37
     df6:	6f 3f       	cpi	r22, 0xFF	; 255
     df8:	c1 f0       	breq	.+48     	; 0xe2a <timer0Config+0x38>
     dfa:	98 7f       	andi	r25, 0xF8	; 248
     dfc:	46 2f       	mov	r20, r22
     dfe:	50 e0       	ldi	r21, 0x00	; 0
     e00:	48 30       	cpi	r20, 0x08	; 8
     e02:	51 05       	cpc	r21, r1
     e04:	80 f5       	brcc	.+96     	; 0xe66 <timer0Config+0x74>
     e06:	fa 01       	movw	r30, r20
     e08:	eb 5a       	subi	r30, 0xAB	; 171
     e0a:	ff 4f       	sbci	r31, 0xFF	; 255
     e0c:	0c 94 80 0d 	jmp	0x1b00	; 0x1b00 <__tablejump2__>
     e10:	91 60       	ori	r25, 0x01	; 1
     e12:	0b c0       	rjmp	.+22     	; 0xe2a <timer0Config+0x38>
     e14:	92 60       	ori	r25, 0x02	; 2
     e16:	09 c0       	rjmp	.+18     	; 0xe2a <timer0Config+0x38>
     e18:	93 60       	ori	r25, 0x03	; 3
     e1a:	07 c0       	rjmp	.+14     	; 0xe2a <timer0Config+0x38>
     e1c:	94 60       	ori	r25, 0x04	; 4
     e1e:	05 c0       	rjmp	.+10     	; 0xe2a <timer0Config+0x38>
     e20:	95 60       	ori	r25, 0x05	; 5
     e22:	03 c0       	rjmp	.+6      	; 0xe2a <timer0Config+0x38>
     e24:	96 60       	ori	r25, 0x06	; 6
     e26:	01 c0       	rjmp	.+2      	; 0xe2a <timer0Config+0x38>
     e28:	97 60       	ori	r25, 0x07	; 7
     e2a:	8f 3f       	cpi	r24, 0xFF	; 255
     e2c:	c1 f0       	breq	.+48     	; 0xe5e <timer0Config+0x6c>
     e2e:	2c 7f       	andi	r18, 0xFC	; 252
     e30:	97 7f       	andi	r25, 0xF7	; 247
     e32:	82 30       	cpi	r24, 0x02	; 2
     e34:	69 f0       	breq	.+26     	; 0xe50 <timer0Config+0x5e>
     e36:	28 f4       	brcc	.+10     	; 0xe42 <timer0Config+0x50>
     e38:	88 23       	and	r24, r24
     e3a:	89 f0       	breq	.+34     	; 0xe5e <timer0Config+0x6c>
     e3c:	81 30       	cpi	r24, 0x01	; 1
     e3e:	59 f0       	breq	.+22     	; 0xe56 <timer0Config+0x64>
     e40:	14 c0       	rjmp	.+40     	; 0xe6a <timer0Config+0x78>
     e42:	85 30       	cpi	r24, 0x05	; 5
     e44:	39 f0       	breq	.+14     	; 0xe54 <timer0Config+0x62>
     e46:	87 30       	cpi	r24, 0x07	; 7
     e48:	41 f0       	breq	.+16     	; 0xe5a <timer0Config+0x68>
     e4a:	83 30       	cpi	r24, 0x03	; 3
     e4c:	71 f4       	brne	.+28     	; 0xe6a <timer0Config+0x78>
     e4e:	06 c0       	rjmp	.+12     	; 0xe5c <timer0Config+0x6a>
     e50:	22 60       	ori	r18, 0x02	; 2
     e52:	05 c0       	rjmp	.+10     	; 0xe5e <timer0Config+0x6c>
     e54:	98 60       	ori	r25, 0x08	; 8
     e56:	21 60       	ori	r18, 0x01	; 1
     e58:	02 c0       	rjmp	.+4      	; 0xe5e <timer0Config+0x6c>
     e5a:	98 60       	ori	r25, 0x08	; 8
     e5c:	23 60       	ori	r18, 0x03	; 3
     e5e:	24 bd       	out	0x24, r18	; 36
     e60:	95 bd       	out	0x25, r25	; 37
     e62:	80 e0       	ldi	r24, 0x00	; 0
     e64:	08 95       	ret
     e66:	83 e0       	ldi	r24, 0x03	; 3
     e68:	08 95       	ret
     e6a:	84 e0       	ldi	r24, 0x04	; 4
     e6c:	08 95       	ret

00000e6e <timer0OutputConfig>:
     e6e:	94 b5       	in	r25, 0x24	; 36
     e70:	8f 3f       	cpi	r24, 0xFF	; 255
     e72:	69 f0       	breq	.+26     	; 0xe8e <timer0OutputConfig+0x20>
     e74:	9f 73       	andi	r25, 0x3F	; 63
     e76:	81 30       	cpi	r24, 0x01	; 1
     e78:	39 f0       	breq	.+14     	; 0xe88 <timer0OutputConfig+0x1a>
     e7a:	48 f0       	brcs	.+18     	; 0xe8e <timer0OutputConfig+0x20>
     e7c:	82 30       	cpi	r24, 0x02	; 2
     e7e:	31 f0       	breq	.+12     	; 0xe8c <timer0OutputConfig+0x1e>
     e80:	83 30       	cpi	r24, 0x03	; 3
     e82:	e1 f4       	brne	.+56     	; 0xebc <timer0OutputConfig+0x4e>
     e84:	90 6c       	ori	r25, 0xC0	; 192
     e86:	03 c0       	rjmp	.+6      	; 0xe8e <timer0OutputConfig+0x20>
     e88:	90 64       	ori	r25, 0x40	; 64
     e8a:	01 c0       	rjmp	.+2      	; 0xe8e <timer0OutputConfig+0x20>
     e8c:	90 68       	ori	r25, 0x80	; 128
     e8e:	6f 3f       	cpi	r22, 0xFF	; 255
     e90:	91 f0       	breq	.+36     	; 0xeb6 <timer0OutputConfig+0x48>
     e92:	9f 7c       	andi	r25, 0xCF	; 207
     e94:	82 30       	cpi	r24, 0x02	; 2
     e96:	61 f0       	breq	.+24     	; 0xeb0 <timer0OutputConfig+0x42>
     e98:	30 f4       	brcc	.+12     	; 0xea6 <timer0OutputConfig+0x38>
     e9a:	88 23       	and	r24, r24
     e9c:	61 f0       	breq	.+24     	; 0xeb6 <timer0OutputConfig+0x48>
     e9e:	81 30       	cpi	r24, 0x01	; 1
     ea0:	69 f4       	brne	.+26     	; 0xebc <timer0OutputConfig+0x4e>
     ea2:	90 61       	ori	r25, 0x10	; 16
     ea4:	08 c0       	rjmp	.+16     	; 0xeb6 <timer0OutputConfig+0x48>
     ea6:	83 30       	cpi	r24, 0x03	; 3
     ea8:	29 f0       	breq	.+10     	; 0xeb4 <timer0OutputConfig+0x46>
     eaa:	8f 3f       	cpi	r24, 0xFF	; 255
     eac:	21 f0       	breq	.+8      	; 0xeb6 <timer0OutputConfig+0x48>
     eae:	06 c0       	rjmp	.+12     	; 0xebc <timer0OutputConfig+0x4e>
     eb0:	90 62       	ori	r25, 0x20	; 32
     eb2:	01 c0       	rjmp	.+2      	; 0xeb6 <timer0OutputConfig+0x48>
     eb4:	90 63       	ori	r25, 0x30	; 48
     eb6:	94 bd       	out	0x24, r25	; 36
     eb8:	80 e0       	ldi	r24, 0x00	; 0
     eba:	08 95       	ret
     ebc:	81 e0       	ldi	r24, 0x01	; 1
     ebe:	08 95       	ret

00000ec0 <timer0ActivateOverflowInterrupt>:
     ec0:	ee e6       	ldi	r30, 0x6E	; 110
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	80 81       	ld	r24, Z
     ec6:	81 60       	ori	r24, 0x01	; 1
     ec8:	80 83       	st	Z, r24
     eca:	08 95       	ret

00000ecc <timer0DeactivateOverflowInterrupt>:
     ecc:	ee e6       	ldi	r30, 0x6E	; 110
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	80 81       	ld	r24, Z
     ed2:	8e 7f       	andi	r24, 0xFE	; 254
     ed4:	80 83       	st	Z, r24
     ed6:	08 95       	ret

00000ed8 <timer0ClearOverflowInterruptRequest>:
     ed8:	a8 9a       	sbi	0x15, 0	; 21
     eda:	08 95       	ret

00000edc <timer0ActivateCompareAInterrupt>:
     edc:	ee e6       	ldi	r30, 0x6E	; 110
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	80 81       	ld	r24, Z
     ee2:	82 60       	ori	r24, 0x02	; 2
     ee4:	80 83       	st	Z, r24
     ee6:	08 95       	ret

00000ee8 <timer0DeactivateCompareAInterrupt>:
     ee8:	ee e6       	ldi	r30, 0x6E	; 110
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	8d 7f       	andi	r24, 0xFD	; 253
     ef0:	80 83       	st	Z, r24
     ef2:	08 95       	ret

00000ef4 <timer0ClearCompareAInterruptRequest>:
     ef4:	a9 9a       	sbi	0x15, 1	; 21
     ef6:	08 95       	ret

00000ef8 <timer0ActivateCompareBInterrupt>:
     ef8:	ee e6       	ldi	r30, 0x6E	; 110
     efa:	f0 e0       	ldi	r31, 0x00	; 0
     efc:	80 81       	ld	r24, Z
     efe:	84 60       	ori	r24, 0x04	; 4
     f00:	80 83       	st	Z, r24
     f02:	08 95       	ret

00000f04 <timer0DeactivateCompareBInterrupt>:
     f04:	ee e6       	ldi	r30, 0x6E	; 110
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	80 81       	ld	r24, Z
     f0a:	8b 7f       	andi	r24, 0xFB	; 251
     f0c:	80 83       	st	Z, r24
     f0e:	08 95       	ret

00000f10 <timer0ClearCompareBInterruptRequest>:
     f10:	aa 9a       	sbi	0x15, 2	; 21
     f12:	08 95       	ret

00000f14 <timer0ForceCompareA>:
     f14:	85 b5       	in	r24, 0x25	; 37
     f16:	80 68       	ori	r24, 0x80	; 128
     f18:	85 bd       	out	0x25, r24	; 37
     f1a:	08 95       	ret

00000f1c <timer0ForceCompareB>:
     f1c:	85 b5       	in	r24, 0x25	; 37
     f1e:	80 64       	ori	r24, 0x40	; 64
     f20:	85 bd       	out	0x25, r24	; 37
     f22:	08 95       	ret

00000f24 <timer0SetCounterValue>:
     f24:	86 bd       	out	0x26, r24	; 38
     f26:	08 95       	ret

00000f28 <timer0GetCounterValue>:
     f28:	86 b5       	in	r24, 0x26	; 38
     f2a:	08 95       	ret

00000f2c <timer0SetCompareAValue>:
     f2c:	87 bd       	out	0x27, r24	; 39
     f2e:	08 95       	ret

00000f30 <timer0GetCompareAValue>:
     f30:	87 b5       	in	r24, 0x27	; 39
     f32:	08 95       	ret

00000f34 <timer0SetCompareBValue>:
     f34:	88 bd       	out	0x28, r24	; 40
     f36:	08 95       	ret

00000f38 <timer0GetCompareBValue>:
     f38:	88 b5       	in	r24, 0x28	; 40
     f3a:	08 95       	ret

00000f3c <timer1Config>:
     f3c:	20 91 80 00 	lds	r18, 0x0080
     f40:	90 91 81 00 	lds	r25, 0x0081
     f44:	6f 3f       	cpi	r22, 0xFF	; 255
     f46:	11 f0       	breq	.+4      	; 0xf4c <timer1Config+0x10>
     f48:	98 7f       	andi	r25, 0xF8	; 248
     f4a:	96 2b       	or	r25, r22
     f4c:	8f 3f       	cpi	r24, 0xFF	; 255
     f4e:	69 f0       	breq	.+26     	; 0xf6a <timer1Config+0x2e>
     f50:	83 ff       	sbrs	r24, 3
     f52:	02 c0       	rjmp	.+4      	; 0xf58 <timer1Config+0x1c>
     f54:	90 61       	ori	r25, 0x10	; 16
     f56:	01 c0       	rjmp	.+2      	; 0xf5a <timer1Config+0x1e>
     f58:	9f 7e       	andi	r25, 0xEF	; 239
     f5a:	82 ff       	sbrs	r24, 2
     f5c:	02 c0       	rjmp	.+4      	; 0xf62 <timer1Config+0x26>
     f5e:	98 60       	ori	r25, 0x08	; 8
     f60:	01 c0       	rjmp	.+2      	; 0xf64 <timer1Config+0x28>
     f62:	97 7f       	andi	r25, 0xF7	; 247
     f64:	83 70       	andi	r24, 0x03	; 3
     f66:	2c 7f       	andi	r18, 0xFC	; 252
     f68:	28 2b       	or	r18, r24
     f6a:	20 93 80 00 	sts	0x0080, r18
     f6e:	90 93 81 00 	sts	0x0081, r25
     f72:	80 e0       	ldi	r24, 0x00	; 0
     f74:	08 95       	ret

00000f76 <timer1OutputConfig>:
     f76:	20 91 80 00 	lds	r18, 0x0080
     f7a:	8f 3f       	cpi	r24, 0xFF	; 255
     f7c:	31 f0       	breq	.+12     	; 0xf8a <timer1OutputConfig+0x14>
     f7e:	30 e4       	ldi	r19, 0x40	; 64
     f80:	83 9f       	mul	r24, r19
     f82:	c0 01       	movw	r24, r0
     f84:	11 24       	eor	r1, r1
     f86:	2f 73       	andi	r18, 0x3F	; 63
     f88:	28 2b       	or	r18, r24
     f8a:	6f 3f       	cpi	r22, 0xFF	; 255
     f8c:	31 f0       	breq	.+12     	; 0xf9a <timer1OutputConfig+0x24>
     f8e:	2f 7c       	andi	r18, 0xCF	; 207
     f90:	80 e1       	ldi	r24, 0x10	; 16
     f92:	68 9f       	mul	r22, r24
     f94:	b0 01       	movw	r22, r0
     f96:	11 24       	eor	r1, r1
     f98:	26 2b       	or	r18, r22
     f9a:	20 93 80 00 	sts	0x0080, r18
     f9e:	80 e0       	ldi	r24, 0x00	; 0
     fa0:	08 95       	ret

00000fa2 <timer1InputCaptureNoiseCancelerConfig>:
     fa2:	e1 e8       	ldi	r30, 0x81	; 129
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	90 81       	ld	r25, Z
     fa8:	9f 73       	andi	r25, 0x3F	; 63
     faa:	98 2b       	or	r25, r24
     fac:	90 83       	st	Z, r25
     fae:	80 e0       	ldi	r24, 0x00	; 0
     fb0:	08 95       	ret

00000fb2 <timer1ActivateOverflowInterrupt>:
     fb2:	ef e6       	ldi	r30, 0x6F	; 111
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	80 81       	ld	r24, Z
     fb8:	81 60       	ori	r24, 0x01	; 1
     fba:	80 83       	st	Z, r24
     fbc:	80 e0       	ldi	r24, 0x00	; 0
     fbe:	08 95       	ret

00000fc0 <timer1DeactivateOverflowInterrupt>:
     fc0:	ef e6       	ldi	r30, 0x6F	; 111
     fc2:	f0 e0       	ldi	r31, 0x00	; 0
     fc4:	80 81       	ld	r24, Z
     fc6:	8e 7f       	andi	r24, 0xFE	; 254
     fc8:	80 83       	st	Z, r24
     fca:	80 e0       	ldi	r24, 0x00	; 0
     fcc:	08 95       	ret

00000fce <timer1ClearOverflowInterruptRequest>:
     fce:	b0 9a       	sbi	0x16, 0	; 22
     fd0:	80 e0       	ldi	r24, 0x00	; 0
     fd2:	08 95       	ret

00000fd4 <timer1ActivateCompareAInterrupt>:
     fd4:	ef e6       	ldi	r30, 0x6F	; 111
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	80 81       	ld	r24, Z
     fda:	82 60       	ori	r24, 0x02	; 2
     fdc:	80 83       	st	Z, r24
     fde:	80 e0       	ldi	r24, 0x00	; 0
     fe0:	08 95       	ret

00000fe2 <timer1DeactivateCompareAInterrupt>:
     fe2:	ef e6       	ldi	r30, 0x6F	; 111
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	80 81       	ld	r24, Z
     fe8:	8d 7f       	andi	r24, 0xFD	; 253
     fea:	80 83       	st	Z, r24
     fec:	80 e0       	ldi	r24, 0x00	; 0
     fee:	08 95       	ret

00000ff0 <timer1ClearCompareAInterruptRequest>:
     ff0:	b1 9a       	sbi	0x16, 1	; 22
     ff2:	80 e0       	ldi	r24, 0x00	; 0
     ff4:	08 95       	ret

00000ff6 <timer1ActivateCompareBInterrupt>:
     ff6:	ef e6       	ldi	r30, 0x6F	; 111
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	80 81       	ld	r24, Z
     ffc:	84 60       	ori	r24, 0x04	; 4
     ffe:	80 83       	st	Z, r24
    1000:	80 e0       	ldi	r24, 0x00	; 0
    1002:	08 95       	ret

00001004 <timer1DeactivateCompareBInterrupt>:
    1004:	ef e6       	ldi	r30, 0x6F	; 111
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	80 81       	ld	r24, Z
    100a:	8b 7f       	andi	r24, 0xFB	; 251
    100c:	80 83       	st	Z, r24
    100e:	80 e0       	ldi	r24, 0x00	; 0
    1010:	08 95       	ret

00001012 <timer1ClearCompareBInterruptRequest>:
    1012:	b2 9a       	sbi	0x16, 2	; 22
    1014:	80 e0       	ldi	r24, 0x00	; 0
    1016:	08 95       	ret

00001018 <timer1ActivateInputCaptureInterrupt>:
    1018:	ef e6       	ldi	r30, 0x6F	; 111
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	80 81       	ld	r24, Z
    101e:	80 62       	ori	r24, 0x20	; 32
    1020:	80 83       	st	Z, r24
    1022:	80 e0       	ldi	r24, 0x00	; 0
    1024:	08 95       	ret

00001026 <timer1DeactivateInputCaptureInterrupt>:
    1026:	ef e6       	ldi	r30, 0x6F	; 111
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	80 81       	ld	r24, Z
    102c:	8f 7d       	andi	r24, 0xDF	; 223
    102e:	80 83       	st	Z, r24
    1030:	80 e0       	ldi	r24, 0x00	; 0
    1032:	08 95       	ret

00001034 <timer1ClearInputCaptureInterruptRequest>:
    1034:	b5 9a       	sbi	0x16, 5	; 22
    1036:	80 e0       	ldi	r24, 0x00	; 0
    1038:	08 95       	ret

0000103a <timer1ForceCompareA>:
    103a:	e2 e8       	ldi	r30, 0x82	; 130
    103c:	f0 e0       	ldi	r31, 0x00	; 0
    103e:	80 81       	ld	r24, Z
    1040:	80 68       	ori	r24, 0x80	; 128
    1042:	80 83       	st	Z, r24
    1044:	80 e0       	ldi	r24, 0x00	; 0
    1046:	08 95       	ret

00001048 <timer1ForceCompareB>:
    1048:	e2 e8       	ldi	r30, 0x82	; 130
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	80 81       	ld	r24, Z
    104e:	80 64       	ori	r24, 0x40	; 64
    1050:	80 83       	st	Z, r24
    1052:	80 e0       	ldi	r24, 0x00	; 0
    1054:	08 95       	ret

00001056 <timer1SetCounterValue>:
    1056:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1058:	f8 94       	cli
    105a:	90 93 85 00 	sts	0x0085, r25
    105e:	80 93 84 00 	sts	0x0084, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1062:	2f bf       	out	0x3f, r18	; 63
    1064:	80 e0       	ldi	r24, 0x00	; 0
    1066:	08 95       	ret

00001068 <timer1GetCounterValue>:
    1068:	80 91 84 00 	lds	r24, 0x0084
    106c:	90 91 85 00 	lds	r25, 0x0085
    1070:	08 95       	ret

00001072 <timer1SetCompareAValue>:
    1072:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1074:	f8 94       	cli
    1076:	90 93 89 00 	sts	0x0089, r25
    107a:	80 93 88 00 	sts	0x0088, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    107e:	2f bf       	out	0x3f, r18	; 63
    1080:	80 e0       	ldi	r24, 0x00	; 0
    1082:	08 95       	ret

00001084 <timer1GetCompareAValue>:
    1084:	80 91 88 00 	lds	r24, 0x0088
    1088:	90 91 89 00 	lds	r25, 0x0089
    108c:	08 95       	ret

0000108e <timer1SetCompareBValue>:
    108e:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1090:	f8 94       	cli
    1092:	90 93 8b 00 	sts	0x008B, r25
    1096:	80 93 8a 00 	sts	0x008A, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    109a:	2f bf       	out	0x3f, r18	; 63
    109c:	80 e0       	ldi	r24, 0x00	; 0
    109e:	08 95       	ret

000010a0 <timer1GetCompareBValue>:
    10a0:	80 91 8a 00 	lds	r24, 0x008A
    10a4:	90 91 8b 00 	lds	r25, 0x008B
    10a8:	08 95       	ret

000010aa <timer1SetInputCaptureValue>:
    10aa:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    10ac:	f8 94       	cli
    10ae:	90 93 87 00 	sts	0x0087, r25
    10b2:	80 93 86 00 	sts	0x0086, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    10b6:	2f bf       	out	0x3f, r18	; 63
    10b8:	80 e0       	ldi	r24, 0x00	; 0
    10ba:	08 95       	ret

000010bc <timer1GetInputCaptureValue>:
    10bc:	80 91 86 00 	lds	r24, 0x0086
    10c0:	90 91 87 00 	lds	r25, 0x0087
    10c4:	08 95       	ret

000010c6 <timer2Config>:
    10c6:	20 91 b0 00 	lds	r18, 0x00B0
    10ca:	90 91 b1 00 	lds	r25, 0x00B1
    10ce:	6f 3f       	cpi	r22, 0xFF	; 255
    10d0:	11 f0       	breq	.+4      	; 0x10d6 <timer2Config+0x10>
    10d2:	98 7f       	andi	r25, 0xF8	; 248
    10d4:	96 2b       	or	r25, r22
    10d6:	8f 3f       	cpi	r24, 0xFF	; 255
    10d8:	41 f0       	breq	.+16     	; 0x10ea <timer2Config+0x24>
    10da:	82 ff       	sbrs	r24, 2
    10dc:	02 c0       	rjmp	.+4      	; 0x10e2 <timer2Config+0x1c>
    10de:	98 60       	ori	r25, 0x08	; 8
    10e0:	01 c0       	rjmp	.+2      	; 0x10e4 <timer2Config+0x1e>
    10e2:	97 7f       	andi	r25, 0xF7	; 247
    10e4:	83 70       	andi	r24, 0x03	; 3
    10e6:	2c 7f       	andi	r18, 0xFC	; 252
    10e8:	28 2b       	or	r18, r24
    10ea:	20 93 b0 00 	sts	0x00B0, r18
    10ee:	90 93 b1 00 	sts	0x00B1, r25
    10f2:	80 e0       	ldi	r24, 0x00	; 0
    10f4:	08 95       	ret

000010f6 <timer2OutputConfig>:
    10f6:	20 91 b0 00 	lds	r18, 0x00B0
    10fa:	8f 3f       	cpi	r24, 0xFF	; 255
    10fc:	31 f0       	breq	.+12     	; 0x110a <timer2OutputConfig+0x14>
    10fe:	30 e4       	ldi	r19, 0x40	; 64
    1100:	83 9f       	mul	r24, r19
    1102:	c0 01       	movw	r24, r0
    1104:	11 24       	eor	r1, r1
    1106:	2f 73       	andi	r18, 0x3F	; 63
    1108:	28 2b       	or	r18, r24
    110a:	6f 3f       	cpi	r22, 0xFF	; 255
    110c:	31 f0       	breq	.+12     	; 0x111a <timer2OutputConfig+0x24>
    110e:	2f 7c       	andi	r18, 0xCF	; 207
    1110:	80 e1       	ldi	r24, 0x10	; 16
    1112:	68 9f       	mul	r22, r24
    1114:	b0 01       	movw	r22, r0
    1116:	11 24       	eor	r1, r1
    1118:	26 2b       	or	r18, r22
    111a:	20 93 b0 00 	sts	0x00B0, r18
    111e:	80 e0       	ldi	r24, 0x00	; 0
    1120:	08 95       	ret

00001122 <timer2ActivateOverflowInterrupt>:
    1122:	e0 e7       	ldi	r30, 0x70	; 112
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	80 81       	ld	r24, Z
    1128:	81 60       	ori	r24, 0x01	; 1
    112a:	80 83       	st	Z, r24
    112c:	80 e0       	ldi	r24, 0x00	; 0
    112e:	08 95       	ret

00001130 <timer2DeactivateOverflowInterrupt>:
    1130:	e0 e7       	ldi	r30, 0x70	; 112
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	80 81       	ld	r24, Z
    1136:	8e 7f       	andi	r24, 0xFE	; 254
    1138:	80 83       	st	Z, r24
    113a:	80 e0       	ldi	r24, 0x00	; 0
    113c:	08 95       	ret

0000113e <timer2ClearOverflowInterruptRequest>:
    113e:	b8 9a       	sbi	0x17, 0	; 23
    1140:	80 e0       	ldi	r24, 0x00	; 0
    1142:	08 95       	ret

00001144 <timer2ActivateCompareAInterrupt>:
    1144:	e0 e7       	ldi	r30, 0x70	; 112
    1146:	f0 e0       	ldi	r31, 0x00	; 0
    1148:	80 81       	ld	r24, Z
    114a:	82 60       	ori	r24, 0x02	; 2
    114c:	80 83       	st	Z, r24
    114e:	80 e0       	ldi	r24, 0x00	; 0
    1150:	08 95       	ret

00001152 <timer2DeactivateCompareAInterrupt>:
    1152:	e0 e7       	ldi	r30, 0x70	; 112
    1154:	f0 e0       	ldi	r31, 0x00	; 0
    1156:	80 81       	ld	r24, Z
    1158:	8d 7f       	andi	r24, 0xFD	; 253
    115a:	80 83       	st	Z, r24
    115c:	80 e0       	ldi	r24, 0x00	; 0
    115e:	08 95       	ret

00001160 <timer2ClearCompareAInterruptRequest>:
    1160:	b9 9a       	sbi	0x17, 1	; 23
    1162:	80 e0       	ldi	r24, 0x00	; 0
    1164:	08 95       	ret

00001166 <timer2ActivateCompareBInterrupt>:
    1166:	e0 e7       	ldi	r30, 0x70	; 112
    1168:	f0 e0       	ldi	r31, 0x00	; 0
    116a:	80 81       	ld	r24, Z
    116c:	84 60       	ori	r24, 0x04	; 4
    116e:	80 83       	st	Z, r24
    1170:	80 e0       	ldi	r24, 0x00	; 0
    1172:	08 95       	ret

00001174 <timer2DeactivateCompareBInterrupt>:
    1174:	e0 e7       	ldi	r30, 0x70	; 112
    1176:	f0 e0       	ldi	r31, 0x00	; 0
    1178:	80 81       	ld	r24, Z
    117a:	8b 7f       	andi	r24, 0xFB	; 251
    117c:	80 83       	st	Z, r24
    117e:	80 e0       	ldi	r24, 0x00	; 0
    1180:	08 95       	ret

00001182 <timer2ClearCompareBInterruptRequest>:
    1182:	ba 9a       	sbi	0x17, 2	; 23
    1184:	80 e0       	ldi	r24, 0x00	; 0
    1186:	08 95       	ret

00001188 <timer2ForceCompareA>:
    1188:	e1 eb       	ldi	r30, 0xB1	; 177
    118a:	f0 e0       	ldi	r31, 0x00	; 0
    118c:	80 81       	ld	r24, Z
    118e:	80 68       	ori	r24, 0x80	; 128
    1190:	80 83       	st	Z, r24
    1192:	80 e0       	ldi	r24, 0x00	; 0
    1194:	08 95       	ret

00001196 <timer2ForceCompareB>:
    1196:	e1 eb       	ldi	r30, 0xB1	; 177
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	80 64       	ori	r24, 0x40	; 64
    119e:	80 83       	st	Z, r24
    11a0:	80 e0       	ldi	r24, 0x00	; 0
    11a2:	08 95       	ret

000011a4 <timer2SetCounterValue>:
    11a4:	80 93 b2 00 	sts	0x00B2, r24
    11a8:	80 e0       	ldi	r24, 0x00	; 0
    11aa:	08 95       	ret

000011ac <timer2GetCounterValue>:
    11ac:	80 91 b2 00 	lds	r24, 0x00B2
    11b0:	08 95       	ret

000011b2 <timer2SetCompareAValue>:
    11b2:	80 93 b3 00 	sts	0x00B3, r24
    11b6:	80 e0       	ldi	r24, 0x00	; 0
    11b8:	08 95       	ret

000011ba <timer2GetCompareAValue>:
    11ba:	80 91 b3 00 	lds	r24, 0x00B3
    11be:	08 95       	ret

000011c0 <timer2SetCompareBValue>:
    11c0:	80 93 b4 00 	sts	0x00B4, r24
    11c4:	80 e0       	ldi	r24, 0x00	; 0
    11c6:	08 95       	ret

000011c8 <timer2GetCompareBValue>:
    11c8:	80 91 b4 00 	lds	r24, 0x00B4
    11cc:	08 95       	ret

000011ce <adcConfig>:
    11ce:	6f 3f       	cpi	r22, 0xFF	; 255
    11d0:	51 f0       	breq	.+20     	; 0x11e6 <adcConfig+0x18>
    11d2:	90 91 7c 00 	lds	r25, 0x007C
    11d6:	20 e4       	ldi	r18, 0x40	; 64
    11d8:	62 9f       	mul	r22, r18
    11da:	b0 01       	movw	r22, r0
    11dc:	11 24       	eor	r1, r1
    11de:	9f 73       	andi	r25, 0x3F	; 63
    11e0:	96 2b       	or	r25, r22
    11e2:	90 93 7c 00 	sts	0x007C, r25
    11e6:	4f 3f       	cpi	r20, 0xFF	; 255
    11e8:	31 f0       	breq	.+12     	; 0x11f6 <adcConfig+0x28>
    11ea:	90 91 7a 00 	lds	r25, 0x007A
    11ee:	98 7f       	andi	r25, 0xF8	; 248
    11f0:	94 2b       	or	r25, r20
    11f2:	90 93 7a 00 	sts	0x007A, r25
    11f6:	8f 3f       	cpi	r24, 0xFF	; 255
    11f8:	39 f1       	breq	.+78     	; 0x1248 <adcConfig+0x7a>
    11fa:	81 11       	cpse	r24, r1
    11fc:	04 c0       	rjmp	.+8      	; 0x1206 <adcConfig+0x38>
    11fe:	80 91 7a 00 	lds	r24, 0x007A
    1202:	8f 7d       	andi	r24, 0xDF	; 223
    1204:	1f c0       	rjmp	.+62     	; 0x1244 <adcConfig+0x76>
    1206:	20 91 7b 00 	lds	r18, 0x007B
    120a:	28 7f       	andi	r18, 0xF8	; 248
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	fc 01       	movw	r30, r24
    1210:	32 97       	sbiw	r30, 0x02	; 2
    1212:	e7 30       	cpi	r30, 0x07	; 7
    1214:	f1 05       	cpc	r31, r1
    1216:	d0 f4       	brcc	.+52     	; 0x124c <adcConfig+0x7e>
    1218:	e3 5a       	subi	r30, 0xA3	; 163
    121a:	ff 4f       	sbci	r31, 0xFF	; 255
    121c:	0c 94 80 0d 	jmp	0x1b00	; 0x1b00 <__tablejump2__>
    1220:	21 60       	ori	r18, 0x01	; 1
    1222:	0b c0       	rjmp	.+22     	; 0x123a <adcConfig+0x6c>
    1224:	22 60       	ori	r18, 0x02	; 2
    1226:	09 c0       	rjmp	.+18     	; 0x123a <adcConfig+0x6c>
    1228:	23 60       	ori	r18, 0x03	; 3
    122a:	07 c0       	rjmp	.+14     	; 0x123a <adcConfig+0x6c>
    122c:	24 60       	ori	r18, 0x04	; 4
    122e:	05 c0       	rjmp	.+10     	; 0x123a <adcConfig+0x6c>
    1230:	25 60       	ori	r18, 0x05	; 5
    1232:	03 c0       	rjmp	.+6      	; 0x123a <adcConfig+0x6c>
    1234:	26 60       	ori	r18, 0x06	; 6
    1236:	01 c0       	rjmp	.+2      	; 0x123a <adcConfig+0x6c>
    1238:	27 60       	ori	r18, 0x07	; 7
    123a:	20 93 7b 00 	sts	0x007B, r18
    123e:	80 91 7a 00 	lds	r24, 0x007A
    1242:	80 62       	ori	r24, 0x20	; 32
    1244:	80 93 7a 00 	sts	0x007A, r24
    1248:	80 e0       	ldi	r24, 0x00	; 0
    124a:	08 95       	ret
    124c:	87 e0       	ldi	r24, 0x07	; 7
    124e:	08 95       	ret

00001250 <adcSelectChannel>:
    1250:	ec e7       	ldi	r30, 0x7C	; 124
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	90 81       	ld	r25, Z
    1256:	90 7f       	andi	r25, 0xF0	; 240
    1258:	98 2b       	or	r25, r24
    125a:	90 83       	st	Z, r25
    125c:	80 e0       	ldi	r24, 0x00	; 0
    125e:	08 95       	ret

00001260 <adcEnableDigitalInput>:
    1260:	ee e7       	ldi	r30, 0x7E	; 126
    1262:	f0 e0       	ldi	r31, 0x00	; 0
    1264:	90 81       	ld	r25, Z
    1266:	80 95       	com	r24
    1268:	89 23       	and	r24, r25
    126a:	80 83       	st	Z, r24
    126c:	80 e0       	ldi	r24, 0x00	; 0
    126e:	08 95       	ret

00001270 <adcDisableDigitalInput>:
    1270:	ee e7       	ldi	r30, 0x7E	; 126
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	90 81       	ld	r25, Z
    1276:	98 2b       	or	r25, r24
    1278:	90 83       	st	Z, r25
    127a:	80 e0       	ldi	r24, 0x00	; 0
    127c:	08 95       	ret

0000127e <adcDataPresentation>:
    127e:	81 11       	cpse	r24, r1
    1280:	04 c0       	rjmp	.+8      	; 0x128a <adcDataPresentation+0xc>
    1282:	80 91 7c 00 	lds	r24, 0x007C
    1286:	80 62       	ori	r24, 0x20	; 32
    1288:	03 c0       	rjmp	.+6      	; 0x1290 <adcDataPresentation+0x12>
    128a:	80 91 7c 00 	lds	r24, 0x007C
    128e:	8f 7d       	andi	r24, 0xDF	; 223
    1290:	80 93 7c 00 	sts	0x007C, r24
    1294:	80 e0       	ldi	r24, 0x00	; 0
    1296:	08 95       	ret

00001298 <adcEnable>:
    1298:	ea e7       	ldi	r30, 0x7A	; 122
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	80 81       	ld	r24, Z
    129e:	80 68       	ori	r24, 0x80	; 128
    12a0:	80 83       	st	Z, r24
    12a2:	80 e0       	ldi	r24, 0x00	; 0
    12a4:	08 95       	ret

000012a6 <adcDisable>:
    12a6:	ea e7       	ldi	r30, 0x7A	; 122
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	80 81       	ld	r24, Z
    12ac:	8f 77       	andi	r24, 0x7F	; 127
    12ae:	80 83       	st	Z, r24
    12b0:	80 e0       	ldi	r24, 0x00	; 0
    12b2:	08 95       	ret

000012b4 <adcClearInterruptRequest>:
    12b4:	ea e7       	ldi	r30, 0x7A	; 122
    12b6:	f0 e0       	ldi	r31, 0x00	; 0
    12b8:	80 81       	ld	r24, Z
    12ba:	80 61       	ori	r24, 0x10	; 16
    12bc:	80 83       	st	Z, r24
    12be:	80 e0       	ldi	r24, 0x00	; 0
    12c0:	08 95       	ret

000012c2 <adcActivateInterrupt>:
    12c2:	ea e7       	ldi	r30, 0x7A	; 122
    12c4:	f0 e0       	ldi	r31, 0x00	; 0
    12c6:	80 81       	ld	r24, Z
    12c8:	88 60       	ori	r24, 0x08	; 8
    12ca:	80 83       	st	Z, r24
    12cc:	80 e0       	ldi	r24, 0x00	; 0
    12ce:	08 95       	ret

000012d0 <adcDeactivateInterrupt>:
    12d0:	ea e7       	ldi	r30, 0x7A	; 122
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	80 81       	ld	r24, Z
    12d6:	87 7f       	andi	r24, 0xF7	; 247
    12d8:	80 83       	st	Z, r24
    12da:	80 e0       	ldi	r24, 0x00	; 0
    12dc:	08 95       	ret

000012de <adcStartConversion>:
    12de:	ea e7       	ldi	r30, 0x7A	; 122
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	80 81       	ld	r24, Z
    12e4:	80 64       	ori	r24, 0x40	; 64
    12e6:	80 83       	st	Z, r24
    12e8:	80 e0       	ldi	r24, 0x00	; 0
    12ea:	08 95       	ret

000012ec <adcIsBusy>:
    12ec:	80 91 7a 00 	lds	r24, 0x007A
    12f0:	86 fb       	bst	r24, 6
    12f2:	88 27       	eor	r24, r24
    12f4:	80 f9       	bld	r24, 0
    12f6:	08 95       	ret

000012f8 <adcWaitUntilConversionFinish>:
    12f8:	80 91 7a 00 	lds	r24, 0x007A
    12fc:	86 fd       	sbrc	r24, 6
    12fe:	fc cf       	rjmp	.-8      	; 0x12f8 <adcWaitUntilConversionFinish>
    1300:	80 e0       	ldi	r24, 0x00	; 0
    1302:	08 95       	ret

00001304 <usartConfig>:
    1304:	8f 92       	push	r8
    1306:	9f 92       	push	r9
    1308:	af 92       	push	r10
    130a:	bf 92       	push	r11
    130c:	cf 92       	push	r12
    130e:	df 92       	push	r13
    1310:	ef 92       	push	r14
    1312:	ff 92       	push	r15
    1314:	0f 93       	push	r16
    1316:	4a 01       	movw	r8, r20
    1318:	5b 01       	movw	r10, r22
    131a:	9e 2d       	mov	r25, r14
    131c:	30 91 c0 00 	lds	r19, 0x00C0
    1320:	30 91 c1 00 	lds	r19, 0x00C1
    1324:	30 91 c2 00 	lds	r19, 0x00C2
    1328:	9f 3f       	cpi	r25, 0xFF	; 255
    132a:	19 f0       	breq	.+6      	; 0x1332 <usartConfig+0x2e>
    132c:	92 30       	cpi	r25, 0x02	; 2
    132e:	08 f0       	brcs	.+2      	; 0x1332 <usartConfig+0x2e>
    1330:	5f c0       	rjmp	.+190    	; 0x13f0 <usartConfig+0xec>
    1332:	0f 3f       	cpi	r16, 0xFF	; 255
    1334:	19 f0       	breq	.+6      	; 0x133c <usartConfig+0x38>
    1336:	03 30       	cpi	r16, 0x03	; 3
    1338:	08 f0       	brcs	.+2      	; 0x133c <usartConfig+0x38>
    133a:	5c c0       	rjmp	.+184    	; 0x13f4 <usartConfig+0xf0>
    133c:	2f 3f       	cpi	r18, 0xFF	; 255
    133e:	19 f0       	breq	.+6      	; 0x1346 <usartConfig+0x42>
    1340:	25 30       	cpi	r18, 0x05	; 5
    1342:	08 f0       	brcs	.+2      	; 0x1346 <usartConfig+0x42>
    1344:	57 c0       	rjmp	.+174    	; 0x13f4 <usartConfig+0xf0>
    1346:	8f 3f       	cpi	r24, 0xFF	; 255
    1348:	79 f4       	brne	.+30     	; 0x1368 <usartConfig+0x64>
    134a:	80 91 c2 00 	lds	r24, 0x00C2
    134e:	82 95       	swap	r24
    1350:	86 95       	lsr	r24
    1352:	86 95       	lsr	r24
    1354:	83 70       	andi	r24, 0x03	; 3
    1356:	21 f0       	breq	.+8      	; 0x1360 <usartConfig+0x5c>
    1358:	83 30       	cpi	r24, 0x03	; 3
    135a:	e9 f0       	breq	.+58     	; 0x1396 <usartConfig+0x92>
    135c:	80 e0       	ldi	r24, 0x00	; 0
    135e:	04 c0       	rjmp	.+8      	; 0x1368 <usartConfig+0x64>
    1360:	80 91 c0 00 	lds	r24, 0x00C0
    1364:	86 95       	lsr	r24
    1366:	81 70       	andi	r24, 0x01	; 1
    1368:	9f ef       	ldi	r25, 0xFF	; 255
    136a:	89 16       	cp	r8, r25
    136c:	99 06       	cpc	r9, r25
    136e:	a9 06       	cpc	r10, r25
    1370:	b9 06       	cpc	r11, r25
    1372:	09 f4       	brne	.+2      	; 0x1376 <usartConfig+0x72>
    1374:	41 c0       	rjmp	.+130    	; 0x13f8 <usartConfig+0xf4>
    1376:	81 30       	cpi	r24, 0x01	; 1
    1378:	49 f0       	breq	.+18     	; 0x138c <usartConfig+0x88>
    137a:	18 f0       	brcs	.+6      	; 0x1382 <usartConfig+0x7e>
    137c:	84 30       	cpi	r24, 0x04	; 4
    137e:	89 f0       	breq	.+34     	; 0x13a2 <usartConfig+0x9e>
    1380:	22 c0       	rjmp	.+68     	; 0x13c6 <usartConfig+0xc2>
    1382:	60 e4       	ldi	r22, 0x40	; 64
    1384:	72 e4       	ldi	r23, 0x42	; 66
    1386:	8f e0       	ldi	r24, 0x0F	; 15
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	0f c0       	rjmp	.+30     	; 0x13aa <usartConfig+0xa6>
    138c:	60 e8       	ldi	r22, 0x80	; 128
    138e:	74 e8       	ldi	r23, 0x84	; 132
    1390:	8e e1       	ldi	r24, 0x1E	; 30
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	0a c0       	rjmp	.+20     	; 0x13aa <usartConfig+0xa6>
    1396:	8f ef       	ldi	r24, 0xFF	; 255
    1398:	88 16       	cp	r8, r24
    139a:	98 06       	cpc	r9, r24
    139c:	a8 06       	cpc	r10, r24
    139e:	b8 06       	cpc	r11, r24
    13a0:	59 f1       	breq	.+86     	; 0x13f8 <usartConfig+0xf4>
    13a2:	60 e0       	ldi	r22, 0x00	; 0
    13a4:	72 e1       	ldi	r23, 0x12	; 18
    13a6:	8a e7       	ldi	r24, 0x7A	; 122
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	a5 01       	movw	r20, r10
    13ac:	94 01       	movw	r18, r8
    13ae:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <__udivmodsi4>
    13b2:	21 50       	subi	r18, 0x01	; 1
    13b4:	31 09       	sbc	r19, r1
    13b6:	41 09       	sbc	r20, r1
    13b8:	51 09       	sbc	r21, r1
    13ba:	49 01       	movw	r8, r18
    13bc:	5a 01       	movw	r10, r20
    13be:	c1 2c       	mov	r12, r1
    13c0:	d1 2c       	mov	r13, r1
    13c2:	76 01       	movw	r14, r12
    13c4:	08 c0       	rjmp	.+16     	; 0x13d6 <usartConfig+0xd2>
    13c6:	81 2c       	mov	r8, r1
    13c8:	91 2c       	mov	r9, r1
    13ca:	a1 2c       	mov	r10, r1
    13cc:	b1 2c       	mov	r11, r1
    13ce:	c1 2c       	mov	r12, r1
    13d0:	d1 2c       	mov	r13, r1
    13d2:	e1 2c       	mov	r14, r1
    13d4:	f1 2c       	mov	r15, r1
    13d6:	94 01       	movw	r18, r8
    13d8:	a5 01       	movw	r20, r10
    13da:	b6 01       	movw	r22, r12
    13dc:	c7 01       	movw	r24, r14
    13de:	08 e0       	ldi	r16, 0x08	; 8
    13e0:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <__lshrdi3>
    13e4:	2f 70       	andi	r18, 0x0F	; 15
    13e6:	20 93 c5 00 	sts	0x00C5, r18
    13ea:	80 92 c4 00 	sts	0x00C4, r8
    13ee:	04 c0       	rjmp	.+8      	; 0x13f8 <usartConfig+0xf4>
    13f0:	87 e0       	ldi	r24, 0x07	; 7
    13f2:	03 c0       	rjmp	.+6      	; 0x13fa <usartConfig+0xf6>
    13f4:	85 e0       	ldi	r24, 0x05	; 5
    13f6:	01 c0       	rjmp	.+2      	; 0x13fa <usartConfig+0xf6>
    13f8:	80 e0       	ldi	r24, 0x00	; 0
    13fa:	0f 91       	pop	r16
    13fc:	ff 90       	pop	r15
    13fe:	ef 90       	pop	r14
    1400:	df 90       	pop	r13
    1402:	cf 90       	pop	r12
    1404:	bf 90       	pop	r11
    1406:	af 90       	pop	r10
    1408:	9f 90       	pop	r9
    140a:	8f 90       	pop	r8
    140c:	08 95       	ret

0000140e <usartEnableReceiver>:
    140e:	e1 ec       	ldi	r30, 0xC1	; 193
    1410:	f0 e0       	ldi	r31, 0x00	; 0
    1412:	80 81       	ld	r24, Z
    1414:	80 61       	ori	r24, 0x10	; 16
    1416:	80 83       	st	Z, r24
    1418:	80 e0       	ldi	r24, 0x00	; 0
    141a:	08 95       	ret

0000141c <usartDisableReceiver>:
    141c:	e1 ec       	ldi	r30, 0xC1	; 193
    141e:	f0 e0       	ldi	r31, 0x00	; 0
    1420:	80 81       	ld	r24, Z
    1422:	8f 7e       	andi	r24, 0xEF	; 239
    1424:	80 83       	st	Z, r24
    1426:	80 e0       	ldi	r24, 0x00	; 0
    1428:	08 95       	ret

0000142a <usartEnableTransmitter>:
    142a:	e1 ec       	ldi	r30, 0xC1	; 193
    142c:	f0 e0       	ldi	r31, 0x00	; 0
    142e:	80 81       	ld	r24, Z
    1430:	88 60       	ori	r24, 0x08	; 8
    1432:	80 83       	st	Z, r24
    1434:	80 e0       	ldi	r24, 0x00	; 0
    1436:	08 95       	ret

00001438 <usartDisableTransmitter>:
    1438:	e1 ec       	ldi	r30, 0xC1	; 193
    143a:	f0 e0       	ldi	r31, 0x00	; 0
    143c:	80 81       	ld	r24, Z
    143e:	87 7f       	andi	r24, 0xF7	; 247
    1440:	80 83       	st	Z, r24
    1442:	80 e0       	ldi	r24, 0x00	; 0
    1444:	08 95       	ret

00001446 <usartActivateReceptionCompleteInterrupt>:
    1446:	e1 ec       	ldi	r30, 0xC1	; 193
    1448:	f0 e0       	ldi	r31, 0x00	; 0
    144a:	80 81       	ld	r24, Z
    144c:	80 68       	ori	r24, 0x80	; 128
    144e:	80 83       	st	Z, r24
    1450:	80 e0       	ldi	r24, 0x00	; 0
    1452:	08 95       	ret

00001454 <usartDeactivateReceptionCompleteInterrupt>:
    1454:	e1 ec       	ldi	r30, 0xC1	; 193
    1456:	f0 e0       	ldi	r31, 0x00	; 0
    1458:	80 81       	ld	r24, Z
    145a:	8f 77       	andi	r24, 0x7F	; 127
    145c:	80 83       	st	Z, r24
    145e:	80 e0       	ldi	r24, 0x00	; 0
    1460:	08 95       	ret

00001462 <usartActivateTransmissionCompleteInterrupt>:
    1462:	e1 ec       	ldi	r30, 0xC1	; 193
    1464:	f0 e0       	ldi	r31, 0x00	; 0
    1466:	80 81       	ld	r24, Z
    1468:	80 64       	ori	r24, 0x40	; 64
    146a:	80 83       	st	Z, r24
    146c:	80 e0       	ldi	r24, 0x00	; 0
    146e:	08 95       	ret

00001470 <usartDeactivateTransmissionCompleteInterrupt>:
    1470:	e1 ec       	ldi	r30, 0xC1	; 193
    1472:	f0 e0       	ldi	r31, 0x00	; 0
    1474:	80 81       	ld	r24, Z
    1476:	8f 7b       	andi	r24, 0xBF	; 191
    1478:	80 83       	st	Z, r24
    147a:	80 e0       	ldi	r24, 0x00	; 0
    147c:	08 95       	ret

0000147e <usartActivateBufferEmptyInterrupt>:
    147e:	e1 ec       	ldi	r30, 0xC1	; 193
    1480:	f0 e0       	ldi	r31, 0x00	; 0
    1482:	80 81       	ld	r24, Z
    1484:	80 62       	ori	r24, 0x20	; 32
    1486:	80 83       	st	Z, r24
    1488:	80 e0       	ldi	r24, 0x00	; 0
    148a:	08 95       	ret

0000148c <usartDeactivateBufferEmptyInterrupt>:
    148c:	e1 ec       	ldi	r30, 0xC1	; 193
    148e:	f0 e0       	ldi	r31, 0x00	; 0
    1490:	80 81       	ld	r24, Z
    1492:	8f 7d       	andi	r24, 0xDF	; 223
    1494:	80 83       	st	Z, r24
    1496:	80 e0       	ldi	r24, 0x00	; 0
    1498:	08 95       	ret

0000149a <usartStdio>:
    149a:	87 e0       	ldi	r24, 0x07	; 7
    149c:	91 e0       	ldi	r25, 0x01	; 1
    149e:	90 93 78 01 	sts	0x0178, r25
    14a2:	80 93 77 01 	sts	0x0177, r24
    14a6:	90 93 76 01 	sts	0x0176, r25
    14aa:	80 93 75 01 	sts	0x0175, r24
    14ae:	90 93 74 01 	sts	0x0174, r25
    14b2:	80 93 73 01 	sts	0x0173, r24
    14b6:	80 e0       	ldi	r24, 0x00	; 0
    14b8:	08 95       	ret

000014ba <usartIsReceptionComplete>:
    14ba:	80 91 c0 00 	lds	r24, 0x00C0
    14be:	88 1f       	adc	r24, r24
    14c0:	88 27       	eor	r24, r24
    14c2:	88 1f       	adc	r24, r24
    14c4:	08 95       	ret

000014c6 <usartIsTransmissionComplete>:
    14c6:	80 91 c0 00 	lds	r24, 0x00C0
    14ca:	86 fb       	bst	r24, 6
    14cc:	88 27       	eor	r24, r24
    14ce:	80 f9       	bld	r24, 0
    14d0:	08 95       	ret

000014d2 <usartIsBufferEmpty>:
    14d2:	80 91 c0 00 	lds	r24, 0x00C0
    14d6:	85 fb       	bst	r24, 5
    14d8:	88 27       	eor	r24, r24
    14da:	80 f9       	bld	r24, 0
    14dc:	08 95       	ret

000014de <usartTransmitStd>:
    14de:	cf 93       	push	r28
    14e0:	c8 2f       	mov	r28, r24
    14e2:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <usartIsBufferEmpty>
    14e6:	88 23       	and	r24, r24
    14e8:	e1 f3       	breq	.-8      	; 0x14e2 <usartTransmitStd+0x4>
    14ea:	c0 93 c6 00 	sts	0x00C6, r28
    14ee:	80 e0       	ldi	r24, 0x00	; 0
    14f0:	cf 91       	pop	r28
    14f2:	08 95       	ret

000014f4 <usartCheckError>:
    14f4:	80 91 c0 00 	lds	r24, 0x00C0
    14f8:	84 fd       	sbrc	r24, 4
    14fa:	02 c0       	rjmp	.+4      	; 0x1500 <usartCheckError+0xc>
    14fc:	80 e0       	ldi	r24, 0x00	; 0
    14fe:	01 c0       	rjmp	.+2      	; 0x1502 <usartCheckError+0xe>
    1500:	82 e0       	ldi	r24, 0x02	; 2
    1502:	90 91 c0 00 	lds	r25, 0x00C0
    1506:	93 fd       	sbrc	r25, 3
    1508:	84 60       	ori	r24, 0x04	; 4
    150a:	90 91 c0 00 	lds	r25, 0x00C0
    150e:	92 ff       	sbrs	r25, 2
    1510:	02 c0       	rjmp	.+4      	; 0x1516 <usartCheckError+0x22>
    1512:	88 60       	ori	r24, 0x08	; 8
    1514:	08 95       	ret
    1516:	81 11       	cpse	r24, r1
    1518:	01 c0       	rjmp	.+2      	; 0x151c <usartCheckError+0x28>
    151a:	81 e0       	ldi	r24, 0x01	; 1
    151c:	08 95       	ret

0000151e <usartTransmit>:
    151e:	cf 93       	push	r28
    1520:	c8 2f       	mov	r28, r24
    1522:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <usartIsBufferEmpty>
    1526:	88 23       	and	r24, r24
    1528:	e1 f3       	breq	.-8      	; 0x1522 <usartTransmit+0x4>
    152a:	c0 93 c6 00 	sts	0x00C6, r28
    152e:	80 e0       	ldi	r24, 0x00	; 0
    1530:	cf 91       	pop	r28
    1532:	08 95       	ret

00001534 <usartTransmit9bits>:
    1534:	cf 93       	push	r28
    1536:	df 93       	push	r29
    1538:	ec 01       	movw	r28, r24
    153a:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <usartIsBufferEmpty>
    153e:	88 23       	and	r24, r24
    1540:	e1 f3       	breq	.-8      	; 0x153a <usartTransmit9bits+0x6>
    1542:	ce 01       	movw	r24, r28
    1544:	88 27       	eor	r24, r24
    1546:	91 70       	andi	r25, 0x01	; 1
    1548:	80 91 c1 00 	lds	r24, 0x00C1
    154c:	99 23       	and	r25, r25
    154e:	11 f0       	breq	.+4      	; 0x1554 <usartTransmit9bits+0x20>
    1550:	81 60       	ori	r24, 0x01	; 1
    1552:	01 c0       	rjmp	.+2      	; 0x1556 <usartTransmit9bits+0x22>
    1554:	8e 7f       	andi	r24, 0xFE	; 254
    1556:	80 93 c1 00 	sts	0x00C1, r24
    155a:	c0 93 c6 00 	sts	0x00C6, r28
    155e:	80 e0       	ldi	r24, 0x00	; 0
    1560:	df 91       	pop	r29
    1562:	cf 91       	pop	r28
    1564:	08 95       	ret

00001566 <usartReceive>:
    1566:	80 91 c0 00 	lds	r24, 0x00C0
    156a:	87 ff       	sbrs	r24, 7
    156c:	fc cf       	rjmp	.-8      	; 0x1566 <usartReceive>
    156e:	80 91 c0 00 	lds	r24, 0x00C0
    1572:	80 91 c6 00 	lds	r24, 0x00C6
    1576:	08 95       	ret

00001578 <usartReceive9bits>:
    1578:	80 91 c0 00 	lds	r24, 0x00C0
    157c:	87 ff       	sbrs	r24, 7
    157e:	fc cf       	rjmp	.-8      	; 0x1578 <usartReceive9bits>
    1580:	80 91 c0 00 	lds	r24, 0x00C0
    1584:	80 91 c1 00 	lds	r24, 0x00C1
    1588:	20 91 c6 00 	lds	r18, 0x00C6
    158c:	82 70       	andi	r24, 0x02	; 2
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	96 95       	lsr	r25
    1592:	98 2f       	mov	r25, r24
    1594:	88 27       	eor	r24, r24
    1596:	97 95       	ror	r25
    1598:	87 95       	ror	r24
    159a:	82 2b       	or	r24, r18
    159c:	08 95       	ret

0000159e <usartClearReceptionBuffer>:
    159e:	80 91 c0 00 	lds	r24, 0x00C0
    15a2:	87 ff       	sbrs	r24, 7
    15a4:	03 c0       	rjmp	.+6      	; 0x15ac <usartClearReceptionBuffer+0xe>
    15a6:	80 91 c6 00 	lds	r24, 0x00C6
    15aa:	f9 cf       	rjmp	.-14     	; 0x159e <usartClearReceptionBuffer>
    15ac:	08 95       	ret

000015ae <usartAddDataToReceiverBuffer>:
    15ae:	ff 92       	push	r15
    15b0:	0f 93       	push	r16
    15b2:	1f 93       	push	r17
    15b4:	cf 93       	push	r28
    15b6:	df 93       	push	r29
    15b8:	f8 2e       	mov	r15, r24
    15ba:	c0 91 70 01 	lds	r28, 0x0170
    15be:	d0 e0       	ldi	r29, 0x00	; 0
    15c0:	be 01       	movw	r22, r28
    15c2:	6f 5f       	subi	r22, 0xFF	; 255
    15c4:	7f 4f       	sbci	r23, 0xFF	; 255
    15c6:	88 27       	eor	r24, r24
    15c8:	77 fd       	sbrc	r23, 7
    15ca:	80 95       	com	r24
    15cc:	98 2f       	mov	r25, r24
    15ce:	22 e3       	ldi	r18, 0x32	; 50
    15d0:	30 e0       	ldi	r19, 0x00	; 0
    15d2:	40 e0       	ldi	r20, 0x00	; 0
    15d4:	50 e0       	ldi	r21, 0x00	; 0
    15d6:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <__udivmodsi4>
    15da:	00 91 72 01 	lds	r16, 0x0172
    15de:	10 e0       	ldi	r17, 0x00	; 0
    15e0:	20 e0       	ldi	r18, 0x00	; 0
    15e2:	30 e0       	ldi	r19, 0x00	; 0
    15e4:	60 17       	cp	r22, r16
    15e6:	71 07       	cpc	r23, r17
    15e8:	82 07       	cpc	r24, r18
    15ea:	93 07       	cpc	r25, r19
    15ec:	51 f0       	breq	.+20     	; 0x1602 <usartAddDataToReceiverBuffer+0x54>
    15ee:	c2 5c       	subi	r28, 0xC2	; 194
    15f0:	de 4f       	sbci	r29, 0xFE	; 254
    15f2:	f8 82       	st	Y, r15
    15f4:	60 93 70 01 	sts	0x0170, r22
    15f8:	80 91 71 01 	lds	r24, 0x0171
    15fc:	8f 5f       	subi	r24, 0xFF	; 255
    15fe:	80 93 71 01 	sts	0x0171, r24
    1602:	df 91       	pop	r29
    1604:	cf 91       	pop	r28
    1606:	1f 91       	pop	r17
    1608:	0f 91       	pop	r16
    160a:	ff 90       	pop	r15
    160c:	08 95       	ret

0000160e <usartGetDataFromReceiverBuffer>:
    160e:	cf 93       	push	r28
    1610:	df 93       	push	r29
    1612:	60 91 72 01 	lds	r22, 0x0172
    1616:	70 e0       	ldi	r23, 0x00	; 0
    1618:	fb 01       	movw	r30, r22
    161a:	e2 5c       	subi	r30, 0xC2	; 194
    161c:	fe 4f       	sbci	r31, 0xFE	; 254
    161e:	d0 81       	ld	r29, Z
    1620:	c0 91 71 01 	lds	r28, 0x0171
    1624:	cc 23       	and	r28, r28
    1626:	89 f0       	breq	.+34     	; 0x164a <usartGetDataFromReceiverBuffer+0x3c>
    1628:	6f 5f       	subi	r22, 0xFF	; 255
    162a:	7f 4f       	sbci	r23, 0xFF	; 255
    162c:	88 27       	eor	r24, r24
    162e:	77 fd       	sbrc	r23, 7
    1630:	80 95       	com	r24
    1632:	98 2f       	mov	r25, r24
    1634:	22 e3       	ldi	r18, 0x32	; 50
    1636:	30 e0       	ldi	r19, 0x00	; 0
    1638:	40 e0       	ldi	r20, 0x00	; 0
    163a:	50 e0       	ldi	r21, 0x00	; 0
    163c:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <__udivmodsi4>
    1640:	60 93 72 01 	sts	0x0172, r22
    1644:	c1 50       	subi	r28, 0x01	; 1
    1646:	c0 93 71 01 	sts	0x0171, r28
    164a:	8d 2f       	mov	r24, r29
    164c:	df 91       	pop	r29
    164e:	cf 91       	pop	r28
    1650:	08 95       	ret

00001652 <usartIsReceiverBufferEmpty>:
    1652:	81 e0       	ldi	r24, 0x01	; 1
    1654:	90 91 71 01 	lds	r25, 0x0171
    1658:	91 11       	cpse	r25, r1
    165a:	80 e0       	ldi	r24, 0x00	; 0
    165c:	08 95       	ret

0000165e <usartGetCurrentBaudRate>:
    165e:	60 e0       	ldi	r22, 0x00	; 0
    1660:	70 e0       	ldi	r23, 0x00	; 0
    1662:	cb 01       	movw	r24, r22
    1664:	08 95       	ret

00001666 <spiInit>:
    1666:	08 95       	ret

00001668 <spiMasterTransmit>:
    1668:	8e bd       	out	0x2e, r24	; 46
    166a:	0d b4       	in	r0, 0x2d	; 45
    166c:	07 fc       	sbrc	r0, 7
    166e:	fd cf       	rjmp	.-6      	; 0x166a <spiMasterTransmit+0x2>
    1670:	8e b5       	in	r24, 0x2e	; 46
    1672:	08 95       	ret

00001674 <spiSlaveTransmit>:
    1674:	0d b4       	in	r0, 0x2d	; 45
    1676:	07 fc       	sbrc	r0, 7
    1678:	fd cf       	rjmp	.-6      	; 0x1674 <spiSlaveTransmit>
    167a:	8e b5       	in	r24, 0x2e	; 46
    167c:	08 95       	ret

0000167e <main>:
	+ (str[2]-48)*10 + str[3]-48);
	return value;
}

int main(void)
{
    167e:	cf 93       	push	r28
    1680:	df 93       	push	r29
    1682:	cd b7       	in	r28, 0x3d	; 61
    1684:	de b7       	in	r29, 0x3e	; 62
    1686:	ce 59       	subi	r28, 0x9E	; 158
    1688:	d1 09       	sbc	r29, r1
    168a:	0f b6       	in	r0, 0x3f	; 63
    168c:	f8 94       	cli
    168e:	de bf       	out	0x3e, r29	; 62
    1690:	0f be       	out	0x3f, r0	; 63
    1692:	cd bf       	out	0x3d, r28	; 61
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1694:	2f ef       	ldi	r18, 0xFF	; 255
    1696:	33 ed       	ldi	r19, 0xD3	; 211
    1698:	80 e3       	ldi	r24, 0x30	; 48
    169a:	21 50       	subi	r18, 0x01	; 1
    169c:	30 40       	sbci	r19, 0x00	; 0
    169e:	80 40       	sbci	r24, 0x00	; 0
    16a0:	e1 f7       	brne	.-8      	; 0x169a <main+0x1c>
    16a2:	00 c0       	rjmp	.+0      	; 0x16a4 <main+0x26>
    16a4:	00 00       	nop
	_delay_ms(1000);
	flags.mode = POT_MODE;
    16a6:	80 91 36 01 	lds	r24, 0x0136
    16aa:	83 7f       	andi	r24, 0xF3	; 243
    16ac:	88 60       	ori	r24, 0x08	; 8
    16ae:	80 93 36 01 	sts	0x0136, r24
	status.freq = 1000;
    16b2:	88 ee       	ldi	r24, 0xE8	; 232
    16b4:	93 e0       	ldi	r25, 0x03	; 3
    16b6:	90 93 38 01 	sts	0x0138, r25
    16ba:	80 93 37 01 	sts	0x0137, r24
	status.on = 0;			//indica que o sistema inicia sem acionar o motor
    16be:	10 92 3d 01 	sts	0x013D, r1
	status.dc = 0;
    16c2:	10 92 3a 01 	sts	0x013A, r1

	// VARIAVEIS LOCAIS;
	char frameData[50];
	uint8 frameIndex = 0;
	char recebido[100] = "";
    16c6:	19 82       	std	Y+1, r1	; 0x01
    16c8:	1a 82       	std	Y+2, r1	; 0x02
    16ca:	1b 82       	std	Y+3, r1	; 0x03
    16cc:	1c 82       	std	Y+4, r1	; 0x04
    16ce:	fe 01       	movw	r30, r28
    16d0:	35 96       	adiw	r30, 0x05	; 5
    16d2:	80 e6       	ldi	r24, 0x60	; 96
    16d4:	df 01       	movw	r26, r30
    16d6:	1d 92       	st	X+, r1
    16d8:	8a 95       	dec	r24
    16da:	e9 f7       	brne	.-6      	; 0x16d6 <main+0x58>
	char msgToSend[8] = "";
    16dc:	c9 56       	subi	r28, 0x69	; 105
    16de:	df 4f       	sbci	r29, 0xFF	; 255
    16e0:	18 82       	st	Y, r1
    16e2:	19 82       	std	Y+1, r1	; 0x01
    16e4:	1a 82       	std	Y+2, r1	; 0x02
    16e6:	1b 82       	std	Y+3, r1	; 0x03
    16e8:	c7 59       	subi	r28, 0x97	; 151
    16ea:	d0 40       	sbci	r29, 0x00	; 0
    16ec:	c5 56       	subi	r28, 0x65	; 101
    16ee:	df 4f       	sbci	r29, 0xFF	; 255
    16f0:	18 82       	st	Y, r1
    16f2:	19 82       	std	Y+1, r1	; 0x01
    16f4:	1a 82       	std	Y+2, r1	; 0x02
    16f6:	1b 82       	std	Y+3, r1	; 0x03
    16f8:	cb 59       	subi	r28, 0x9B	; 155
    16fa:	d0 40       	sbci	r29, 0x00	; 0
	uint8 pos =  0;
	
	// CONFIGURA ADC
	clrBit(DDRC,POT_BIT);		//SETA O PINO DO ADC COMO ENTRADA
    16fc:	39 98       	cbi	0x07, 1	; 7
	adcConfig(ADC_MODE_SINGLE_CONVERSION, ADC_REFRENCE_POWER_SUPPLY , ADC_PRESCALER_128);
    16fe:	47 e0       	ldi	r20, 0x07	; 7
    1700:	61 e0       	ldi	r22, 0x01	; 1
    1702:	80 e0       	ldi	r24, 0x00	; 0
    1704:	0e 94 e7 08 	call	0x11ce	; 0x11ce <adcConfig>
	adcSelectChannel(POT_CHANNEL);
    1708:	81 e0       	ldi	r24, 0x01	; 1
    170a:	0e 94 28 09 	call	0x1250	; 0x1250 <adcSelectChannel>
	adcClearInterruptRequest();
    170e:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <adcClearInterruptRequest>
	adcActivateInterrupt();
    1712:	0e 94 61 09 	call	0x12c2	; 0x12c2 <adcActivateInterrupt>
	adcEnable();
    1716:	0e 94 4c 09 	call	0x1298	; 0x1298 <adcEnable>
	adcStartConversion();
    171a:	0e 94 6f 09 	call	0x12de	; 0x12de <adcStartConversion>
	
	// CONFIGURA PWM
	timer1Config(TIMER_B_MODE_CTC, TIMER_A_PRESCALER_64);
    171e:	63 e0       	ldi	r22, 0x03	; 3
    1720:	84 e0       	ldi	r24, 0x04	; 4
    1722:	0e 94 9e 07 	call	0xf3c	; 0xf3c <timer1Config>
	timer1ClearCompareBInterruptRequest();									
    1726:	0e 94 09 08 	call	0x1012	; 0x1012 <timer1ClearCompareBInterruptRequest>
	timer1ClearCompareAInterruptRequest();
    172a:	0e 94 f8 07 	call	0xff0	; 0xff0 <timer1ClearCompareAInterruptRequest>
	timer1ActivateCompareBInterrupt();									//ativa a interrupcao do compA
    172e:	0e 94 fb 07 	call	0xff6	; 0xff6 <timer1ActivateCompareBInterrupt>
	timer1ActivateCompareAInterrupt();									//ativa a interrupcao do compB
    1732:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <timer1ActivateCompareAInterrupt>
	timer1SetCompareAValue((F_CPU/64)/status.freq);							//valor do comparador A,  define a frequencia
    1736:	20 91 37 01 	lds	r18, 0x0137
    173a:	30 91 38 01 	lds	r19, 0x0138
    173e:	40 e0       	ldi	r20, 0x00	; 0
    1740:	50 e0       	ldi	r21, 0x00	; 0
    1742:	60 e9       	ldi	r22, 0x90	; 144
    1744:	70 ed       	ldi	r23, 0xD0	; 208
    1746:	83 e0       	ldi	r24, 0x03	; 3
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <__udivmodsi4>
    174e:	c9 01       	movw	r24, r18
    1750:	0e 94 39 08 	call	0x1072	; 0x1072 <timer1SetCompareAValue>
	timer1SetCompareBValue((status.dc * (timer1GetCompareAValue()))/100);		//valor do comparador B,  define Duty Cicle
    1754:	00 91 3a 01 	lds	r16, 0x013A
    1758:	10 e0       	ldi	r17, 0x00	; 0
    175a:	0e 94 42 08 	call	0x1084	; 0x1084 <timer1GetCompareAValue>
    175e:	9c 01       	movw	r18, r24
    1760:	20 9f       	mul	r18, r16
    1762:	c0 01       	movw	r24, r0
    1764:	21 9f       	mul	r18, r17
    1766:	90 0d       	add	r25, r0
    1768:	30 9f       	mul	r19, r16
    176a:	90 0d       	add	r25, r0
    176c:	11 24       	eor	r1, r1
    176e:	64 e6       	ldi	r22, 0x64	; 100
    1770:	70 e0       	ldi	r23, 0x00	; 0
    1772:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <__udivmodhi4>
    1776:	cb 01       	movw	r24, r22
    1778:	0e 94 47 08 	call	0x108e	; 0x108e <timer1SetCompareBValue>

	// CONFIGURA A INTERRUPÇÃO DE CONTROLE(60Hz)
	timer0Config(TIMER_A_MODE_NORMAL, TIMER_A_PRESCALER_1024);			
    177c:	65 e0       	ldi	r22, 0x05	; 5
    177e:	80 e0       	ldi	r24, 0x00	; 0
    1780:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <timer0Config>
	timer0ClearOverflowInterruptRequest();								//limpa a interrupcao de OVF
    1784:	0e 94 6c 07 	call	0xed8	; 0xed8 <timer0ClearOverflowInterruptRequest>
	timer0ActivateOverflowInterrupt();
    1788:	0e 94 60 07 	call	0xec0	; 0xec0 <timer0ActivateOverflowInterrupt>

	//se estiver no modo Serial configura a usart							
	if (flags.mode == SERIAL_MODE)
    178c:	80 91 36 01 	lds	r24, 0x0136
    1790:	8c 70       	andi	r24, 0x0C	; 12
    1792:	84 30       	cpi	r24, 0x04	; 4
    1794:	81 f4       	brne	.+32     	; 0x17b6 <main+0x138>
	{
		// CONFIGURA A USART
		usartConfig(USART_MODE_ASYNCHRONOUS,USART_BAUD_9600 ,USART_DATA_BITS_8,USART_PARITY_NONE,USART_STOP_BIT_SINGLE);
    1796:	e1 2c       	mov	r14, r1
    1798:	00 e0       	ldi	r16, 0x00	; 0
    179a:	23 e0       	ldi	r18, 0x03	; 3
    179c:	40 e8       	ldi	r20, 0x80	; 128
    179e:	55 e2       	ldi	r21, 0x25	; 37
    17a0:	60 e0       	ldi	r22, 0x00	; 0
    17a2:	70 e0       	ldi	r23, 0x00	; 0
    17a4:	80 e0       	ldi	r24, 0x00	; 0
    17a6:	0e 94 82 09 	call	0x1304	; 0x1304 <usartConfig>
		usartEnableReceiver();
    17aa:	0e 94 07 0a 	call	0x140e	; 0x140e <usartEnableReceiver>
		usartEnableTransmitter();
    17ae:	0e 94 15 0a 	call	0x142a	; 0x142a <usartEnableTransmitter>
		usartActivateReceptionCompleteInterrupt();
    17b2:	0e 94 23 0a 	call	0x1446	; 0x1446 <usartActivateReceptionCompleteInterrupt>
	}

	sei();
    17b6:	78 94       	sei
	
	setBit(PWM_DDR,PWM_BIT);			//define o pino do pwm como saída
    17b8:	21 9a       	sbi	0x04, 1	; 4

	setBit(ON_PORT,ON_BIT);				//habilita o pull-up da chave on
    17ba:	5d 9a       	sbi	0x0b, 5	; 11
	setBit(DMS_PORT,DMS_BIT);			//habilita o pull-up da chave dms
    17bc:	5c 9a       	sbi	0x0b, 4	; 11

	//configura o buzzer e da sinal de alerta de ligação
	setBit(BUZZER_DDR,BUZZER_BIT);			
    17be:	3c 9a       	sbi	0x07, 4	; 7
	setBit(BUZZER_PORT,BUZZER_BIT);
    17c0:	44 9a       	sbi	0x08, 4	; 8
    17c2:	3f ef       	ldi	r19, 0xFF	; 255
    17c4:	83 ed       	ldi	r24, 0xD3	; 211
    17c6:	90 e3       	ldi	r25, 0x30	; 48
    17c8:	31 50       	subi	r19, 0x01	; 1
    17ca:	80 40       	sbci	r24, 0x00	; 0
    17cc:	90 40       	sbci	r25, 0x00	; 0
    17ce:	e1 f7       	brne	.-8      	; 0x17c8 <main+0x14a>
    17d0:	00 c0       	rjmp	.+0      	; 0x17d2 <main+0x154>
    17d2:	00 00       	nop
	_delay_ms(1000);
	clrBit(BUZZER_PORT,BUZZER_BIT);
    17d4:	44 98       	cbi	0x08, 4	; 8
	status.on = 0;			//indica que o sistema inicia sem acionar o motor
	status.dc = 0;

	// VARIAVEIS LOCAIS;
	char frameData[50];
	uint8 frameIndex = 0;
    17d6:	81 2c       	mov	r8, r1
	else
		if(freqReq > MAX_FREQ)
			status.freq = MAX_FREQ;
		else
			status.freq = freqReq;
	timer1SetCompareAValue((F_CPU/1024)/status.freq);
    17d8:	09 e0       	ldi	r16, 0x09	; 9
    17da:	1d e3       	ldi	r17, 0x3D	; 61
	timer1SetCompareBValue((status.dc * (timer1GetCompareAValue()))/100);//bota o dc
    17dc:	24 e6       	ldi	r18, 0x64	; 100
    17de:	e2 2e       	mov	r14, r18
    17e0:	f1 2c       	mov	r15, r1
	setBit(PORTD,PD0);			
	*/

    while(1)
    {
    	if(flags.mode == SERIAL_MODE)
    17e2:	80 91 36 01 	lds	r24, 0x0136
    17e6:	8c 70       	andi	r24, 0x0C	; 12
    17e8:	84 30       	cpi	r24, 0x04	; 4
    17ea:	09 f0       	breq	.+2      	; 0x17ee <main+0x170>
    17ec:	ff cf       	rjmp	.-2      	; 0x17ec <main+0x16e>
{
	if(freqReq < MIN_FREQ)
		status.freq = MIN_FREQ;
	else
		if(freqReq > MAX_FREQ)
			status.freq = MAX_FREQ;
    17ee:	88 ee       	ldi	r24, 0xE8	; 232
    17f0:	c8 2e       	mov	r12, r24
    17f2:	83 e0       	ldi	r24, 0x03	; 3
    17f4:	d8 2e       	mov	r13, r24
}

inline void seta_freq(uint16 freqReq)		//função para definição da frequencia do PWM
{
	if(freqReq < MIN_FREQ)
		status.freq = MIN_FREQ;
    17f6:	94 ef       	ldi	r25, 0xF4	; 244
    17f8:	a9 2e       	mov	r10, r25
    17fa:	bb 24       	eor	r11, r11
    17fc:	b3 94       	inc	r11

    while(1)
    {
    	if(flags.mode == SERIAL_MODE)
    	{
	    	while(!usartIsReceiverBufferEmpty())
    17fe:	0e 94 29 0b 	call	0x1652	; 0x1652 <usartIsReceiverBufferEmpty>
    1802:	81 11       	cpse	r24, r1
    1804:	ee cf       	rjmp	.-36     	; 0x17e2 <main+0x164>
	    	{
				frameData[frameIndex++] = usartGetDataFromReceiverBuffer();
    1806:	99 24       	eor	r9, r9
    1808:	93 94       	inc	r9
    180a:	98 0c       	add	r9, r8
    180c:	0e 94 07 0b 	call	0x160e	; 0x160e <usartGetDataFromReceiverBuffer>
    1810:	e5 e6       	ldi	r30, 0x65	; 101
    1812:	f0 e0       	ldi	r31, 0x00	; 0
    1814:	ec 0f       	add	r30, r28
    1816:	fd 1f       	adc	r31, r29
    1818:	e8 0d       	add	r30, r8
    181a:	f1 1d       	adc	r31, r1
    181c:	80 83       	st	Z, r24
				if ((frameData[frameIndex-1] == FINALDOPACOTE))
    181e:	e5 e6       	ldi	r30, 0x65	; 101
    1820:	f0 e0       	ldi	r31, 0x00	; 0
    1822:	ec 0f       	add	r30, r28
    1824:	fd 1f       	adc	r31, r29
    1826:	e9 0d       	add	r30, r9
    1828:	f1 1d       	adc	r31, r1
    182a:	31 97       	sbiw	r30, 0x01	; 1
    182c:	80 81       	ld	r24, Z
    182e:	8a 32       	cpi	r24, 0x2A	; 42
    1830:	11 f0       	breq	.+4      	; 0x1836 <main+0x1b8>
    {
    	if(flags.mode == SERIAL_MODE)
    	{
	    	while(!usartIsReceiverBufferEmpty())
	    	{
				frameData[frameIndex++] = usartGetDataFromReceiverBuffer();
    1832:	89 2c       	mov	r8, r9
    1834:	e4 cf       	rjmp	.-56     	; 0x17fe <main+0x180>
				if ((frameData[frameIndex-1] == FINALDOPACOTE))
				{//se esta no final da palavra
					if(frameData[0] == INICIODOPACOTE )
    1836:	a6 96       	adiw	r28, 0x26	; 38
    1838:	8f ad       	ldd	r24, Y+63	; 0x3f
    183a:	a6 97       	sbiw	r28, 0x26	; 38
    183c:	80 34       	cpi	r24, 0x40	; 64
    183e:	09 f0       	breq	.+2      	; 0x1842 <main+0x1c4>
    1840:	25 c1       	rjmp	.+586    	; 0x1a8c <main+0x40e>
					{//verifica se o inicio da palavra esta correto
						strcpy(recebido,frameData);
    1842:	be 01       	movw	r22, r28
    1844:	6b 59       	subi	r22, 0x9B	; 155
    1846:	7f 4f       	sbci	r23, 0xFF	; 255
    1848:	ce 01       	movw	r24, r28
    184a:	01 96       	adiw	r24, 0x01	; 1
    184c:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <strcpy>
						pos = (recebido[2]-48) + (recebido[1] - 48)*10;
    1850:	8b 81       	ldd	r24, Y+3	; 0x03
    1852:	80 53       	subi	r24, 0x30	; 48
    1854:	9a 81       	ldd	r25, Y+2	; 0x02
    1856:	99 0f       	add	r25, r25
    1858:	90 56       	subi	r25, 0x60	; 96
    185a:	29 2f       	mov	r18, r25
    185c:	22 0f       	add	r18, r18
    185e:	22 0f       	add	r18, r18
    1860:	29 0f       	add	r18, r25
    1862:	82 0f       	add	r24, r18
						if(frameIndex == GETWORDSIZE)
    1864:	a4 e0       	ldi	r26, 0x04	; 4
    1866:	9a 12       	cpse	r9, r26
    1868:	68 c0       	rjmp	.+208    	; 0x193a <main+0x2bc>
						{
							memcpy( recebido,  (recebido+1), 2);
    186a:	2a 81       	ldd	r18, Y+2	; 0x02
    186c:	3b 81       	ldd	r19, Y+3	; 0x03
    186e:	3a 83       	std	Y+2, r19	; 0x02
    1870:	29 83       	std	Y+1, r18	; 0x01
							recebido[2] = '\0';//isola o id
    1872:	1b 82       	std	Y+3, r1	; 0x03
							switch (pos)
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	8e 30       	cpi	r24, 0x0E	; 14
    1878:	91 05       	cpc	r25, r1
    187a:	08 f0       	brcs	.+2      	; 0x187e <main+0x200>
    187c:	44 c0       	rjmp	.+136    	; 0x1906 <main+0x288>
    187e:	fc 01       	movw	r30, r24
    1880:	ec 5c       	subi	r30, 0xCC	; 204
    1882:	ff 4f       	sbci	r31, 0xFF	; 255
    1884:	0c 94 80 0d 	jmp	0x1b00	; 0x1b00 <__tablejump2__>
							{
								case 0:
									strcpy(msgToSend,"OK");
    1888:	65 e1       	ldi	r22, 0x15	; 21
    188a:	71 e0       	ldi	r23, 0x01	; 1
    188c:	3e c0       	rjmp	.+124    	; 0x190a <main+0x28c>
									break;
								case 1:
									uint16ToString4(msgToSend,status.freq);
    188e:	60 91 37 01 	lds	r22, 0x0137
    1892:	70 91 38 01 	lds	r23, 0x0138
    1896:	ce 01       	movw	r24, r28
    1898:	89 56       	subi	r24, 0x69	; 105
    189a:	9f 4f       	sbci	r25, 0xFF	; 255
    189c:	0e 94 c8 00 	call	0x190	; 0x190 <uint16ToString4>
									break;
    18a0:	39 c0       	rjmp	.+114    	; 0x1914 <main+0x296>
								case 2:
									uint8ToString4(msgToSend,maxCurrent);
    18a2:	60 91 06 01 	lds	r22, 0x0106
    18a6:	28 c0       	rjmp	.+80     	; 0x18f8 <main+0x27a>
									break;
								case 3:
									uint8ToString4(msgToSend,maxDC);
    18a8:	60 91 04 01 	lds	r22, 0x0104
    18ac:	25 c0       	rjmp	.+74     	; 0x18f8 <main+0x27a>
									break;
								case 4:
									uint8ToString4(msgToSend,minDC);
    18ae:	60 91 05 01 	lds	r22, 0x0105
    18b2:	22 c0       	rjmp	.+68     	; 0x18f8 <main+0x27a>
									break;
								case 5:
									uint8ToString4(msgToSend,maxDV);
    18b4:	60 91 03 01 	lds	r22, 0x0103
    18b8:	1f c0       	rjmp	.+62     	; 0x18f8 <main+0x27a>
									break;
								case 6 :
									if(flags.on)
    18ba:	80 91 36 01 	lds	r24, 0x0136
    18be:	84 ff       	sbrs	r24, 4
    18c0:	07 c0       	rjmp	.+14     	; 0x18d0 <main+0x252>
										strcpy(msgToSend, "0001");
    18c2:	68 e1       	ldi	r22, 0x18	; 24
    18c4:	71 e0       	ldi	r23, 0x01	; 1
    18c6:	21 c0       	rjmp	.+66     	; 0x190a <main+0x28c>
									else
										strcpy(msgToSend, "0000");
									break;
								case 7:
									if(flags.dms)
    18c8:	80 91 36 01 	lds	r24, 0x0136
    18cc:	85 fd       	sbrc	r24, 5
    18ce:	f9 cf       	rjmp	.-14     	; 0x18c2 <main+0x244>
									break;
								case 6 :
									if(flags.on)
										strcpy(msgToSend, "0001");
									else
										strcpy(msgToSend, "0000");
    18d0:	6d e1       	ldi	r22, 0x1D	; 29
    18d2:	71 e0       	ldi	r23, 0x01	; 1
    18d4:	1a c0       	rjmp	.+52     	; 0x190a <main+0x28c>
										strcpy(msgToSend, "0001");
									else
										strcpy(msgToSend, "0000");
									break;
								case 8:
									uint8ToString4(msgToSend,maxTemp);
    18d6:	60 91 02 01 	lds	r22, 0x0102
    18da:	0e c0       	rjmp	.+28     	; 0x18f8 <main+0x27a>
									break;
								case 9:
									uint8ToString4(msgToSend,minVoltage);
    18dc:	60 91 00 01 	lds	r22, 0x0100
    18e0:	0b c0       	rjmp	.+22     	; 0x18f8 <main+0x27a>
									break;
								case 10:
									uint8ToString4(msgToSend,status.dc);
    18e2:	60 91 3a 01 	lds	r22, 0x013A
    18e6:	08 c0       	rjmp	.+16     	; 0x18f8 <main+0x27a>
									break;
								case 11:
									uint8ToString4(msgToSend,status.temperature);
    18e8:	60 91 3b 01 	lds	r22, 0x013B
    18ec:	05 c0       	rjmp	.+10     	; 0x18f8 <main+0x27a>
									break;
								case 12:
									uint8ToString4(msgToSend,status.current);
    18ee:	60 91 39 01 	lds	r22, 0x0139
    18f2:	02 c0       	rjmp	.+4      	; 0x18f8 <main+0x27a>
									break;
								case 13:
									uint8ToString4(msgToSend,status.voltage);
    18f4:	60 91 3c 01 	lds	r22, 0x013C
    18f8:	70 e0       	ldi	r23, 0x00	; 0
    18fa:	ce 01       	movw	r24, r28
    18fc:	89 56       	subi	r24, 0x69	; 105
    18fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1900:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <uint8ToString4>
									break;
    1904:	07 c0       	rjmp	.+14     	; 0x1914 <main+0x296>
								default:
									strcpy(msgToSend,"ERRO");
    1906:	62 e2       	ldi	r22, 0x22	; 34
    1908:	71 e0       	ldi	r23, 0x01	; 1
    190a:	ce 01       	movw	r24, r28
    190c:	89 56       	subi	r24, 0x69	; 105
    190e:	9f 4f       	sbci	r25, 0xFF	; 255
    1910:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <strcpy>
							}
							strcat(recebido,msgToSend);
    1914:	be 01       	movw	r22, r28
    1916:	69 56       	subi	r22, 0x69	; 105
    1918:	7f 4f       	sbci	r23, 0xFF	; 255
    191a:	ce 01       	movw	r24, r28
    191c:	01 96       	adiw	r24, 0x01	; 1
    191e:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <strcat>
							strcpy(msgToSend,recebido);
    1922:	be 01       	movw	r22, r28
    1924:	6f 5f       	subi	r22, 0xFF	; 255
    1926:	7f 4f       	sbci	r23, 0xFF	; 255
    1928:	ce 01       	movw	r24, r28
    192a:	89 56       	subi	r24, 0x69	; 105
    192c:	9f 4f       	sbci	r25, 0xFF	; 255
    192e:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <strcpy>

							stringTransmit(msgToSend);
    1932:	ce 01       	movw	r24, r28
    1934:	89 56       	subi	r24, 0x69	; 105
    1936:	9f 4f       	sbci	r25, 0xFF	; 255
    1938:	a2 c0       	rjmp	.+324    	; 0x1a7e <main+0x400>
						}
						else
						{
							if(frameIndex == SETWORDSIZE)
    193a:	b8 e0       	ldi	r27, 0x08	; 8
    193c:	9b 12       	cpse	r9, r27
    193e:	a2 c0       	rjmp	.+324    	; 0x1a84 <main+0x406>
							{
								memcpy((void *) recebido, (void *) (recebido+3), 4);//isola somente o valor, usando 4 caracteres
    1940:	4c 81       	ldd	r20, Y+4	; 0x04
    1942:	5d 81       	ldd	r21, Y+5	; 0x05
    1944:	6e 81       	ldd	r22, Y+6	; 0x06
    1946:	7f 81       	ldd	r23, Y+7	; 0x07
    1948:	49 83       	std	Y+1, r20	; 0x01
    194a:	5a 83       	std	Y+2, r21	; 0x02
    194c:	6b 83       	std	Y+3, r22	; 0x03
    194e:	7c 83       	std	Y+4, r23	; 0x04
								recebido[4] = '\0';
    1950:	1d 82       	std	Y+5, r1	; 0x05

								switch (pos){
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	fc 01       	movw	r30, r24
    1956:	31 97       	sbiw	r30, 0x01	; 1
    1958:	ea 30       	cpi	r30, 0x0A	; 10
    195a:	f1 05       	cpc	r31, r1
    195c:	08 f0       	brcs	.+2      	; 0x1960 <main+0x2e2>
    195e:	8d c0       	rjmp	.+282    	; 0x1a7a <main+0x3fc>
    1960:	ee 5b       	subi	r30, 0xBE	; 190
    1962:	ff 4f       	sbci	r31, 0xFF	; 255
    1964:	0c 94 80 0d 	jmp	0x1b00	; 0x1b00 <__tablejump2__>
									case 1:
										seta_freq(string4ToUint16(recebido));
    1968:	ce 01       	movw	r24, r28
    196a:	01 96       	adiw	r24, 0x01	; 1
    196c:	0e 94 27 01 	call	0x24e	; 0x24e <string4ToUint16>
	}
}

inline void seta_freq(uint16 freqReq)		//função para definição da frequencia do PWM
{
	if(freqReq < MIN_FREQ)
    1970:	84 3f       	cpi	r24, 0xF4	; 244
    1972:	21 e0       	ldi	r18, 0x01	; 1
    1974:	92 07       	cpc	r25, r18
    1976:	28 f4       	brcc	.+10     	; 0x1982 <main+0x304>
		status.freq = MIN_FREQ;
    1978:	b0 92 38 01 	sts	0x0138, r11
    197c:	a0 92 37 01 	sts	0x0137, r10
    1980:	0d c0       	rjmp	.+26     	; 0x199c <main+0x31e>
	else
		if(freqReq > MAX_FREQ)
    1982:	89 3e       	cpi	r24, 0xE9	; 233
    1984:	33 e0       	ldi	r19, 0x03	; 3
    1986:	93 07       	cpc	r25, r19
    1988:	28 f0       	brcs	.+10     	; 0x1994 <main+0x316>
			status.freq = MAX_FREQ;
    198a:	d0 92 38 01 	sts	0x0138, r13
    198e:	c0 92 37 01 	sts	0x0137, r12
    1992:	04 c0       	rjmp	.+8      	; 0x199c <main+0x31e>
		else
			status.freq = freqReq;
    1994:	90 93 38 01 	sts	0x0138, r25
    1998:	80 93 37 01 	sts	0x0137, r24
	timer1SetCompareAValue((F_CPU/1024)/status.freq);
    199c:	60 91 37 01 	lds	r22, 0x0137
    19a0:	70 91 38 01 	lds	r23, 0x0138
    19a4:	c8 01       	movw	r24, r16
    19a6:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <__udivmodhi4>
    19aa:	cb 01       	movw	r24, r22
    19ac:	0e 94 39 08 	call	0x1072	; 0x1072 <timer1SetCompareAValue>
	timer1SetCompareBValue((status.dc * (timer1GetCompareAValue()))/100);//bota o dc
    19b0:	80 90 3a 01 	lds	r8, 0x013A
    19b4:	91 2c       	mov	r9, r1
    19b6:	0e 94 42 08 	call	0x1084	; 0x1084 <timer1GetCompareAValue>
    19ba:	dc 01       	movw	r26, r24
    19bc:	a8 9d       	mul	r26, r8
    19be:	c0 01       	movw	r24, r0
    19c0:	a9 9d       	mul	r26, r9
    19c2:	90 0d       	add	r25, r0
    19c4:	b8 9d       	mul	r27, r8
    19c6:	90 0d       	add	r25, r0
    19c8:	11 24       	eor	r1, r1
    19ca:	b7 01       	movw	r22, r14
    19cc:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <__udivmodhi4>
    19d0:	cb 01       	movw	r24, r22
    19d2:	0e 94 47 08 	call	0x108e	; 0x108e <timer1SetCompareBValue>
    19d6:	5c c0       	rjmp	.+184    	; 0x1a90 <main+0x412>
								switch (pos){
									case 1:
										seta_freq(string4ToUint16(recebido));
										break;
									case 2:
										maxCurrent = string4Touint8(recebido);
    19d8:	ce 01       	movw	r24, r28
    19da:	01 96       	adiw	r24, 0x01	; 1
    19dc:	0e 94 52 01 	call	0x2a4	; 0x2a4 <string4Touint8>
    19e0:	80 93 06 01 	sts	0x0106, r24
										break;
    19e4:	55 c0       	rjmp	.+170    	; 0x1a90 <main+0x412>
									case 3:
										maxDC = string4Touint8(recebido);
    19e6:	ce 01       	movw	r24, r28
    19e8:	01 96       	adiw	r24, 0x01	; 1
    19ea:	0e 94 52 01 	call	0x2a4	; 0x2a4 <string4Touint8>
    19ee:	80 93 04 01 	sts	0x0104, r24
										break;
    19f2:	4e c0       	rjmp	.+156    	; 0x1a90 <main+0x412>
									case 4:
										minDC = string4Touint8(recebido);
    19f4:	ce 01       	movw	r24, r28
    19f6:	01 96       	adiw	r24, 0x01	; 1
    19f8:	0e 94 52 01 	call	0x2a4	; 0x2a4 <string4Touint8>
    19fc:	80 93 05 01 	sts	0x0105, r24
										seta_dc(dcReq);
    1a00:	80 91 32 01 	lds	r24, 0x0132
    1a04:	0e 94 83 00 	call	0x106	; 0x106 <seta_dc>
										break;
    1a08:	43 c0       	rjmp	.+134    	; 0x1a90 <main+0x412>
									case 5:
										maxDV = string4Touint8(recebido);
    1a0a:	ce 01       	movw	r24, r28
    1a0c:	01 96       	adiw	r24, 0x01	; 1
    1a0e:	0e 94 52 01 	call	0x2a4	; 0x2a4 <string4Touint8>
    1a12:	80 93 03 01 	sts	0x0103, r24
										break;
    1a16:	3c c0       	rjmp	.+120    	; 0x1a90 <main+0x412>
									case 6 :
										if(recebido[3] == '1')
    1a18:	8c 81       	ldd	r24, Y+4	; 0x04
    1a1a:	81 33       	cpi	r24, 0x31	; 49
    1a1c:	21 f4       	brne	.+8      	; 0x1a26 <main+0x3a8>
											flags.on = 1;
    1a1e:	80 91 36 01 	lds	r24, 0x0136
    1a22:	80 61       	ori	r24, 0x10	; 16
    1a24:	0c c0       	rjmp	.+24     	; 0x1a3e <main+0x3c0>
										if(recebido[3] == '0')
    1a26:	80 33       	cpi	r24, 0x30	; 48
    1a28:	99 f5       	brne	.+102    	; 0x1a90 <main+0x412>
											flags.on = 0;
    1a2a:	80 91 36 01 	lds	r24, 0x0136
    1a2e:	8f 7e       	andi	r24, 0xEF	; 239
    1a30:	06 c0       	rjmp	.+12     	; 0x1a3e <main+0x3c0>
										break;
									case 7:
										if(recebido[3] == '1')
    1a32:	8c 81       	ldd	r24, Y+4	; 0x04
    1a34:	81 33       	cpi	r24, 0x31	; 49
    1a36:	31 f4       	brne	.+12     	; 0x1a44 <main+0x3c6>
											flags.dms = 1;
    1a38:	80 91 36 01 	lds	r24, 0x0136
    1a3c:	80 62       	ori	r24, 0x20	; 32
    1a3e:	80 93 36 01 	sts	0x0136, r24
    1a42:	26 c0       	rjmp	.+76     	; 0x1a90 <main+0x412>
										if(recebido[3] == '0')
    1a44:	80 33       	cpi	r24, 0x30	; 48
    1a46:	21 f5       	brne	.+72     	; 0x1a90 <main+0x412>
											flags.dms = 0;
    1a48:	80 91 36 01 	lds	r24, 0x0136
    1a4c:	8f 7d       	andi	r24, 0xDF	; 223
    1a4e:	f7 cf       	rjmp	.-18     	; 0x1a3e <main+0x3c0>
										break;
									case 8:
										maxTemp = string4Touint8(recebido);
    1a50:	ce 01       	movw	r24, r28
    1a52:	01 96       	adiw	r24, 0x01	; 1
    1a54:	0e 94 52 01 	call	0x2a4	; 0x2a4 <string4Touint8>
    1a58:	80 93 02 01 	sts	0x0102, r24
										break;
    1a5c:	19 c0       	rjmp	.+50     	; 0x1a90 <main+0x412>
									case 9:
										minVoltage = string4Touint8(recebido);
    1a5e:	ce 01       	movw	r24, r28
    1a60:	01 96       	adiw	r24, 0x01	; 1
    1a62:	0e 94 52 01 	call	0x2a4	; 0x2a4 <string4Touint8>
    1a66:	80 93 00 01 	sts	0x0100, r24
										break;
    1a6a:	12 c0       	rjmp	.+36     	; 0x1a90 <main+0x412>
									case 10:
										//seta_dc(string4Touint8(recebido));
										dcReq = string4Touint8(recebido);
    1a6c:	ce 01       	movw	r24, r28
    1a6e:	01 96       	adiw	r24, 0x01	; 1
    1a70:	0e 94 52 01 	call	0x2a4	; 0x2a4 <string4Touint8>
    1a74:	80 93 32 01 	sts	0x0132, r24
										break;
    1a78:	0b c0       	rjmp	.+22     	; 0x1a90 <main+0x412>
									case 11:
									case 12:
									case 13:

									default:
										stringTransmit("ERRO");
    1a7a:	82 e2       	ldi	r24, 0x22	; 34
    1a7c:	91 e0       	ldi	r25, 0x01	; 1
    1a7e:	0e 94 b0 00 	call	0x160	; 0x160 <stringTransmit>
    1a82:	06 c0       	rjmp	.+12     	; 0x1a90 <main+0x412>
								}
							}
							else
							{
								stringTransmit("wrong size");	
    1a84:	87 e2       	ldi	r24, 0x27	; 39
    1a86:	91 e0       	ldi	r25, 0x01	; 1
    1a88:	0e 94 b0 00 	call	0x160	; 0x160 <stringTransmit>
							}
						}
					}
					else
					{//se o inicio da palavra nao esta correto
						esvaziaBuffer();
    1a8c:	0e 94 a8 00 	call	0x150	; 0x150 <esvaziaBuffer>
    1a90:	81 2c       	mov	r8, r1
    1a92:	b5 ce       	rjmp	.-662    	; 0x17fe <main+0x180>

00001a94 <__udivmodhi4>:
    1a94:	aa 1b       	sub	r26, r26
    1a96:	bb 1b       	sub	r27, r27
    1a98:	51 e1       	ldi	r21, 0x11	; 17
    1a9a:	07 c0       	rjmp	.+14     	; 0x1aaa <__udivmodhi4_ep>

00001a9c <__udivmodhi4_loop>:
    1a9c:	aa 1f       	adc	r26, r26
    1a9e:	bb 1f       	adc	r27, r27
    1aa0:	a6 17       	cp	r26, r22
    1aa2:	b7 07       	cpc	r27, r23
    1aa4:	10 f0       	brcs	.+4      	; 0x1aaa <__udivmodhi4_ep>
    1aa6:	a6 1b       	sub	r26, r22
    1aa8:	b7 0b       	sbc	r27, r23

00001aaa <__udivmodhi4_ep>:
    1aaa:	88 1f       	adc	r24, r24
    1aac:	99 1f       	adc	r25, r25
    1aae:	5a 95       	dec	r21
    1ab0:	a9 f7       	brne	.-22     	; 0x1a9c <__udivmodhi4_loop>
    1ab2:	80 95       	com	r24
    1ab4:	90 95       	com	r25
    1ab6:	bc 01       	movw	r22, r24
    1ab8:	cd 01       	movw	r24, r26
    1aba:	08 95       	ret

00001abc <__udivmodsi4>:
    1abc:	a1 e2       	ldi	r26, 0x21	; 33
    1abe:	1a 2e       	mov	r1, r26
    1ac0:	aa 1b       	sub	r26, r26
    1ac2:	bb 1b       	sub	r27, r27
    1ac4:	fd 01       	movw	r30, r26
    1ac6:	0d c0       	rjmp	.+26     	; 0x1ae2 <__udivmodsi4_ep>

00001ac8 <__udivmodsi4_loop>:
    1ac8:	aa 1f       	adc	r26, r26
    1aca:	bb 1f       	adc	r27, r27
    1acc:	ee 1f       	adc	r30, r30
    1ace:	ff 1f       	adc	r31, r31
    1ad0:	a2 17       	cp	r26, r18
    1ad2:	b3 07       	cpc	r27, r19
    1ad4:	e4 07       	cpc	r30, r20
    1ad6:	f5 07       	cpc	r31, r21
    1ad8:	20 f0       	brcs	.+8      	; 0x1ae2 <__udivmodsi4_ep>
    1ada:	a2 1b       	sub	r26, r18
    1adc:	b3 0b       	sbc	r27, r19
    1ade:	e4 0b       	sbc	r30, r20
    1ae0:	f5 0b       	sbc	r31, r21

00001ae2 <__udivmodsi4_ep>:
    1ae2:	66 1f       	adc	r22, r22
    1ae4:	77 1f       	adc	r23, r23
    1ae6:	88 1f       	adc	r24, r24
    1ae8:	99 1f       	adc	r25, r25
    1aea:	1a 94       	dec	r1
    1aec:	69 f7       	brne	.-38     	; 0x1ac8 <__udivmodsi4_loop>
    1aee:	60 95       	com	r22
    1af0:	70 95       	com	r23
    1af2:	80 95       	com	r24
    1af4:	90 95       	com	r25
    1af6:	9b 01       	movw	r18, r22
    1af8:	ac 01       	movw	r20, r24
    1afa:	bd 01       	movw	r22, r26
    1afc:	cf 01       	movw	r24, r30
    1afe:	08 95       	ret

00001b00 <__tablejump2__>:
    1b00:	ee 0f       	add	r30, r30
    1b02:	ff 1f       	adc	r31, r31

00001b04 <__tablejump__>:
    1b04:	05 90       	lpm	r0, Z+
    1b06:	f4 91       	lpm	r31, Z
    1b08:	e0 2d       	mov	r30, r0
    1b0a:	09 94       	ijmp

00001b0c <__ashrdi3>:
    1b0c:	97 fb       	bst	r25, 7
    1b0e:	10 f8       	bld	r1, 0

00001b10 <__lshrdi3>:
    1b10:	16 94       	lsr	r1
    1b12:	00 08       	sbc	r0, r0
    1b14:	0f 93       	push	r16
    1b16:	08 30       	cpi	r16, 0x08	; 8
    1b18:	98 f0       	brcs	.+38     	; 0x1b40 <__lshrdi3+0x30>
    1b1a:	08 50       	subi	r16, 0x08	; 8
    1b1c:	23 2f       	mov	r18, r19
    1b1e:	34 2f       	mov	r19, r20
    1b20:	45 2f       	mov	r20, r21
    1b22:	56 2f       	mov	r21, r22
    1b24:	67 2f       	mov	r22, r23
    1b26:	78 2f       	mov	r23, r24
    1b28:	89 2f       	mov	r24, r25
    1b2a:	90 2d       	mov	r25, r0
    1b2c:	f4 cf       	rjmp	.-24     	; 0x1b16 <__lshrdi3+0x6>
    1b2e:	05 94       	asr	r0
    1b30:	97 95       	ror	r25
    1b32:	87 95       	ror	r24
    1b34:	77 95       	ror	r23
    1b36:	67 95       	ror	r22
    1b38:	57 95       	ror	r21
    1b3a:	47 95       	ror	r20
    1b3c:	37 95       	ror	r19
    1b3e:	27 95       	ror	r18
    1b40:	0a 95       	dec	r16
    1b42:	aa f7       	brpl	.-22     	; 0x1b2e <__lshrdi3+0x1e>
    1b44:	0f 91       	pop	r16
    1b46:	08 95       	ret

00001b48 <strcat>:
    1b48:	fb 01       	movw	r30, r22
    1b4a:	dc 01       	movw	r26, r24
    1b4c:	0d 90       	ld	r0, X+
    1b4e:	00 20       	and	r0, r0
    1b50:	e9 f7       	brne	.-6      	; 0x1b4c <strcat+0x4>
    1b52:	11 97       	sbiw	r26, 0x01	; 1
    1b54:	01 90       	ld	r0, Z+
    1b56:	0d 92       	st	X+, r0
    1b58:	00 20       	and	r0, r0
    1b5a:	e1 f7       	brne	.-8      	; 0x1b54 <strcat+0xc>
    1b5c:	08 95       	ret

00001b5e <strcpy>:
    1b5e:	fb 01       	movw	r30, r22
    1b60:	dc 01       	movw	r26, r24
    1b62:	01 90       	ld	r0, Z+
    1b64:	0d 92       	st	X+, r0
    1b66:	00 20       	and	r0, r0
    1b68:	e1 f7       	brne	.-8      	; 0x1b62 <strcpy+0x4>
    1b6a:	08 95       	ret

00001b6c <_exit>:
    1b6c:	f8 94       	cli

00001b6e <__stop_program>:
    1b6e:	ff cf       	rjmp	.-2      	; 0x1b6e <__stop_program>
