
placaAdicionalChopper.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  0000149e  00001532  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000149e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003e  0080011c  0080011c  0000154e  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  0000154e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  0000155f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002aa9  00000000  00000000  000015a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000532  00000000  00000000  00004050  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000704  00000000  00000000  00004582  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000c8c  00000000  00000000  00004c88  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00002436  00000000  00000000  00005914  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000014a0  00000000  00000000  00007d4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000091ea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4c 00 	jmp	0x98	; 0x98 <__ctors_end>
       4:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
       8:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
       c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      10:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      14:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      18:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      1c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      20:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      24:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      28:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      2c:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__vector_11>
      30:	0c 94 09 01 	jmp	0x212	; 0x212 <__vector_12>
      34:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      38:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      3c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      40:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      44:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      48:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      4c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      50:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      54:	0c 94 92 00 	jmp	0x124	; 0x124 <__vector_21>
      58:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      5c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      60:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      64:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      68:	2f 01       	movw	r4, r30
      6a:	3f 01       	movw	r6, r30
      6c:	31 01       	movw	r6, r2
      6e:	33 01       	movw	r6, r6
      70:	35 01       	movw	r6, r10
      72:	37 01       	movw	r6, r14
      74:	39 01       	movw	r6, r18
      76:	3b 01       	movw	r6, r22
      78:	3d 01       	movw	r6, r26
      7a:	62 05       	cpc	r22, r2
      7c:	55 05       	cpc	r21, r5
      7e:	57 05       	cpc	r21, r7
      80:	59 05       	cpc	r21, r9
      82:	5b 05       	cpc	r21, r11
      84:	5d 05       	cpc	r21, r13
      86:	5f 05       	cpc	r21, r15
      88:	61 05       	cpc	r22, r1
      8a:	5d 07       	cpc	r21, r29
      8c:	5f 07       	cpc	r21, r31
      8e:	61 07       	cpc	r22, r17
      90:	63 07       	cpc	r22, r19
      92:	65 07       	cpc	r22, r21
      94:	67 07       	cpc	r22, r23
      96:	69 07       	cpc	r22, r25

00000098 <__ctors_end>:
      98:	11 24       	eor	r1, r1
      9a:	1f be       	out	0x3f, r1	; 63
      9c:	cf ef       	ldi	r28, 0xFF	; 255
      9e:	d8 e0       	ldi	r29, 0x08	; 8
      a0:	de bf       	out	0x3e, r29	; 62
      a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
      a4:	11 e0       	ldi	r17, 0x01	; 1
      a6:	a0 e0       	ldi	r26, 0x00	; 0
      a8:	b1 e0       	ldi	r27, 0x01	; 1
      aa:	ee e9       	ldi	r30, 0x9E	; 158
      ac:	f4 e1       	ldi	r31, 0x14	; 20
      ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x10>
      b0:	05 90       	lpm	r0, Z+
      b2:	0d 92       	st	X+, r0
      b4:	ac 31       	cpi	r26, 0x1C	; 28
      b6:	b1 07       	cpc	r27, r17
      b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0xc>

000000ba <__do_clear_bss>:
      ba:	21 e0       	ldi	r18, 0x01	; 1
      bc:	ac e1       	ldi	r26, 0x1C	; 28
      be:	b1 e0       	ldi	r27, 0x01	; 1
      c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
      c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
      c4:	aa 35       	cpi	r26, 0x5A	; 90
      c6:	b2 07       	cpc	r27, r18
      c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
      ca:	0e 94 8c 09 	call	0x1318	; 0x1318 <main>
      ce:	0c 94 4d 0a 	jmp	0x149a	; 0x149a <_exit>

000000d2 <__bad_interrupt>:
      d2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d6 <seta_dc>:
uint8 maxTemp = 70;
uint8 voltage = 36;
uint8 minVotage = 30;

void seta_dc(uint8 d_cycle)		//função para definição do Duty Cicle do PWM
{
      d6:	cf 93       	push	r28
      d8:	c8 2f       	mov	r28, r24
	dcReq = d_cycle;
      da:	80 93 1c 01 	sts	0x011C, r24
	if(dcReq < minDC)				// Comparação com o valor mínimo de Duty Cicle
      de:	80 91 08 01 	lds	r24, 0x0108
      e2:	c8 17       	cp	r28, r24
      e4:	18 f4       	brcc	.+6      	; 0xec <seta_dc+0x16>
		dc = 0;
      e6:	10 92 1d 01 	sts	0x011D, r1
      ea:	1a c0       	rjmp	.+52     	; 0x120 <seta_dc+0x4a>
	else{
		if(dcReq > maxDC)			//Comparação com o valor máximo de Duty Cicle
      ec:	80 91 07 01 	lds	r24, 0x0107
      f0:	8c 17       	cp	r24, r28
      f2:	20 f4       	brcc	.+8      	; 0xfc <seta_dc+0x26>
			dc = 100;
      f4:	84 e6       	ldi	r24, 0x64	; 100
      f6:	80 93 1d 01 	sts	0x011D, r24
      fa:	12 c0       	rjmp	.+36     	; 0x120 <seta_dc+0x4a>
		else{
			dc = dcReq;
      fc:	c0 93 1d 01 	sts	0x011D, r28
			timer1SetCompareBValue((dc * (timer1GetCompareAValue()))/100);		//seta o valor do comparador B para gerar o DC requerido
     100:	0e 94 8f 06 	call	0xd1e	; 0xd1e <timer1GetCompareAValue>
     104:	9c 01       	movw	r18, r24
     106:	c2 9f       	mul	r28, r18
     108:	c0 01       	movw	r24, r0
     10a:	c3 9f       	mul	r28, r19
     10c:	90 0d       	add	r25, r0
     10e:	11 24       	eor	r1, r1
     110:	64 e6       	ldi	r22, 0x64	; 100
     112:	70 e0       	ldi	r23, 0x00	; 0
     114:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__udivmodhi4>
     118:	cb 01       	movw	r24, r22
		}
	}
}
     11a:	cf 91       	pop	r28
	else{
		if(dcReq > maxDC)			//Comparação com o valor máximo de Duty Cicle
			dc = 100;
		else{
			dc = dcReq;
			timer1SetCompareBValue((dc * (timer1GetCompareAValue()))/100);		//seta o valor do comparador B para gerar o DC requerido
     11c:	0c 94 94 06 	jmp	0xd28	; 0xd28 <timer1SetCompareBValue>
		}
	}
}
     120:	cf 91       	pop	r28
     122:	08 95       	ret

00000124 <__vector_21>:
    			seta_dc(0);				//desliga o sistema
    	}
    }
}

ISR(ADC_vect){
     124:	1f 92       	push	r1
     126:	0f 92       	push	r0
     128:	0f b6       	in	r0, 0x3f	; 63
     12a:	0f 92       	push	r0
     12c:	11 24       	eor	r1, r1
     12e:	2f 93       	push	r18
     130:	3f 93       	push	r19
     132:	4f 93       	push	r20
     134:	5f 93       	push	r21
     136:	6f 93       	push	r22
     138:	7f 93       	push	r23
     13a:	8f 93       	push	r24
     13c:	9f 93       	push	r25
     13e:	af 93       	push	r26
     140:	bf 93       	push	r27
     142:	ef 93       	push	r30
     144:	ff 93       	push	r31
	switch (channel){
     146:	20 91 0d 01 	lds	r18, 0x010D
     14a:	21 30       	cpi	r18, 0x01	; 1
     14c:	d9 f0       	breq	.+54     	; 0x184 <__vector_21+0x60>
     14e:	78 f0       	brcs	.+30     	; 0x16e <__vector_21+0x4a>
     150:	22 30       	cpi	r18, 0x02	; 2
     152:	19 f1       	breq	.+70     	; 0x19a <__vector_21+0x76>
     154:	23 30       	cpi	r18, 0x03	; 3
     156:	59 f5       	brne	.+86     	; 0x1ae <__vector_21+0x8a>
			break;
		case VOLTAGE_CHANNEL:
			voltage = ADC / 30;
			break;
		case TEMP_CHANNEL:
			temperature = ADC / 2;
     158:	80 91 78 00 	lds	r24, 0x0078
     15c:	90 91 79 00 	lds	r25, 0x0079
     160:	96 95       	lsr	r25
     162:	87 95       	ror	r24
     164:	80 93 03 01 	sts	0x0103, r24
			break;
		default: 
			break;
	}
	if(channel == LAST_CHANNEL){
		channel = FIRST_CHANNEL;
     168:	10 92 0d 01 	sts	0x010D, r1
     16c:	23 c0       	rjmp	.+70     	; 0x1b4 <__vector_21+0x90>
}

ISR(ADC_vect){
	switch (channel){
		case CURRENT_CHANNEL:
			current = ADC / 5;
     16e:	80 91 78 00 	lds	r24, 0x0078
     172:	90 91 79 00 	lds	r25, 0x0079
     176:	65 e0       	ldi	r22, 0x05	; 5
     178:	70 e0       	ldi	r23, 0x00	; 0
     17a:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__udivmodhi4>
     17e:	60 93 1e 01 	sts	0x011E, r22
			break;
     182:	15 c0       	rjmp	.+42     	; 0x1ae <__vector_21+0x8a>
		case POT_CHANNEL:
			dcReq = ADC / 10;
     184:	80 91 78 00 	lds	r24, 0x0078
     188:	90 91 79 00 	lds	r25, 0x0079
     18c:	6a e0       	ldi	r22, 0x0A	; 10
     18e:	70 e0       	ldi	r23, 0x00	; 0
     190:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__udivmodhi4>
     194:	60 93 1c 01 	sts	0x011C, r22
			break;
     198:	0a c0       	rjmp	.+20     	; 0x1ae <__vector_21+0x8a>
		case VOLTAGE_CHANNEL:
			voltage = ADC / 30;
     19a:	80 91 78 00 	lds	r24, 0x0078
     19e:	90 91 79 00 	lds	r25, 0x0079
     1a2:	6e e1       	ldi	r22, 0x1E	; 30
     1a4:	70 e0       	ldi	r23, 0x00	; 0
     1a6:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__udivmodhi4>
     1aa:	60 93 01 01 	sts	0x0101, r22
	}
	if(channel == LAST_CHANNEL){
		channel = FIRST_CHANNEL;
	}
	else
		channel ++;
     1ae:	2f 5f       	subi	r18, 0xFF	; 255
     1b0:	20 93 0d 01 	sts	0x010D, r18
	adcSelectChannel(channel);
     1b4:	80 91 0d 01 	lds	r24, 0x010D
     1b8:	0e 94 75 07 	call	0xeea	; 0xeea <adcSelectChannel>
	adcStartConversion();
     1bc:	0e 94 bc 07 	call	0xf78	; 0xf78 <adcStartConversion>
}
     1c0:	ff 91       	pop	r31
     1c2:	ef 91       	pop	r30
     1c4:	bf 91       	pop	r27
     1c6:	af 91       	pop	r26
     1c8:	9f 91       	pop	r25
     1ca:	8f 91       	pop	r24
     1cc:	7f 91       	pop	r23
     1ce:	6f 91       	pop	r22
     1d0:	5f 91       	pop	r21
     1d2:	4f 91       	pop	r20
     1d4:	3f 91       	pop	r19
     1d6:	2f 91       	pop	r18
     1d8:	0f 90       	pop	r0
     1da:	0f be       	out	0x3f, r0	; 63
     1dc:	0f 90       	pop	r0
     1de:	1f 90       	pop	r1
     1e0:	18 95       	reti

000001e2 <__vector_11>:

ISR(TIMER1_COMPA_vect){
     1e2:	1f 92       	push	r1
     1e4:	0f 92       	push	r0
     1e6:	0f b6       	in	r0, 0x3f	; 63
     1e8:	0f 92       	push	r0
     1ea:	11 24       	eor	r1, r1
     1ec:	8f 93       	push	r24
	if(dc > 0 && on && dms)
     1ee:	80 91 1d 01 	lds	r24, 0x011D
     1f2:	88 23       	and	r24, r24
     1f4:	41 f0       	breq	.+16     	; 0x206 <__vector_11+0x24>
     1f6:	80 91 05 01 	lds	r24, 0x0105
     1fa:	88 23       	and	r24, r24
     1fc:	21 f0       	breq	.+8      	; 0x206 <__vector_11+0x24>
     1fe:	80 91 04 01 	lds	r24, 0x0104
     202:	81 11       	cpse	r24, r1
		setBit(PWM_PORT,PWM_BIT);		//Inicia o período em nível alto do PWM
     204:	29 9a       	sbi	0x05, 1	; 5
}
     206:	8f 91       	pop	r24
     208:	0f 90       	pop	r0
     20a:	0f be       	out	0x3f, r0	; 63
     20c:	0f 90       	pop	r0
     20e:	1f 90       	pop	r1
     210:	18 95       	reti

00000212 <__vector_12>:

ISR(TIMER1_COMPB_vect){
     212:	1f 92       	push	r1
     214:	0f 92       	push	r0
     216:	0f b6       	in	r0, 0x3f	; 63
     218:	0f 92       	push	r0
     21a:	11 24       	eor	r1, r1
     21c:	8f 93       	push	r24
	if(dc < 100)
     21e:	80 91 1d 01 	lds	r24, 0x011D
     222:	84 36       	cpi	r24, 0x64	; 100
     224:	08 f4       	brcc	.+2      	; 0x228 <__vector_12+0x16>
		clrBit(PWM_PORT,PWM_BIT);		//Inicia o período em nível baixo do PWM
     226:	29 98       	cbi	0x05, 1	; 5
}
     228:	8f 91       	pop	r24
     22a:	0f 90       	pop	r0
     22c:	0f be       	out	0x3f, r0	; 63
     22e:	0f 90       	pop	r0
     230:	1f 90       	pop	r1
     232:	18 95       	reti

00000234 <usartReceiveStd>:
 * Checks if a reception has been completed
 * -------------------------------------------------------------------------- */

bool_t usartIsReceptionComplete(void)
{
	return isBitSet(UCSR0A, RXC0);
     234:	80 91 c0 00 	lds	r24, 0x00C0
 * standard input heandler
 * -------------------------------------------------------------------------- */

int16 usartReceiveStd(FILE * stream)
{
	while(!usartIsReceptionComplete())
     238:	87 ff       	sbrs	r24, 7
     23a:	fc cf       	rjmp	.-8      	; 0x234 <usartReceiveStd>
		;	// Waits until last reception ends
	return (int16)UDR0;
     23c:	80 91 c6 00 	lds	r24, 0x00C6
}
     240:	90 e0       	ldi	r25, 0x00	; 0
     242:	08 95       	ret

00000244 <globalInterruptEnable>:
 * Enable global interrupts
 * -------------------------------------------------------------------------- */

void globalInterruptEnable(void)
{
	sei();
     244:	78 94       	sei
     246:	08 95       	ret

00000248 <globalInterruptDisable>:
 * Disable global interrupts
 * -------------------------------------------------------------------------- */

void globalInterruptDisable(void)
{
	cli();
     248:	f8 94       	cli
     24a:	08 95       	ret

0000024c <systemClockSetPrescaler>:

resultValue_t systemClockSetPrescaler(systemPrescalerValue_t prescaler)
{
	uint8 aux8 = 0;

	switch(prescaler){
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	89 30       	cpi	r24, 0x09	; 9
     250:	91 05       	cpc	r25, r1
     252:	00 f5       	brcc	.+64     	; 0x294 <systemClockSetPrescaler+0x48>
     254:	fc 01       	movw	r30, r24
     256:	ec 5c       	subi	r30, 0xCC	; 204
     258:	ff 4f       	sbci	r31, 0xFF	; 255
     25a:	0c 94 29 0a 	jmp	0x1452	; 0x1452 <__tablejump2__>
		case SYSTEM_PRESCALER_OFF:		aux8 = 0;	break;
     25e:	80 e0       	ldi	r24, 0x00	; 0
     260:	0f c0       	rjmp	.+30     	; 0x280 <systemClockSetPrescaler+0x34>
		case SYSTEM_PRESCALER_2:		aux8 = 1;	break;
		case SYSTEM_PRESCALER_4:		aux8 = 2;	break;
     262:	82 e0       	ldi	r24, 0x02	; 2
     264:	0d c0       	rjmp	.+26     	; 0x280 <systemClockSetPrescaler+0x34>
		case SYSTEM_PRESCALER_8:		aux8 = 3;	break;
     266:	83 e0       	ldi	r24, 0x03	; 3
     268:	0b c0       	rjmp	.+22     	; 0x280 <systemClockSetPrescaler+0x34>
		case SYSTEM_PRESCALER_16:		aux8 = 4;	break;
     26a:	84 e0       	ldi	r24, 0x04	; 4
     26c:	09 c0       	rjmp	.+18     	; 0x280 <systemClockSetPrescaler+0x34>
		case SYSTEM_PRESCALER_32:		aux8 = 5;	break;
     26e:	85 e0       	ldi	r24, 0x05	; 5
     270:	07 c0       	rjmp	.+14     	; 0x280 <systemClockSetPrescaler+0x34>
		case SYSTEM_PRESCALER_64:		aux8 = 6;	break;
     272:	86 e0       	ldi	r24, 0x06	; 6
     274:	05 c0       	rjmp	.+10     	; 0x280 <systemClockSetPrescaler+0x34>
		case SYSTEM_PRESCALER_128:		aux8 = 7;	break;
     276:	87 e0       	ldi	r24, 0x07	; 7
     278:	03 c0       	rjmp	.+6      	; 0x280 <systemClockSetPrescaler+0x34>
		case SYSTEM_PRESCALER_256:		aux8 = 8;	break;
     27a:	88 e0       	ldi	r24, 0x08	; 8
     27c:	01 c0       	rjmp	.+2      	; 0x280 <systemClockSetPrescaler+0x34>
{
	uint8 aux8 = 0;

	switch(prescaler){
		case SYSTEM_PRESCALER_OFF:		aux8 = 0;	break;
		case SYSTEM_PRESCALER_2:		aux8 = 1;	break;
     27e:	81 e0       	ldi	r24, 0x01	; 1
		case SYSTEM_PRESCALER_64:		aux8 = 6;	break;
		case SYSTEM_PRESCALER_128:		aux8 = 7;	break;
		case SYSTEM_PRESCALER_256:		aux8 = 8;	break;
		default:						return RESULT_UNSUPPORTED_VALUE;	break;
	}
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
     280:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     282:	f8 94       	cli
		CLKPR = 0b10000000;
     284:	20 e8       	ldi	r18, 0x80	; 128
     286:	20 93 61 00 	sts	0x0061, r18
		CLKPR = aux8;
     28a:	80 93 61 00 	sts	0x0061, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     28e:	9f bf       	out	0x3f, r25	; 63
	}

	return RESULT_OK;
     290:	80 e0       	ldi	r24, 0x00	; 0
     292:	08 95       	ret
		case SYSTEM_PRESCALER_16:		aux8 = 4;	break;
		case SYSTEM_PRESCALER_32:		aux8 = 5;	break;
		case SYSTEM_PRESCALER_64:		aux8 = 6;	break;
		case SYSTEM_PRESCALER_128:		aux8 = 7;	break;
		case SYSTEM_PRESCALER_256:		aux8 = 8;	break;
		default:						return RESULT_UNSUPPORTED_VALUE;	break;
     294:	87 e0       	ldi	r24, 0x07	; 7
		CLKPR = 0b10000000;
		CLKPR = aux8;
	}

	return RESULT_OK;
}
     296:	08 95       	ret

00000298 <eepromSetOperationMode>:

void eepromSetOperationMode(eepromMode_t mode)
{
	uint8 aux8 = 0;

	aux8 = EECR & ~(0x03 << EEPM0);
     298:	2f b3       	in	r18, 0x1f	; 31
	aux8 |= (mode << EEPM0);
     29a:	30 e1       	ldi	r19, 0x10	; 16
     29c:	83 9f       	mul	r24, r19
     29e:	c0 01       	movw	r24, r0
     2a0:	11 24       	eor	r1, r1

void eepromSetOperationMode(eepromMode_t mode)
{
	uint8 aux8 = 0;

	aux8 = EECR & ~(0x03 << EEPM0);
     2a2:	2f 7c       	andi	r18, 0xCF	; 207
	aux8 |= (mode << EEPM0);
     2a4:	28 2b       	or	r18, r24
	EECR = aux8;
     2a6:	2f bb       	out	0x1f, r18	; 31
     2a8:	08 95       	ret

000002aa <eepromReadyActivateInterrupt>:
 * Activates the EEPROM ready interrupt
 * -------------------------------------------------------------------------- */

void eepromReadyActivateInterrupt(void)
{
	setBit(EECR, EERIE);
     2aa:	fb 9a       	sbi	0x1f, 3	; 31
     2ac:	08 95       	ret

000002ae <eepromReadyDeactivateInterrupt>:
 * Deactivates the EEPROM ready interrupt
 * -------------------------------------------------------------------------- */

void eepromReadyDeactivateInterrupt(void)
{
	clrBit(EECR, EERIE);
     2ae:	fb 98       	cbi	0x1f, 3	; 31
     2b0:	08 95       	ret

000002b2 <eepromWrite>:
 * Writes a byte in the specified address in the EEPROM
 * -------------------------------------------------------------------------- */

void eepromWrite(uint16 address, uint8 data)
{
	waitUntilBitIsClear(EECR, EEPE);
     2b2:	f9 99       	sbic	0x1f, 1	; 31
     2b4:	fe cf       	rjmp	.-4      	; 0x2b2 <eepromWrite>
	waitUntilBitIsClear(SPMEN, SPMCSR);
     2b6:	27 b7       	in	r18, 0x37	; 55
	EEAR = (address & EEPROM_ADDRESS_MASK);
     2b8:	93 70       	andi	r25, 0x03	; 3
     2ba:	92 bd       	out	0x22, r25	; 34
     2bc:	81 bd       	out	0x21, r24	; 33
	EEDR = data;
     2be:	60 bd       	out	0x20, r22	; 32
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
     2c0:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     2c2:	f8 94       	cli
		setBit(EECR, EEMPE);
     2c4:	fa 9a       	sbi	0x1f, 2	; 31
		setBit(EECR, EEPE);
     2c6:	f9 9a       	sbi	0x1f, 1	; 31
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     2c8:	8f bf       	out	0x3f, r24	; 63
    __asm__ volatile ("" ::: "memory");
     2ca:	08 95       	ret

000002cc <eepromRead>:
 * Reads a byte from the specified address in the EEPROM
 * -------------------------------------------------------------------------- */

uint8 eepromRead(uint16 address)
{
	waitUntilBitIsClear(EECR, EEPE);
     2cc:	f9 99       	sbic	0x1f, 1	; 31
     2ce:	fe cf       	rjmp	.-4      	; 0x2cc <eepromRead>
	EEAR = (address & EEPROM_ADDRESS_MASK);
     2d0:	93 70       	andi	r25, 0x03	; 3
     2d2:	92 bd       	out	0x22, r25	; 34
     2d4:	81 bd       	out	0x21, r24	; 33
	setBit(EECR, EERE);
     2d6:	f8 9a       	sbi	0x1f, 0	; 31
	return EEDR;
     2d8:	80 b5       	in	r24, 0x20	; 32
}
     2da:	08 95       	ret

000002dc <globalPullUpEnable>:
 * Enables the global pull-up
 * -------------------------------------------------------------------------- */

void globalPullUpEnable(void)
{
	clrBit(MCUCR, PUD);
     2dc:	85 b7       	in	r24, 0x35	; 53
     2de:	8f 7e       	andi	r24, 0xEF	; 239
     2e0:	85 bf       	out	0x35, r24	; 53
     2e2:	08 95       	ret

000002e4 <pullUpDisable>:
 * Disables the global pull-up
 * -------------------------------------------------------------------------- */

void pullUpDisable(void)
{
	setBit(MCUCR, PUD);
     2e4:	85 b7       	in	r24, 0x35	; 53
     2e6:	80 61       	ori	r24, 0x10	; 16
     2e8:	85 bf       	out	0x35, r24	; 53
     2ea:	08 95       	ret

000002ec <int0Config>:

resultValue_t int0Config(portMode_t port, senseMode_t sense)
{
	uint8 aux8 = 0;

	switch(port){
     2ec:	82 30       	cpi	r24, 0x02	; 2
     2ee:	79 f0       	breq	.+30     	; 0x30e <int0Config+0x22>
     2f0:	30 f4       	brcc	.+12     	; 0x2fe <int0Config+0x12>
     2f2:	88 23       	and	r24, r24
     2f4:	49 f0       	breq	.+18     	; 0x308 <int0Config+0x1c>
     2f6:	81 30       	cpi	r24, 0x01	; 1
     2f8:	11 f5       	brne	.+68     	; 0x33e <int0Config+0x52>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD2); setBit(DDRD, PD2);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD2); setBit(DDRD, PD2);	break;
     2fa:	5a 9a       	sbi	0x0b, 2	; 11
     2fc:	06 c0       	rjmp	.+12     	; 0x30a <int0Config+0x1e>

resultValue_t int0Config(portMode_t port, senseMode_t sense)
{
	uint8 aux8 = 0;

	switch(port){
     2fe:	83 30       	cpi	r24, 0x03	; 3
     300:	41 f0       	breq	.+16     	; 0x312 <int0Config+0x26>
     302:	8f 3f       	cpi	r24, 0xFF	; 255
     304:	41 f0       	breq	.+16     	; 0x316 <int0Config+0x2a>
     306:	1b c0       	rjmp	.+54     	; 0x33e <int0Config+0x52>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD2); setBit(DDRD, PD2);	break;
     308:	5a 98       	cbi	0x0b, 2	; 11
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD2); setBit(DDRD, PD2);	break;
     30a:	52 9a       	sbi	0x0a, 2	; 10
     30c:	04 c0       	rjmp	.+8      	; 0x316 <int0Config+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD2); clrBit(DDRD, PD2);	break;
     30e:	5a 98       	cbi	0x0b, 2	; 11
     310:	01 c0       	rjmp	.+2      	; 0x314 <int0Config+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD2); clrBit(DDRD, PD2);	break;
     312:	5a 9a       	sbi	0x0b, 2	; 11
     314:	52 98       	cbi	0x0a, 2	; 10
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}

	if(sense != SENSE_NO_CHANGE){
     316:	6f 3f       	cpi	r22, 0xFF	; 255
     318:	a1 f0       	breq	.+40     	; 0x342 <int0Config+0x56>
		aux8 = EICRA & ~(0x03 << ISC00);
     31a:	80 91 69 00 	lds	r24, 0x0069
     31e:	8c 7f       	andi	r24, 0xFC	; 252
		switch(sense){
     320:	61 30       	cpi	r22, 0x01	; 1
     322:	39 f0       	breq	.+14     	; 0x332 <int0Config+0x46>
     324:	48 f0       	brcs	.+18     	; 0x338 <int0Config+0x4c>
     326:	62 30       	cpi	r22, 0x02	; 2
     328:	31 f0       	breq	.+12     	; 0x336 <int0Config+0x4a>
     32a:	63 30       	cpi	r22, 0x03	; 3
     32c:	61 f4       	brne	.+24     	; 0x346 <int0Config+0x5a>
			case SENSE_LOW_LEVEL:		break;
			case SENSE_ANY_EDGE:		aux8 |= (0x01 << ISC00);			break;
			case SENSE_FALLING_EDGE:	aux8 |= (0x02 << ISC00);			break;
			case SENSE_RISING_EDGE:		aux8 |= (0x03 << ISC00);			break;
     32e:	83 60       	ori	r24, 0x03	; 3
     330:	03 c0       	rjmp	.+6      	; 0x338 <int0Config+0x4c>

	if(sense != SENSE_NO_CHANGE){
		aux8 = EICRA & ~(0x03 << ISC00);
		switch(sense){
			case SENSE_LOW_LEVEL:		break;
			case SENSE_ANY_EDGE:		aux8 |= (0x01 << ISC00);			break;
     332:	81 60       	ori	r24, 0x01	; 1
     334:	01 c0       	rjmp	.+2      	; 0x338 <int0Config+0x4c>
			case SENSE_FALLING_EDGE:	aux8 |= (0x02 << ISC00);			break;
     336:	82 60       	ori	r24, 0x02	; 2
			case SENSE_RISING_EDGE:		aux8 |= (0x03 << ISC00);			break;
			case SENSE_NO_CHANGE:		break;
			default:					return RESULT_INT_SENSE_VALUE_UNSUPPORTED;	break;
		}
		EICRA = aux8;
     338:	80 93 69 00 	sts	0x0069, r24
     33c:	02 c0       	rjmp	.+4      	; 0x342 <int0Config+0x56>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD2); setBit(DDRD, PD2);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD2); setBit(DDRD, PD2);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD2); clrBit(DDRD, PD2);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD2); clrBit(DDRD, PD2);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     33e:	81 e0       	ldi	r24, 0x01	; 1
     340:	08 95       	ret
			default:					return RESULT_INT_SENSE_VALUE_UNSUPPORTED;	break;
		}
		EICRA = aux8;
	}

	return RESULT_OK;
     342:	80 e0       	ldi	r24, 0x00	; 0
     344:	08 95       	ret
			case SENSE_LOW_LEVEL:		break;
			case SENSE_ANY_EDGE:		aux8 |= (0x01 << ISC00);			break;
			case SENSE_FALLING_EDGE:	aux8 |= (0x02 << ISC00);			break;
			case SENSE_RISING_EDGE:		aux8 |= (0x03 << ISC00);			break;
			case SENSE_NO_CHANGE:		break;
			default:					return RESULT_INT_SENSE_VALUE_UNSUPPORTED;	break;
     346:	82 e0       	ldi	r24, 0x02	; 2
		}
		EICRA = aux8;
	}

	return RESULT_OK;
}
     348:	08 95       	ret

0000034a <int0ActivateInterrupt>:
 * Activates the external interrupt int0
 * -------------------------------------------------------------------------- */

void int0ActivateInterrupt(void)
{
	setBit(EIMSK, INT0);
     34a:	e8 9a       	sbi	0x1d, 0	; 29
     34c:	08 95       	ret

0000034e <int0DeactivateInterrupt>:
 * Deactivates the external interrupt int0
 * -------------------------------------------------------------------------- */

void int0DeactivateInterrupt(void)
{
	clrBit(EIMSK, INT0);
     34e:	e8 98       	cbi	0x1d, 0	; 29
     350:	08 95       	ret

00000352 <int0ClearInterruptRequest>:
 * Clears the external interrupt int0 request
 * -------------------------------------------------------------------------- */

void int0ClearInterruptRequest(void)
{
	setBit(EIFR, INTF0);
     352:	e0 9a       	sbi	0x1c, 0	; 28
     354:	08 95       	ret

00000356 <int1Config>:

resultValue_t int1Config(portMode_t port, senseMode_t sense)
{
	uint8 aux8 = 0;

	switch(port){
     356:	82 30       	cpi	r24, 0x02	; 2
     358:	79 f0       	breq	.+30     	; 0x378 <int1Config+0x22>
     35a:	30 f4       	brcc	.+12     	; 0x368 <int1Config+0x12>
     35c:	88 23       	and	r24, r24
     35e:	49 f0       	breq	.+18     	; 0x372 <int1Config+0x1c>
     360:	81 30       	cpi	r24, 0x01	; 1
     362:	11 f5       	brne	.+68     	; 0x3a8 <int1Config+0x52>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD3); setBit(DDRD, PD3);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD3); setBit(DDRD, PD3);	break;
     364:	5b 9a       	sbi	0x0b, 3	; 11
     366:	06 c0       	rjmp	.+12     	; 0x374 <int1Config+0x1e>

resultValue_t int1Config(portMode_t port, senseMode_t sense)
{
	uint8 aux8 = 0;

	switch(port){
     368:	83 30       	cpi	r24, 0x03	; 3
     36a:	41 f0       	breq	.+16     	; 0x37c <int1Config+0x26>
     36c:	8f 3f       	cpi	r24, 0xFF	; 255
     36e:	41 f0       	breq	.+16     	; 0x380 <int1Config+0x2a>
     370:	1b c0       	rjmp	.+54     	; 0x3a8 <int1Config+0x52>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD3); setBit(DDRD, PD3);	break;
     372:	5b 98       	cbi	0x0b, 3	; 11
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD3); setBit(DDRD, PD3);	break;
     374:	53 9a       	sbi	0x0a, 3	; 10
     376:	04 c0       	rjmp	.+8      	; 0x380 <int1Config+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD3); clrBit(DDRD, PD3);	break;
     378:	5b 98       	cbi	0x0b, 3	; 11
     37a:	01 c0       	rjmp	.+2      	; 0x37e <int1Config+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD3); clrBit(DDRD, PD3);	break;
     37c:	5b 9a       	sbi	0x0b, 3	; 11
     37e:	53 98       	cbi	0x0a, 3	; 10
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}

	if(sense != SENSE_NO_CHANGE){
     380:	6f 3f       	cpi	r22, 0xFF	; 255
     382:	a1 f0       	breq	.+40     	; 0x3ac <int1Config+0x56>
		aux8 = EICRA & ~(0x03 << ISC10);
     384:	80 91 69 00 	lds	r24, 0x0069
     388:	83 7f       	andi	r24, 0xF3	; 243
		switch(sense){
     38a:	61 30       	cpi	r22, 0x01	; 1
     38c:	39 f0       	breq	.+14     	; 0x39c <int1Config+0x46>
     38e:	48 f0       	brcs	.+18     	; 0x3a2 <int1Config+0x4c>
     390:	62 30       	cpi	r22, 0x02	; 2
     392:	31 f0       	breq	.+12     	; 0x3a0 <int1Config+0x4a>
     394:	63 30       	cpi	r22, 0x03	; 3
     396:	61 f4       	brne	.+24     	; 0x3b0 <int1Config+0x5a>
			case SENSE_LOW_LEVEL:		break;
			case SENSE_ANY_EDGE:		aux8 |= (0x01 << ISC10);			break;
			case SENSE_FALLING_EDGE:	aux8 |= (0x02 << ISC10);			break;
			case SENSE_RISING_EDGE:		aux8 |= (0x03 << ISC10);			break;
     398:	8c 60       	ori	r24, 0x0C	; 12
     39a:	03 c0       	rjmp	.+6      	; 0x3a2 <int1Config+0x4c>

	if(sense != SENSE_NO_CHANGE){
		aux8 = EICRA & ~(0x03 << ISC10);
		switch(sense){
			case SENSE_LOW_LEVEL:		break;
			case SENSE_ANY_EDGE:		aux8 |= (0x01 << ISC10);			break;
     39c:	84 60       	ori	r24, 0x04	; 4
     39e:	01 c0       	rjmp	.+2      	; 0x3a2 <int1Config+0x4c>
			case SENSE_FALLING_EDGE:	aux8 |= (0x02 << ISC10);			break;
     3a0:	88 60       	ori	r24, 0x08	; 8
			case SENSE_RISING_EDGE:		aux8 |= (0x03 << ISC10);			break;
			case SENSE_NO_CHANGE:		break;
			default:					return RESULT_INT_SENSE_VALUE_UNSUPPORTED;	break;
		}
		EICRA = aux8;
     3a2:	80 93 69 00 	sts	0x0069, r24
     3a6:	02 c0       	rjmp	.+4      	; 0x3ac <int1Config+0x56>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD3); setBit(DDRD, PD3);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD3); setBit(DDRD, PD3);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD3); clrBit(DDRD, PD3);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD3); clrBit(DDRD, PD3);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     3a8:	81 e0       	ldi	r24, 0x01	; 1
     3aa:	08 95       	ret
			default:					return RESULT_INT_SENSE_VALUE_UNSUPPORTED;	break;
		}
		EICRA = aux8;
	}

	return RESULT_OK;
     3ac:	80 e0       	ldi	r24, 0x00	; 0
     3ae:	08 95       	ret
			case SENSE_LOW_LEVEL:		break;
			case SENSE_ANY_EDGE:		aux8 |= (0x01 << ISC10);			break;
			case SENSE_FALLING_EDGE:	aux8 |= (0x02 << ISC10);			break;
			case SENSE_RISING_EDGE:		aux8 |= (0x03 << ISC10);			break;
			case SENSE_NO_CHANGE:		break;
			default:					return RESULT_INT_SENSE_VALUE_UNSUPPORTED;	break;
     3b0:	82 e0       	ldi	r24, 0x02	; 2
		}
		EICRA = aux8;
	}

	return RESULT_OK;
}
     3b2:	08 95       	ret

000003b4 <int1ActivateInterrupt>:
 * Activates the external interrupt int1
 * -------------------------------------------------------------------------- */

void int1ActivateInterrupt(void)
{
	setBit(EIMSK, INT1);
     3b4:	e9 9a       	sbi	0x1d, 1	; 29
     3b6:	08 95       	ret

000003b8 <int1DeactivateInterrupt>:
 * Deactivates the external interrupt int1
 * -------------------------------------------------------------------------- */

void int1DeactivateInterrupt(void)
{
	clrBit(EIMSK, INT1);
     3b8:	e9 98       	cbi	0x1d, 1	; 29
     3ba:	08 95       	ret

000003bc <int1ClearInterruptRequest>:
 * Clears the external interrupt int1 request
 * -------------------------------------------------------------------------- */

void int1ClearInterruptRequest(void)
{
	setBit(EIFR, INTF1);
     3bc:	e1 9a       	sbi	0x1c, 1	; 28
     3be:	08 95       	ret

000003c0 <pcint7_0Enable>:
 * Enables the external interrupt pcint in port B
 * -------------------------------------------------------------------------- */

void pcint7_0Enable(void)
{
	setBit(PCICR, PCIE0);
     3c0:	e8 e6       	ldi	r30, 0x68	; 104
     3c2:	f0 e0       	ldi	r31, 0x00	; 0
     3c4:	80 81       	ld	r24, Z
     3c6:	81 60       	ori	r24, 0x01	; 1
     3c8:	80 83       	st	Z, r24
     3ca:	08 95       	ret

000003cc <pcint7_0Disable>:
 * Disables the external interrupt pcint in port B
 * -------------------------------------------------------------------------- */

void pcint7_0Disable(void)
{
	clrBit(PCICR, PCIE0);
     3cc:	e8 e6       	ldi	r30, 0x68	; 104
     3ce:	f0 e0       	ldi	r31, 0x00	; 0
     3d0:	80 81       	ld	r24, Z
     3d2:	8e 7f       	andi	r24, 0xFE	; 254
     3d4:	80 83       	st	Z, r24
     3d6:	08 95       	ret

000003d8 <pcint7_0ClearInterruptRequest>:
 * Disables the external interrupt pcint in port B
 * -------------------------------------------------------------------------- */

void pcint7_0ClearInterruptRequest(void)
{
	setBit(PCIFR, PCIF0);
     3d8:	d8 9a       	sbi	0x1b, 0	; 27
     3da:	08 95       	ret

000003dc <pcint0ActivateInterrupt>:
 * Activates the external interrupt pcint0 and configures port mode in PB0
 * -------------------------------------------------------------------------- */

resultValue_t pcint0ActivateInterrupt(portMode_t port)
{
	switch(port){
     3dc:	82 30       	cpi	r24, 0x02	; 2
     3de:	79 f0       	breq	.+30     	; 0x3fe <pcint0ActivateInterrupt+0x22>
     3e0:	30 f4       	brcc	.+12     	; 0x3ee <pcint0ActivateInterrupt+0x12>
     3e2:	88 23       	and	r24, r24
     3e4:	49 f0       	breq	.+18     	; 0x3f8 <pcint0ActivateInterrupt+0x1c>
     3e6:	81 30       	cpi	r24, 0x01	; 1
     3e8:	a9 f4       	brne	.+42     	; 0x414 <pcint0ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB0); setBit(DDRB, PB0);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB0); setBit(DDRB, PB0);	break;
     3ea:	28 9a       	sbi	0x05, 0	; 5
     3ec:	06 c0       	rjmp	.+12     	; 0x3fa <pcint0ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint0 and configures port mode in PB0
 * -------------------------------------------------------------------------- */

resultValue_t pcint0ActivateInterrupt(portMode_t port)
{
	switch(port){
     3ee:	83 30       	cpi	r24, 0x03	; 3
     3f0:	41 f0       	breq	.+16     	; 0x402 <pcint0ActivateInterrupt+0x26>
     3f2:	8f 3f       	cpi	r24, 0xFF	; 255
     3f4:	41 f0       	breq	.+16     	; 0x406 <pcint0ActivateInterrupt+0x2a>
     3f6:	0e c0       	rjmp	.+28     	; 0x414 <pcint0ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB0); setBit(DDRB, PB0);	break;
     3f8:	28 98       	cbi	0x05, 0	; 5
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB0); setBit(DDRB, PB0);	break;
     3fa:	20 9a       	sbi	0x04, 0	; 4
     3fc:	04 c0       	rjmp	.+8      	; 0x406 <pcint0ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB0); clrBit(DDRB, PB0);	break;
     3fe:	28 98       	cbi	0x05, 0	; 5
     400:	01 c0       	rjmp	.+2      	; 0x404 <pcint0ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB0); clrBit(DDRB, PB0);	break;
     402:	28 9a       	sbi	0x05, 0	; 5
     404:	20 98       	cbi	0x04, 0	; 4
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK0, PCINT0);
     406:	80 91 6b 00 	lds	r24, 0x006B
     40a:	81 60       	ori	r24, 0x01	; 1
     40c:	80 93 6b 00 	sts	0x006B, r24
	return RESULT_OK;
     410:	80 e0       	ldi	r24, 0x00	; 0
     412:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB0); setBit(DDRB, PB0);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB0); setBit(DDRB, PB0);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB0); clrBit(DDRB, PB0);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB0); clrBit(DDRB, PB0);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     414:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK0, PCINT0);
	return RESULT_OK;
}
     416:	08 95       	ret

00000418 <pcint0DeactivateInterrupt>:
 * Deactivates the external interrupt pcint0 in PB0
 * -------------------------------------------------------------------------- */

void pcint0DeactivateInterrupt(void)
{
	clrBit(PCMSK0, PCINT0);
     418:	eb e6       	ldi	r30, 0x6B	; 107
     41a:	f0 e0       	ldi	r31, 0x00	; 0
     41c:	80 81       	ld	r24, Z
     41e:	8e 7f       	andi	r24, 0xFE	; 254
     420:	80 83       	st	Z, r24
     422:	08 95       	ret

00000424 <pcint1ActivateInterrupt>:
 * Activates the external interrupt pcint1 and configures port mode in PB1
 * -------------------------------------------------------------------------- */

resultValue_t pcint1ActivateInterrupt(portMode_t port)
{
	switch(port){
     424:	82 30       	cpi	r24, 0x02	; 2
     426:	79 f0       	breq	.+30     	; 0x446 <pcint1ActivateInterrupt+0x22>
     428:	30 f4       	brcc	.+12     	; 0x436 <pcint1ActivateInterrupt+0x12>
     42a:	88 23       	and	r24, r24
     42c:	49 f0       	breq	.+18     	; 0x440 <pcint1ActivateInterrupt+0x1c>
     42e:	81 30       	cpi	r24, 0x01	; 1
     430:	a9 f4       	brne	.+42     	; 0x45c <pcint1ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB1); setBit(DDRB, PB1);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB1); setBit(DDRB, PB1);	break;
     432:	29 9a       	sbi	0x05, 1	; 5
     434:	06 c0       	rjmp	.+12     	; 0x442 <pcint1ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint1 and configures port mode in PB1
 * -------------------------------------------------------------------------- */

resultValue_t pcint1ActivateInterrupt(portMode_t port)
{
	switch(port){
     436:	83 30       	cpi	r24, 0x03	; 3
     438:	41 f0       	breq	.+16     	; 0x44a <pcint1ActivateInterrupt+0x26>
     43a:	8f 3f       	cpi	r24, 0xFF	; 255
     43c:	41 f0       	breq	.+16     	; 0x44e <pcint1ActivateInterrupt+0x2a>
     43e:	0e c0       	rjmp	.+28     	; 0x45c <pcint1ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB1); setBit(DDRB, PB1);	break;
     440:	29 98       	cbi	0x05, 1	; 5
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB1); setBit(DDRB, PB1);	break;
     442:	21 9a       	sbi	0x04, 1	; 4
     444:	04 c0       	rjmp	.+8      	; 0x44e <pcint1ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB1); clrBit(DDRB, PB1);	break;
     446:	29 98       	cbi	0x05, 1	; 5
     448:	01 c0       	rjmp	.+2      	; 0x44c <pcint1ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB1); clrBit(DDRB, PB1);	break;
     44a:	29 9a       	sbi	0x05, 1	; 5
     44c:	21 98       	cbi	0x04, 1	; 4
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK0, PCINT1);
     44e:	80 91 6b 00 	lds	r24, 0x006B
     452:	82 60       	ori	r24, 0x02	; 2
     454:	80 93 6b 00 	sts	0x006B, r24
	return RESULT_OK;
     458:	80 e0       	ldi	r24, 0x00	; 0
     45a:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB1); setBit(DDRB, PB1);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB1); setBit(DDRB, PB1);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB1); clrBit(DDRB, PB1);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB1); clrBit(DDRB, PB1);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     45c:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK0, PCINT1);
	return RESULT_OK;
}
     45e:	08 95       	ret

00000460 <pcint1DeactivateInterrupt>:
 * Deactivates the external interrupt pcint1 in PB1
 * -------------------------------------------------------------------------- */

void pcint1DeactivateInterrupt(void)
{
	clrBit(PCMSK0, PCINT1);
     460:	eb e6       	ldi	r30, 0x6B	; 107
     462:	f0 e0       	ldi	r31, 0x00	; 0
     464:	80 81       	ld	r24, Z
     466:	8d 7f       	andi	r24, 0xFD	; 253
     468:	80 83       	st	Z, r24
     46a:	08 95       	ret

0000046c <pcint2ActivateInterrupt>:
 * Activates the external interrupt pcint2 and configures port mode in PB2
 * -------------------------------------------------------------------------- */

resultValue_t pcint2ActivateInterrupt(portMode_t port)
{
	switch(port){
     46c:	82 30       	cpi	r24, 0x02	; 2
     46e:	79 f0       	breq	.+30     	; 0x48e <pcint2ActivateInterrupt+0x22>
     470:	30 f4       	brcc	.+12     	; 0x47e <pcint2ActivateInterrupt+0x12>
     472:	88 23       	and	r24, r24
     474:	49 f0       	breq	.+18     	; 0x488 <pcint2ActivateInterrupt+0x1c>
     476:	81 30       	cpi	r24, 0x01	; 1
     478:	a9 f4       	brne	.+42     	; 0x4a4 <pcint2ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB2); setBit(DDRB, PB2);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB2); setBit(DDRB, PB2);	break;
     47a:	2a 9a       	sbi	0x05, 2	; 5
     47c:	06 c0       	rjmp	.+12     	; 0x48a <pcint2ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint2 and configures port mode in PB2
 * -------------------------------------------------------------------------- */

resultValue_t pcint2ActivateInterrupt(portMode_t port)
{
	switch(port){
     47e:	83 30       	cpi	r24, 0x03	; 3
     480:	41 f0       	breq	.+16     	; 0x492 <pcint2ActivateInterrupt+0x26>
     482:	8f 3f       	cpi	r24, 0xFF	; 255
     484:	41 f0       	breq	.+16     	; 0x496 <pcint2ActivateInterrupt+0x2a>
     486:	0e c0       	rjmp	.+28     	; 0x4a4 <pcint2ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB2); setBit(DDRB, PB2);	break;
     488:	2a 98       	cbi	0x05, 2	; 5
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB2); setBit(DDRB, PB2);	break;
     48a:	22 9a       	sbi	0x04, 2	; 4
     48c:	04 c0       	rjmp	.+8      	; 0x496 <pcint2ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB2); clrBit(DDRB, PB2);	break;
     48e:	2a 98       	cbi	0x05, 2	; 5
     490:	01 c0       	rjmp	.+2      	; 0x494 <pcint2ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB2); clrBit(DDRB, PB2);	break;
     492:	2a 9a       	sbi	0x05, 2	; 5
     494:	22 98       	cbi	0x04, 2	; 4
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK0, PCINT2);
     496:	80 91 6b 00 	lds	r24, 0x006B
     49a:	84 60       	ori	r24, 0x04	; 4
     49c:	80 93 6b 00 	sts	0x006B, r24
	return RESULT_OK;
     4a0:	80 e0       	ldi	r24, 0x00	; 0
     4a2:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB2); setBit(DDRB, PB2);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB2); setBit(DDRB, PB2);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB2); clrBit(DDRB, PB2);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB2); clrBit(DDRB, PB2);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     4a4:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK0, PCINT2);
	return RESULT_OK;
}
     4a6:	08 95       	ret

000004a8 <pcint2DeactivateInterrupt>:
 * Deactivates the external interrupt pcint2 in PB2
 * -------------------------------------------------------------------------- */

void pcint2DeactivateInterrupt(void)
{
	clrBit(PCMSK0, PCINT2);
     4a8:	eb e6       	ldi	r30, 0x6B	; 107
     4aa:	f0 e0       	ldi	r31, 0x00	; 0
     4ac:	80 81       	ld	r24, Z
     4ae:	8b 7f       	andi	r24, 0xFB	; 251
     4b0:	80 83       	st	Z, r24
     4b2:	08 95       	ret

000004b4 <pcint3ActivateInterrupt>:
 * Activates the external interrupt pcint3 and configures port mode in PB3
 * -------------------------------------------------------------------------- */

resultValue_t pcint3ActivateInterrupt(portMode_t port)
{
	switch(port){
     4b4:	82 30       	cpi	r24, 0x02	; 2
     4b6:	79 f0       	breq	.+30     	; 0x4d6 <pcint3ActivateInterrupt+0x22>
     4b8:	30 f4       	brcc	.+12     	; 0x4c6 <pcint3ActivateInterrupt+0x12>
     4ba:	88 23       	and	r24, r24
     4bc:	49 f0       	breq	.+18     	; 0x4d0 <pcint3ActivateInterrupt+0x1c>
     4be:	81 30       	cpi	r24, 0x01	; 1
     4c0:	a9 f4       	brne	.+42     	; 0x4ec <pcint3ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB3); setBit(DDRB, PB3);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB3); setBit(DDRB, PB3);	break;
     4c2:	2b 9a       	sbi	0x05, 3	; 5
     4c4:	06 c0       	rjmp	.+12     	; 0x4d2 <pcint3ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint3 and configures port mode in PB3
 * -------------------------------------------------------------------------- */

resultValue_t pcint3ActivateInterrupt(portMode_t port)
{
	switch(port){
     4c6:	83 30       	cpi	r24, 0x03	; 3
     4c8:	41 f0       	breq	.+16     	; 0x4da <pcint3ActivateInterrupt+0x26>
     4ca:	8f 3f       	cpi	r24, 0xFF	; 255
     4cc:	41 f0       	breq	.+16     	; 0x4de <pcint3ActivateInterrupt+0x2a>
     4ce:	0e c0       	rjmp	.+28     	; 0x4ec <pcint3ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB3); setBit(DDRB, PB3);	break;
     4d0:	2b 98       	cbi	0x05, 3	; 5
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB3); setBit(DDRB, PB3);	break;
     4d2:	23 9a       	sbi	0x04, 3	; 4
     4d4:	04 c0       	rjmp	.+8      	; 0x4de <pcint3ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB3); clrBit(DDRB, PB3);	break;
     4d6:	2b 98       	cbi	0x05, 3	; 5
     4d8:	01 c0       	rjmp	.+2      	; 0x4dc <pcint3ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB3); clrBit(DDRB, PB3);	break;
     4da:	2b 9a       	sbi	0x05, 3	; 5
     4dc:	23 98       	cbi	0x04, 3	; 4
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK0, PCINT3);
     4de:	80 91 6b 00 	lds	r24, 0x006B
     4e2:	88 60       	ori	r24, 0x08	; 8
     4e4:	80 93 6b 00 	sts	0x006B, r24
	return RESULT_OK;
     4e8:	80 e0       	ldi	r24, 0x00	; 0
     4ea:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB3); setBit(DDRB, PB3);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB3); setBit(DDRB, PB3);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB3); clrBit(DDRB, PB3);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB3); clrBit(DDRB, PB3);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     4ec:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK0, PCINT3);
	return RESULT_OK;
}
     4ee:	08 95       	ret

000004f0 <pcint3DeactivateInterrupt>:
 * Deactivates the external interrupt pcint3 in PB3
 * -------------------------------------------------------------------------- */

void pcint3DeactivateInterrupt(void)
{
	clrBit(PCMSK0, PCINT3);
     4f0:	eb e6       	ldi	r30, 0x6B	; 107
     4f2:	f0 e0       	ldi	r31, 0x00	; 0
     4f4:	80 81       	ld	r24, Z
     4f6:	87 7f       	andi	r24, 0xF7	; 247
     4f8:	80 83       	st	Z, r24
     4fa:	08 95       	ret

000004fc <pcint4ActivateInterrupt>:
 * Activates the external interrupt pcint4 and configures port mode in PB4
 * -------------------------------------------------------------------------- */

resultValue_t pcint4ActivateInterrupt(portMode_t port)
{
	switch(port){
     4fc:	82 30       	cpi	r24, 0x02	; 2
     4fe:	79 f0       	breq	.+30     	; 0x51e <pcint4ActivateInterrupt+0x22>
     500:	30 f4       	brcc	.+12     	; 0x50e <pcint4ActivateInterrupt+0x12>
     502:	88 23       	and	r24, r24
     504:	49 f0       	breq	.+18     	; 0x518 <pcint4ActivateInterrupt+0x1c>
     506:	81 30       	cpi	r24, 0x01	; 1
     508:	a9 f4       	brne	.+42     	; 0x534 <pcint4ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB4); setBit(DDRB, PB4);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB4); setBit(DDRB, PB4);	break;
     50a:	2c 9a       	sbi	0x05, 4	; 5
     50c:	06 c0       	rjmp	.+12     	; 0x51a <pcint4ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint4 and configures port mode in PB4
 * -------------------------------------------------------------------------- */

resultValue_t pcint4ActivateInterrupt(portMode_t port)
{
	switch(port){
     50e:	83 30       	cpi	r24, 0x03	; 3
     510:	41 f0       	breq	.+16     	; 0x522 <pcint4ActivateInterrupt+0x26>
     512:	8f 3f       	cpi	r24, 0xFF	; 255
     514:	41 f0       	breq	.+16     	; 0x526 <pcint4ActivateInterrupt+0x2a>
     516:	0e c0       	rjmp	.+28     	; 0x534 <pcint4ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB4); setBit(DDRB, PB4);	break;
     518:	2c 98       	cbi	0x05, 4	; 5
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB4); setBit(DDRB, PB4);	break;
     51a:	24 9a       	sbi	0x04, 4	; 4
     51c:	04 c0       	rjmp	.+8      	; 0x526 <pcint4ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB4); clrBit(DDRB, PB4);	break;
     51e:	2c 98       	cbi	0x05, 4	; 5
     520:	01 c0       	rjmp	.+2      	; 0x524 <pcint4ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB4); clrBit(DDRB, PB4);	break;
     522:	2c 9a       	sbi	0x05, 4	; 5
     524:	24 98       	cbi	0x04, 4	; 4
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK0, PCINT4);
     526:	80 91 6b 00 	lds	r24, 0x006B
     52a:	80 61       	ori	r24, 0x10	; 16
     52c:	80 93 6b 00 	sts	0x006B, r24
	return RESULT_OK;
     530:	80 e0       	ldi	r24, 0x00	; 0
     532:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB4); setBit(DDRB, PB4);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB4); setBit(DDRB, PB4);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB4); clrBit(DDRB, PB4);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB4); clrBit(DDRB, PB4);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     534:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK0, PCINT4);
	return RESULT_OK;
}
     536:	08 95       	ret

00000538 <pcint4DeactivateInterrupt>:
 * Deactivates the external interrupt pcint4 in PB4
 * -------------------------------------------------------------------------- */

void pcint4DeactivateInterrupt(void)
{
	clrBit(PCMSK0, PCINT4);
     538:	eb e6       	ldi	r30, 0x6B	; 107
     53a:	f0 e0       	ldi	r31, 0x00	; 0
     53c:	80 81       	ld	r24, Z
     53e:	8f 7e       	andi	r24, 0xEF	; 239
     540:	80 83       	st	Z, r24
     542:	08 95       	ret

00000544 <pcint5ActivateInterrupt>:
 * Activates the external interrupt pcint5 and configures port mode in PB5
 * -------------------------------------------------------------------------- */

resultValue_t pcint5ActivateInterrupt(portMode_t port)
{
	switch(port){
     544:	82 30       	cpi	r24, 0x02	; 2
     546:	79 f0       	breq	.+30     	; 0x566 <pcint5ActivateInterrupt+0x22>
     548:	30 f4       	brcc	.+12     	; 0x556 <pcint5ActivateInterrupt+0x12>
     54a:	88 23       	and	r24, r24
     54c:	49 f0       	breq	.+18     	; 0x560 <pcint5ActivateInterrupt+0x1c>
     54e:	81 30       	cpi	r24, 0x01	; 1
     550:	a9 f4       	brne	.+42     	; 0x57c <pcint5ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB5); setBit(DDRB, PB5);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB5); setBit(DDRB, PB5);	break;
     552:	2d 9a       	sbi	0x05, 5	; 5
     554:	06 c0       	rjmp	.+12     	; 0x562 <pcint5ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint5 and configures port mode in PB5
 * -------------------------------------------------------------------------- */

resultValue_t pcint5ActivateInterrupt(portMode_t port)
{
	switch(port){
     556:	83 30       	cpi	r24, 0x03	; 3
     558:	41 f0       	breq	.+16     	; 0x56a <pcint5ActivateInterrupt+0x26>
     55a:	8f 3f       	cpi	r24, 0xFF	; 255
     55c:	41 f0       	breq	.+16     	; 0x56e <pcint5ActivateInterrupt+0x2a>
     55e:	0e c0       	rjmp	.+28     	; 0x57c <pcint5ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB5); setBit(DDRB, PB5);	break;
     560:	2d 98       	cbi	0x05, 5	; 5
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB5); setBit(DDRB, PB5);	break;
     562:	25 9a       	sbi	0x04, 5	; 4
     564:	04 c0       	rjmp	.+8      	; 0x56e <pcint5ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB5); clrBit(DDRB, PB5);	break;
     566:	2d 98       	cbi	0x05, 5	; 5
     568:	01 c0       	rjmp	.+2      	; 0x56c <pcint5ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB5); clrBit(DDRB, PB5);	break;
     56a:	2d 9a       	sbi	0x05, 5	; 5
     56c:	25 98       	cbi	0x04, 5	; 4
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK0, PCINT5);
     56e:	80 91 6b 00 	lds	r24, 0x006B
     572:	80 62       	ori	r24, 0x20	; 32
     574:	80 93 6b 00 	sts	0x006B, r24
	return RESULT_OK;
     578:	80 e0       	ldi	r24, 0x00	; 0
     57a:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB5); setBit(DDRB, PB5);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB5); setBit(DDRB, PB5);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB5); clrBit(DDRB, PB5);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB5); clrBit(DDRB, PB5);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     57c:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK0, PCINT5);
	return RESULT_OK;
}
     57e:	08 95       	ret

00000580 <pcint5DeactivateInterrupt>:
 * Deactivates the external interrupt pcint5 in PB5
 * -------------------------------------------------------------------------- */

void pcint5DeactivateInterrupt(void)
{
	clrBit(PCMSK0, PCINT5);
     580:	eb e6       	ldi	r30, 0x6B	; 107
     582:	f0 e0       	ldi	r31, 0x00	; 0
     584:	80 81       	ld	r24, Z
     586:	8f 7d       	andi	r24, 0xDF	; 223
     588:	80 83       	st	Z, r24
     58a:	08 95       	ret

0000058c <pcint6ActivateInterrupt>:
 * Activates the external interrupt pcint6 and configures port mode in PB6
 * -------------------------------------------------------------------------- */

resultValue_t pcint6ActivateInterrupt(portMode_t port)
{
	switch(port){
     58c:	82 30       	cpi	r24, 0x02	; 2
     58e:	79 f0       	breq	.+30     	; 0x5ae <pcint6ActivateInterrupt+0x22>
     590:	30 f4       	brcc	.+12     	; 0x59e <pcint6ActivateInterrupt+0x12>
     592:	88 23       	and	r24, r24
     594:	49 f0       	breq	.+18     	; 0x5a8 <pcint6ActivateInterrupt+0x1c>
     596:	81 30       	cpi	r24, 0x01	; 1
     598:	a9 f4       	brne	.+42     	; 0x5c4 <pcint6ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB6); setBit(DDRB, PB6);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB6); setBit(DDRB, PB6);	break;
     59a:	2e 9a       	sbi	0x05, 6	; 5
     59c:	06 c0       	rjmp	.+12     	; 0x5aa <pcint6ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint6 and configures port mode in PB6
 * -------------------------------------------------------------------------- */

resultValue_t pcint6ActivateInterrupt(portMode_t port)
{
	switch(port){
     59e:	83 30       	cpi	r24, 0x03	; 3
     5a0:	41 f0       	breq	.+16     	; 0x5b2 <pcint6ActivateInterrupt+0x26>
     5a2:	8f 3f       	cpi	r24, 0xFF	; 255
     5a4:	41 f0       	breq	.+16     	; 0x5b6 <pcint6ActivateInterrupt+0x2a>
     5a6:	0e c0       	rjmp	.+28     	; 0x5c4 <pcint6ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB6); setBit(DDRB, PB6);	break;
     5a8:	2e 98       	cbi	0x05, 6	; 5
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB6); setBit(DDRB, PB6);	break;
     5aa:	26 9a       	sbi	0x04, 6	; 4
     5ac:	04 c0       	rjmp	.+8      	; 0x5b6 <pcint6ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB6); clrBit(DDRB, PB6);	break;
     5ae:	2e 98       	cbi	0x05, 6	; 5
     5b0:	01 c0       	rjmp	.+2      	; 0x5b4 <pcint6ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB6); clrBit(DDRB, PB6);	break;
     5b2:	2e 9a       	sbi	0x05, 6	; 5
     5b4:	26 98       	cbi	0x04, 6	; 4
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK0, PCINT6);
     5b6:	80 91 6b 00 	lds	r24, 0x006B
     5ba:	80 64       	ori	r24, 0x40	; 64
     5bc:	80 93 6b 00 	sts	0x006B, r24
	return RESULT_OK;
     5c0:	80 e0       	ldi	r24, 0x00	; 0
     5c2:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB6); setBit(DDRB, PB6);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB6); setBit(DDRB, PB6);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB6); clrBit(DDRB, PB6);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB6); clrBit(DDRB, PB6);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     5c4:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK0, PCINT6);
	return RESULT_OK;
}
     5c6:	08 95       	ret

000005c8 <pcint6DeactivateInterrupt>:
 * Deactivates the external interrupt pcint6 in PB6
 * -------------------------------------------------------------------------- */

void pcint6DeactivateInterrupt(void)
{
	clrBit(PCMSK0, PCINT6);
     5c8:	eb e6       	ldi	r30, 0x6B	; 107
     5ca:	f0 e0       	ldi	r31, 0x00	; 0
     5cc:	80 81       	ld	r24, Z
     5ce:	8f 7b       	andi	r24, 0xBF	; 191
     5d0:	80 83       	st	Z, r24
     5d2:	08 95       	ret

000005d4 <pcint7ActivateInterrupt>:
 * Activates the external interrupt pcint7 and configures port mode in PB7
 * -------------------------------------------------------------------------- */

resultValue_t pcint7ActivateInterrupt(portMode_t port)
{
	switch(port){
     5d4:	82 30       	cpi	r24, 0x02	; 2
     5d6:	79 f0       	breq	.+30     	; 0x5f6 <pcint7ActivateInterrupt+0x22>
     5d8:	30 f4       	brcc	.+12     	; 0x5e6 <pcint7ActivateInterrupt+0x12>
     5da:	88 23       	and	r24, r24
     5dc:	49 f0       	breq	.+18     	; 0x5f0 <pcint7ActivateInterrupt+0x1c>
     5de:	81 30       	cpi	r24, 0x01	; 1
     5e0:	a9 f4       	brne	.+42     	; 0x60c <pcint7ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB7); setBit(DDRB, PB7);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB7); setBit(DDRB, PB7);	break;
     5e2:	2f 9a       	sbi	0x05, 7	; 5
     5e4:	06 c0       	rjmp	.+12     	; 0x5f2 <pcint7ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint7 and configures port mode in PB7
 * -------------------------------------------------------------------------- */

resultValue_t pcint7ActivateInterrupt(portMode_t port)
{
	switch(port){
     5e6:	83 30       	cpi	r24, 0x03	; 3
     5e8:	41 f0       	breq	.+16     	; 0x5fa <pcint7ActivateInterrupt+0x26>
     5ea:	8f 3f       	cpi	r24, 0xFF	; 255
     5ec:	41 f0       	breq	.+16     	; 0x5fe <pcint7ActivateInterrupt+0x2a>
     5ee:	0e c0       	rjmp	.+28     	; 0x60c <pcint7ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB7); setBit(DDRB, PB7);	break;
     5f0:	2f 98       	cbi	0x05, 7	; 5
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB7); setBit(DDRB, PB7);	break;
     5f2:	27 9a       	sbi	0x04, 7	; 4
     5f4:	04 c0       	rjmp	.+8      	; 0x5fe <pcint7ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB7); clrBit(DDRB, PB7);	break;
     5f6:	2f 98       	cbi	0x05, 7	; 5
     5f8:	01 c0       	rjmp	.+2      	; 0x5fc <pcint7ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB7); clrBit(DDRB, PB7);	break;
     5fa:	2f 9a       	sbi	0x05, 7	; 5
     5fc:	27 98       	cbi	0x04, 7	; 4
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK0, PCINT7);
     5fe:	80 91 6b 00 	lds	r24, 0x006B
     602:	80 68       	ori	r24, 0x80	; 128
     604:	80 93 6b 00 	sts	0x006B, r24
	return RESULT_OK;
     608:	80 e0       	ldi	r24, 0x00	; 0
     60a:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB7); setBit(DDRB, PB7);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB7); setBit(DDRB, PB7);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB7); clrBit(DDRB, PB7);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB7); clrBit(DDRB, PB7);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     60c:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK0, PCINT7);
	return RESULT_OK;
}
     60e:	08 95       	ret

00000610 <pcint7DeactivateInterrupt>:
 * Deactivates the external interrupt pcint7 in PB7
 * -------------------------------------------------------------------------- */

void pcint7DeactivateInterrupt(void)
{
	clrBit(PCMSK0, PCINT7);
     610:	eb e6       	ldi	r30, 0x6B	; 107
     612:	f0 e0       	ldi	r31, 0x00	; 0
     614:	80 81       	ld	r24, Z
     616:	8f 77       	andi	r24, 0x7F	; 127
     618:	80 83       	st	Z, r24
     61a:	08 95       	ret

0000061c <pcint14_8Enable>:
 * Enables the external interrupt pcint in port C
 * -------------------------------------------------------------------------- */

void pcint14_8Enable(void)
{
	setBit(PCICR, PCIE1);
     61c:	e8 e6       	ldi	r30, 0x68	; 104
     61e:	f0 e0       	ldi	r31, 0x00	; 0
     620:	80 81       	ld	r24, Z
     622:	82 60       	ori	r24, 0x02	; 2
     624:	80 83       	st	Z, r24
     626:	08 95       	ret

00000628 <pcint14_8Disable>:
 * Disables the external interrupt pcint in port C
 * -------------------------------------------------------------------------- */

void pcint14_8Disable(void)
{
	clrBit(PCICR, PCIE1);
     628:	e8 e6       	ldi	r30, 0x68	; 104
     62a:	f0 e0       	ldi	r31, 0x00	; 0
     62c:	80 81       	ld	r24, Z
     62e:	8d 7f       	andi	r24, 0xFD	; 253
     630:	80 83       	st	Z, r24
     632:	08 95       	ret

00000634 <pcint14_8ClearInterruptRequest>:
 * Disables the external interrupt pcint in port C
 * -------------------------------------------------------------------------- */

void pcint14_8ClearInterruptRequest(void)
{
	setBit(PCIFR, PCIF1);
     634:	d9 9a       	sbi	0x1b, 1	; 27
     636:	08 95       	ret

00000638 <pcint8ActivateInterrupt>:
 * Activates the external interrupt pcint8 and configures port mode in PC0
 * -------------------------------------------------------------------------- */

resultValue_t pcint8ActivateInterrupt(portMode_t port)
{
	switch(port){
     638:	82 30       	cpi	r24, 0x02	; 2
     63a:	79 f0       	breq	.+30     	; 0x65a <pcint8ActivateInterrupt+0x22>
     63c:	30 f4       	brcc	.+12     	; 0x64a <pcint8ActivateInterrupt+0x12>
     63e:	88 23       	and	r24, r24
     640:	49 f0       	breq	.+18     	; 0x654 <pcint8ActivateInterrupt+0x1c>
     642:	81 30       	cpi	r24, 0x01	; 1
     644:	a9 f4       	brne	.+42     	; 0x670 <pcint8ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC0); setBit(DDRC, PC0);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC0); setBit(DDRC, PC0);	break;
     646:	40 9a       	sbi	0x08, 0	; 8
     648:	06 c0       	rjmp	.+12     	; 0x656 <pcint8ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint8 and configures port mode in PC0
 * -------------------------------------------------------------------------- */

resultValue_t pcint8ActivateInterrupt(portMode_t port)
{
	switch(port){
     64a:	83 30       	cpi	r24, 0x03	; 3
     64c:	41 f0       	breq	.+16     	; 0x65e <pcint8ActivateInterrupt+0x26>
     64e:	8f 3f       	cpi	r24, 0xFF	; 255
     650:	41 f0       	breq	.+16     	; 0x662 <pcint8ActivateInterrupt+0x2a>
     652:	0e c0       	rjmp	.+28     	; 0x670 <pcint8ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC0); setBit(DDRC, PC0);	break;
     654:	40 98       	cbi	0x08, 0	; 8
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC0); setBit(DDRC, PC0);	break;
     656:	38 9a       	sbi	0x07, 0	; 7
     658:	04 c0       	rjmp	.+8      	; 0x662 <pcint8ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTC, PC0); clrBit(DDRC, PC0);	break;
     65a:	40 98       	cbi	0x08, 0	; 8
     65c:	01 c0       	rjmp	.+2      	; 0x660 <pcint8ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTC, PC0); clrBit(DDRC, PC0);	break;
     65e:	40 9a       	sbi	0x08, 0	; 8
     660:	38 98       	cbi	0x07, 0	; 7
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK1, PCINT8);
     662:	80 91 6c 00 	lds	r24, 0x006C
     666:	81 60       	ori	r24, 0x01	; 1
     668:	80 93 6c 00 	sts	0x006C, r24
	return RESULT_OK;
     66c:	80 e0       	ldi	r24, 0x00	; 0
     66e:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC0); setBit(DDRC, PC0);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC0); setBit(DDRC, PC0);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTC, PC0); clrBit(DDRC, PC0);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTC, PC0); clrBit(DDRC, PC0);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     670:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK1, PCINT8);
	return RESULT_OK;
}
     672:	08 95       	ret

00000674 <pcint8DeactivateInterrupt>:
 * Deactivates the external interrupt pcint8 in PC0
 * -------------------------------------------------------------------------- */

void pcint8DeactivateInterrupt(void)
{
	clrBit(PCMSK1, PCINT8);
     674:	ec e6       	ldi	r30, 0x6C	; 108
     676:	f0 e0       	ldi	r31, 0x00	; 0
     678:	80 81       	ld	r24, Z
     67a:	8e 7f       	andi	r24, 0xFE	; 254
     67c:	80 83       	st	Z, r24
     67e:	08 95       	ret

00000680 <pcint9ActivateInterrupt>:
 * Activates the external interrupt pcint9 and configures port mode in PC1
 * -------------------------------------------------------------------------- */

resultValue_t pcint9ActivateInterrupt(portMode_t port)
{
	switch(port){
     680:	82 30       	cpi	r24, 0x02	; 2
     682:	79 f0       	breq	.+30     	; 0x6a2 <pcint9ActivateInterrupt+0x22>
     684:	30 f4       	brcc	.+12     	; 0x692 <pcint9ActivateInterrupt+0x12>
     686:	88 23       	and	r24, r24
     688:	49 f0       	breq	.+18     	; 0x69c <pcint9ActivateInterrupt+0x1c>
     68a:	81 30       	cpi	r24, 0x01	; 1
     68c:	a9 f4       	brne	.+42     	; 0x6b8 <pcint9ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC1); setBit(DDRC, PC1);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC1); setBit(DDRC, PC1);	break;
     68e:	41 9a       	sbi	0x08, 1	; 8
     690:	06 c0       	rjmp	.+12     	; 0x69e <pcint9ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint9 and configures port mode in PC1
 * -------------------------------------------------------------------------- */

resultValue_t pcint9ActivateInterrupt(portMode_t port)
{
	switch(port){
     692:	83 30       	cpi	r24, 0x03	; 3
     694:	41 f0       	breq	.+16     	; 0x6a6 <pcint9ActivateInterrupt+0x26>
     696:	8f 3f       	cpi	r24, 0xFF	; 255
     698:	41 f0       	breq	.+16     	; 0x6aa <pcint9ActivateInterrupt+0x2a>
     69a:	0e c0       	rjmp	.+28     	; 0x6b8 <pcint9ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC1); setBit(DDRC, PC1);	break;
     69c:	41 98       	cbi	0x08, 1	; 8
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC1); setBit(DDRC, PC1);	break;
     69e:	39 9a       	sbi	0x07, 1	; 7
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <pcint9ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTC, PC1); clrBit(DDRC, PC1);	break;
     6a2:	41 98       	cbi	0x08, 1	; 8
     6a4:	01 c0       	rjmp	.+2      	; 0x6a8 <pcint9ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTC, PC1); clrBit(DDRC, PC1);	break;
     6a6:	41 9a       	sbi	0x08, 1	; 8
     6a8:	39 98       	cbi	0x07, 1	; 7
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK1, PCINT9);
     6aa:	80 91 6c 00 	lds	r24, 0x006C
     6ae:	82 60       	ori	r24, 0x02	; 2
     6b0:	80 93 6c 00 	sts	0x006C, r24
	return RESULT_OK;
     6b4:	80 e0       	ldi	r24, 0x00	; 0
     6b6:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC1); setBit(DDRC, PC1);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC1); setBit(DDRC, PC1);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTC, PC1); clrBit(DDRC, PC1);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTC, PC1); clrBit(DDRC, PC1);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     6b8:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK1, PCINT9);
	return RESULT_OK;
}
     6ba:	08 95       	ret

000006bc <pcint9DeactivateInterrupt>:
 * Deactivates the external interrupt pcint9 in PC1
 * -------------------------------------------------------------------------- */

void pcint9DeactivateInterrupt(void)
{
	clrBit(PCMSK1, PCINT9);
     6bc:	ec e6       	ldi	r30, 0x6C	; 108
     6be:	f0 e0       	ldi	r31, 0x00	; 0
     6c0:	80 81       	ld	r24, Z
     6c2:	8d 7f       	andi	r24, 0xFD	; 253
     6c4:	80 83       	st	Z, r24
     6c6:	08 95       	ret

000006c8 <pcint10ActivateInterrupt>:
 * Activates the external interrupt pcint10 and configures port mode in PC2
 * -------------------------------------------------------------------------- */

resultValue_t pcint10ActivateInterrupt(portMode_t port)
{
	switch(port){
     6c8:	82 30       	cpi	r24, 0x02	; 2
     6ca:	79 f0       	breq	.+30     	; 0x6ea <pcint10ActivateInterrupt+0x22>
     6cc:	30 f4       	brcc	.+12     	; 0x6da <pcint10ActivateInterrupt+0x12>
     6ce:	88 23       	and	r24, r24
     6d0:	49 f0       	breq	.+18     	; 0x6e4 <pcint10ActivateInterrupt+0x1c>
     6d2:	81 30       	cpi	r24, 0x01	; 1
     6d4:	a9 f4       	brne	.+42     	; 0x700 <pcint10ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC2); setBit(DDRC, PC2);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC2); setBit(DDRC, PC2);	break;
     6d6:	42 9a       	sbi	0x08, 2	; 8
     6d8:	06 c0       	rjmp	.+12     	; 0x6e6 <pcint10ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint10 and configures port mode in PC2
 * -------------------------------------------------------------------------- */

resultValue_t pcint10ActivateInterrupt(portMode_t port)
{
	switch(port){
     6da:	83 30       	cpi	r24, 0x03	; 3
     6dc:	41 f0       	breq	.+16     	; 0x6ee <pcint10ActivateInterrupt+0x26>
     6de:	8f 3f       	cpi	r24, 0xFF	; 255
     6e0:	41 f0       	breq	.+16     	; 0x6f2 <pcint10ActivateInterrupt+0x2a>
     6e2:	0e c0       	rjmp	.+28     	; 0x700 <pcint10ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC2); setBit(DDRC, PC2);	break;
     6e4:	42 98       	cbi	0x08, 2	; 8
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC2); setBit(DDRC, PC2);	break;
     6e6:	3a 9a       	sbi	0x07, 2	; 7
     6e8:	04 c0       	rjmp	.+8      	; 0x6f2 <pcint10ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTC, PC2); clrBit(DDRC, PC2);	break;
     6ea:	42 98       	cbi	0x08, 2	; 8
     6ec:	01 c0       	rjmp	.+2      	; 0x6f0 <pcint10ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTC, PC2); clrBit(DDRC, PC2);	break;
     6ee:	42 9a       	sbi	0x08, 2	; 8
     6f0:	3a 98       	cbi	0x07, 2	; 7
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK1, PCINT10);
     6f2:	80 91 6c 00 	lds	r24, 0x006C
     6f6:	84 60       	ori	r24, 0x04	; 4
     6f8:	80 93 6c 00 	sts	0x006C, r24
	return RESULT_OK;
     6fc:	80 e0       	ldi	r24, 0x00	; 0
     6fe:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC2); setBit(DDRC, PC2);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC2); setBit(DDRC, PC2);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTC, PC2); clrBit(DDRC, PC2);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTC, PC2); clrBit(DDRC, PC2);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     700:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK1, PCINT10);
	return RESULT_OK;
}
     702:	08 95       	ret

00000704 <pcint10DeactivateInterrupt>:
 * Deactivates the external interrupt pcint10 in PC2
 * -------------------------------------------------------------------------- */

void pcint10DeactivateInterrupt(void)
{
	clrBit(PCMSK1, PCINT10);
     704:	ec e6       	ldi	r30, 0x6C	; 108
     706:	f0 e0       	ldi	r31, 0x00	; 0
     708:	80 81       	ld	r24, Z
     70a:	8b 7f       	andi	r24, 0xFB	; 251
     70c:	80 83       	st	Z, r24
     70e:	08 95       	ret

00000710 <pcint11ActivateInterrupt>:
 * Activates the external interrupt pcint11 and configures port mode in PC3
 * -------------------------------------------------------------------------- */

resultValue_t pcint11ActivateInterrupt(portMode_t port)
{
	switch(port){
     710:	82 30       	cpi	r24, 0x02	; 2
     712:	79 f0       	breq	.+30     	; 0x732 <pcint11ActivateInterrupt+0x22>
     714:	30 f4       	brcc	.+12     	; 0x722 <pcint11ActivateInterrupt+0x12>
     716:	88 23       	and	r24, r24
     718:	49 f0       	breq	.+18     	; 0x72c <pcint11ActivateInterrupt+0x1c>
     71a:	81 30       	cpi	r24, 0x01	; 1
     71c:	a9 f4       	brne	.+42     	; 0x748 <pcint11ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC3); setBit(DDRC, PC3);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC3); setBit(DDRC, PC3);	break;
     71e:	43 9a       	sbi	0x08, 3	; 8
     720:	06 c0       	rjmp	.+12     	; 0x72e <pcint11ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint11 and configures port mode in PC3
 * -------------------------------------------------------------------------- */

resultValue_t pcint11ActivateInterrupt(portMode_t port)
{
	switch(port){
     722:	83 30       	cpi	r24, 0x03	; 3
     724:	41 f0       	breq	.+16     	; 0x736 <pcint11ActivateInterrupt+0x26>
     726:	8f 3f       	cpi	r24, 0xFF	; 255
     728:	41 f0       	breq	.+16     	; 0x73a <pcint11ActivateInterrupt+0x2a>
     72a:	0e c0       	rjmp	.+28     	; 0x748 <pcint11ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC3); setBit(DDRC, PC3);	break;
     72c:	43 98       	cbi	0x08, 3	; 8
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC3); setBit(DDRC, PC3);	break;
     72e:	3b 9a       	sbi	0x07, 3	; 7
     730:	04 c0       	rjmp	.+8      	; 0x73a <pcint11ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTC, PC3); clrBit(DDRC, PC3);	break;
     732:	43 98       	cbi	0x08, 3	; 8
     734:	01 c0       	rjmp	.+2      	; 0x738 <pcint11ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTC, PC3); clrBit(DDRC, PC3);	break;
     736:	43 9a       	sbi	0x08, 3	; 8
     738:	3b 98       	cbi	0x07, 3	; 7
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK1, PCINT11);
     73a:	80 91 6c 00 	lds	r24, 0x006C
     73e:	88 60       	ori	r24, 0x08	; 8
     740:	80 93 6c 00 	sts	0x006C, r24
	return RESULT_OK;
     744:	80 e0       	ldi	r24, 0x00	; 0
     746:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC3); setBit(DDRC, PC3);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC3); setBit(DDRC, PC3);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTC, PC3); clrBit(DDRC, PC3);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTC, PC3); clrBit(DDRC, PC3);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     748:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK1, PCINT11);
	return RESULT_OK;
}
     74a:	08 95       	ret

0000074c <pcint11DeactivateInterrupt>:
 * Deactivates the external interrupt pcint11 in PC3
 * -------------------------------------------------------------------------- */

void pcint11DeactivateInterrupt(void)
{
	clrBit(PCMSK1, PCINT11);
     74c:	ec e6       	ldi	r30, 0x6C	; 108
     74e:	f0 e0       	ldi	r31, 0x00	; 0
     750:	80 81       	ld	r24, Z
     752:	87 7f       	andi	r24, 0xF7	; 247
     754:	80 83       	st	Z, r24
     756:	08 95       	ret

00000758 <pcint12ActivateInterrupt>:
 * Activates the external interrupt pcint12 and configures port mode in PC4
 * -------------------------------------------------------------------------- */

resultValue_t pcint12ActivateInterrupt(portMode_t port)
{
	switch(port){
     758:	82 30       	cpi	r24, 0x02	; 2
     75a:	79 f0       	breq	.+30     	; 0x77a <pcint12ActivateInterrupt+0x22>
     75c:	30 f4       	brcc	.+12     	; 0x76a <pcint12ActivateInterrupt+0x12>
     75e:	88 23       	and	r24, r24
     760:	49 f0       	breq	.+18     	; 0x774 <pcint12ActivateInterrupt+0x1c>
     762:	81 30       	cpi	r24, 0x01	; 1
     764:	a9 f4       	brne	.+42     	; 0x790 <pcint12ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC4); setBit(DDRC, PC4);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC4); setBit(DDRC, PC4);	break;
     766:	44 9a       	sbi	0x08, 4	; 8
     768:	06 c0       	rjmp	.+12     	; 0x776 <pcint12ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint12 and configures port mode in PC4
 * -------------------------------------------------------------------------- */

resultValue_t pcint12ActivateInterrupt(portMode_t port)
{
	switch(port){
     76a:	83 30       	cpi	r24, 0x03	; 3
     76c:	41 f0       	breq	.+16     	; 0x77e <pcint12ActivateInterrupt+0x26>
     76e:	8f 3f       	cpi	r24, 0xFF	; 255
     770:	41 f0       	breq	.+16     	; 0x782 <pcint12ActivateInterrupt+0x2a>
     772:	0e c0       	rjmp	.+28     	; 0x790 <pcint12ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC4); setBit(DDRC, PC4);	break;
     774:	44 98       	cbi	0x08, 4	; 8
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC4); setBit(DDRC, PC4);	break;
     776:	3c 9a       	sbi	0x07, 4	; 7
     778:	04 c0       	rjmp	.+8      	; 0x782 <pcint12ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTC, PC4); clrBit(DDRC, PC4);	break;
     77a:	44 98       	cbi	0x08, 4	; 8
     77c:	01 c0       	rjmp	.+2      	; 0x780 <pcint12ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTC, PC4); clrBit(DDRC, PC4);	break;
     77e:	44 9a       	sbi	0x08, 4	; 8
     780:	3c 98       	cbi	0x07, 4	; 7
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK1, PCINT12);
     782:	80 91 6c 00 	lds	r24, 0x006C
     786:	80 61       	ori	r24, 0x10	; 16
     788:	80 93 6c 00 	sts	0x006C, r24
	return RESULT_OK;
     78c:	80 e0       	ldi	r24, 0x00	; 0
     78e:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC4); setBit(DDRC, PC4);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC4); setBit(DDRC, PC4);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTC, PC4); clrBit(DDRC, PC4);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTC, PC4); clrBit(DDRC, PC4);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     790:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK1, PCINT12);
	return RESULT_OK;
}
     792:	08 95       	ret

00000794 <pcint12DeactivateInterrupt>:
 * Deactivates the external interrupt pcint12 in PC4
 * -------------------------------------------------------------------------- */

void pcint12DeactivateInterrupt(void)
{
	clrBit(PCMSK1, PCINT12);
     794:	ec e6       	ldi	r30, 0x6C	; 108
     796:	f0 e0       	ldi	r31, 0x00	; 0
     798:	80 81       	ld	r24, Z
     79a:	8f 7e       	andi	r24, 0xEF	; 239
     79c:	80 83       	st	Z, r24
     79e:	08 95       	ret

000007a0 <pcint13ActivateInterrupt>:
 * Activates the external interrupt pcint13 and configures port mode in PC5
 * -------------------------------------------------------------------------- */

resultValue_t pcint13ActivateInterrupt(portMode_t port)
{
	switch(port){
     7a0:	82 30       	cpi	r24, 0x02	; 2
     7a2:	79 f0       	breq	.+30     	; 0x7c2 <pcint13ActivateInterrupt+0x22>
     7a4:	30 f4       	brcc	.+12     	; 0x7b2 <pcint13ActivateInterrupt+0x12>
     7a6:	88 23       	and	r24, r24
     7a8:	49 f0       	breq	.+18     	; 0x7bc <pcint13ActivateInterrupt+0x1c>
     7aa:	81 30       	cpi	r24, 0x01	; 1
     7ac:	a9 f4       	brne	.+42     	; 0x7d8 <pcint13ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC5); setBit(DDRC, PC5);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC5); setBit(DDRC, PC5);	break;
     7ae:	45 9a       	sbi	0x08, 5	; 8
     7b0:	06 c0       	rjmp	.+12     	; 0x7be <pcint13ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint13 and configures port mode in PC5
 * -------------------------------------------------------------------------- */

resultValue_t pcint13ActivateInterrupt(portMode_t port)
{
	switch(port){
     7b2:	83 30       	cpi	r24, 0x03	; 3
     7b4:	41 f0       	breq	.+16     	; 0x7c6 <pcint13ActivateInterrupt+0x26>
     7b6:	8f 3f       	cpi	r24, 0xFF	; 255
     7b8:	41 f0       	breq	.+16     	; 0x7ca <pcint13ActivateInterrupt+0x2a>
     7ba:	0e c0       	rjmp	.+28     	; 0x7d8 <pcint13ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC5); setBit(DDRC, PC5);	break;
     7bc:	45 98       	cbi	0x08, 5	; 8
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC5); setBit(DDRC, PC5);	break;
     7be:	3d 9a       	sbi	0x07, 5	; 7
     7c0:	04 c0       	rjmp	.+8      	; 0x7ca <pcint13ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTC, PC5); clrBit(DDRC, PC5);	break;
     7c2:	45 98       	cbi	0x08, 5	; 8
     7c4:	01 c0       	rjmp	.+2      	; 0x7c8 <pcint13ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTC, PC5); clrBit(DDRC, PC5);	break;
     7c6:	45 9a       	sbi	0x08, 5	; 8
     7c8:	3d 98       	cbi	0x07, 5	; 7
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK1, PCINT13);
     7ca:	80 91 6c 00 	lds	r24, 0x006C
     7ce:	80 62       	ori	r24, 0x20	; 32
     7d0:	80 93 6c 00 	sts	0x006C, r24
	return RESULT_OK;
     7d4:	80 e0       	ldi	r24, 0x00	; 0
     7d6:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC5); setBit(DDRC, PC5);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC5); setBit(DDRC, PC5);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTC, PC5); clrBit(DDRC, PC5);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTC, PC5); clrBit(DDRC, PC5);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     7d8:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK1, PCINT13);
	return RESULT_OK;
}
     7da:	08 95       	ret

000007dc <pcint13DeactivateInterrupt>:
 * Deactivates the external interrupt pcint13 in PC5
 * -------------------------------------------------------------------------- */

void pcint13DeactivateInterrupt(void)
{
	clrBit(PCMSK1, PCINT13);
     7dc:	ec e6       	ldi	r30, 0x6C	; 108
     7de:	f0 e0       	ldi	r31, 0x00	; 0
     7e0:	80 81       	ld	r24, Z
     7e2:	8f 7d       	andi	r24, 0xDF	; 223
     7e4:	80 83       	st	Z, r24
     7e6:	08 95       	ret

000007e8 <pcint14ActivateInterrupt>:
 * Activates the external interrupt pcint14 and configures port mode in PC6
 * -------------------------------------------------------------------------- */

resultValue_t pcint14ActivateInterrupt(portMode_t port)
{
	switch(port){
     7e8:	82 30       	cpi	r24, 0x02	; 2
     7ea:	79 f0       	breq	.+30     	; 0x80a <pcint14ActivateInterrupt+0x22>
     7ec:	30 f4       	brcc	.+12     	; 0x7fa <pcint14ActivateInterrupt+0x12>
     7ee:	88 23       	and	r24, r24
     7f0:	49 f0       	breq	.+18     	; 0x804 <pcint14ActivateInterrupt+0x1c>
     7f2:	81 30       	cpi	r24, 0x01	; 1
     7f4:	a9 f4       	brne	.+42     	; 0x820 <pcint14ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC6); setBit(DDRC, PC6);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC6); setBit(DDRC, PC6);	break;
     7f6:	46 9a       	sbi	0x08, 6	; 8
     7f8:	06 c0       	rjmp	.+12     	; 0x806 <pcint14ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint14 and configures port mode in PC6
 * -------------------------------------------------------------------------- */

resultValue_t pcint14ActivateInterrupt(portMode_t port)
{
	switch(port){
     7fa:	83 30       	cpi	r24, 0x03	; 3
     7fc:	41 f0       	breq	.+16     	; 0x80e <pcint14ActivateInterrupt+0x26>
     7fe:	8f 3f       	cpi	r24, 0xFF	; 255
     800:	41 f0       	breq	.+16     	; 0x812 <pcint14ActivateInterrupt+0x2a>
     802:	0e c0       	rjmp	.+28     	; 0x820 <pcint14ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC6); setBit(DDRC, PC6);	break;
     804:	46 98       	cbi	0x08, 6	; 8
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC6); setBit(DDRC, PC6);	break;
     806:	3e 9a       	sbi	0x07, 6	; 7
     808:	04 c0       	rjmp	.+8      	; 0x812 <pcint14ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTC, PC6); clrBit(DDRC, PC6);	break;
     80a:	46 98       	cbi	0x08, 6	; 8
     80c:	01 c0       	rjmp	.+2      	; 0x810 <pcint14ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTC, PC6); clrBit(DDRC, PC6);	break;
     80e:	46 9a       	sbi	0x08, 6	; 8
     810:	3e 98       	cbi	0x07, 6	; 7
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK1, PCINT14);
     812:	80 91 6c 00 	lds	r24, 0x006C
     816:	80 64       	ori	r24, 0x40	; 64
     818:	80 93 6c 00 	sts	0x006C, r24
	return RESULT_OK;
     81c:	80 e0       	ldi	r24, 0x00	; 0
     81e:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC6); setBit(DDRC, PC6);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC6); setBit(DDRC, PC6);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTC, PC6); clrBit(DDRC, PC6);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTC, PC6); clrBit(DDRC, PC6);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     820:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK1, PCINT14);
	return RESULT_OK;
}
     822:	08 95       	ret

00000824 <pcint14DeactivateInterrupt>:
 * Deactivates the external interrupt pcint14 in PC6
 * -------------------------------------------------------------------------- */

void pcint14DeactivateInterrupt(void)
{
	clrBit(PCMSK1, PCINT14);
     824:	ec e6       	ldi	r30, 0x6C	; 108
     826:	f0 e0       	ldi	r31, 0x00	; 0
     828:	80 81       	ld	r24, Z
     82a:	8f 7b       	andi	r24, 0xBF	; 191
     82c:	80 83       	st	Z, r24
     82e:	08 95       	ret

00000830 <pcint23_16Enable>:
 * Enables the external interrupt pcint in port D
 * -------------------------------------------------------------------------- */

void pcint23_16Enable(void)
{
	setBit(PCICR, PCIE2);
     830:	e8 e6       	ldi	r30, 0x68	; 104
     832:	f0 e0       	ldi	r31, 0x00	; 0
     834:	80 81       	ld	r24, Z
     836:	84 60       	ori	r24, 0x04	; 4
     838:	80 83       	st	Z, r24
     83a:	08 95       	ret

0000083c <pcint23_16Disable>:
 * Disables the external interrupt pcint in port D
 * -------------------------------------------------------------------------- */

void pcint23_16Disable(void)
{
	clrBit(PCICR, PCIE2);
     83c:	e8 e6       	ldi	r30, 0x68	; 104
     83e:	f0 e0       	ldi	r31, 0x00	; 0
     840:	80 81       	ld	r24, Z
     842:	8b 7f       	andi	r24, 0xFB	; 251
     844:	80 83       	st	Z, r24
     846:	08 95       	ret

00000848 <pcint23_16ClearInterruptRequest>:
 * Disables the external interrupt pcint in port D
 * -------------------------------------------------------------------------- */

void pcint23_16ClearInterruptRequest(void)
{
	setBit(PCIFR, PCIF2);
     848:	da 9a       	sbi	0x1b, 2	; 27
     84a:	08 95       	ret

0000084c <pcint16ActivateInterrupt>:
 * Activates the external interrupt pcint16 and configures port mode in PD0
 * -------------------------------------------------------------------------- */

resultValue_t pcint16ActivateInterrupt(portMode_t port)
{
	switch(port){
     84c:	82 30       	cpi	r24, 0x02	; 2
     84e:	79 f0       	breq	.+30     	; 0x86e <pcint16ActivateInterrupt+0x22>
     850:	30 f4       	brcc	.+12     	; 0x85e <pcint16ActivateInterrupt+0x12>
     852:	88 23       	and	r24, r24
     854:	49 f0       	breq	.+18     	; 0x868 <pcint16ActivateInterrupt+0x1c>
     856:	81 30       	cpi	r24, 0x01	; 1
     858:	a9 f4       	brne	.+42     	; 0x884 <pcint16ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD0); setBit(DDRD, PD0);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD0); setBit(DDRD, PD0);	break;
     85a:	58 9a       	sbi	0x0b, 0	; 11
     85c:	06 c0       	rjmp	.+12     	; 0x86a <pcint16ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint16 and configures port mode in PD0
 * -------------------------------------------------------------------------- */

resultValue_t pcint16ActivateInterrupt(portMode_t port)
{
	switch(port){
     85e:	83 30       	cpi	r24, 0x03	; 3
     860:	41 f0       	breq	.+16     	; 0x872 <pcint16ActivateInterrupt+0x26>
     862:	8f 3f       	cpi	r24, 0xFF	; 255
     864:	41 f0       	breq	.+16     	; 0x876 <pcint16ActivateInterrupt+0x2a>
     866:	0e c0       	rjmp	.+28     	; 0x884 <pcint16ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD0); setBit(DDRD, PD0);	break;
     868:	58 98       	cbi	0x0b, 0	; 11
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD0); setBit(DDRD, PD0);	break;
     86a:	50 9a       	sbi	0x0a, 0	; 10
     86c:	04 c0       	rjmp	.+8      	; 0x876 <pcint16ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD0); clrBit(DDRD, PD0);	break;
     86e:	58 98       	cbi	0x0b, 0	; 11
     870:	01 c0       	rjmp	.+2      	; 0x874 <pcint16ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD0); clrBit(DDRD, PD0);	break;
     872:	58 9a       	sbi	0x0b, 0	; 11
     874:	50 98       	cbi	0x0a, 0	; 10
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK2, PCINT16);
     876:	80 91 6d 00 	lds	r24, 0x006D
     87a:	81 60       	ori	r24, 0x01	; 1
     87c:	80 93 6d 00 	sts	0x006D, r24
	return RESULT_OK;
     880:	80 e0       	ldi	r24, 0x00	; 0
     882:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD0); setBit(DDRD, PD0);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD0); setBit(DDRD, PD0);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD0); clrBit(DDRD, PD0);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD0); clrBit(DDRD, PD0);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     884:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK2, PCINT16);
	return RESULT_OK;
}
     886:	08 95       	ret

00000888 <pcint16DeactivateInterrupt>:
 * Deactivates the external interrupt pcint16 in PD0
 * -------------------------------------------------------------------------- */

void pcint16DeactivateInterrupt(void)
{
	clrBit(PCMSK2, PCINT16);
     888:	ed e6       	ldi	r30, 0x6D	; 109
     88a:	f0 e0       	ldi	r31, 0x00	; 0
     88c:	80 81       	ld	r24, Z
     88e:	8e 7f       	andi	r24, 0xFE	; 254
     890:	80 83       	st	Z, r24
     892:	08 95       	ret

00000894 <pcint17ActivateInterrupt>:
 * Activates the external interrupt pcint17 and configures port mode in PD1
 * -------------------------------------------------------------------------- */

resultValue_t pcint17ActivateInterrupt(portMode_t port)
{
	switch(port){
     894:	82 30       	cpi	r24, 0x02	; 2
     896:	79 f0       	breq	.+30     	; 0x8b6 <pcint17ActivateInterrupt+0x22>
     898:	30 f4       	brcc	.+12     	; 0x8a6 <pcint17ActivateInterrupt+0x12>
     89a:	88 23       	and	r24, r24
     89c:	49 f0       	breq	.+18     	; 0x8b0 <pcint17ActivateInterrupt+0x1c>
     89e:	81 30       	cpi	r24, 0x01	; 1
     8a0:	a9 f4       	brne	.+42     	; 0x8cc <pcint17ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD1); setBit(DDRD, PD1);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD1); setBit(DDRD, PD1);	break;
     8a2:	59 9a       	sbi	0x0b, 1	; 11
     8a4:	06 c0       	rjmp	.+12     	; 0x8b2 <pcint17ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint17 and configures port mode in PD1
 * -------------------------------------------------------------------------- */

resultValue_t pcint17ActivateInterrupt(portMode_t port)
{
	switch(port){
     8a6:	83 30       	cpi	r24, 0x03	; 3
     8a8:	41 f0       	breq	.+16     	; 0x8ba <pcint17ActivateInterrupt+0x26>
     8aa:	8f 3f       	cpi	r24, 0xFF	; 255
     8ac:	41 f0       	breq	.+16     	; 0x8be <pcint17ActivateInterrupt+0x2a>
     8ae:	0e c0       	rjmp	.+28     	; 0x8cc <pcint17ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD1); setBit(DDRD, PD1);	break;
     8b0:	59 98       	cbi	0x0b, 1	; 11
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD1); setBit(DDRD, PD1);	break;
     8b2:	51 9a       	sbi	0x0a, 1	; 10
     8b4:	04 c0       	rjmp	.+8      	; 0x8be <pcint17ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD1); clrBit(DDRD, PD1);	break;
     8b6:	59 98       	cbi	0x0b, 1	; 11
     8b8:	01 c0       	rjmp	.+2      	; 0x8bc <pcint17ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD1); clrBit(DDRD, PD1);	break;
     8ba:	59 9a       	sbi	0x0b, 1	; 11
     8bc:	51 98       	cbi	0x0a, 1	; 10
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK2, PCINT17);
     8be:	80 91 6d 00 	lds	r24, 0x006D
     8c2:	82 60       	ori	r24, 0x02	; 2
     8c4:	80 93 6d 00 	sts	0x006D, r24
	return RESULT_OK;
     8c8:	80 e0       	ldi	r24, 0x00	; 0
     8ca:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD1); setBit(DDRD, PD1);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD1); setBit(DDRD, PD1);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD1); clrBit(DDRD, PD1);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD1); clrBit(DDRD, PD1);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     8cc:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK2, PCINT17);
	return RESULT_OK;
}
     8ce:	08 95       	ret

000008d0 <pcint17DeactivateInterrupt>:
 * Deactivates the external interrupt pcint17 in PD1
 * -------------------------------------------------------------------------- */

void pcint17DeactivateInterrupt(void)
{
	clrBit(PCMSK2, PCINT17);
     8d0:	ed e6       	ldi	r30, 0x6D	; 109
     8d2:	f0 e0       	ldi	r31, 0x00	; 0
     8d4:	80 81       	ld	r24, Z
     8d6:	8d 7f       	andi	r24, 0xFD	; 253
     8d8:	80 83       	st	Z, r24
     8da:	08 95       	ret

000008dc <pcint18ActivateInterrupt>:
 * Activates the external interrupt pcint18 and configures port mode in PD2
 * -------------------------------------------------------------------------- */

resultValue_t pcint18ActivateInterrupt(portMode_t port)
{
	switch(port){
     8dc:	82 30       	cpi	r24, 0x02	; 2
     8de:	79 f0       	breq	.+30     	; 0x8fe <pcint18ActivateInterrupt+0x22>
     8e0:	30 f4       	brcc	.+12     	; 0x8ee <pcint18ActivateInterrupt+0x12>
     8e2:	88 23       	and	r24, r24
     8e4:	49 f0       	breq	.+18     	; 0x8f8 <pcint18ActivateInterrupt+0x1c>
     8e6:	81 30       	cpi	r24, 0x01	; 1
     8e8:	a9 f4       	brne	.+42     	; 0x914 <__stack+0x15>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD2); setBit(DDRD, PD2);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD2); setBit(DDRD, PD2);	break;
     8ea:	5a 9a       	sbi	0x0b, 2	; 11
     8ec:	06 c0       	rjmp	.+12     	; 0x8fa <pcint18ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint18 and configures port mode in PD2
 * -------------------------------------------------------------------------- */

resultValue_t pcint18ActivateInterrupt(portMode_t port)
{
	switch(port){
     8ee:	83 30       	cpi	r24, 0x03	; 3
     8f0:	41 f0       	breq	.+16     	; 0x902 <__stack+0x3>
     8f2:	8f 3f       	cpi	r24, 0xFF	; 255
     8f4:	41 f0       	breq	.+16     	; 0x906 <__stack+0x7>
     8f6:	0e c0       	rjmp	.+28     	; 0x914 <__stack+0x15>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD2); setBit(DDRD, PD2);	break;
     8f8:	5a 98       	cbi	0x0b, 2	; 11
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD2); setBit(DDRD, PD2);	break;
     8fa:	52 9a       	sbi	0x0a, 2	; 10
     8fc:	04 c0       	rjmp	.+8      	; 0x906 <__stack+0x7>
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD2); clrBit(DDRD, PD2);	break;
     8fe:	5a 98       	cbi	0x0b, 2	; 11
     900:	01 c0       	rjmp	.+2      	; 0x904 <__stack+0x5>
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD2); clrBit(DDRD, PD2);	break;
     902:	5a 9a       	sbi	0x0b, 2	; 11
     904:	52 98       	cbi	0x0a, 2	; 10
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK2, PCINT18);
     906:	80 91 6d 00 	lds	r24, 0x006D
     90a:	84 60       	ori	r24, 0x04	; 4
     90c:	80 93 6d 00 	sts	0x006D, r24
	return RESULT_OK;
     910:	80 e0       	ldi	r24, 0x00	; 0
     912:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD2); setBit(DDRD, PD2);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD2); setBit(DDRD, PD2);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD2); clrBit(DDRD, PD2);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD2); clrBit(DDRD, PD2);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     914:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK2, PCINT18);
	return RESULT_OK;
}
     916:	08 95       	ret

00000918 <pcint18DeactivateInterrupt>:
 * Deactivates the external interrupt pcint18 in PD2
 * -------------------------------------------------------------------------- */

void pcint18DeactivateInterrupt(void)
{
	clrBit(PCMSK2, PCINT18);
     918:	ed e6       	ldi	r30, 0x6D	; 109
     91a:	f0 e0       	ldi	r31, 0x00	; 0
     91c:	80 81       	ld	r24, Z
     91e:	8b 7f       	andi	r24, 0xFB	; 251
     920:	80 83       	st	Z, r24
     922:	08 95       	ret

00000924 <pcint19ActivateInterrupt>:
 * Activates the external interrupt pcint19 and configures port mode in PD3
 * -------------------------------------------------------------------------- */

resultValue_t pcint19ActivateInterrupt(portMode_t port)
{
	switch(port){
     924:	82 30       	cpi	r24, 0x02	; 2
     926:	79 f0       	breq	.+30     	; 0x946 <pcint19ActivateInterrupt+0x22>
     928:	30 f4       	brcc	.+12     	; 0x936 <pcint19ActivateInterrupt+0x12>
     92a:	88 23       	and	r24, r24
     92c:	49 f0       	breq	.+18     	; 0x940 <pcint19ActivateInterrupt+0x1c>
     92e:	81 30       	cpi	r24, 0x01	; 1
     930:	a9 f4       	brne	.+42     	; 0x95c <pcint19ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD3); setBit(DDRD, PD3);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD3); setBit(DDRD, PD3);	break;
     932:	5b 9a       	sbi	0x0b, 3	; 11
     934:	06 c0       	rjmp	.+12     	; 0x942 <pcint19ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint19 and configures port mode in PD3
 * -------------------------------------------------------------------------- */

resultValue_t pcint19ActivateInterrupt(portMode_t port)
{
	switch(port){
     936:	83 30       	cpi	r24, 0x03	; 3
     938:	41 f0       	breq	.+16     	; 0x94a <pcint19ActivateInterrupt+0x26>
     93a:	8f 3f       	cpi	r24, 0xFF	; 255
     93c:	41 f0       	breq	.+16     	; 0x94e <pcint19ActivateInterrupt+0x2a>
     93e:	0e c0       	rjmp	.+28     	; 0x95c <pcint19ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD3); setBit(DDRD, PD3);	break;
     940:	5b 98       	cbi	0x0b, 3	; 11
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD3); setBit(DDRD, PD3);	break;
     942:	53 9a       	sbi	0x0a, 3	; 10
     944:	04 c0       	rjmp	.+8      	; 0x94e <pcint19ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD3); clrBit(DDRD, PD3);	break;
     946:	5b 98       	cbi	0x0b, 3	; 11
     948:	01 c0       	rjmp	.+2      	; 0x94c <pcint19ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD3); clrBit(DDRD, PD3);	break;
     94a:	5b 9a       	sbi	0x0b, 3	; 11
     94c:	53 98       	cbi	0x0a, 3	; 10
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK2, PCINT19);
     94e:	80 91 6d 00 	lds	r24, 0x006D
     952:	88 60       	ori	r24, 0x08	; 8
     954:	80 93 6d 00 	sts	0x006D, r24
	return RESULT_OK;
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD3); setBit(DDRD, PD3);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD3); setBit(DDRD, PD3);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD3); clrBit(DDRD, PD3);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD3); clrBit(DDRD, PD3);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     95c:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK2, PCINT19);
	return RESULT_OK;
}
     95e:	08 95       	ret

00000960 <pcint19DeactivateInterrupt>:
 * Deactivates the external interrupt pcint19 in PD3
 * -------------------------------------------------------------------------- */

void pcint19DeactivateInterrupt(void)
{
	clrBit(PCMSK2, PCINT19);
     960:	ed e6       	ldi	r30, 0x6D	; 109
     962:	f0 e0       	ldi	r31, 0x00	; 0
     964:	80 81       	ld	r24, Z
     966:	87 7f       	andi	r24, 0xF7	; 247
     968:	80 83       	st	Z, r24
     96a:	08 95       	ret

0000096c <pcint20ActivateInterrupt>:
 * Activates the external interrupt pcint20 and configures port mode in PD4
 * -------------------------------------------------------------------------- */

resultValue_t pcint20ActivateInterrupt(portMode_t port)
{
	switch(port){
     96c:	82 30       	cpi	r24, 0x02	; 2
     96e:	79 f0       	breq	.+30     	; 0x98e <pcint20ActivateInterrupt+0x22>
     970:	30 f4       	brcc	.+12     	; 0x97e <pcint20ActivateInterrupt+0x12>
     972:	88 23       	and	r24, r24
     974:	49 f0       	breq	.+18     	; 0x988 <pcint20ActivateInterrupt+0x1c>
     976:	81 30       	cpi	r24, 0x01	; 1
     978:	a9 f4       	brne	.+42     	; 0x9a4 <pcint20ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD4); setBit(DDRD, PD4);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD4); setBit(DDRD, PD4);	break;
     97a:	5c 9a       	sbi	0x0b, 4	; 11
     97c:	06 c0       	rjmp	.+12     	; 0x98a <pcint20ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint20 and configures port mode in PD4
 * -------------------------------------------------------------------------- */

resultValue_t pcint20ActivateInterrupt(portMode_t port)
{
	switch(port){
     97e:	83 30       	cpi	r24, 0x03	; 3
     980:	41 f0       	breq	.+16     	; 0x992 <pcint20ActivateInterrupt+0x26>
     982:	8f 3f       	cpi	r24, 0xFF	; 255
     984:	41 f0       	breq	.+16     	; 0x996 <pcint20ActivateInterrupt+0x2a>
     986:	0e c0       	rjmp	.+28     	; 0x9a4 <pcint20ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD4); setBit(DDRD, PD4);	break;
     988:	5c 98       	cbi	0x0b, 4	; 11
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD4); setBit(DDRD, PD4);	break;
     98a:	54 9a       	sbi	0x0a, 4	; 10
     98c:	04 c0       	rjmp	.+8      	; 0x996 <pcint20ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD4); clrBit(DDRD, PD4);	break;
     98e:	5c 98       	cbi	0x0b, 4	; 11
     990:	01 c0       	rjmp	.+2      	; 0x994 <pcint20ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD4); clrBit(DDRD, PD4);	break;
     992:	5c 9a       	sbi	0x0b, 4	; 11
     994:	54 98       	cbi	0x0a, 4	; 10
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK2, PCINT20);
     996:	80 91 6d 00 	lds	r24, 0x006D
     99a:	80 61       	ori	r24, 0x10	; 16
     99c:	80 93 6d 00 	sts	0x006D, r24
	return RESULT_OK;
     9a0:	80 e0       	ldi	r24, 0x00	; 0
     9a2:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD4); setBit(DDRD, PD4);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD4); setBit(DDRD, PD4);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD4); clrBit(DDRD, PD4);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD4); clrBit(DDRD, PD4);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     9a4:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK2, PCINT20);
	return RESULT_OK;
}
     9a6:	08 95       	ret

000009a8 <pcint20DeactivateInterrupt>:
 * Deactivates the external interrupt pcint20 in PD4
 * -------------------------------------------------------------------------- */

void pcint20DeactivateInterrupt(void)
{
	clrBit(PCMSK2, PCINT20);
     9a8:	ed e6       	ldi	r30, 0x6D	; 109
     9aa:	f0 e0       	ldi	r31, 0x00	; 0
     9ac:	80 81       	ld	r24, Z
     9ae:	8f 7e       	andi	r24, 0xEF	; 239
     9b0:	80 83       	st	Z, r24
     9b2:	08 95       	ret

000009b4 <pcint21ActivateInterrupt>:
 * Activates the external interrupt pcint21 and configures port mode in PD5
 * -------------------------------------------------------------------------- */

resultValue_t pcint21ActivateInterrupt(portMode_t port)
{
	switch(port){
     9b4:	82 30       	cpi	r24, 0x02	; 2
     9b6:	79 f0       	breq	.+30     	; 0x9d6 <pcint21ActivateInterrupt+0x22>
     9b8:	30 f4       	brcc	.+12     	; 0x9c6 <pcint21ActivateInterrupt+0x12>
     9ba:	88 23       	and	r24, r24
     9bc:	49 f0       	breq	.+18     	; 0x9d0 <pcint21ActivateInterrupt+0x1c>
     9be:	81 30       	cpi	r24, 0x01	; 1
     9c0:	a9 f4       	brne	.+42     	; 0x9ec <pcint21ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD5); setBit(DDRD, PD5);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD5); setBit(DDRD, PD5);	break;
     9c2:	5d 9a       	sbi	0x0b, 5	; 11
     9c4:	06 c0       	rjmp	.+12     	; 0x9d2 <pcint21ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint21 and configures port mode in PD5
 * -------------------------------------------------------------------------- */

resultValue_t pcint21ActivateInterrupt(portMode_t port)
{
	switch(port){
     9c6:	83 30       	cpi	r24, 0x03	; 3
     9c8:	41 f0       	breq	.+16     	; 0x9da <pcint21ActivateInterrupt+0x26>
     9ca:	8f 3f       	cpi	r24, 0xFF	; 255
     9cc:	41 f0       	breq	.+16     	; 0x9de <pcint21ActivateInterrupt+0x2a>
     9ce:	0e c0       	rjmp	.+28     	; 0x9ec <pcint21ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD5); setBit(DDRD, PD5);	break;
     9d0:	5d 98       	cbi	0x0b, 5	; 11
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD5); setBit(DDRD, PD5);	break;
     9d2:	55 9a       	sbi	0x0a, 5	; 10
     9d4:	04 c0       	rjmp	.+8      	; 0x9de <pcint21ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD5); clrBit(DDRD, PD5);	break;
     9d6:	5d 98       	cbi	0x0b, 5	; 11
     9d8:	01 c0       	rjmp	.+2      	; 0x9dc <pcint21ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD5); clrBit(DDRD, PD5);	break;
     9da:	5d 9a       	sbi	0x0b, 5	; 11
     9dc:	55 98       	cbi	0x0a, 5	; 10
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK2, PCINT21);
     9de:	80 91 6d 00 	lds	r24, 0x006D
     9e2:	80 62       	ori	r24, 0x20	; 32
     9e4:	80 93 6d 00 	sts	0x006D, r24
	return RESULT_OK;
     9e8:	80 e0       	ldi	r24, 0x00	; 0
     9ea:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD5); setBit(DDRD, PD5);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD5); setBit(DDRD, PD5);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD5); clrBit(DDRD, PD5);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD5); clrBit(DDRD, PD5);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     9ec:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK2, PCINT21);
	return RESULT_OK;
}
     9ee:	08 95       	ret

000009f0 <pcint21DeactivateInterrupt>:
 * Deactivates the external interrupt pcint21 in PD5
 * -------------------------------------------------------------------------- */

void pcint21DeactivateInterrupt(void)
{
	clrBit(PCMSK2, PCINT21);
     9f0:	ed e6       	ldi	r30, 0x6D	; 109
     9f2:	f0 e0       	ldi	r31, 0x00	; 0
     9f4:	80 81       	ld	r24, Z
     9f6:	8f 7d       	andi	r24, 0xDF	; 223
     9f8:	80 83       	st	Z, r24
     9fa:	08 95       	ret

000009fc <pcint22ActivateInterrupt>:
 * Activates the external interrupt pcint22 and configures port mode in PD6
 * -------------------------------------------------------------------------- */

resultValue_t pcint22ActivateInterrupt(portMode_t port)
{
	switch(port){
     9fc:	82 30       	cpi	r24, 0x02	; 2
     9fe:	79 f0       	breq	.+30     	; 0xa1e <pcint22ActivateInterrupt+0x22>
     a00:	30 f4       	brcc	.+12     	; 0xa0e <pcint22ActivateInterrupt+0x12>
     a02:	88 23       	and	r24, r24
     a04:	49 f0       	breq	.+18     	; 0xa18 <pcint22ActivateInterrupt+0x1c>
     a06:	81 30       	cpi	r24, 0x01	; 1
     a08:	a9 f4       	brne	.+42     	; 0xa34 <pcint22ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD6); setBit(DDRD, PD6);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD6); setBit(DDRD, PD6);	break;
     a0a:	5e 9a       	sbi	0x0b, 6	; 11
     a0c:	06 c0       	rjmp	.+12     	; 0xa1a <pcint22ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint22 and configures port mode in PD6
 * -------------------------------------------------------------------------- */

resultValue_t pcint22ActivateInterrupt(portMode_t port)
{
	switch(port){
     a0e:	83 30       	cpi	r24, 0x03	; 3
     a10:	41 f0       	breq	.+16     	; 0xa22 <pcint22ActivateInterrupt+0x26>
     a12:	8f 3f       	cpi	r24, 0xFF	; 255
     a14:	41 f0       	breq	.+16     	; 0xa26 <pcint22ActivateInterrupt+0x2a>
     a16:	0e c0       	rjmp	.+28     	; 0xa34 <pcint22ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD6); setBit(DDRD, PD6);	break;
     a18:	5e 98       	cbi	0x0b, 6	; 11
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD6); setBit(DDRD, PD6);	break;
     a1a:	56 9a       	sbi	0x0a, 6	; 10
     a1c:	04 c0       	rjmp	.+8      	; 0xa26 <pcint22ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD6); clrBit(DDRD, PD6);	break;
     a1e:	5e 98       	cbi	0x0b, 6	; 11
     a20:	01 c0       	rjmp	.+2      	; 0xa24 <pcint22ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD6); clrBit(DDRD, PD6);	break;
     a22:	5e 9a       	sbi	0x0b, 6	; 11
     a24:	56 98       	cbi	0x0a, 6	; 10
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK2, PCINT22);
     a26:	80 91 6d 00 	lds	r24, 0x006D
     a2a:	80 64       	ori	r24, 0x40	; 64
     a2c:	80 93 6d 00 	sts	0x006D, r24
	return RESULT_OK;
     a30:	80 e0       	ldi	r24, 0x00	; 0
     a32:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD6); setBit(DDRD, PD6);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD6); setBit(DDRD, PD6);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD6); clrBit(DDRD, PD6);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD6); clrBit(DDRD, PD6);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     a34:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK2, PCINT22);
	return RESULT_OK;
}
     a36:	08 95       	ret

00000a38 <pcint22DeactivateInterrupt>:
 * Deactivates the external interrupt pcint22 in PD6
 * -------------------------------------------------------------------------- */

void pcint22DeactivateInterrupt(void)
{
	clrBit(PCMSK2, PCINT22);
     a38:	ed e6       	ldi	r30, 0x6D	; 109
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	80 81       	ld	r24, Z
     a3e:	8f 7b       	andi	r24, 0xBF	; 191
     a40:	80 83       	st	Z, r24
     a42:	08 95       	ret

00000a44 <pcint23ActivateInterrupt>:
 * Activates the external interrupt pcint23 and configures port mode in PD7
 * -------------------------------------------------------------------------- */

resultValue_t pcint23ActivateInterrupt(portMode_t port)
{
	switch(port){
     a44:	82 30       	cpi	r24, 0x02	; 2
     a46:	79 f0       	breq	.+30     	; 0xa66 <pcint23ActivateInterrupt+0x22>
     a48:	30 f4       	brcc	.+12     	; 0xa56 <pcint23ActivateInterrupt+0x12>
     a4a:	88 23       	and	r24, r24
     a4c:	49 f0       	breq	.+18     	; 0xa60 <pcint23ActivateInterrupt+0x1c>
     a4e:	81 30       	cpi	r24, 0x01	; 1
     a50:	a9 f4       	brne	.+42     	; 0xa7c <pcint23ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD7); setBit(DDRD, PD7);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD7); setBit(DDRD, PD7);	break;
     a52:	5f 9a       	sbi	0x0b, 7	; 11
     a54:	06 c0       	rjmp	.+12     	; 0xa62 <pcint23ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint23 and configures port mode in PD7
 * -------------------------------------------------------------------------- */

resultValue_t pcint23ActivateInterrupt(portMode_t port)
{
	switch(port){
     a56:	83 30       	cpi	r24, 0x03	; 3
     a58:	41 f0       	breq	.+16     	; 0xa6a <pcint23ActivateInterrupt+0x26>
     a5a:	8f 3f       	cpi	r24, 0xFF	; 255
     a5c:	41 f0       	breq	.+16     	; 0xa6e <pcint23ActivateInterrupt+0x2a>
     a5e:	0e c0       	rjmp	.+28     	; 0xa7c <pcint23ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD7); setBit(DDRD, PD7);	break;
     a60:	5f 98       	cbi	0x0b, 7	; 11
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD7); setBit(DDRD, PD7);	break;
     a62:	57 9a       	sbi	0x0a, 7	; 10
     a64:	04 c0       	rjmp	.+8      	; 0xa6e <pcint23ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD7); clrBit(DDRD, PD7);	break;
     a66:	5f 98       	cbi	0x0b, 7	; 11
     a68:	01 c0       	rjmp	.+2      	; 0xa6c <pcint23ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD7); clrBit(DDRD, PD7);	break;
     a6a:	5f 9a       	sbi	0x0b, 7	; 11
     a6c:	57 98       	cbi	0x0a, 7	; 10
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK2, PCINT23);
     a6e:	80 91 6d 00 	lds	r24, 0x006D
     a72:	80 68       	ori	r24, 0x80	; 128
     a74:	80 93 6d 00 	sts	0x006D, r24
	return RESULT_OK;
     a78:	80 e0       	ldi	r24, 0x00	; 0
     a7a:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD7); setBit(DDRD, PD7);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD7); setBit(DDRD, PD7);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD7); clrBit(DDRD, PD7);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD7); clrBit(DDRD, PD7);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     a7c:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK2, PCINT23);
	return RESULT_OK;
}
     a7e:	08 95       	ret

00000a80 <pcint23DeactivateInterrupt>:
 * Deactivates the external interrupt pcint23 in PD7
 * -------------------------------------------------------------------------- */

void pcint23DeactivateInterrupt(void)
{
	clrBit(PCMSK2, PCINT23);
     a80:	ed e6       	ldi	r30, 0x6D	; 109
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	80 81       	ld	r24, Z
     a86:	8f 77       	andi	r24, 0x7F	; 127
     a88:	80 83       	st	Z, r24
     a8a:	08 95       	ret

00000a8c <timer0Config>:
 * Configures the timer0 mode and prescaler
 * -------------------------------------------------------------------------- */

resultValue_t timer0Config(timerModeA_t mode, timerPrescalerValueA_t prescaler)
{
	uint8 regA = TCCR0A;
     a8c:	24 b5       	in	r18, 0x24	; 36
	uint8 regB = TCCR0B;
     a8e:	95 b5       	in	r25, 0x25	; 37

	if(prescaler != TIMER_A_PRESCALER_NO_CHANGE){
     a90:	6f 3f       	cpi	r22, 0xFF	; 255
     a92:	c1 f0       	breq	.+48     	; 0xac4 <timer0Config+0x38>
		regB &= ~(0x07 << CS00);
     a94:	98 7f       	andi	r25, 0xF8	; 248
		switch(prescaler){
     a96:	46 2f       	mov	r20, r22
     a98:	50 e0       	ldi	r21, 0x00	; 0
     a9a:	48 30       	cpi	r20, 0x08	; 8
     a9c:	51 05       	cpc	r21, r1
     a9e:	80 f5       	brcc	.+96     	; 0xb00 <timer0Config+0x74>
     aa0:	fa 01       	movw	r30, r20
     aa2:	e3 5c       	subi	r30, 0xC3	; 195
     aa4:	ff 4f       	sbci	r31, 0xFF	; 255
     aa6:	0c 94 29 0a 	jmp	0x1452	; 0x1452 <__tablejump2__>
			case TIMER_A_CLOCK_DISABLE:					break;
			case TIMER_A_PRESCALER_OFF:					regB |= (1 << CS00);	break;
     aaa:	91 60       	ori	r25, 0x01	; 1
     aac:	0b c0       	rjmp	.+22     	; 0xac4 <timer0Config+0x38>
			case TIMER_A_PRESCALER_8:					regB |= (2 << CS00);	break;
     aae:	92 60       	ori	r25, 0x02	; 2
     ab0:	09 c0       	rjmp	.+18     	; 0xac4 <timer0Config+0x38>
			case TIMER_A_PRESCALER_64:					regB |= (3 << CS00);	break;
     ab2:	93 60       	ori	r25, 0x03	; 3
     ab4:	07 c0       	rjmp	.+14     	; 0xac4 <timer0Config+0x38>
			case TIMER_A_PRESCALER_256:					regB |= (4 << CS00);	break;
     ab6:	94 60       	ori	r25, 0x04	; 4
     ab8:	05 c0       	rjmp	.+10     	; 0xac4 <timer0Config+0x38>
			case TIMER_A_PRESCALER_1024:				regB |= (5 << CS00);	break;
     aba:	95 60       	ori	r25, 0x05	; 5
     abc:	03 c0       	rjmp	.+6      	; 0xac4 <timer0Config+0x38>
			case TIMER_A_PRESCALER_T0_FALLING_EDGE:		regB |= (6 << CS00);	break;
     abe:	96 60       	ori	r25, 0x06	; 6
     ac0:	01 c0       	rjmp	.+2      	; 0xac4 <timer0Config+0x38>
			case TIMER_A_PRESCALER_T0_RISING_EDGE:		regB |= (7 << CS00);	break;
     ac2:	97 60       	ori	r25, 0x07	; 7
			case TIMER_A_PRESCALER_NO_CHANGE:			break;
			default:									return RESULT_TIMER_PRESCALER_VALUE_UNSUPPORTED;	break;
		}
	}

	if(mode != TIMER_A_MODE_NO_CHANGE){
     ac4:	8f 3f       	cpi	r24, 0xFF	; 255
     ac6:	c1 f0       	breq	.+48     	; 0xaf8 <timer0Config+0x6c>
		regA &= ~(0x03 << WGM00);
     ac8:	2c 7f       	andi	r18, 0xFC	; 252
		clrBit(regB, WGM02);
     aca:	97 7f       	andi	r25, 0xF7	; 247
		switch(mode){
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	69 f0       	breq	.+26     	; 0xaea <timer0Config+0x5e>
     ad0:	28 f4       	brcc	.+10     	; 0xadc <timer0Config+0x50>
     ad2:	88 23       	and	r24, r24
     ad4:	89 f0       	breq	.+34     	; 0xaf8 <timer0Config+0x6c>
     ad6:	81 30       	cpi	r24, 0x01	; 1
     ad8:	59 f0       	breq	.+22     	; 0xaf0 <timer0Config+0x64>
     ada:	14 c0       	rjmp	.+40     	; 0xb04 <timer0Config+0x78>
     adc:	85 30       	cpi	r24, 0x05	; 5
     ade:	39 f0       	breq	.+14     	; 0xaee <timer0Config+0x62>
     ae0:	87 30       	cpi	r24, 0x07	; 7
     ae2:	41 f0       	breq	.+16     	; 0xaf4 <timer0Config+0x68>
     ae4:	83 30       	cpi	r24, 0x03	; 3
     ae6:	71 f4       	brne	.+28     	; 0xb04 <timer0Config+0x78>
     ae8:	06 c0       	rjmp	.+12     	; 0xaf6 <timer0Config+0x6a>
			case TIMER_A_MODE_NORMAL:						break;
			case TIMER_A_MODE_PWM_PHASE_CORRECTED_MAX:		regA |= (1 << WGM00);	break;
			case TIMER_A_MODE_CTC:							regA |= (2 << WGM00);	break;
     aea:	22 60       	ori	r18, 0x02	; 2
     aec:	05 c0       	rjmp	.+10     	; 0xaf8 <timer0Config+0x6c>
			case TIMER_A_MODE_FAST_PWM_MAX:					regA |= (3 << WGM00);	break;
			case TIMER_A_MODE_PWM_PHASE_CORRECTED_OCRA:		setBit(regB, WGM02);regA |= (1 << WGM00);	break;
     aee:	98 60       	ori	r25, 0x08	; 8
     af0:	21 60       	ori	r18, 0x01	; 1
     af2:	02 c0       	rjmp	.+4      	; 0xaf8 <timer0Config+0x6c>
			case TIMER_A_MODE_FAST_PWM_OCRA:				setBit(regB, WGM02);regA |= (3 << WGM00);	break;
     af4:	98 60       	ori	r25, 0x08	; 8
     af6:	23 60       	ori	r18, 0x03	; 3
			case TIMER_A_MODE_NO_CHANGE:					break;
			default:										return RESULT_TIMER_MODE_VALUE_UNSUPPORTED;	break;
		}
	}
	TCCR0A = regA;
     af8:	24 bd       	out	0x24, r18	; 36
	TCCR0B = regB;
     afa:	95 bd       	out	0x25, r25	; 37

	return RESULT_OK;
     afc:	80 e0       	ldi	r24, 0x00	; 0
     afe:	08 95       	ret
			case TIMER_A_PRESCALER_256:					regB |= (4 << CS00);	break;
			case TIMER_A_PRESCALER_1024:				regB |= (5 << CS00);	break;
			case TIMER_A_PRESCALER_T0_FALLING_EDGE:		regB |= (6 << CS00);	break;
			case TIMER_A_PRESCALER_T0_RISING_EDGE:		regB |= (7 << CS00);	break;
			case TIMER_A_PRESCALER_NO_CHANGE:			break;
			default:									return RESULT_TIMER_PRESCALER_VALUE_UNSUPPORTED;	break;
     b00:	83 e0       	ldi	r24, 0x03	; 3
     b02:	08 95       	ret
			case TIMER_A_MODE_CTC:							regA |= (2 << WGM00);	break;
			case TIMER_A_MODE_FAST_PWM_MAX:					regA |= (3 << WGM00);	break;
			case TIMER_A_MODE_PWM_PHASE_CORRECTED_OCRA:		setBit(regB, WGM02);regA |= (1 << WGM00);	break;
			case TIMER_A_MODE_FAST_PWM_OCRA:				setBit(regB, WGM02);regA |= (3 << WGM00);	break;
			case TIMER_A_MODE_NO_CHANGE:					break;
			default:										return RESULT_TIMER_MODE_VALUE_UNSUPPORTED;	break;
     b04:	84 e0       	ldi	r24, 0x04	; 4
	}
	TCCR0A = regA;
	TCCR0B = regB;

	return RESULT_OK;
}
     b06:	08 95       	ret

00000b08 <timer0OutputConfig>:
 * Configures the timer0 compare outputs
 * -------------------------------------------------------------------------- */

resultValue_t timer0OutputConfig(timerOutput_t compA, timerOutput_t compB)
{
	uint8 reg = TCCR0A;
     b08:	94 b5       	in	r25, 0x24	; 36

	if(compA != TIMER_PORT_NO_CHANGE){
     b0a:	8f 3f       	cpi	r24, 0xFF	; 255
     b0c:	69 f0       	breq	.+26     	; 0xb28 <timer0OutputConfig+0x20>
		reg &= ~(0x03 << COM0A0);
     b0e:	9f 73       	andi	r25, 0x3F	; 63
		switch(compA){
     b10:	81 30       	cpi	r24, 0x01	; 1
     b12:	39 f0       	breq	.+14     	; 0xb22 <timer0OutputConfig+0x1a>
     b14:	48 f0       	brcs	.+18     	; 0xb28 <timer0OutputConfig+0x20>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	31 f0       	breq	.+12     	; 0xb26 <timer0OutputConfig+0x1e>
     b1a:	83 30       	cpi	r24, 0x03	; 3
     b1c:	e1 f4       	brne	.+56     	; 0xb56 <timer0OutputConfig+0x4e>
			case TIMER_PORT_NORMAL:				break;
			case TIMER_PORT_TOGGLE_ON_COMPARE:	reg |= (1 << COM0A0);	break;
			case TIMER_PORT_CLEAR_ON_COMPARE:	reg |= (2 << COM0A0);	break;
			case TIMER_PORT_SET_ON_COMPARE:		reg |= (3 << COM0A0);	break;
     b1e:	90 6c       	ori	r25, 0xC0	; 192
     b20:	03 c0       	rjmp	.+6      	; 0xb28 <timer0OutputConfig+0x20>

	if(compA != TIMER_PORT_NO_CHANGE){
		reg &= ~(0x03 << COM0A0);
		switch(compA){
			case TIMER_PORT_NORMAL:				break;
			case TIMER_PORT_TOGGLE_ON_COMPARE:	reg |= (1 << COM0A0);	break;
     b22:	90 64       	ori	r25, 0x40	; 64
     b24:	01 c0       	rjmp	.+2      	; 0xb28 <timer0OutputConfig+0x20>
			case TIMER_PORT_CLEAR_ON_COMPARE:	reg |= (2 << COM0A0);	break;
     b26:	90 68       	ori	r25, 0x80	; 128
			case TIMER_PORT_SET_ON_COMPARE:		reg |= (3 << COM0A0);	break;
			case TIMER_PORT_NO_CHANGE:			break;
			default:							return RESULT_PORT_VALUE_UNSUPPORTED;	break;
		}
	}
	if(compB != TIMER_PORT_NO_CHANGE){
     b28:	6f 3f       	cpi	r22, 0xFF	; 255
     b2a:	91 f0       	breq	.+36     	; 0xb50 <timer0OutputConfig+0x48>
		reg &= ~(0x03 << COM0B0);
     b2c:	9f 7c       	andi	r25, 0xCF	; 207
		switch(compA){
     b2e:	82 30       	cpi	r24, 0x02	; 2
     b30:	61 f0       	breq	.+24     	; 0xb4a <timer0OutputConfig+0x42>
     b32:	30 f4       	brcc	.+12     	; 0xb40 <timer0OutputConfig+0x38>
     b34:	88 23       	and	r24, r24
     b36:	61 f0       	breq	.+24     	; 0xb50 <timer0OutputConfig+0x48>
     b38:	81 30       	cpi	r24, 0x01	; 1
     b3a:	69 f4       	brne	.+26     	; 0xb56 <timer0OutputConfig+0x4e>
			case TIMER_PORT_NORMAL:				break;
			case TIMER_PORT_TOGGLE_ON_COMPARE:	reg |= (1 << COM0B0);	break;
     b3c:	90 61       	ori	r25, 0x10	; 16
     b3e:	08 c0       	rjmp	.+16     	; 0xb50 <timer0OutputConfig+0x48>
			default:							return RESULT_PORT_VALUE_UNSUPPORTED;	break;
		}
	}
	if(compB != TIMER_PORT_NO_CHANGE){
		reg &= ~(0x03 << COM0B0);
		switch(compA){
     b40:	83 30       	cpi	r24, 0x03	; 3
     b42:	29 f0       	breq	.+10     	; 0xb4e <timer0OutputConfig+0x46>
     b44:	8f 3f       	cpi	r24, 0xFF	; 255
     b46:	21 f0       	breq	.+8      	; 0xb50 <timer0OutputConfig+0x48>
     b48:	06 c0       	rjmp	.+12     	; 0xb56 <timer0OutputConfig+0x4e>
			case TIMER_PORT_NORMAL:				break;
			case TIMER_PORT_TOGGLE_ON_COMPARE:	reg |= (1 << COM0B0);	break;
			case TIMER_PORT_CLEAR_ON_COMPARE:	reg |= (2 << COM0B0);	break;
     b4a:	90 62       	ori	r25, 0x20	; 32
     b4c:	01 c0       	rjmp	.+2      	; 0xb50 <timer0OutputConfig+0x48>
			case TIMER_PORT_SET_ON_COMPARE:		reg |= (3 << COM0B0);	break;
     b4e:	90 63       	ori	r25, 0x30	; 48
			case TIMER_PORT_NO_CHANGE:			break;
			default:							return RESULT_PORT_VALUE_UNSUPPORTED;	break;
		}
	}
	TCCR0A = reg;
     b50:	94 bd       	out	0x24, r25	; 36
	return RESULT_OK;
     b52:	80 e0       	ldi	r24, 0x00	; 0
     b54:	08 95       	ret
			case TIMER_PORT_NORMAL:				break;
			case TIMER_PORT_TOGGLE_ON_COMPARE:	reg |= (1 << COM0B0);	break;
			case TIMER_PORT_CLEAR_ON_COMPARE:	reg |= (2 << COM0B0);	break;
			case TIMER_PORT_SET_ON_COMPARE:		reg |= (3 << COM0B0);	break;
			case TIMER_PORT_NO_CHANGE:			break;
			default:							return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     b56:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	TCCR0A = reg;
	return RESULT_OK;
}
     b58:	08 95       	ret

00000b5a <timer0ActivateOverflowInterrupt>:
 * Activates the timer0 overflow interrupt
 * -------------------------------------------------------------------------- */

void timer0ActivateOverflowInterrupt(void)
{
	setBit(TIMSK0, TOIE0);
     b5a:	ee e6       	ldi	r30, 0x6E	; 110
     b5c:	f0 e0       	ldi	r31, 0x00	; 0
     b5e:	80 81       	ld	r24, Z
     b60:	81 60       	ori	r24, 0x01	; 1
     b62:	80 83       	st	Z, r24
     b64:	08 95       	ret

00000b66 <timer0DeactivateOverflowInterrupt>:
 * Deactivates the timer0 overflow interrupt
 * -------------------------------------------------------------------------- */

void timer0DeactivateOverflowInterrupt(void)
{
	clrBit(TIMSK0, TOIE0);
     b66:	ee e6       	ldi	r30, 0x6E	; 110
     b68:	f0 e0       	ldi	r31, 0x00	; 0
     b6a:	80 81       	ld	r24, Z
     b6c:	8e 7f       	andi	r24, 0xFE	; 254
     b6e:	80 83       	st	Z, r24
     b70:	08 95       	ret

00000b72 <timer0ClearOverflowInterruptRequest>:
 * Clears the timer0 overflow interrupt request
 * -------------------------------------------------------------------------- */

void timer0ClearOverflowInterruptRequest(void)
{
	setBit(TIFR0, TOV0);
     b72:	a8 9a       	sbi	0x15, 0	; 21
     b74:	08 95       	ret

00000b76 <timer0ActivateCompareAInterrupt>:
 * Activates the timer0 compare A interrupt
 * -------------------------------------------------------------------------- */

void timer0ActivateCompareAInterrupt(void)
{
	setBit(TIMSK0, OCIE0A);
     b76:	ee e6       	ldi	r30, 0x6E	; 110
     b78:	f0 e0       	ldi	r31, 0x00	; 0
     b7a:	80 81       	ld	r24, Z
     b7c:	82 60       	ori	r24, 0x02	; 2
     b7e:	80 83       	st	Z, r24
     b80:	08 95       	ret

00000b82 <timer0DeactivateCompareAInterrupt>:
 * Deactivates the timer0 compare A interrupt
 * -------------------------------------------------------------------------- */

void timer0DeactivateCompareAInterrupt(void)
{
	clrBit(TIMSK0, OCIE0A);
     b82:	ee e6       	ldi	r30, 0x6E	; 110
     b84:	f0 e0       	ldi	r31, 0x00	; 0
     b86:	80 81       	ld	r24, Z
     b88:	8d 7f       	andi	r24, 0xFD	; 253
     b8a:	80 83       	st	Z, r24
     b8c:	08 95       	ret

00000b8e <timer0ClearCompareAInterruptRequest>:
 * Clears the timer0 compare A interrupt request
 * -------------------------------------------------------------------------- */

void timer0ClearCompareAInterruptRequest(void)
{
	setBit(TIFR0, OCF0A);
     b8e:	a9 9a       	sbi	0x15, 1	; 21
     b90:	08 95       	ret

00000b92 <timer0ActivateCompareBInterrupt>:
 * Activates the timer0 compare B interrupt
 * -------------------------------------------------------------------------- */

void timer0ActivateCompareBInterrupt(void)
{
	setBit(TIMSK0, OCIE0B);
     b92:	ee e6       	ldi	r30, 0x6E	; 110
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	80 81       	ld	r24, Z
     b98:	84 60       	ori	r24, 0x04	; 4
     b9a:	80 83       	st	Z, r24
     b9c:	08 95       	ret

00000b9e <timer0DeactivateCompareBInterrupt>:
 * Deactivates the timer0 compare B interrupt
 * -------------------------------------------------------------------------- */

void timer0DeactivateCompareBInterrupt(void)
{
	clrBit(TIMSK0, OCIE0B);
     b9e:	ee e6       	ldi	r30, 0x6E	; 110
     ba0:	f0 e0       	ldi	r31, 0x00	; 0
     ba2:	80 81       	ld	r24, Z
     ba4:	8b 7f       	andi	r24, 0xFB	; 251
     ba6:	80 83       	st	Z, r24
     ba8:	08 95       	ret

00000baa <timer0ClearCompareBInterruptRequest>:
 * Clears the timer0 compare B interrupt request
 * -------------------------------------------------------------------------- */

void timer0ClearCompareBInterruptRequest(void)
{
	setBit(TIFR0, OCF0B);
     baa:	aa 9a       	sbi	0x15, 2	; 21
     bac:	08 95       	ret

00000bae <timer0ForceCompareA>:
 * Forces a comparison on the output compare A of the timer0
 * -------------------------------------------------------------------------- */

void timer0ForceCompareA(void)
{
	setBit(TCCR0B, FOC0A);
     bae:	85 b5       	in	r24, 0x25	; 37
     bb0:	80 68       	ori	r24, 0x80	; 128
     bb2:	85 bd       	out	0x25, r24	; 37
     bb4:	08 95       	ret

00000bb6 <timer0ForceCompareB>:
 * Forces a comparison on the output compare B of the timer0
 * -------------------------------------------------------------------------- */

void timer0ForceCompareB(void)
{
	setBit(TCCR0B, FOC0B);
     bb6:	85 b5       	in	r24, 0x25	; 37
     bb8:	80 64       	ori	r24, 0x40	; 64
     bba:	85 bd       	out	0x25, r24	; 37
     bbc:	08 95       	ret

00000bbe <timer0SetCounterValue>:
 * Sets the timer0 counter value
 * -------------------------------------------------------------------------- */

void timer0SetCounterValue(uint8 value)
{
	TCNT0 = value;
     bbe:	86 bd       	out	0x26, r24	; 38
     bc0:	08 95       	ret

00000bc2 <timer0GetCounterValue>:
 * Gets the timer0 counter value
 * -------------------------------------------------------------------------- */

uint8 timer0GetCounterValue(void)
{
	return TCNT0;
     bc2:	86 b5       	in	r24, 0x26	; 38
}
     bc4:	08 95       	ret

00000bc6 <timer0SetCompareAValue>:
 * Sets the timer0 compare A value
 * -------------------------------------------------------------------------- */

void timer0SetCompareAValue(uint8 value)
{
	OCR0A = value;
     bc6:	87 bd       	out	0x27, r24	; 39
     bc8:	08 95       	ret

00000bca <timer0GetCompareAValue>:
 * Gets the timer0 compare A value
 * -------------------------------------------------------------------------- */

uint8 timer0GetCompareAValue(void)
{
	return OCR0A;
     bca:	87 b5       	in	r24, 0x27	; 39
}
     bcc:	08 95       	ret

00000bce <timer0SetCompareBValue>:
 * Sets the timer0 compare B value
 * -------------------------------------------------------------------------- */

void timer0SetCompareBValue(uint8 value)
{
	OCR0B = value;
     bce:	88 bd       	out	0x28, r24	; 40
     bd0:	08 95       	ret

00000bd2 <timer0GetCompareBValue>:
 * Gets the timer0 compare B value
 * -------------------------------------------------------------------------- */

uint8 timer0GetCompareBValue(void)
{
	return OCR0B;
     bd2:	88 b5       	in	r24, 0x28	; 40
}
     bd4:	08 95       	ret

00000bd6 <timer1Config>:
 * Configures the timer1 mode and prescaler
 * -------------------------------------------------------------------------- */

resultValue_t timer1Config(timerModeB_t mode, timerPrescalerValueA_t prescaler)
{
	uint8 reg1 = TCCR1A;
     bd6:	20 91 80 00 	lds	r18, 0x0080
	uint8 reg2 = TCCR1B;
     bda:	90 91 81 00 	lds	r25, 0x0081

	if(prescaler != TIMER_A_PRESCALER_NO_CHANGE){
     bde:	6f 3f       	cpi	r22, 0xFF	; 255
     be0:	11 f0       	breq	.+4      	; 0xbe6 <timer1Config+0x10>
		reg2 &= ~(0x07 << CS10);
     be2:	98 7f       	andi	r25, 0xF8	; 248
		reg2 |= prescaler;
     be4:	96 2b       	or	r25, r22
	}

	if(mode != TIMER_B_MODE_NO_CHANGE){
     be6:	8f 3f       	cpi	r24, 0xFF	; 255
     be8:	69 f0       	breq	.+26     	; 0xc04 <timer1Config+0x2e>
		if(isBitSet(mode, 3))
     bea:	83 ff       	sbrs	r24, 3
     bec:	02 c0       	rjmp	.+4      	; 0xbf2 <timer1Config+0x1c>
			setBit(reg2, WGM13);
     bee:	90 61       	ori	r25, 0x10	; 16
     bf0:	01 c0       	rjmp	.+2      	; 0xbf4 <timer1Config+0x1e>
		else
			clrBit(reg2, WGM13);
     bf2:	9f 7e       	andi	r25, 0xEF	; 239
		if(isBitSet(mode, 2))
     bf4:	82 ff       	sbrs	r24, 2
     bf6:	02 c0       	rjmp	.+4      	; 0xbfc <timer1Config+0x26>
			setBit(reg2, WGM12);
     bf8:	98 60       	ori	r25, 0x08	; 8
     bfa:	01 c0       	rjmp	.+2      	; 0xbfe <timer1Config+0x28>
		else
			clrBit(reg2, WGM12);
     bfc:	97 7f       	andi	r25, 0xF7	; 247
		reg1 &= ~(0x03 << WGM10);
		reg1 |= (mode & 0x03);
     bfe:	83 70       	andi	r24, 0x03	; 3
			clrBit(reg2, WGM13);
		if(isBitSet(mode, 2))
			setBit(reg2, WGM12);
		else
			clrBit(reg2, WGM12);
		reg1 &= ~(0x03 << WGM10);
     c00:	2c 7f       	andi	r18, 0xFC	; 252
		reg1 |= (mode & 0x03);
     c02:	28 2b       	or	r18, r24
	}
	TCCR1A = reg1;
     c04:	20 93 80 00 	sts	0x0080, r18
	TCCR1B = reg2;
     c08:	90 93 81 00 	sts	0x0081, r25

	return RESULT_OK;
}
     c0c:	80 e0       	ldi	r24, 0x00	; 0
     c0e:	08 95       	ret

00000c10 <timer1OutputConfig>:
 * Configures the timer1 compare outputs
 * -------------------------------------------------------------------------- */

resultValue_t timer1OutputConfig(timerOutput_t compA, timerOutput_t compB)
{
	uint8 aux8 = TCCR1A;
     c10:	20 91 80 00 	lds	r18, 0x0080

	if(compA != TIMER_PORT_NO_CHANGE){
     c14:	8f 3f       	cpi	r24, 0xFF	; 255
     c16:	31 f0       	breq	.+12     	; 0xc24 <timer1OutputConfig+0x14>
		aux8 &= ~(0x03 << COM1A0);
		aux8 |= (compA << COM1A0); 
     c18:	30 e4       	ldi	r19, 0x40	; 64
     c1a:	83 9f       	mul	r24, r19
     c1c:	c0 01       	movw	r24, r0
     c1e:	11 24       	eor	r1, r1
resultValue_t timer1OutputConfig(timerOutput_t compA, timerOutput_t compB)
{
	uint8 aux8 = TCCR1A;

	if(compA != TIMER_PORT_NO_CHANGE){
		aux8 &= ~(0x03 << COM1A0);
     c20:	2f 73       	andi	r18, 0x3F	; 63
		aux8 |= (compA << COM1A0); 
     c22:	28 2b       	or	r18, r24
	}
	if(compB != TIMER_PORT_NO_CHANGE){
     c24:	6f 3f       	cpi	r22, 0xFF	; 255
     c26:	31 f0       	breq	.+12     	; 0xc34 <timer1OutputConfig+0x24>
		aux8 &= ~(0x03 << COM1B0);
     c28:	2f 7c       	andi	r18, 0xCF	; 207
		aux8 |= (compB << COM1B0); 
     c2a:	80 e1       	ldi	r24, 0x10	; 16
     c2c:	68 9f       	mul	r22, r24
     c2e:	b0 01       	movw	r22, r0
     c30:	11 24       	eor	r1, r1
     c32:	26 2b       	or	r18, r22
	}
	TCCR1A = aux8;
     c34:	20 93 80 00 	sts	0x0080, r18
	return RESULT_OK;
}
     c38:	80 e0       	ldi	r24, 0x00	; 0
     c3a:	08 95       	ret

00000c3c <timer1InputCaptureNoiseCancelerConfig>:
 * Configures the noise canceler of input capture of timer1
 * -------------------------------------------------------------------------- */

resultValue_t	timer1InputCaptureNoiseCancelerConfig(timerInputCaptureNoiseCanceler_t mode)
{
	uint8 aux8 = TCCR1B;
     c3c:	e1 e8       	ldi	r30, 0x81	; 129
     c3e:	f0 e0       	ldi	r31, 0x00	; 0
     c40:	90 81       	ld	r25, Z

	aux8 &= ~(0x03 << ICES1);
     c42:	9f 73       	andi	r25, 0x3F	; 63
	aux8 |= mode;
     c44:	98 2b       	or	r25, r24

	TCCR1B = aux8;
     c46:	90 83       	st	Z, r25
	return RESULT_OK;
}
     c48:	80 e0       	ldi	r24, 0x00	; 0
     c4a:	08 95       	ret

00000c4c <timer1ActivateOverflowInterrupt>:
 * Activates the timer1 overflow interrupt
 * -------------------------------------------------------------------------- */

resultValue_t timer1ActivateOverflowInterrupt(void)
{
	setBit(TIMSK1, TOIE1);
     c4c:	ef e6       	ldi	r30, 0x6F	; 111
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	80 81       	ld	r24, Z
     c52:	81 60       	ori	r24, 0x01	; 1
     c54:	80 83       	st	Z, r24
	return RESULT_OK;
}
     c56:	80 e0       	ldi	r24, 0x00	; 0
     c58:	08 95       	ret

00000c5a <timer1DeactivateOverflowInterrupt>:
 * Deactivates the timer1 overflow interrupt
 * -------------------------------------------------------------------------- */

resultValue_t timer1DeactivateOverflowInterrupt(void)
{
	clrBit(TIMSK1, TOIE1);
     c5a:	ef e6       	ldi	r30, 0x6F	; 111
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	80 81       	ld	r24, Z
     c60:	8e 7f       	andi	r24, 0xFE	; 254
     c62:	80 83       	st	Z, r24
	return RESULT_OK;
}
     c64:	80 e0       	ldi	r24, 0x00	; 0
     c66:	08 95       	ret

00000c68 <timer1ClearOverflowInterruptRequest>:
 * Clears the timer1 overflow interrupt request
 * -------------------------------------------------------------------------- */

resultValue_t timer1ClearOverflowInterruptRequest(void)
{
	setBit(TIFR1, TOV1);
     c68:	b0 9a       	sbi	0x16, 0	; 22
	return RESULT_OK;
}
     c6a:	80 e0       	ldi	r24, 0x00	; 0
     c6c:	08 95       	ret

00000c6e <timer1ActivateCompareAInterrupt>:
 * Activates the timer1 compare A interrupt
 * -------------------------------------------------------------------------- */

resultValue_t timer1ActivateCompareAInterrupt(void)
{
	setBit(TIMSK1, OCIE1A);
     c6e:	ef e6       	ldi	r30, 0x6F	; 111
     c70:	f0 e0       	ldi	r31, 0x00	; 0
     c72:	80 81       	ld	r24, Z
     c74:	82 60       	ori	r24, 0x02	; 2
     c76:	80 83       	st	Z, r24
	return RESULT_OK;
}
     c78:	80 e0       	ldi	r24, 0x00	; 0
     c7a:	08 95       	ret

00000c7c <timer1DeactivateCompareAInterrupt>:
 * Deactivates the timer1 compare A interrupt
 * -------------------------------------------------------------------------- */

resultValue_t timer1DeactivateCompareAInterrupt(void)
{
	clrBit(TIMSK1, OCIE1A);
     c7c:	ef e6       	ldi	r30, 0x6F	; 111
     c7e:	f0 e0       	ldi	r31, 0x00	; 0
     c80:	80 81       	ld	r24, Z
     c82:	8d 7f       	andi	r24, 0xFD	; 253
     c84:	80 83       	st	Z, r24
	return RESULT_OK;
}
     c86:	80 e0       	ldi	r24, 0x00	; 0
     c88:	08 95       	ret

00000c8a <timer1ClearCompareAInterruptRequest>:
 * Clears the timer1 compare A interrupt request
 * -------------------------------------------------------------------------- */

resultValue_t timer1ClearCompareAInterruptRequest(void)
{
	setBit(TIFR1, OCF1A);
     c8a:	b1 9a       	sbi	0x16, 1	; 22
	return RESULT_OK;
}
     c8c:	80 e0       	ldi	r24, 0x00	; 0
     c8e:	08 95       	ret

00000c90 <timer1ActivateCompareBInterrupt>:
 * Activates the timer1 compare B interrupt
 * -------------------------------------------------------------------------- */

resultValue_t timer1ActivateCompareBInterrupt(void)
{
	setBit(TIMSK1, OCIE1B);
     c90:	ef e6       	ldi	r30, 0x6F	; 111
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	80 81       	ld	r24, Z
     c96:	84 60       	ori	r24, 0x04	; 4
     c98:	80 83       	st	Z, r24
	return RESULT_OK;
}
     c9a:	80 e0       	ldi	r24, 0x00	; 0
     c9c:	08 95       	ret

00000c9e <timer1DeactivateCompareBInterrupt>:
 * Deactivates the timer1 compare B interrupt
 * -------------------------------------------------------------------------- */

resultValue_t timer1DeactivateCompareBInterrupt(void)
{
	clrBit(TIMSK1, OCIE1B);
     c9e:	ef e6       	ldi	r30, 0x6F	; 111
     ca0:	f0 e0       	ldi	r31, 0x00	; 0
     ca2:	80 81       	ld	r24, Z
     ca4:	8b 7f       	andi	r24, 0xFB	; 251
     ca6:	80 83       	st	Z, r24
	return RESULT_OK;
}
     ca8:	80 e0       	ldi	r24, 0x00	; 0
     caa:	08 95       	ret

00000cac <timer1ClearCompareBInterruptRequest>:
 * Clears the timer1 compare B interrupt request
 * -------------------------------------------------------------------------- */

resultValue_t timer1ClearCompareBInterruptRequest(void)
{
	setBit(TIFR1, OCF1B);
     cac:	b2 9a       	sbi	0x16, 2	; 22
	return RESULT_OK;
}
     cae:	80 e0       	ldi	r24, 0x00	; 0
     cb0:	08 95       	ret

00000cb2 <timer1ActivateInputCaptureInterrupt>:
 * Activates the timer1 input capture interrupt
 * -------------------------------------------------------------------------- */

resultValue_t timer1ActivateInputCaptureInterrupt(void)
{
	setBit(TIMSK1, ICIE1);
     cb2:	ef e6       	ldi	r30, 0x6F	; 111
     cb4:	f0 e0       	ldi	r31, 0x00	; 0
     cb6:	80 81       	ld	r24, Z
     cb8:	80 62       	ori	r24, 0x20	; 32
     cba:	80 83       	st	Z, r24
	return RESULT_OK;
}
     cbc:	80 e0       	ldi	r24, 0x00	; 0
     cbe:	08 95       	ret

00000cc0 <timer1DeactivateInputCaptureInterrupt>:
 * Deactivates the timer1 input capture interrupt
 * -------------------------------------------------------------------------- */

resultValue_t timer1DeactivateInputCaptureInterrupt(void)
{
	clrBit(TIMSK1, ICIE1);
     cc0:	ef e6       	ldi	r30, 0x6F	; 111
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	80 81       	ld	r24, Z
     cc6:	8f 7d       	andi	r24, 0xDF	; 223
     cc8:	80 83       	st	Z, r24
	return RESULT_OK;
}
     cca:	80 e0       	ldi	r24, 0x00	; 0
     ccc:	08 95       	ret

00000cce <timer1ClearInputCaptureInterruptRequest>:
 * Clears the timer1 input capture interrupt request
 * -------------------------------------------------------------------------- */

resultValue_t timer1ClearInputCaptureInterruptRequest(void)
{
	setBit(TIFR1, ICF1);
     cce:	b5 9a       	sbi	0x16, 5	; 22
	return RESULT_OK;
}
     cd0:	80 e0       	ldi	r24, 0x00	; 0
     cd2:	08 95       	ret

00000cd4 <timer1ForceCompareA>:
 * Forces a comparison on the output compare A of the timer1
 * -------------------------------------------------------------------------- */

resultValue_t timer1ForceCompareA(void)
{
	setBit(TCCR1C, FOC1A);
     cd4:	e2 e8       	ldi	r30, 0x82	; 130
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	80 81       	ld	r24, Z
     cda:	80 68       	ori	r24, 0x80	; 128
     cdc:	80 83       	st	Z, r24
	return RESULT_OK;
}
     cde:	80 e0       	ldi	r24, 0x00	; 0
     ce0:	08 95       	ret

00000ce2 <timer1ForceCompareB>:
 * Forces a comparison on the output compare B of the timer1
 * -------------------------------------------------------------------------- */

resultValue_t timer1ForceCompareB(void)
{
	setBit(TCCR1C, FOC1B);
     ce2:	e2 e8       	ldi	r30, 0x82	; 130
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	80 81       	ld	r24, Z
     ce8:	80 64       	ori	r24, 0x40	; 64
     cea:	80 83       	st	Z, r24
	return RESULT_OK;
}
     cec:	80 e0       	ldi	r24, 0x00	; 0
     cee:	08 95       	ret

00000cf0 <timer1SetCounterValue>:
 * Sets the timer1 counter value
 * -------------------------------------------------------------------------- */

resultValue_t timer1SetCounterValue(uint16 value)
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
     cf0:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     cf2:	f8 94       	cli
		TCNT1 = value;
     cf4:	90 93 85 00 	sts	0x0085, r25
     cf8:	80 93 84 00 	sts	0x0084, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     cfc:	2f bf       	out	0x3f, r18	; 63
	}
	return RESULT_OK;
}
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	08 95       	ret

00000d02 <timer1GetCounterValue>:
 * Gets the timer1 counter value
 * -------------------------------------------------------------------------- */

uint16 timer1GetCounterValue(void)
{
	return TCNT1;
     d02:	80 91 84 00 	lds	r24, 0x0084
     d06:	90 91 85 00 	lds	r25, 0x0085
}
     d0a:	08 95       	ret

00000d0c <timer1SetCompareAValue>:
 * Sets the timer1 compare A value
 * -------------------------------------------------------------------------- */

resultValue_t timer1SetCompareAValue(uint16 value)
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
     d0c:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     d0e:	f8 94       	cli
		OCR1A = value;
     d10:	90 93 89 00 	sts	0x0089, r25
     d14:	80 93 88 00 	sts	0x0088, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     d18:	2f bf       	out	0x3f, r18	; 63
	}
	return RESULT_OK;
}
     d1a:	80 e0       	ldi	r24, 0x00	; 0
     d1c:	08 95       	ret

00000d1e <timer1GetCompareAValue>:
 * Gets the timer1 compare A value
 * -------------------------------------------------------------------------- */

uint16 timer1GetCompareAValue(void)
{
	return OCR1A;
     d1e:	80 91 88 00 	lds	r24, 0x0088
     d22:	90 91 89 00 	lds	r25, 0x0089
}
     d26:	08 95       	ret

00000d28 <timer1SetCompareBValue>:
 * Sets the timer1 compare B value
 * -------------------------------------------------------------------------- */

resultValue_t timer1SetCompareBValue(uint16 value)
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
     d28:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     d2a:	f8 94       	cli
		OCR1B = value;
     d2c:	90 93 8b 00 	sts	0x008B, r25
     d30:	80 93 8a 00 	sts	0x008A, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     d34:	2f bf       	out	0x3f, r18	; 63
	}
	return RESULT_OK;
}
     d36:	80 e0       	ldi	r24, 0x00	; 0
     d38:	08 95       	ret

00000d3a <timer1GetCompareBValue>:
 * Gets the timer1 compare B value
 * -------------------------------------------------------------------------- */

uint16 timer1GetCompareBValue(void)
{
	return OCR1B;
     d3a:	80 91 8a 00 	lds	r24, 0x008A
     d3e:	90 91 8b 00 	lds	r25, 0x008B
}
     d42:	08 95       	ret

00000d44 <timer1SetInputCaptureValue>:
 * Sets the timer1 input capture value
 * -------------------------------------------------------------------------- */

resultValue_t timer1SetInputCaptureValue(uint16 value)
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
     d44:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     d46:	f8 94       	cli
		ICR1 = value;
     d48:	90 93 87 00 	sts	0x0087, r25
     d4c:	80 93 86 00 	sts	0x0086, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     d50:	2f bf       	out	0x3f, r18	; 63
	}
	return RESULT_OK;
}
     d52:	80 e0       	ldi	r24, 0x00	; 0
     d54:	08 95       	ret

00000d56 <timer1GetInputCaptureValue>:
 * Gets the timer1 input capture value
 * -------------------------------------------------------------------------- */

uint16 timer1GetInputCaptureValue(void)
{
	return ICR1;
     d56:	80 91 86 00 	lds	r24, 0x0086
     d5a:	90 91 87 00 	lds	r25, 0x0087
}
     d5e:	08 95       	ret

00000d60 <timer2Config>:
 * Configures the timer2 mode and prescaler
 * -------------------------------------------------------------------------- */

resultValue_t timer2Config(timerModeA_t mode, timerPrescalerValueB_t prescaler)
{
	uint8 reg1 = TCCR2A;
     d60:	20 91 b0 00 	lds	r18, 0x00B0
	uint8 reg2 = TCCR2B;
     d64:	90 91 b1 00 	lds	r25, 0x00B1

	if(prescaler != TIMER_B_PRESCALER_NO_CHANGE){
     d68:	6f 3f       	cpi	r22, 0xFF	; 255
     d6a:	11 f0       	breq	.+4      	; 0xd70 <timer2Config+0x10>
		reg2 &= ~(0x07 << CS20);
     d6c:	98 7f       	andi	r25, 0xF8	; 248
		reg2 |= prescaler;
     d6e:	96 2b       	or	r25, r22
	}

	if(mode != TIMER_A_MODE_NO_CHANGE){
     d70:	8f 3f       	cpi	r24, 0xFF	; 255
     d72:	41 f0       	breq	.+16     	; 0xd84 <timer2Config+0x24>
		if(isBitSet(mode, 2))
     d74:	82 ff       	sbrs	r24, 2
     d76:	02 c0       	rjmp	.+4      	; 0xd7c <timer2Config+0x1c>
			setBit(reg2, WGM22);
     d78:	98 60       	ori	r25, 0x08	; 8
     d7a:	01 c0       	rjmp	.+2      	; 0xd7e <timer2Config+0x1e>
		else
			clrBit(reg2, WGM22);
     d7c:	97 7f       	andi	r25, 0xF7	; 247
		reg1 &= ~(0x03 << WGM20);
		reg1 |= (mode & 0x03);
     d7e:	83 70       	andi	r24, 0x03	; 3
	if(mode != TIMER_A_MODE_NO_CHANGE){
		if(isBitSet(mode, 2))
			setBit(reg2, WGM22);
		else
			clrBit(reg2, WGM22);
		reg1 &= ~(0x03 << WGM20);
     d80:	2c 7f       	andi	r18, 0xFC	; 252
		reg1 |= (mode & 0x03);
     d82:	28 2b       	or	r18, r24
	}
	TCCR2A = reg1;
     d84:	20 93 b0 00 	sts	0x00B0, r18
	TCCR2B = reg2;
     d88:	90 93 b1 00 	sts	0x00B1, r25

	return RESULT_OK;
}
     d8c:	80 e0       	ldi	r24, 0x00	; 0
     d8e:	08 95       	ret

00000d90 <timer2OutputConfig>:
 * Configures the timer2 compare outputs
 * -------------------------------------------------------------------------- */

resultValue_t timer2OutputConfig(timerOutput_t compA, timerOutput_t compB)
{
	uint8 aux8 = TCCR2A;
     d90:	20 91 b0 00 	lds	r18, 0x00B0

	if(compA != TIMER_PORT_NO_CHANGE){
     d94:	8f 3f       	cpi	r24, 0xFF	; 255
     d96:	31 f0       	breq	.+12     	; 0xda4 <timer2OutputConfig+0x14>
		aux8 &= ~(0x03 << COM2A0);
		aux8 |= (compA << COM2A0); 
     d98:	30 e4       	ldi	r19, 0x40	; 64
     d9a:	83 9f       	mul	r24, r19
     d9c:	c0 01       	movw	r24, r0
     d9e:	11 24       	eor	r1, r1
resultValue_t timer2OutputConfig(timerOutput_t compA, timerOutput_t compB)
{
	uint8 aux8 = TCCR2A;

	if(compA != TIMER_PORT_NO_CHANGE){
		aux8 &= ~(0x03 << COM2A0);
     da0:	2f 73       	andi	r18, 0x3F	; 63
		aux8 |= (compA << COM2A0); 
     da2:	28 2b       	or	r18, r24
	}
	if(compB != TIMER_PORT_NO_CHANGE){
     da4:	6f 3f       	cpi	r22, 0xFF	; 255
     da6:	31 f0       	breq	.+12     	; 0xdb4 <timer2OutputConfig+0x24>
		aux8 &= ~(0x03 << COM2B0);
     da8:	2f 7c       	andi	r18, 0xCF	; 207
		aux8 |= (compB << COM2B0); 
     daa:	80 e1       	ldi	r24, 0x10	; 16
     dac:	68 9f       	mul	r22, r24
     dae:	b0 01       	movw	r22, r0
     db0:	11 24       	eor	r1, r1
     db2:	26 2b       	or	r18, r22
	}
	TCCR2A = aux8;
     db4:	20 93 b0 00 	sts	0x00B0, r18
	return RESULT_OK;
}
     db8:	80 e0       	ldi	r24, 0x00	; 0
     dba:	08 95       	ret

00000dbc <timer2ActivateOverflowInterrupt>:
 * Activates the timer2 overflow interrupt
 * -------------------------------------------------------------------------- */

resultValue_t timer2ActivateOverflowInterrupt(void)
{
	setBit(TIMSK2, TOIE2);
     dbc:	e0 e7       	ldi	r30, 0x70	; 112
     dbe:	f0 e0       	ldi	r31, 0x00	; 0
     dc0:	80 81       	ld	r24, Z
     dc2:	81 60       	ori	r24, 0x01	; 1
     dc4:	80 83       	st	Z, r24
	return RESULT_OK;
}
     dc6:	80 e0       	ldi	r24, 0x00	; 0
     dc8:	08 95       	ret

00000dca <timer2DeactivateOverflowInterrupt>:
 * Deactivates the timer2 overflow interrupt
 * -------------------------------------------------------------------------- */

resultValue_t timer2DeactivateOverflowInterrupt(void)
{
	clrBit(TIMSK2, TOIE2);
     dca:	e0 e7       	ldi	r30, 0x70	; 112
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	80 81       	ld	r24, Z
     dd0:	8e 7f       	andi	r24, 0xFE	; 254
     dd2:	80 83       	st	Z, r24
	return RESULT_OK;
}
     dd4:	80 e0       	ldi	r24, 0x00	; 0
     dd6:	08 95       	ret

00000dd8 <timer2ClearOverflowInterruptRequest>:
 * Clears the timer2 overflow interrupt request
 * -------------------------------------------------------------------------- */

resultValue_t timer2ClearOverflowInterruptRequest(void)
{
	setBit(TIFR2, TOV2);
     dd8:	b8 9a       	sbi	0x17, 0	; 23
	return RESULT_OK;
}
     dda:	80 e0       	ldi	r24, 0x00	; 0
     ddc:	08 95       	ret

00000dde <timer2ActivateCompareAInterrupt>:
 * Activates the timer2 compare A interrupt
 * -------------------------------------------------------------------------- */

resultValue_t timer2ActivateCompareAInterrupt(void)
{
	setBit(TIMSK2, OCIE2A);
     dde:	e0 e7       	ldi	r30, 0x70	; 112
     de0:	f0 e0       	ldi	r31, 0x00	; 0
     de2:	80 81       	ld	r24, Z
     de4:	82 60       	ori	r24, 0x02	; 2
     de6:	80 83       	st	Z, r24
	return RESULT_OK;
}
     de8:	80 e0       	ldi	r24, 0x00	; 0
     dea:	08 95       	ret

00000dec <timer2DeactivateCompareAInterrupt>:
 * Deactivates the timer2 compare A interrupt
 * -------------------------------------------------------------------------- */

resultValue_t timer2DeactivateCompareAInterrupt(void)
{
	clrBit(TIMSK2, OCIE2A);
     dec:	e0 e7       	ldi	r30, 0x70	; 112
     dee:	f0 e0       	ldi	r31, 0x00	; 0
     df0:	80 81       	ld	r24, Z
     df2:	8d 7f       	andi	r24, 0xFD	; 253
     df4:	80 83       	st	Z, r24
	return RESULT_OK;
}
     df6:	80 e0       	ldi	r24, 0x00	; 0
     df8:	08 95       	ret

00000dfa <timer2ClearCompareAInterruptRequest>:
 * Clears the timer2 compare A interrupt request
 * -------------------------------------------------------------------------- */

resultValue_t timer2ClearCompareAInterruptRequest(void)
{
	setBit(TIFR2, OCF2A);
     dfa:	b9 9a       	sbi	0x17, 1	; 23
	return RESULT_OK;
}
     dfc:	80 e0       	ldi	r24, 0x00	; 0
     dfe:	08 95       	ret

00000e00 <timer2ActivateCompareBInterrupt>:
 * Activates the timer2 compare B interrupt
 * -------------------------------------------------------------------------- */

resultValue_t timer2ActivateCompareBInterrupt(void)
{
	setBit(TIMSK2, OCIE2B);
     e00:	e0 e7       	ldi	r30, 0x70	; 112
     e02:	f0 e0       	ldi	r31, 0x00	; 0
     e04:	80 81       	ld	r24, Z
     e06:	84 60       	ori	r24, 0x04	; 4
     e08:	80 83       	st	Z, r24
	return RESULT_OK;
}
     e0a:	80 e0       	ldi	r24, 0x00	; 0
     e0c:	08 95       	ret

00000e0e <timer2DeactivateCompareBInterrupt>:
 * Deactivates the timer2 compare B interrupt
 * -------------------------------------------------------------------------- */

resultValue_t timer2DeactivateCompareBInterrupt(void)
{
	clrBit(TIMSK2, OCIE2B);
     e0e:	e0 e7       	ldi	r30, 0x70	; 112
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	8b 7f       	andi	r24, 0xFB	; 251
     e16:	80 83       	st	Z, r24
	return RESULT_OK;
}
     e18:	80 e0       	ldi	r24, 0x00	; 0
     e1a:	08 95       	ret

00000e1c <timer2ClearCompareBInterruptRequest>:
 * Clears the timer2 compare B interrupt request
 * -------------------------------------------------------------------------- */

resultValue_t timer2ClearCompareBInterruptRequest(void)
{
	setBit(TIFR2, OCF2B);
     e1c:	ba 9a       	sbi	0x17, 2	; 23
	return RESULT_OK;
}
     e1e:	80 e0       	ldi	r24, 0x00	; 0
     e20:	08 95       	ret

00000e22 <timer2ForceCompareA>:
 * Forces a comparison on the output compare A of the timer2
 * -------------------------------------------------------------------------- */

resultValue_t timer2ForceCompareA(void)
{
	setBit(TCCR2B, FOC2A);
     e22:	e1 eb       	ldi	r30, 0xB1	; 177
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	80 81       	ld	r24, Z
     e28:	80 68       	ori	r24, 0x80	; 128
     e2a:	80 83       	st	Z, r24
	return RESULT_OK;
}
     e2c:	80 e0       	ldi	r24, 0x00	; 0
     e2e:	08 95       	ret

00000e30 <timer2ForceCompareB>:
 * Forces a comparison on the output compare B of the timer2
 * -------------------------------------------------------------------------- */

resultValue_t timer2ForceCompareB(void)
{
	setBit(TCCR2B, FOC2B);
     e30:	e1 eb       	ldi	r30, 0xB1	; 177
     e32:	f0 e0       	ldi	r31, 0x00	; 0
     e34:	80 81       	ld	r24, Z
     e36:	80 64       	ori	r24, 0x40	; 64
     e38:	80 83       	st	Z, r24
	return RESULT_OK;
}
     e3a:	80 e0       	ldi	r24, 0x00	; 0
     e3c:	08 95       	ret

00000e3e <timer2SetCounterValue>:
 * Sets the timer2 counter value
 * -------------------------------------------------------------------------- */

resultValue_t timer2SetCounterValue(uint8 value)
{
	TCNT2 = value;
     e3e:	80 93 b2 00 	sts	0x00B2, r24
	return RESULT_OK;
}
     e42:	80 e0       	ldi	r24, 0x00	; 0
     e44:	08 95       	ret

00000e46 <timer2GetCounterValue>:
 * Gets the timer2 counter value
 * -------------------------------------------------------------------------- */

uint8 timer2GetCounterValue(void)
{
	return TCNT2;
     e46:	80 91 b2 00 	lds	r24, 0x00B2
}
     e4a:	08 95       	ret

00000e4c <timer2SetCompareAValue>:
 * Sets the timer2 compare A value
 * -------------------------------------------------------------------------- */

resultValue_t timer2SetCompareAValue(uint8 value)
{
	OCR2A = value;
     e4c:	80 93 b3 00 	sts	0x00B3, r24
	return RESULT_OK;
}
     e50:	80 e0       	ldi	r24, 0x00	; 0
     e52:	08 95       	ret

00000e54 <timer2GetCompareAValue>:
 * Gets the timer2 compare A value
 * -------------------------------------------------------------------------- */

uint8 timer2GetCompareAValue(void)
{
	return OCR2A;
     e54:	80 91 b3 00 	lds	r24, 0x00B3
}
     e58:	08 95       	ret

00000e5a <timer2SetCompareBValue>:
 * Sets the timer2 compare B value
 * -------------------------------------------------------------------------- */

resultValue_t timer2SetCompareBValue(uint8 value)
{
	OCR2B = value;
     e5a:	80 93 b4 00 	sts	0x00B4, r24
	return RESULT_OK;
}
     e5e:	80 e0       	ldi	r24, 0x00	; 0
     e60:	08 95       	ret

00000e62 <timer2GetCompareBValue>:
 * Gets the timer2 compare B value
 * -------------------------------------------------------------------------- */

uint8 timer2GetCompareBValue(void)
{
	return OCR2B;
     e62:	80 91 b4 00 	lds	r24, 0x00B4
}
     e66:	08 95       	ret

00000e68 <adcConfig>:

resultValue_t adcConfig(adcMode_t mode, adcReference_t reference, adcPrescaler_t  prescaler)
{
	uint8 reg = 0;

	if(reference != ADC_REFERENCE_NO_CHANGE){
     e68:	6f 3f       	cpi	r22, 0xFF	; 255
     e6a:	51 f0       	breq	.+20     	; 0xe80 <adcConfig+0x18>
		reg = ADMUX;
     e6c:	90 91 7c 00 	lds	r25, 0x007C
		reg &= ~(0x03 << REFS0);
		reg |= reference << REFS0;
     e70:	20 e4       	ldi	r18, 0x40	; 64
     e72:	62 9f       	mul	r22, r18
     e74:	b0 01       	movw	r22, r0
     e76:	11 24       	eor	r1, r1
{
	uint8 reg = 0;

	if(reference != ADC_REFERENCE_NO_CHANGE){
		reg = ADMUX;
		reg &= ~(0x03 << REFS0);
     e78:	9f 73       	andi	r25, 0x3F	; 63
		reg |= reference << REFS0;
     e7a:	96 2b       	or	r25, r22
		ADMUX = reg;
     e7c:	90 93 7c 00 	sts	0x007C, r25
	}

	if(prescaler != ADC_PRESCALER_NO_CHANGE){
     e80:	4f 3f       	cpi	r20, 0xFF	; 255
     e82:	31 f0       	breq	.+12     	; 0xe90 <adcConfig+0x28>
		reg = ADCSRA;
     e84:	90 91 7a 00 	lds	r25, 0x007A
		reg &= ~(0x07 << ADPS0);
     e88:	98 7f       	andi	r25, 0xF8	; 248
		reg |= prescaler << ADPS0;
     e8a:	94 2b       	or	r25, r20
		ADCSRA = reg;
     e8c:	90 93 7a 00 	sts	0x007A, r25
	}

	if(mode != ADC_MODE_NO_CHANGE){
     e90:	8f 3f       	cpi	r24, 0xFF	; 255
     e92:	39 f1       	breq	.+78     	; 0xee2 <adcConfig+0x7a>
		if(mode == ADC_MODE_SINGLE_CONVERSION)
     e94:	81 11       	cpse	r24, r1
     e96:	04 c0       	rjmp	.+8      	; 0xea0 <adcConfig+0x38>
			clrBit(ADCSRA, ADATE);
     e98:	80 91 7a 00 	lds	r24, 0x007A
     e9c:	8f 7d       	andi	r24, 0xDF	; 223
     e9e:	1f c0       	rjmp	.+62     	; 0xede <adcConfig+0x76>
		else{
			reg = ADCSRB;
     ea0:	20 91 7b 00 	lds	r18, 0x007B
			reg &= ~(0x07 << ADTS0);
     ea4:	28 7f       	andi	r18, 0xF8	; 248
			switch(mode){
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	fc 01       	movw	r30, r24
     eaa:	32 97       	sbiw	r30, 0x02	; 2
     eac:	e7 30       	cpi	r30, 0x07	; 7
     eae:	f1 05       	cpc	r31, r1
     eb0:	d0 f4       	brcc	.+52     	; 0xee6 <adcConfig+0x7e>
     eb2:	eb 5b       	subi	r30, 0xBB	; 187
     eb4:	ff 4f       	sbci	r31, 0xFF	; 255
     eb6:	0c 94 29 0a 	jmp	0x1452	; 0x1452 <__tablejump2__>
				case ADC_MODE_AUTO_ANALOG_COMP:		reg |= (1 << ADTS0);	break;
     eba:	21 60       	ori	r18, 0x01	; 1
     ebc:	0b c0       	rjmp	.+22     	; 0xed4 <adcConfig+0x6c>
				case ADC_MODE_AUTO_INT0:			reg |= (2 << ADTS0);	break;
     ebe:	22 60       	ori	r18, 0x02	; 2
     ec0:	09 c0       	rjmp	.+18     	; 0xed4 <adcConfig+0x6c>
				case ADC_MODE_AUTO_TIMER0_COMPA:	reg |= (3 << ADTS0);	break;
     ec2:	23 60       	ori	r18, 0x03	; 3
     ec4:	07 c0       	rjmp	.+14     	; 0xed4 <adcConfig+0x6c>
				case ADC_MODE_AUTO_TIMER0_OVERFLOW:	reg |= (4 << ADTS0);	break;
     ec6:	24 60       	ori	r18, 0x04	; 4
     ec8:	05 c0       	rjmp	.+10     	; 0xed4 <adcConfig+0x6c>
				case ADC_MODE_AUTO_TIMER1_COMPB:	reg |= (5 << ADTS0);	break;
     eca:	25 60       	ori	r18, 0x05	; 5
     ecc:	03 c0       	rjmp	.+6      	; 0xed4 <adcConfig+0x6c>
				case ADC_MODE_AUTO_TIMER1_OVERFLOW:	reg |= (6 << ADTS0);	break;
     ece:	26 60       	ori	r18, 0x06	; 6
     ed0:	01 c0       	rjmp	.+2      	; 0xed4 <adcConfig+0x6c>
				case ADC_MODE_AUTO_TIMER1_CAPTURE:	reg |= (7 << ADTS0);	break;
     ed2:	27 60       	ori	r18, 0x07	; 7
				default:							return RESULT_UNSUPPORTED_VALUE;	break;
			}
			ADCSRB = reg;
     ed4:	20 93 7b 00 	sts	0x007B, r18
			setBit(ADCSRA, ADATE);
     ed8:	80 91 7a 00 	lds	r24, 0x007A
     edc:	80 62       	ori	r24, 0x20	; 32
     ede:	80 93 7a 00 	sts	0x007A, r24
		}
	}

	return RESULT_OK;
     ee2:	80 e0       	ldi	r24, 0x00	; 0
     ee4:	08 95       	ret
				case ADC_MODE_AUTO_TIMER0_COMPA:	reg |= (3 << ADTS0);	break;
				case ADC_MODE_AUTO_TIMER0_OVERFLOW:	reg |= (4 << ADTS0);	break;
				case ADC_MODE_AUTO_TIMER1_COMPB:	reg |= (5 << ADTS0);	break;
				case ADC_MODE_AUTO_TIMER1_OVERFLOW:	reg |= (6 << ADTS0);	break;
				case ADC_MODE_AUTO_TIMER1_CAPTURE:	reg |= (7 << ADTS0);	break;
				default:							return RESULT_UNSUPPORTED_VALUE;	break;
     ee6:	87 e0       	ldi	r24, 0x07	; 7
			setBit(ADCSRA, ADATE);
		}
	}

	return RESULT_OK;
 }
     ee8:	08 95       	ret

00000eea <adcSelectChannel>:
 * Selects the adc channel
 * -------------------------------------------------------------------------- */

resultValue_t adcSelectChannel(adcChannel_t channel)
{
	uint8 reg = ADMUX;
     eea:	ec e7       	ldi	r30, 0x7C	; 124
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	90 81       	ld	r25, Z

	reg &= ~(0x0F << MUX0);
     ef0:	90 7f       	andi	r25, 0xF0	; 240
	reg |= (channel << MUX0);
     ef2:	98 2b       	or	r25, r24
	ADMUX = reg;
     ef4:	90 83       	st	Z, r25

	return RESULT_OK;
}
     ef6:	80 e0       	ldi	r24, 0x00	; 0
     ef8:	08 95       	ret

00000efa <adcEnableDigitalInput>:
 * Enable adc digital inputs
 * -------------------------------------------------------------------------- */

resultValue_t adcEnableDigitalInput(uint8 flagInputs)
{
	DIDR0 &= (~flagInputs);
     efa:	ee e7       	ldi	r30, 0x7E	; 126
     efc:	f0 e0       	ldi	r31, 0x00	; 0
     efe:	90 81       	ld	r25, Z
     f00:	80 95       	com	r24
     f02:	89 23       	and	r24, r25
     f04:	80 83       	st	Z, r24

	return RESULT_OK;
}
     f06:	80 e0       	ldi	r24, 0x00	; 0
     f08:	08 95       	ret

00000f0a <adcDisableDigitalInput>:
 * Enable adc digital inputs
 * -------------------------------------------------------------------------- */

resultValue_t adcDisableDigitalInput(uint8 flagInputs)
{
	DIDR0 |= flagInputs;
     f0a:	ee e7       	ldi	r30, 0x7E	; 126
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	90 81       	ld	r25, Z
     f10:	98 2b       	or	r25, r24
     f12:	90 83       	st	Z, r25

	return RESULT_OK;
}
     f14:	80 e0       	ldi	r24, 0x00	; 0
     f16:	08 95       	ret

00000f18 <adcDataPresentation>:
 * Sets the adc data presentation
 * -------------------------------------------------------------------------- */

resultValue_t adcDataPresentation(adcDataPresentation_t presentation)
{
	if(presentation == ADC_LEFT_ADJUSTED)
     f18:	81 11       	cpse	r24, r1
     f1a:	04 c0       	rjmp	.+8      	; 0xf24 <adcDataPresentation+0xc>
		setBit(ADMUX, ADLAR);
     f1c:	80 91 7c 00 	lds	r24, 0x007C
     f20:	80 62       	ori	r24, 0x20	; 32
     f22:	03 c0       	rjmp	.+6      	; 0xf2a <adcDataPresentation+0x12>
	else
		clrBit(ADMUX, ADLAR);
     f24:	80 91 7c 00 	lds	r24, 0x007C
     f28:	8f 7d       	andi	r24, 0xDF	; 223
     f2a:	80 93 7c 00 	sts	0x007C, r24

	return RESULT_OK;
}
     f2e:	80 e0       	ldi	r24, 0x00	; 0
     f30:	08 95       	ret

00000f32 <adcEnable>:
 * Enables the adc module
 * -------------------------------------------------------------------------- */

resultValue_t adcEnable(void)
{
	setBit(ADCSRA, ADEN);
     f32:	ea e7       	ldi	r30, 0x7A	; 122
     f34:	f0 e0       	ldi	r31, 0x00	; 0
     f36:	80 81       	ld	r24, Z
     f38:	80 68       	ori	r24, 0x80	; 128
     f3a:	80 83       	st	Z, r24

	return RESULT_OK;
}
     f3c:	80 e0       	ldi	r24, 0x00	; 0
     f3e:	08 95       	ret

00000f40 <adcDisable>:
 * Disables the adc module
 * -------------------------------------------------------------------------- */

resultValue_t adcDisable(void)
{
	clrBit(ADCSRA, ADEN);
     f40:	ea e7       	ldi	r30, 0x7A	; 122
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	80 81       	ld	r24, Z
     f46:	8f 77       	andi	r24, 0x7F	; 127
     f48:	80 83       	st	Z, r24

	return RESULT_OK;
}
     f4a:	80 e0       	ldi	r24, 0x00	; 0
     f4c:	08 95       	ret

00000f4e <adcClearInterruptRequest>:
 * Clears the adc interrupt request
 * -------------------------------------------------------------------------- */

resultValue_t adcClearInterruptRequest(void)
{
	setBit(ADCSRA, ADIF);
     f4e:	ea e7       	ldi	r30, 0x7A	; 122
     f50:	f0 e0       	ldi	r31, 0x00	; 0
     f52:	80 81       	ld	r24, Z
     f54:	80 61       	ori	r24, 0x10	; 16
     f56:	80 83       	st	Z, r24

	return RESULT_OK;
}
     f58:	80 e0       	ldi	r24, 0x00	; 0
     f5a:	08 95       	ret

00000f5c <adcActivateInterrupt>:
 * Enables the adc interrupt
 * -------------------------------------------------------------------------- */

resultValue_t adcActivateInterrupt(void)
{
	setBit(ADCSRA, ADIE);
     f5c:	ea e7       	ldi	r30, 0x7A	; 122
     f5e:	f0 e0       	ldi	r31, 0x00	; 0
     f60:	80 81       	ld	r24, Z
     f62:	88 60       	ori	r24, 0x08	; 8
     f64:	80 83       	st	Z, r24

	return RESULT_OK;
}
     f66:	80 e0       	ldi	r24, 0x00	; 0
     f68:	08 95       	ret

00000f6a <adcDeactivateInterrupt>:
 * Disables the adc interrupt
 * -------------------------------------------------------------------------- */

resultValue_t adcDeactivateInterrupt(void)
{
	clrBit(ADCSRA, ADIE);
     f6a:	ea e7       	ldi	r30, 0x7A	; 122
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	80 81       	ld	r24, Z
     f70:	87 7f       	andi	r24, 0xF7	; 247
     f72:	80 83       	st	Z, r24

	return RESULT_OK;
}
     f74:	80 e0       	ldi	r24, 0x00	; 0
     f76:	08 95       	ret

00000f78 <adcStartConversion>:
 * Starts an adc conversion
 * -------------------------------------------------------------------------- */

resultValue_t adcStartConversion(void)
{
	setBit(ADCSRA, ADSC);
     f78:	ea e7       	ldi	r30, 0x7A	; 122
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	80 81       	ld	r24, Z
     f7e:	80 64       	ori	r24, 0x40	; 64
     f80:	80 83       	st	Z, r24

	return RESULT_OK;
}
     f82:	80 e0       	ldi	r24, 0x00	; 0
     f84:	08 95       	ret

00000f86 <adcIsBusy>:
 * Returns if an adc conversion is running
 * -------------------------------------------------------------------------- */

bool_t adcIsBusy(void)
{
	return isBitSet(ADCSRA, ADSC);
     f86:	80 91 7a 00 	lds	r24, 0x007A
}
     f8a:	86 fb       	bst	r24, 6
     f8c:	88 27       	eor	r24, r24
     f8e:	80 f9       	bld	r24, 0
     f90:	08 95       	ret

00000f92 <adcWaitUntilConversionFinish>:
 * Waits until the current conversion is finished
 * -------------------------------------------------------------------------- */

resultValue_t adcWaitUntilConversionFinish(void)
{
	waitUntilBitIsClear(ADCSRA, ADSC);
     f92:	80 91 7a 00 	lds	r24, 0x007A
     f96:	86 fd       	sbrc	r24, 6
     f98:	fc cf       	rjmp	.-8      	; 0xf92 <adcWaitUntilConversionFinish>
	return RESULT_OK;
}
     f9a:	80 e0       	ldi	r24, 0x00	; 0
     f9c:	08 95       	ret

00000f9e <usartConfig>:
/* -----------------------------------------------------------------------------
 * Configures the USART controller
 * -------------------------------------------------------------------------- */

resultValue_t usartConfig(usartMode_t mode, usartBaudRate_t baudRate, usartDataBits_t dataBits, usartParity_t parity, usartStopBits_t stopBits)
{
     f9e:	8f 92       	push	r8
     fa0:	9f 92       	push	r9
     fa2:	af 92       	push	r10
     fa4:	bf 92       	push	r11
     fa6:	cf 92       	push	r12
     fa8:	df 92       	push	r13
     faa:	ef 92       	push	r14
     fac:	ff 92       	push	r15
     fae:	0f 93       	push	r16
     fb0:	4a 01       	movw	r8, r20
     fb2:	5b 01       	movw	r10, r22
     fb4:	9e 2d       	mov	r25, r14
	uint8 reg1 = UCSR0A;
     fb6:	30 91 c0 00 	lds	r19, 0x00C0
	uint8 reg2 = UCSR0B;
     fba:	30 91 c1 00 	lds	r19, 0x00C1
	uint8 reg3 = UCSR0C;
     fbe:	30 91 c2 00 	lds	r19, 0x00C2

	// Clear errors
	reg1 &= ~((1 << FE0) | (1 << DOR0) | (1 << UPE0));

	// USART stop bits
	if(stopBits != USART_STOP_BIT_NO_CHANGE){
     fc2:	9f 3f       	cpi	r25, 0xFF	; 255
     fc4:	19 f0       	breq	.+6      	; 0xfcc <usartConfig+0x2e>
		switch(stopBits){
     fc6:	92 30       	cpi	r25, 0x02	; 2
     fc8:	08 f0       	brcs	.+2      	; 0xfcc <usartConfig+0x2e>
     fca:	5f c0       	rjmp	.+190    	; 0x108a <usartConfig+0xec>
			default:					return RESULT_UNSUPPORTED_VALUE;	break;
		}
	}

	// USART parity bits
	if(parity != USART_PARITY_NO_CHANGE){
     fcc:	0f 3f       	cpi	r16, 0xFF	; 255
     fce:	19 f0       	breq	.+6      	; 0xfd6 <usartConfig+0x38>
		reg3 &= ~(0x03 << UPM00);
		switch(parity){
     fd0:	03 30       	cpi	r16, 0x03	; 3
     fd2:	08 f0       	brcs	.+2      	; 0xfd6 <usartConfig+0x38>
     fd4:	5c c0       	rjmp	.+184    	; 0x108e <usartConfig+0xf0>
			default:					return RESULT_USART_PARITY_UNSUPORTED;	break;
		}
	}

	// USART data bits
	if(dataBits != USART_DATA_BITS_NO_CHANGE){
     fd6:	2f 3f       	cpi	r18, 0xFF	; 255
     fd8:	19 f0       	breq	.+6      	; 0xfe0 <usartConfig+0x42>
		clrBit(reg2, UCSZ02);
		reg3 &= ~(0x03 << UCSZ00);
		switch(dataBits){
     fda:	25 30       	cpi	r18, 0x05	; 5
     fdc:	08 f0       	brcs	.+2      	; 0xfe0 <usartConfig+0x42>
     fde:	57 c0       	rjmp	.+174    	; 0x108e <usartConfig+0xf0>
			break;
		}
	}

	// USART mode
	if(mode != USART_MODE_NO_CHANGE){
     fe0:	8f 3f       	cpi	r24, 0xFF	; 255
     fe2:	79 f4       	brne	.+30     	; 0x1002 <usartConfig+0x64>
			reg3 |= (3 << UMSEL00);		// Synchronous SPI Mode
			setBit(reg3, UCPOL0);		// Polarity
			break;
		}
	}else{
		aux8 = (0x03 & (UCSR0C >> UMSEL00));
     fe4:	80 91 c2 00 	lds	r24, 0x00C2
     fe8:	82 95       	swap	r24
     fea:	86 95       	lsr	r24
     fec:	86 95       	lsr	r24
     fee:	83 70       	andi	r24, 0x03	; 3
		switch(aux8){
     ff0:	21 f0       	breq	.+8      	; 0xffa <usartConfig+0x5c>
     ff2:	83 30       	cpi	r24, 0x03	; 3
     ff4:	e9 f0       	breq	.+58     	; 0x1030 <usartConfig+0x92>
resultValue_t usartConfig(usartMode_t mode, usartBaudRate_t baudRate, usartDataBits_t dataBits, usartParity_t parity, usartStopBits_t stopBits)
{
	uint8 reg1 = UCSR0A;
	uint8 reg2 = UCSR0B;
	uint8 reg3 = UCSR0C;
	uint8 modeAux = 0;
     ff6:	80 e0       	ldi	r24, 0x00	; 0
     ff8:	04 c0       	rjmp	.+8      	; 0x1002 <usartConfig+0x64>
		}
	}else{
		aux8 = (0x03 & (UCSR0C >> UMSEL00));
		switch(aux8){
		case 0:	// Asynchronous mode
			if(isBitClr(UCSR0A, U2X0)){	// Single speed
     ffa:	80 91 c0 00 	lds	r24, 0x00C0
     ffe:	86 95       	lsr	r24
    1000:	81 70       	andi	r24, 0x01	; 1
			modeAux = USART_MODE_SYNCHRONOUS_SPI;
			break;
		}
	}

	if(baudRate != USART_BAUD_NO_CHANGE){
    1002:	9f ef       	ldi	r25, 0xFF	; 255
    1004:	89 16       	cp	r8, r25
    1006:	99 06       	cpc	r9, r25
    1008:	a9 06       	cpc	r10, r25
    100a:	b9 06       	cpc	r11, r25
    100c:	09 f4       	brne	.+2      	; 0x1010 <usartConfig+0x72>
    100e:	41 c0       	rjmp	.+130    	; 0x1092 <usartConfig+0xf4>
		switch(modeAux){
    1010:	81 30       	cpi	r24, 0x01	; 1
    1012:	49 f0       	breq	.+18     	; 0x1026 <usartConfig+0x88>
    1014:	18 f0       	brcs	.+6      	; 0x101c <usartConfig+0x7e>
    1016:	84 30       	cpi	r24, 0x04	; 4
    1018:	89 f0       	breq	.+34     	; 0x103c <usartConfig+0x9e>
    101a:	22 c0       	rjmp	.+68     	; 0x1060 <usartConfig+0xc2>
		case USART_MODE_ASYNCHRONOUS:
			aux64 = (F_CPU / 16 / baudRate) - 1;
    101c:	60 e4       	ldi	r22, 0x40	; 64
    101e:	72 e4       	ldi	r23, 0x42	; 66
    1020:	8f e0       	ldi	r24, 0x0F	; 15
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	0f c0       	rjmp	.+30     	; 0x1044 <usartConfig+0xa6>
			break;
		case USART_MODE_ASYNCHRONOUS_DOUBLE_SPEED:
			aux64 = (F_CPU / 8 / baudRate) - 1;
    1026:	60 e8       	ldi	r22, 0x80	; 128
    1028:	74 e8       	ldi	r23, 0x84	; 132
    102a:	8e e1       	ldi	r24, 0x1E	; 30
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	0a c0       	rjmp	.+20     	; 0x1044 <usartConfig+0xa6>
			modeAux = USART_MODE_SYNCHRONOUS_SPI;
			break;
		}
	}

	if(baudRate != USART_BAUD_NO_CHANGE){
    1030:	8f ef       	ldi	r24, 0xFF	; 255
    1032:	88 16       	cp	r8, r24
    1034:	98 06       	cpc	r9, r24
    1036:	a8 06       	cpc	r10, r24
    1038:	b8 06       	cpc	r11, r24
    103a:	59 f1       	breq	.+86     	; 0x1092 <usartConfig+0xf4>
			break;
		case USART_MODE_ASYNCHRONOUS_DOUBLE_SPEED:
			aux64 = (F_CPU / 8 / baudRate) - 1;
			break;
		case USART_MODE_SYNCHRONOUS_SPI:
			aux64 = (F_CPU / 2 / baudRate) - 1;
    103c:	60 e0       	ldi	r22, 0x00	; 0
    103e:	72 e1       	ldi	r23, 0x12	; 18
    1040:	8a e7       	ldi	r24, 0x7A	; 122
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	a5 01       	movw	r20, r10
    1046:	94 01       	movw	r18, r8
    1048:	0e 94 07 0a 	call	0x140e	; 0x140e <__udivmodsi4>
    104c:	21 50       	subi	r18, 0x01	; 1
    104e:	31 09       	sbc	r19, r1
    1050:	41 09       	sbc	r20, r1
    1052:	51 09       	sbc	r21, r1
    1054:	49 01       	movw	r8, r18
    1056:	5a 01       	movw	r10, r20
    1058:	c1 2c       	mov	r12, r1
    105a:	d1 2c       	mov	r13, r1
    105c:	76 01       	movw	r14, r12
			break;
    105e:	08 c0       	rjmp	.+16     	; 0x1070 <usartConfig+0xd2>
	uint8 reg1 = UCSR0A;
	uint8 reg2 = UCSR0B;
	uint8 reg3 = UCSR0C;
	uint8 modeAux = 0;
	uint8 aux8 = 0;
	uint64 aux64 = 0;
    1060:	81 2c       	mov	r8, r1
    1062:	91 2c       	mov	r9, r1
    1064:	a1 2c       	mov	r10, r1
    1066:	b1 2c       	mov	r11, r1
    1068:	c1 2c       	mov	r12, r1
    106a:	d1 2c       	mov	r13, r1
    106c:	e1 2c       	mov	r14, r1
    106e:	f1 2c       	mov	r15, r1
			aux64 = (F_CPU / 2 / baudRate) - 1;
			break;
		}
//		if((aux64 > (1.05 * baudRate)) || (aux64 < (0.95 * baudRate)))
//			return RESULT_USART_BAUD_RATE_UNSUPORTED;
		UBRR0H = 0x0F & (aux64 >> 8);
    1070:	94 01       	movw	r18, r8
    1072:	a5 01       	movw	r20, r10
    1074:	b6 01       	movw	r22, r12
    1076:	c7 01       	movw	r24, r14
    1078:	08 e0       	ldi	r16, 0x08	; 8
    107a:	0e 94 31 0a 	call	0x1462	; 0x1462 <__lshrdi3>
    107e:	2f 70       	andi	r18, 0x0F	; 15
    1080:	20 93 c5 00 	sts	0x00C5, r18
		UBRR0L = (0xFF & aux64);
    1084:	80 92 c4 00 	sts	0x00C4, r8
    1088:	04 c0       	rjmp	.+8      	; 0x1092 <usartConfig+0xf4>
	// USART stop bits
	if(stopBits != USART_STOP_BIT_NO_CHANGE){
		switch(stopBits){
			case USART_STOP_BIT_SINGLE:	clrBit(reg3, USBS0);				break;
			case USART_STOP_BIT_DOUBLE:	setBit(reg3, USBS0);				break;
			default:					return RESULT_UNSUPPORTED_VALUE;	break;
    108a:	87 e0       	ldi	r24, 0x07	; 7
    108c:	03 c0       	rjmp	.+6      	; 0x1094 <usartConfig+0xf6>
		case USART_DATA_BITS_9:
			setBit(reg2, UCSZ02);
			reg3 |= (0x03 << UCSZ00);
			break;
		default:
			return RESULT_USART_PARITY_UNSUPORTED;
    108e:	85 e0       	ldi	r24, 0x05	; 5
    1090:	01 c0       	rjmp	.+2      	; 0x1094 <usartConfig+0xf6>
//			return RESULT_USART_BAUD_RATE_UNSUPORTED;
		UBRR0H = 0x0F & (aux64 >> 8);
		UBRR0L = (0xFF & aux64);
	}

	return RESULT_OK;
    1092:	80 e0       	ldi	r24, 0x00	; 0
}
    1094:	0f 91       	pop	r16
    1096:	ff 90       	pop	r15
    1098:	ef 90       	pop	r14
    109a:	df 90       	pop	r13
    109c:	cf 90       	pop	r12
    109e:	bf 90       	pop	r11
    10a0:	af 90       	pop	r10
    10a2:	9f 90       	pop	r9
    10a4:	8f 90       	pop	r8
    10a6:	08 95       	ret

000010a8 <usartEnableReceiver>:
 * Enables USART reception module
 * -------------------------------------------------------------------------- */

resultValue_t usartEnableReceiver(void)
{
	setBit(UCSR0B, RXEN0);
    10a8:	e1 ec       	ldi	r30, 0xC1	; 193
    10aa:	f0 e0       	ldi	r31, 0x00	; 0
    10ac:	80 81       	ld	r24, Z
    10ae:	80 61       	ori	r24, 0x10	; 16
    10b0:	80 83       	st	Z, r24
	return RESULT_OK;
}
    10b2:	80 e0       	ldi	r24, 0x00	; 0
    10b4:	08 95       	ret

000010b6 <usartDisableReceiver>:
 * Disables USART reception module
 * -------------------------------------------------------------------------- */

resultValue_t usartDisableReceiver(void)
{
	clrBit(UCSR0B, RXEN0);
    10b6:	e1 ec       	ldi	r30, 0xC1	; 193
    10b8:	f0 e0       	ldi	r31, 0x00	; 0
    10ba:	80 81       	ld	r24, Z
    10bc:	8f 7e       	andi	r24, 0xEF	; 239
    10be:	80 83       	st	Z, r24
	return RESULT_OK;
}
    10c0:	80 e0       	ldi	r24, 0x00	; 0
    10c2:	08 95       	ret

000010c4 <usartEnableTransmitter>:
 * Enables USART transmission module
 * -------------------------------------------------------------------------- */

resultValue_t usartEnableTransmitter(void)
{
	setBit(UCSR0B, TXEN0);
    10c4:	e1 ec       	ldi	r30, 0xC1	; 193
    10c6:	f0 e0       	ldi	r31, 0x00	; 0
    10c8:	80 81       	ld	r24, Z
    10ca:	88 60       	ori	r24, 0x08	; 8
    10cc:	80 83       	st	Z, r24
	return RESULT_OK;
}
    10ce:	80 e0       	ldi	r24, 0x00	; 0
    10d0:	08 95       	ret

000010d2 <usartDisableTransmitter>:
 * Disables USART transmission module
 * -------------------------------------------------------------------------- */

resultValue_t usartDisableTransmitter(void)
{
	clrBit(UCSR0B, TXEN0);
    10d2:	e1 ec       	ldi	r30, 0xC1	; 193
    10d4:	f0 e0       	ldi	r31, 0x00	; 0
    10d6:	80 81       	ld	r24, Z
    10d8:	87 7f       	andi	r24, 0xF7	; 247
    10da:	80 83       	st	Z, r24
	return RESULT_OK;
}
    10dc:	80 e0       	ldi	r24, 0x00	; 0
    10de:	08 95       	ret

000010e0 <usartActivateReceptionCompleteInterrupt>:
 * Activates USART reception complete interrupt
 * -------------------------------------------------------------------------- */

resultValue_t usartActivateReceptionCompleteInterrupt(void)
{
	setBit(UCSR0B, RXCIE0);
    10e0:	e1 ec       	ldi	r30, 0xC1	; 193
    10e2:	f0 e0       	ldi	r31, 0x00	; 0
    10e4:	80 81       	ld	r24, Z
    10e6:	80 68       	ori	r24, 0x80	; 128
    10e8:	80 83       	st	Z, r24
	return RESULT_OK;
}
    10ea:	80 e0       	ldi	r24, 0x00	; 0
    10ec:	08 95       	ret

000010ee <usartDeactivateReceptionCompleteInterrupt>:
 * Deactivates USART reception complete interrupt
 * -------------------------------------------------------------------------- */

resultValue_t usartDeactivateReceptionCompleteInterrupt(void)
{
	clrBit(UCSR0B, RXCIE0);
    10ee:	e1 ec       	ldi	r30, 0xC1	; 193
    10f0:	f0 e0       	ldi	r31, 0x00	; 0
    10f2:	80 81       	ld	r24, Z
    10f4:	8f 77       	andi	r24, 0x7F	; 127
    10f6:	80 83       	st	Z, r24
	return RESULT_OK;
}
    10f8:	80 e0       	ldi	r24, 0x00	; 0
    10fa:	08 95       	ret

000010fc <usartActivateTransmissionCompleteInterrupt>:
 * Activates USART transmission complete interrupt
 * -------------------------------------------------------------------------- */

resultValue_t usartActivateTransmissionCompleteInterrupt(void)
{
	setBit(UCSR0B, TXCIE0);
    10fc:	e1 ec       	ldi	r30, 0xC1	; 193
    10fe:	f0 e0       	ldi	r31, 0x00	; 0
    1100:	80 81       	ld	r24, Z
    1102:	80 64       	ori	r24, 0x40	; 64
    1104:	80 83       	st	Z, r24
	return RESULT_OK;
}
    1106:	80 e0       	ldi	r24, 0x00	; 0
    1108:	08 95       	ret

0000110a <usartDeactivateTransmissionCompleteInterrupt>:
 * Deactivates USART transmission complete interrupt
 * -------------------------------------------------------------------------- */

resultValue_t usartDeactivateTransmissionCompleteInterrupt(void)
{
	clrBit(UCSR0B, TXCIE0);
    110a:	e1 ec       	ldi	r30, 0xC1	; 193
    110c:	f0 e0       	ldi	r31, 0x00	; 0
    110e:	80 81       	ld	r24, Z
    1110:	8f 7b       	andi	r24, 0xBF	; 191
    1112:	80 83       	st	Z, r24
	return RESULT_OK;
}
    1114:	80 e0       	ldi	r24, 0x00	; 0
    1116:	08 95       	ret

00001118 <usartActivateBufferEmptyInterrupt>:
 * Activates USART buffer empty interrupt
 * -------------------------------------------------------------------------- */

resultValue_t usartActivateBufferEmptyInterrupt(void)
{
	setBit(UCSR0B, UDRIE0);
    1118:	e1 ec       	ldi	r30, 0xC1	; 193
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	80 81       	ld	r24, Z
    111e:	80 62       	ori	r24, 0x20	; 32
    1120:	80 83       	st	Z, r24
	return RESULT_OK;
}
    1122:	80 e0       	ldi	r24, 0x00	; 0
    1124:	08 95       	ret

00001126 <usartDeactivateBufferEmptyInterrupt>:
 * Deactivates USART buffer empty interrupt
 * -------------------------------------------------------------------------- */

resultValue_t usartDeactivateBufferEmptyInterrupt(void)
{
	clrBit(UCSR0B, UDRIE0);
    1126:	e1 ec       	ldi	r30, 0xC1	; 193
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	80 81       	ld	r24, Z
    112c:	8f 7d       	andi	r24, 0xDF	; 223
    112e:	80 83       	st	Z, r24
	return RESULT_OK;
}
    1130:	80 e0       	ldi	r24, 0x00	; 0
    1132:	08 95       	ret

00001134 <usartStdio>:
 * Changes the std handlers to usart module
 * -------------------------------------------------------------------------- */

resultValue_t usartStdio(void)
{
	stdin = stdout = stderr = &usartStream;
    1134:	8e e0       	ldi	r24, 0x0E	; 14
    1136:	91 e0       	ldi	r25, 0x01	; 1
    1138:	90 93 59 01 	sts	0x0159, r25
    113c:	80 93 58 01 	sts	0x0158, r24
    1140:	90 93 57 01 	sts	0x0157, r25
    1144:	80 93 56 01 	sts	0x0156, r24
    1148:	90 93 55 01 	sts	0x0155, r25
    114c:	80 93 54 01 	sts	0x0154, r24
	return RESULT_OK;
}
    1150:	80 e0       	ldi	r24, 0x00	; 0
    1152:	08 95       	ret

00001154 <usartIsReceptionComplete>:
 * Checks if a reception has been completed
 * -------------------------------------------------------------------------- */

bool_t usartIsReceptionComplete(void)
{
	return isBitSet(UCSR0A, RXC0);
    1154:	80 91 c0 00 	lds	r24, 0x00C0
}
    1158:	88 1f       	adc	r24, r24
    115a:	88 27       	eor	r24, r24
    115c:	88 1f       	adc	r24, r24
    115e:	08 95       	ret

00001160 <usartIsTransmissionComplete>:
 * Checks if a transmission has been completed
 * -------------------------------------------------------------------------- */

bool_t usartIsTransmissionComplete(void)
{
	return isBitSet(UCSR0A, TXC0);
    1160:	80 91 c0 00 	lds	r24, 0x00C0
}
    1164:	86 fb       	bst	r24, 6
    1166:	88 27       	eor	r24, r24
    1168:	80 f9       	bld	r24, 0
    116a:	08 95       	ret

0000116c <usartIsBufferEmpty>:
 * Checks if the buffer is empty
 * -------------------------------------------------------------------------- */

bool_t usartIsBufferEmpty(void)
{
	return isBitSet(UCSR0A, UDRE0);
    116c:	80 91 c0 00 	lds	r24, 0x00C0
}
    1170:	85 fb       	bst	r24, 5
    1172:	88 27       	eor	r24, r24
    1174:	80 f9       	bld	r24, 0
    1176:	08 95       	ret

00001178 <usartTransmitStd>:
 * Transmits data in 5, 6, 7 or 8 bits modes using the USART controller and
 * standard output heandler
 * -------------------------------------------------------------------------- */

resultValue_t usartTransmitStd(int8 data, FILE * stream)
{
    1178:	cf 93       	push	r28
    117a:	c8 2f       	mov	r28, r24
	while(!usartIsBufferEmpty())
    117c:	0e 94 b6 08 	call	0x116c	; 0x116c <usartIsBufferEmpty>
    1180:	88 23       	and	r24, r24
    1182:	e1 f3       	breq	.-8      	; 0x117c <usartTransmitStd+0x4>
		;	// Waits until last transmission ends
	UDR0 = data;
    1184:	c0 93 c6 00 	sts	0x00C6, r28
	return RESULT_OK;
}
    1188:	80 e0       	ldi	r24, 0x00	; 0
    118a:	cf 91       	pop	r28
    118c:	08 95       	ret

0000118e <usartCheckError>:

usartError_t usartCheckError(void)
{
	usartError_t error = 0;

	if(isBitSet(UCSR0A, FE0))
    118e:	80 91 c0 00 	lds	r24, 0x00C0
    1192:	84 fd       	sbrc	r24, 4
    1194:	02 c0       	rjmp	.+4      	; 0x119a <usartCheckError+0xc>
 * Checks if an error occurred during transmission or reception
 * -------------------------------------------------------------------------- */

usartError_t usartCheckError(void)
{
	usartError_t error = 0;
    1196:	80 e0       	ldi	r24, 0x00	; 0
    1198:	01 c0       	rjmp	.+2      	; 0x119c <usartCheckError+0xe>

	if(isBitSet(UCSR0A, FE0))
		error |= USART_FRAME_ERROR;
    119a:	82 e0       	ldi	r24, 0x02	; 2
	if(isBitSet(UCSR0A, DOR0))
    119c:	90 91 c0 00 	lds	r25, 0x00C0
    11a0:	93 fd       	sbrc	r25, 3
		error |= USART_PARITY_ERROR;
    11a2:	84 60       	ori	r24, 0x04	; 4
	if(isBitSet(UCSR0A, UPE0))
    11a4:	90 91 c0 00 	lds	r25, 0x00C0
    11a8:	92 ff       	sbrs	r25, 2
    11aa:	02 c0       	rjmp	.+4      	; 0x11b0 <usartCheckError+0x22>
		error |= USART_BUFFER_OVERFLOW_ERROR;
    11ac:	88 60       	ori	r24, 0x08	; 8
    11ae:	08 95       	ret

	if(error == 0)
    11b0:	81 11       	cpse	r24, r1
    11b2:	01 c0       	rjmp	.+2      	; 0x11b6 <usartCheckError+0x28>
		return USART_OK;
    11b4:	81 e0       	ldi	r24, 0x01	; 1
	return error;
}
    11b6:	08 95       	ret

000011b8 <usartTransmit>:
/* -----------------------------------------------------------------------------
 * Transmits data in 5, 6, 7 or 8 bits modes using the USART controller
 * -------------------------------------------------------------------------- */

resultValue_t usartTransmit(int8 data)
{
    11b8:	cf 93       	push	r28
    11ba:	c8 2f       	mov	r28, r24
	while(!usartIsBufferEmpty())
    11bc:	0e 94 b6 08 	call	0x116c	; 0x116c <usartIsBufferEmpty>
    11c0:	88 23       	and	r24, r24
    11c2:	e1 f3       	breq	.-8      	; 0x11bc <usartTransmit+0x4>
		;	// Waits until last transmission ends
	UDR0 = data;
    11c4:	c0 93 c6 00 	sts	0x00C6, r28
	return RESULT_OK;
}
    11c8:	80 e0       	ldi	r24, 0x00	; 0
    11ca:	cf 91       	pop	r28
    11cc:	08 95       	ret

000011ce <usartTransmit9bits>:
/* -----------------------------------------------------------------------------
 * Transmits data in 9 bits mode using the USART controller
 * -------------------------------------------------------------------------- */

resultValue_t usartTransmit9bits(uint16 data)
{
    11ce:	cf 93       	push	r28
    11d0:	df 93       	push	r29
    11d2:	ec 01       	movw	r28, r24
	uint8 aux;

	while(!usartIsBufferEmpty())
    11d4:	0e 94 b6 08 	call	0x116c	; 0x116c <usartIsBufferEmpty>
    11d8:	88 23       	and	r24, r24
    11da:	e1 f3       	breq	.-8      	; 0x11d4 <usartTransmit9bits+0x6>
		;	// Waits until last transmission ends
	aux = ((data & 0x100) >> 8);
    11dc:	ce 01       	movw	r24, r28
    11de:	88 27       	eor	r24, r24
    11e0:	91 70       	andi	r25, 0x01	; 1
	if(aux)
		setBit(UCSR0B, TXB80);
    11e2:	80 91 c1 00 	lds	r24, 0x00C1
	uint8 aux;

	while(!usartIsBufferEmpty())
		;	// Waits until last transmission ends
	aux = ((data & 0x100) >> 8);
	if(aux)
    11e6:	99 23       	and	r25, r25
    11e8:	11 f0       	breq	.+4      	; 0x11ee <usartTransmit9bits+0x20>
		setBit(UCSR0B, TXB80);
    11ea:	81 60       	ori	r24, 0x01	; 1
    11ec:	01 c0       	rjmp	.+2      	; 0x11f0 <usartTransmit9bits+0x22>
	else
		clrBit(UCSR0B, TXB80);
    11ee:	8e 7f       	andi	r24, 0xFE	; 254
    11f0:	80 93 c1 00 	sts	0x00C1, r24
	UDR0 = (uint8)data;
    11f4:	c0 93 c6 00 	sts	0x00C6, r28
	return RESULT_OK;
}
    11f8:	80 e0       	ldi	r24, 0x00	; 0
    11fa:	df 91       	pop	r29
    11fc:	cf 91       	pop	r28
    11fe:	08 95       	ret

00001200 <usartReceive>:
 * Checks if a reception has been completed
 * -------------------------------------------------------------------------- */

bool_t usartIsReceptionComplete(void)
{
	return isBitSet(UCSR0A, RXC0);
    1200:	80 91 c0 00 	lds	r24, 0x00C0

uint8 usartReceive(void)
{
	uint8 status;

	while(!usartIsReceptionComplete())
    1204:	87 ff       	sbrs	r24, 7
    1206:	fc cf       	rjmp	.-8      	; 0x1200 <usartReceive>
		;	// Waits until last reception ends
	status = UCSR0A;
    1208:	80 91 c0 00 	lds	r24, 0x00C0
	return UDR0;
    120c:	80 91 c6 00 	lds	r24, 0x00C6
}
    1210:	08 95       	ret

00001212 <usartReceive9bits>:
 * Checks if a reception has been completed
 * -------------------------------------------------------------------------- */

bool_t usartIsReceptionComplete(void)
{
	return isBitSet(UCSR0A, RXC0);
    1212:	80 91 c0 00 	lds	r24, 0x00C0
	uint8 status;
	uint8 byteh;
	uint8 bytel;
	uint16 byte;

	while(!usartIsReceptionComplete())
    1216:	87 ff       	sbrs	r24, 7
    1218:	fc cf       	rjmp	.-8      	; 0x1212 <usartReceive9bits>
		;	// Waits until last reception ends
	status = UCSR0A;
    121a:	80 91 c0 00 	lds	r24, 0x00C0
	byteh = UCSR0B;
    121e:	80 91 c1 00 	lds	r24, 0x00C1
	bytel = UDR0;
    1222:	20 91 c6 00 	lds	r18, 0x00C6

	byte = (uint16)(byteh & 0x02) << 7;
    1226:	82 70       	andi	r24, 0x02	; 2
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	96 95       	lsr	r25
    122c:	98 2f       	mov	r25, r24
    122e:	88 27       	eor	r24, r24
    1230:	97 95       	ror	r25
    1232:	87 95       	ror	r24
	byte |= bytel;
	return  byte;
}
    1234:	82 2b       	or	r24, r18
    1236:	08 95       	ret

00001238 <usartClearReceptionBuffer>:
 * Checks if a reception has been completed
 * -------------------------------------------------------------------------- */

bool_t usartIsReceptionComplete(void)
{
	return isBitSet(UCSR0A, RXC0);
    1238:	80 91 c0 00 	lds	r24, 0x00C0
 * -------------------------------------------------------------------------- */

void usartClearReceptionBuffer(void)
{
	uint8 aux;
	while(usartIsReceptionComplete())
    123c:	87 ff       	sbrs	r24, 7
    123e:	03 c0       	rjmp	.+6      	; 0x1246 <usartClearReceptionBuffer+0xe>
		aux = UDR0;
    1240:	80 91 c6 00 	lds	r24, 0x00C6
    1244:	f9 cf       	rjmp	.-14     	; 0x1238 <usartClearReceptionBuffer>
	return;
}
    1246:	08 95       	ret

00001248 <usartAddDataToReceiverBuffer>:
/* -----------------------------------------------------------------------------
 * Adds data to the reception buffer. The function has NO CONTROL of lost data.
 * -------------------------------------------------------------------------- */

void usartAddDataToReceiverBuffer(uint8 data)
{
    1248:	ff 92       	push	r15
    124a:	0f 93       	push	r16
    124c:	1f 93       	push	r17
    124e:	cf 93       	push	r28
    1250:	df 93       	push	r29
    1252:	f8 2e       	mov	r15, r24
	if(((usartReceiverBufferNextWrite + 1) % USART_RECEIVER_BUFFER_SIZE) != usartReceiverBufferNextRead){
    1254:	c0 91 51 01 	lds	r28, 0x0151
    1258:	d0 e0       	ldi	r29, 0x00	; 0
    125a:	be 01       	movw	r22, r28
    125c:	6f 5f       	subi	r22, 0xFF	; 255
    125e:	7f 4f       	sbci	r23, 0xFF	; 255
    1260:	88 27       	eor	r24, r24
    1262:	77 fd       	sbrc	r23, 7
    1264:	80 95       	com	r24
    1266:	98 2f       	mov	r25, r24
    1268:	22 e3       	ldi	r18, 0x32	; 50
    126a:	30 e0       	ldi	r19, 0x00	; 0
    126c:	40 e0       	ldi	r20, 0x00	; 0
    126e:	50 e0       	ldi	r21, 0x00	; 0
    1270:	0e 94 07 0a 	call	0x140e	; 0x140e <__udivmodsi4>
    1274:	00 91 53 01 	lds	r16, 0x0153
    1278:	10 e0       	ldi	r17, 0x00	; 0
    127a:	20 e0       	ldi	r18, 0x00	; 0
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	60 17       	cp	r22, r16
    1280:	71 07       	cpc	r23, r17
    1282:	82 07       	cpc	r24, r18
    1284:	93 07       	cpc	r25, r19
    1286:	51 f0       	breq	.+20     	; 0x129c <usartAddDataToReceiverBuffer+0x54>
		usartReceiverBuffer[usartReceiverBufferNextWrite] = data;
    1288:	c1 5e       	subi	r28, 0xE1	; 225
    128a:	de 4f       	sbci	r29, 0xFE	; 254
    128c:	f8 82       	st	Y, r15
		usartReceiverBufferNextWrite = (usartReceiverBufferNextWrite + 1) % USART_RECEIVER_BUFFER_SIZE;
    128e:	60 93 51 01 	sts	0x0151, r22
		usartReceiverBufferLength++;
    1292:	80 91 52 01 	lds	r24, 0x0152
    1296:	8f 5f       	subi	r24, 0xFF	; 255
    1298:	80 93 52 01 	sts	0x0152, r24
	}
	return;
}
    129c:	df 91       	pop	r29
    129e:	cf 91       	pop	r28
    12a0:	1f 91       	pop	r17
    12a2:	0f 91       	pop	r16
    12a4:	ff 90       	pop	r15
    12a6:	08 95       	ret

000012a8 <usartGetDataFromReceiverBuffer>:
 * usartIsReceiverBufferEmpty() function must be called to check if there is new
 * data in the buffer.
 * -------------------------------------------------------------------------- */

uint8 usartGetDataFromReceiverBuffer(void)
{
    12a8:	cf 93       	push	r28
    12aa:	df 93       	push	r29
	uint8 data = usartReceiverBuffer[usartReceiverBufferNextRead];
    12ac:	60 91 53 01 	lds	r22, 0x0153
    12b0:	70 e0       	ldi	r23, 0x00	; 0
    12b2:	fb 01       	movw	r30, r22
    12b4:	e1 5e       	subi	r30, 0xE1	; 225
    12b6:	fe 4f       	sbci	r31, 0xFE	; 254
    12b8:	d0 81       	ld	r29, Z
	if(usartReceiverBufferLength > 0){
    12ba:	c0 91 52 01 	lds	r28, 0x0152
    12be:	cc 23       	and	r28, r28
    12c0:	89 f0       	breq	.+34     	; 0x12e4 <usartGetDataFromReceiverBuffer+0x3c>
		usartReceiverBufferNextRead = (usartReceiverBufferNextRead + 1) % USART_RECEIVER_BUFFER_SIZE;
    12c2:	6f 5f       	subi	r22, 0xFF	; 255
    12c4:	7f 4f       	sbci	r23, 0xFF	; 255
    12c6:	88 27       	eor	r24, r24
    12c8:	77 fd       	sbrc	r23, 7
    12ca:	80 95       	com	r24
    12cc:	98 2f       	mov	r25, r24
    12ce:	22 e3       	ldi	r18, 0x32	; 50
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	40 e0       	ldi	r20, 0x00	; 0
    12d4:	50 e0       	ldi	r21, 0x00	; 0
    12d6:	0e 94 07 0a 	call	0x140e	; 0x140e <__udivmodsi4>
    12da:	60 93 53 01 	sts	0x0153, r22
		usartReceiverBufferLength--;
    12de:	c1 50       	subi	r28, 0x01	; 1
    12e0:	c0 93 52 01 	sts	0x0152, r28
	}
	return data;
}
    12e4:	8d 2f       	mov	r24, r29
    12e6:	df 91       	pop	r29
    12e8:	cf 91       	pop	r28
    12ea:	08 95       	ret

000012ec <usartIsReceiverBufferEmpty>:
 * reading the buffer.
 * -------------------------------------------------------------------------- */

uint8 usartIsReceiverBufferEmpty(void)
{
	if(usartReceiverBufferLength == 0)
    12ec:	81 e0       	ldi	r24, 0x01	; 1
    12ee:	90 91 52 01 	lds	r25, 0x0152
    12f2:	91 11       	cpse	r25, r1
    12f4:	80 e0       	ldi	r24, 0x00	; 0
		return TRUE;
	return FALSE;
}
    12f6:	08 95       	ret

000012f8 <usartGetCurrentBaudRate>:
//	case 2:
//		aux32 = F_CPU / 2 / (UBRR0 + 1);
//		break;
//	}
	return aux32;
 }
    12f8:	60 e0       	ldi	r22, 0x00	; 0
    12fa:	70 e0       	ldi	r23, 0x00	; 0
    12fc:	cb 01       	movw	r24, r22
    12fe:	08 95       	ret

00001300 <spiInit>:
/* -----------------------------------------------------------------------------
 * Configures the SPI controller
 * -------------------------------------------------------------------------- */

void spiInit(void)
{
    1300:	08 95       	ret

00001302 <spiMasterTransmit>:
 * Transmit data at the SPI bus in master mode
 * -------------------------------------------------------------------------- */

uint8 spiMasterTransmit(uint8 data)
{
	SPDR = data;
    1302:	8e bd       	out	0x2e, r24	; 46
	waitUntilBitIsClear(SPSR, SPIF);
    1304:	0d b4       	in	r0, 0x2d	; 45
    1306:	07 fc       	sbrc	r0, 7
    1308:	fd cf       	rjmp	.-6      	; 0x1304 <spiMasterTransmit+0x2>
	return SPDR;
    130a:	8e b5       	in	r24, 0x2e	; 46
}
    130c:	08 95       	ret

0000130e <spiSlaveTransmit>:
 * Receives data from the SPI bus
 * -------------------------------------------------------------------------- */

uint8 spiSlaveTransmit(void)
{
	waitUntilBitIsClear(SPSR, SPIF);
    130e:	0d b4       	in	r0, 0x2d	; 45
    1310:	07 fc       	sbrc	r0, 7
    1312:	fd cf       	rjmp	.-6      	; 0x130e <spiSlaveTransmit>
	return SPDR;
    1314:	8e b5       	in	r24, 0x2e	; 46
}
    1316:	08 95       	ret

00001318 <main>:
	}
}

int main(void)
{
	clrBit(DDRC,POT_BIT);		//SETA O PINO DO ADC COMO ENTRADA
    1318:	39 98       	cbi	0x07, 1	; 7
	adcConfig(ADC_MODE_SINGLE_CONVERSION, ADC_REFRENCE_POWER_SUPPLY , ADC_PRESCALER_128);
    131a:	47 e0       	ldi	r20, 0x07	; 7
    131c:	61 e0       	ldi	r22, 0x01	; 1
    131e:	80 e0       	ldi	r24, 0x00	; 0
    1320:	0e 94 34 07 	call	0xe68	; 0xe68 <adcConfig>
	adcSelectChannel(POT_CHANNEL);
    1324:	81 e0       	ldi	r24, 0x01	; 1
    1326:	0e 94 75 07 	call	0xeea	; 0xeea <adcSelectChannel>
	adcClearInterruptRequest();
    132a:	0e 94 a7 07 	call	0xf4e	; 0xf4e <adcClearInterruptRequest>
	adcActivateInterrupt();
    132e:	0e 94 ae 07 	call	0xf5c	; 0xf5c <adcActivateInterrupt>
	adcEnable();
    1332:	0e 94 99 07 	call	0xf32	; 0xf32 <adcEnable>
	adcStartConversion();
    1336:	0e 94 bc 07 	call	0xf78	; 0xf78 <adcStartConversion>
	
	timer1Config(TIMER_B_MODE_CTC, TIMER_A_PRESCALER_64);
    133a:	63 e0       	ldi	r22, 0x03	; 3
    133c:	84 e0       	ldi	r24, 0x04	; 4
    133e:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <timer1Config>
	timer1ClearCompareBInterruptRequest();									
    1342:	0e 94 56 06 	call	0xcac	; 0xcac <timer1ClearCompareBInterruptRequest>
	timer1ClearCompareAInterruptRequest();
    1346:	0e 94 45 06 	call	0xc8a	; 0xc8a <timer1ClearCompareAInterruptRequest>
	timer1ActivateCompareBInterrupt();									//ativa a interrupcao do compA
    134a:	0e 94 48 06 	call	0xc90	; 0xc90 <timer1ActivateCompareBInterrupt>
	timer1ActivateCompareAInterrupt();									//ativa a interrupcao do compB
    134e:	0e 94 37 06 	call	0xc6e	; 0xc6e <timer1ActivateCompareAInterrupt>
	timer1SetCompareAValue((F_CPU/64)/freq);							//valor do comparador A,  define a frequencia
    1352:	20 91 0a 01 	lds	r18, 0x010A
    1356:	30 91 0b 01 	lds	r19, 0x010B
    135a:	40 e0       	ldi	r20, 0x00	; 0
    135c:	50 e0       	ldi	r21, 0x00	; 0
    135e:	60 e9       	ldi	r22, 0x90	; 144
    1360:	70 ed       	ldi	r23, 0xD0	; 208
    1362:	83 e0       	ldi	r24, 0x03	; 3
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	0e 94 07 0a 	call	0x140e	; 0x140e <__udivmodsi4>
    136a:	c9 01       	movw	r24, r18
    136c:	0e 94 86 06 	call	0xd0c	; 0xd0c <timer1SetCompareAValue>
	timer1SetCompareBValue((dc * (timer1GetCompareAValue()))/100);		//valor do comparador B,  define Duty Cicle
    1370:	c0 91 1d 01 	lds	r28, 0x011D
    1374:	d0 e0       	ldi	r29, 0x00	; 0
    1376:	0e 94 8f 06 	call	0xd1e	; 0xd1e <timer1GetCompareAValue>
    137a:	9c 01       	movw	r18, r24
    137c:	2c 9f       	mul	r18, r28
    137e:	c0 01       	movw	r24, r0
    1380:	2d 9f       	mul	r18, r29
    1382:	90 0d       	add	r25, r0
    1384:	3c 9f       	mul	r19, r28
    1386:	90 0d       	add	r25, r0
    1388:	11 24       	eor	r1, r1
    138a:	64 e6       	ldi	r22, 0x64	; 100
    138c:	70 e0       	ldi	r23, 0x00	; 0
    138e:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__udivmodhi4>
    1392:	cb 01       	movw	r24, r22
    1394:	0e 94 94 06 	call	0xd28	; 0xd28 <timer1SetCompareBValue>
	
	sei();
    1398:	78 94       	sei
	
	setBit(PWM_DDR,PWM_BIT);			//define o pino do pwm como saída
    139a:	21 9a       	sbi	0x04, 1	; 4
	setBit(ON_PORT,ON_BIT);				//habilita o pull-up da chave on
    139c:	2a 9a       	sbi	0x05, 2	; 5
	setBit(DMS_PORT,DMS_BIT);			//habilita o pull-up da chave dms
    139e:	2b 9a       	sbi	0x05, 3	; 5


	setBit(DDRD,PD0);			
    13a0:	50 9a       	sbi	0x0a, 0	; 10
	setBit(PORTD,PD0);			
    13a2:	58 9a       	sbi	0x0b, 0	; 11
    13a4:	c1 e0       	ldi	r28, 0x01	; 1
    while(1)
    {
    	setBit(PIND,PD0);
    13a6:	48 9a       	sbi	0x09, 0	; 9
    	on = isBitClr(ON_PIN,ON_BIT);
    13a8:	93 b1       	in	r25, 0x03	; 3
    13aa:	92 fb       	bst	r25, 2
    13ac:	99 27       	eor	r25, r25
    13ae:	90 f9       	bld	r25, 0
    13b0:	9c 27       	eor	r25, r28
    13b2:	90 93 05 01 	sts	0x0105, r25
    	dms = isBitClr(DMS_PIN,DMS_BIT);
    13b6:	83 b1       	in	r24, 0x03	; 3
    13b8:	83 fb       	bst	r24, 3
    13ba:	88 27       	eor	r24, r24
    13bc:	80 f9       	bld	r24, 0
    13be:	8c 27       	eor	r24, r28
    13c0:	80 93 04 01 	sts	0x0104, r24
    13c4:	20 91 1d 01 	lds	r18, 0x011D
    	if(on && dms){
    13c8:	99 23       	and	r25, r25
    13ca:	39 f0       	breq	.+14     	; 0x13da <main+0xc2>
    13cc:	88 23       	and	r24, r24
    13ce:	29 f0       	breq	.+10     	; 0x13da <main+0xc2>
	    	if(dc != dcReq){
    13d0:	80 91 1c 01 	lds	r24, 0x011C
    13d4:	28 13       	cpse	r18, r24
    13d6:	04 c0       	rjmp	.+8      	; 0x13e0 <main+0xc8>
    13d8:	e6 cf       	rjmp	.-52     	; 0x13a6 <main+0x8e>
	    		seta_dc(dcReq);			//definição do Duty Cicle do PWM
	    	}
    	}
    	else{
    		if(dc != 0)					//se o sistema ainda nao esta desligado
    13da:	22 23       	and	r18, r18
    13dc:	21 f3       	breq	.-56     	; 0x13a6 <main+0x8e>
    			seta_dc(0);				//desliga o sistema
    13de:	80 e0       	ldi	r24, 0x00	; 0
    13e0:	0e 94 6b 00 	call	0xd6	; 0xd6 <seta_dc>
    13e4:	e0 cf       	rjmp	.-64     	; 0x13a6 <main+0x8e>

000013e6 <__udivmodhi4>:
    13e6:	aa 1b       	sub	r26, r26
    13e8:	bb 1b       	sub	r27, r27
    13ea:	51 e1       	ldi	r21, 0x11	; 17
    13ec:	07 c0       	rjmp	.+14     	; 0x13fc <__udivmodhi4_ep>

000013ee <__udivmodhi4_loop>:
    13ee:	aa 1f       	adc	r26, r26
    13f0:	bb 1f       	adc	r27, r27
    13f2:	a6 17       	cp	r26, r22
    13f4:	b7 07       	cpc	r27, r23
    13f6:	10 f0       	brcs	.+4      	; 0x13fc <__udivmodhi4_ep>
    13f8:	a6 1b       	sub	r26, r22
    13fa:	b7 0b       	sbc	r27, r23

000013fc <__udivmodhi4_ep>:
    13fc:	88 1f       	adc	r24, r24
    13fe:	99 1f       	adc	r25, r25
    1400:	5a 95       	dec	r21
    1402:	a9 f7       	brne	.-22     	; 0x13ee <__udivmodhi4_loop>
    1404:	80 95       	com	r24
    1406:	90 95       	com	r25
    1408:	bc 01       	movw	r22, r24
    140a:	cd 01       	movw	r24, r26
    140c:	08 95       	ret

0000140e <__udivmodsi4>:
    140e:	a1 e2       	ldi	r26, 0x21	; 33
    1410:	1a 2e       	mov	r1, r26
    1412:	aa 1b       	sub	r26, r26
    1414:	bb 1b       	sub	r27, r27
    1416:	fd 01       	movw	r30, r26
    1418:	0d c0       	rjmp	.+26     	; 0x1434 <__udivmodsi4_ep>

0000141a <__udivmodsi4_loop>:
    141a:	aa 1f       	adc	r26, r26
    141c:	bb 1f       	adc	r27, r27
    141e:	ee 1f       	adc	r30, r30
    1420:	ff 1f       	adc	r31, r31
    1422:	a2 17       	cp	r26, r18
    1424:	b3 07       	cpc	r27, r19
    1426:	e4 07       	cpc	r30, r20
    1428:	f5 07       	cpc	r31, r21
    142a:	20 f0       	brcs	.+8      	; 0x1434 <__udivmodsi4_ep>
    142c:	a2 1b       	sub	r26, r18
    142e:	b3 0b       	sbc	r27, r19
    1430:	e4 0b       	sbc	r30, r20
    1432:	f5 0b       	sbc	r31, r21

00001434 <__udivmodsi4_ep>:
    1434:	66 1f       	adc	r22, r22
    1436:	77 1f       	adc	r23, r23
    1438:	88 1f       	adc	r24, r24
    143a:	99 1f       	adc	r25, r25
    143c:	1a 94       	dec	r1
    143e:	69 f7       	brne	.-38     	; 0x141a <__udivmodsi4_loop>
    1440:	60 95       	com	r22
    1442:	70 95       	com	r23
    1444:	80 95       	com	r24
    1446:	90 95       	com	r25
    1448:	9b 01       	movw	r18, r22
    144a:	ac 01       	movw	r20, r24
    144c:	bd 01       	movw	r22, r26
    144e:	cf 01       	movw	r24, r30
    1450:	08 95       	ret

00001452 <__tablejump2__>:
    1452:	ee 0f       	add	r30, r30
    1454:	ff 1f       	adc	r31, r31

00001456 <__tablejump__>:
    1456:	05 90       	lpm	r0, Z+
    1458:	f4 91       	lpm	r31, Z
    145a:	e0 2d       	mov	r30, r0
    145c:	09 94       	ijmp

0000145e <__ashrdi3>:
    145e:	97 fb       	bst	r25, 7
    1460:	10 f8       	bld	r1, 0

00001462 <__lshrdi3>:
    1462:	16 94       	lsr	r1
    1464:	00 08       	sbc	r0, r0
    1466:	0f 93       	push	r16
    1468:	08 30       	cpi	r16, 0x08	; 8
    146a:	98 f0       	brcs	.+38     	; 0x1492 <__lshrdi3+0x30>
    146c:	08 50       	subi	r16, 0x08	; 8
    146e:	23 2f       	mov	r18, r19
    1470:	34 2f       	mov	r19, r20
    1472:	45 2f       	mov	r20, r21
    1474:	56 2f       	mov	r21, r22
    1476:	67 2f       	mov	r22, r23
    1478:	78 2f       	mov	r23, r24
    147a:	89 2f       	mov	r24, r25
    147c:	90 2d       	mov	r25, r0
    147e:	f4 cf       	rjmp	.-24     	; 0x1468 <__lshrdi3+0x6>
    1480:	05 94       	asr	r0
    1482:	97 95       	ror	r25
    1484:	87 95       	ror	r24
    1486:	77 95       	ror	r23
    1488:	67 95       	ror	r22
    148a:	57 95       	ror	r21
    148c:	47 95       	ror	r20
    148e:	37 95       	ror	r19
    1490:	27 95       	ror	r18
    1492:	0a 95       	dec	r16
    1494:	aa f7       	brpl	.-22     	; 0x1480 <__lshrdi3+0x1e>
    1496:	0f 91       	pop	r16
    1498:	08 95       	ret

0000149a <_exit>:
    149a:	f8 94       	cli

0000149c <__stop_program>:
    149c:	ff cf       	rjmp	.-2      	; 0x149c <__stop_program>
