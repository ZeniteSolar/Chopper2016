
placaAdicionalChopper.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000034  00800100  00001ae2  00001b76  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ae2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000046  00800134  00800134  00001baa  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00001baa  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00001bbb  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000339e  00000000  00000000  00001c03  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006b4  00000000  00000000  00004fa1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000802  00000000  00000000  00005655  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000e04  00000000  00000000  00005e58  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00002575  00000000  00000000  00006c5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001b79  00000000  00000000  000091d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  0000ad4a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__ctors_end>
       4:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
       8:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
       c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      10:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      14:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      18:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      1c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      20:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      24:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      28:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      2c:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__vector_11>
      30:	0c 94 14 02 	jmp	0x428	; 0x428 <__vector_12>
      34:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      38:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      3c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      40:	0c 94 25 02 	jmp	0x44a	; 0x44a <__vector_16>
      44:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      48:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__vector_18>
      4c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      50:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      54:	0c 94 9a 01 	jmp	0x334	; 0x334 <__vector_21>
      58:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      5c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      60:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      64:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
      68:	30 0c       	add	r3, r0
      6a:	33 0c       	add	r3, r3
      6c:	3d 0c       	add	r3, r13
      6e:	40 0c       	add	r4, r0
      70:	43 0c       	add	r4, r3
      72:	46 0c       	add	r4, r6
      74:	49 0c       	add	r4, r9
      76:	50 0c       	add	r5, r0
      78:	57 0c       	add	r5, r7
      7a:	5a 0c       	add	r5, r10
      7c:	5d 0c       	add	r5, r13
      7e:	60 0c       	add	r6, r0
      80:	63 0c       	add	r6, r3
      82:	66 0c       	add	r6, r6
      84:	a0 0c       	add	r10, r0
      86:	a7 0c       	add	r10, r7
      88:	ae 0c       	add	r10, r14
      8a:	b5 0c       	add	r11, r5
      8c:	be 0c       	add	r11, r14
      8e:	c5 0c       	add	r12, r5
      90:	d2 0c       	add	r13, r2
      92:	e1 0c       	add	r14, r1
      94:	e8 0c       	add	r14, r8
      96:	ef 0c       	add	r14, r15
      98:	e9 02       	muls	r30, r25
      9a:	f9 02       	muls	r31, r25
      9c:	eb 02       	muls	r30, r27
      9e:	ed 02       	muls	r30, r29
      a0:	ef 02       	muls	r30, r31
      a2:	f1 02       	muls	r31, r17
      a4:	f3 02       	muls	r31, r19
      a6:	f5 02       	muls	r31, r21
      a8:	f7 02       	muls	r31, r23
      aa:	1c 07       	cpc	r17, r28
      ac:	0f 07       	cpc	r16, r31
      ae:	11 07       	cpc	r17, r17
      b0:	13 07       	cpc	r17, r19
      b2:	15 07       	cpc	r17, r21
      b4:	17 07       	cpc	r17, r23
      b6:	19 07       	cpc	r17, r25
      b8:	1b 07       	cpc	r17, r27
      ba:	17 09       	sbc	r17, r7
      bc:	19 09       	sbc	r17, r9
      be:	1b 09       	sbc	r17, r11
      c0:	1d 09       	sbc	r17, r13
      c2:	1f 09       	sbc	r17, r15
      c4:	21 09       	sbc	r18, r1
      c6:	23 09       	sbc	r18, r3

000000c8 <__ctors_end>:
      c8:	11 24       	eor	r1, r1
      ca:	1f be       	out	0x3f, r1	; 63
      cc:	cf ef       	ldi	r28, 0xFF	; 255
      ce:	d8 e0       	ldi	r29, 0x08	; 8
      d0:	de bf       	out	0x3e, r29	; 62
      d2:	cd bf       	out	0x3d, r28	; 61

000000d4 <__do_copy_data>:
      d4:	11 e0       	ldi	r17, 0x01	; 1
      d6:	a0 e0       	ldi	r26, 0x00	; 0
      d8:	b1 e0       	ldi	r27, 0x01	; 1
      da:	e2 ee       	ldi	r30, 0xE2	; 226
      dc:	fa e1       	ldi	r31, 0x1A	; 26
      de:	02 c0       	rjmp	.+4      	; 0xe4 <__do_copy_data+0x10>
      e0:	05 90       	lpm	r0, Z+
      e2:	0d 92       	st	X+, r0
      e4:	a4 33       	cpi	r26, 0x34	; 52
      e6:	b1 07       	cpc	r27, r17
      e8:	d9 f7       	brne	.-10     	; 0xe0 <__do_copy_data+0xc>

000000ea <__do_clear_bss>:
      ea:	21 e0       	ldi	r18, 0x01	; 1
      ec:	a4 e3       	ldi	r26, 0x34	; 52
      ee:	b1 e0       	ldi	r27, 0x01	; 1
      f0:	01 c0       	rjmp	.+2      	; 0xf4 <.do_clear_bss_start>

000000f2 <.do_clear_bss_loop>:
      f2:	1d 92       	st	X+, r1

000000f4 <.do_clear_bss_start>:
      f4:	aa 37       	cpi	r26, 0x7A	; 122
      f6:	b2 07       	cpc	r27, r18
      f8:	e1 f7       	brne	.-8      	; 0xf2 <.do_clear_bss_loop>
      fa:	0e 94 46 0b 	call	0x168c	; 0x168c <main>
      fe:	0c 94 6f 0d 	jmp	0x1ade	; 0x1ade <_exit>

00000102 <__bad_interrupt>:
     102:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000106 <seta_dc>:
uint8 maxTemp = 70;				//temperatura maxima, desliga o sistema
uint8 criticalTemp = 60;		//temperatura critica
uint8 minVotage = 30;

void seta_dc(uint8 d_cycle)		//função para definição do Duty Cicle do PWM
{
     106:	cf 93       	push	r28
     108:	c8 2f       	mov	r28, r24
	dcReq = d_cycle;
     10a:	80 93 34 01 	sts	0x0134, r24
	if(dcReq < minDC)				// Comparação com o valor mínimo de Duty Cicle
     10e:	80 91 05 01 	lds	r24, 0x0105
     112:	c8 17       	cp	r28, r24
     114:	18 f4       	brcc	.+6      	; 0x11c <seta_dc+0x16>
		status.dc = 0;
     116:	10 92 3b 01 	sts	0x013B, r1
     11a:	1a c0       	rjmp	.+52     	; 0x150 <seta_dc+0x4a>
	else
	{
		if(dcReq > maxDC)			//Comparação com o valor máximo de Duty Cicle
     11c:	80 91 04 01 	lds	r24, 0x0104
     120:	8c 17       	cp	r24, r28
     122:	20 f4       	brcc	.+8      	; 0x12c <seta_dc+0x26>
			status.dc = 100;
     124:	84 e6       	ldi	r24, 0x64	; 100
     126:	80 93 3b 01 	sts	0x013B, r24
     12a:	12 c0       	rjmp	.+36     	; 0x150 <seta_dc+0x4a>
		else
		{
			status.dc = dcReq;
     12c:	c0 93 3b 01 	sts	0x013B, r28
			timer1SetCompareBValue((status.dc * (timer1GetCompareAValue()))/100);		//seta o valor do comparador B para gerar o DC requerido
     130:	0e 94 49 08 	call	0x1092	; 0x1092 <timer1GetCompareAValue>
     134:	9c 01       	movw	r18, r24
     136:	c2 9f       	mul	r28, r18
     138:	c0 01       	movw	r24, r0
     13a:	c3 9f       	mul	r28, r19
     13c:	90 0d       	add	r25, r0
     13e:	11 24       	eor	r1, r1
     140:	64 e6       	ldi	r22, 0x64	; 100
     142:	70 e0       	ldi	r23, 0x00	; 0
     144:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <__udivmodhi4>
     148:	cb 01       	movw	r24, r22
		}
	}
}
     14a:	cf 91       	pop	r28
		if(dcReq > maxDC)			//Comparação com o valor máximo de Duty Cicle
			status.dc = 100;
		else
		{
			status.dc = dcReq;
			timer1SetCompareBValue((status.dc * (timer1GetCompareAValue()))/100);		//seta o valor do comparador B para gerar o DC requerido
     14c:	0c 94 4e 08 	jmp	0x109c	; 0x109c <timer1SetCompareBValue>
		}
	}
}
     150:	cf 91       	pop	r28
     152:	08 95       	ret

00000154 <seta_freq>:

void seta_freq(uint16 freqReq)		//função para definição da frequencia do PWM
{
     154:	cf 93       	push	r28
     156:	df 93       	push	r29
	if(freqReq < MIN_FREQ)
     158:	84 3f       	cpi	r24, 0xF4	; 244
     15a:	21 e0       	ldi	r18, 0x01	; 1
     15c:	92 07       	cpc	r25, r18
     15e:	18 f4       	brcc	.+6      	; 0x166 <seta_freq+0x12>
		status.freq = MIN_FREQ;
     160:	84 ef       	ldi	r24, 0xF4	; 244
     162:	91 e0       	ldi	r25, 0x01	; 1
     164:	06 c0       	rjmp	.+12     	; 0x172 <seta_freq+0x1e>
	else
		if(freqReq > MAX_FREQ)
     166:	89 3e       	cpi	r24, 0xE9	; 233
     168:	33 e0       	ldi	r19, 0x03	; 3
     16a:	93 07       	cpc	r25, r19
     16c:	10 f0       	brcs	.+4      	; 0x172 <seta_freq+0x1e>
			status.freq = MAX_FREQ;
     16e:	88 ee       	ldi	r24, 0xE8	; 232
     170:	93 e0       	ldi	r25, 0x03	; 3
		else
			status.freq = freqReq;
     172:	90 93 39 01 	sts	0x0139, r25
     176:	80 93 38 01 	sts	0x0138, r24
	timer1SetCompareAValue((F_CPU/1024)/status.freq);
     17a:	60 91 38 01 	lds	r22, 0x0138
     17e:	70 91 39 01 	lds	r23, 0x0139
     182:	89 e0       	ldi	r24, 0x09	; 9
     184:	9d e3       	ldi	r25, 0x3D	; 61
     186:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <__udivmodhi4>
     18a:	cb 01       	movw	r24, r22
     18c:	0e 94 40 08 	call	0x1080	; 0x1080 <timer1SetCompareAValue>
	timer1SetCompareBValue((status.dc * (timer1GetCompareAValue()))/100);//bota o dc
     190:	c0 91 3b 01 	lds	r28, 0x013B
     194:	d0 e0       	ldi	r29, 0x00	; 0
     196:	0e 94 49 08 	call	0x1092	; 0x1092 <timer1GetCompareAValue>
     19a:	9c 01       	movw	r18, r24
     19c:	2c 9f       	mul	r18, r28
     19e:	c0 01       	movw	r24, r0
     1a0:	2d 9f       	mul	r18, r29
     1a2:	90 0d       	add	r25, r0
     1a4:	3c 9f       	mul	r19, r28
     1a6:	90 0d       	add	r25, r0
     1a8:	11 24       	eor	r1, r1
     1aa:	64 e6       	ldi	r22, 0x64	; 100
     1ac:	70 e0       	ldi	r23, 0x00	; 0
     1ae:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <__udivmodhi4>
     1b2:	cb 01       	movw	r24, r22
}
     1b4:	df 91       	pop	r29
     1b6:	cf 91       	pop	r28
		if(freqReq > MAX_FREQ)
			status.freq = MAX_FREQ;
		else
			status.freq = freqReq;
	timer1SetCompareAValue((F_CPU/1024)/status.freq);
	timer1SetCompareBValue((status.dc * (timer1GetCompareAValue()))/100);//bota o dc
     1b8:	0c 94 4e 08 	jmp	0x109c	; 0x109c <timer1SetCompareBValue>

000001bc <esvaziaBuffer>:
}

//esvazia o buffer de entrada da usart
void esvaziaBuffer()
{
	while(!usartIsReceiverBufferEmpty())
     1bc:	0e 94 30 0b 	call	0x1660	; 0x1660 <usartIsReceiverBufferEmpty>
     1c0:	81 11       	cpse	r24, r1
     1c2:	03 c0       	rjmp	.+6      	; 0x1ca <esvaziaBuffer+0xe>
		usartGetDataFromReceiverBuffer();
     1c4:	0e 94 0e 0b 	call	0x161c	; 0x161c <usartGetDataFromReceiverBuffer>
     1c8:	f9 cf       	rjmp	.-14     	; 0x1bc <esvaziaBuffer>
}
     1ca:	08 95       	ret

000001cc <stringTransmit>:

//envia uma msg usando o protocolo GUI
void stringTransmit(char* texto)
{
     1cc:	1f 93       	push	r17
     1ce:	cf 93       	push	r28
     1d0:	df 93       	push	r29
     1d2:	ec 01       	movw	r28, r24
	uint8 i = 0;
	usartTransmit(INICIODOPACOTE);
     1d4:	80 e4       	ldi	r24, 0x40	; 64
     1d6:	0e 94 96 0a 	call	0x152c	; 0x152c <usartTransmit>
	for(i = 0; texto[i] != '\0'; i++)
     1da:	10 e0       	ldi	r17, 0x00	; 0
     1dc:	fe 01       	movw	r30, r28
     1de:	e1 0f       	add	r30, r17
     1e0:	f1 1d       	adc	r31, r1
     1e2:	80 81       	ld	r24, Z
     1e4:	88 23       	and	r24, r24
     1e6:	21 f0       	breq	.+8      	; 0x1f0 <stringTransmit+0x24>
		usartTransmit(texto[i]);
     1e8:	0e 94 96 0a 	call	0x152c	; 0x152c <usartTransmit>
//envia uma msg usando o protocolo GUI
void stringTransmit(char* texto)
{
	uint8 i = 0;
	usartTransmit(INICIODOPACOTE);
	for(i = 0; texto[i] != '\0'; i++)
     1ec:	1f 5f       	subi	r17, 0xFF	; 255
     1ee:	f6 cf       	rjmp	.-20     	; 0x1dc <stringTransmit+0x10>
		usartTransmit(texto[i]);
	usartTransmit(FINALDOPACOTE);
     1f0:	8a e2       	ldi	r24, 0x2A	; 42
}
     1f2:	df 91       	pop	r29
     1f4:	cf 91       	pop	r28
     1f6:	1f 91       	pop	r17
{
	uint8 i = 0;
	usartTransmit(INICIODOPACOTE);
	for(i = 0; texto[i] != '\0'; i++)
		usartTransmit(texto[i]);
	usartTransmit(FINALDOPACOTE);
     1f8:	0c 94 96 0a 	jmp	0x152c	; 0x152c <usartTransmit>

000001fc <uint16ToString4>:
}

//convert uint16 to string of 4 characters
void uint16ToString4(char* str,uint16 value)
{
     1fc:	0f 93       	push	r16
     1fe:	1f 93       	push	r17
     200:	cf 93       	push	r28
     202:	df 93       	push	r29
     204:	fc 01       	movw	r30, r24
     206:	9b 01       	movw	r18, r22
	str[4] = '\0';
     208:	14 82       	std	Z+4, r1	; 0x04
	str[3] = (char ) (value%10 + 48);
     20a:	ca e0       	ldi	r28, 0x0A	; 10
     20c:	d0 e0       	ldi	r29, 0x00	; 0
     20e:	cb 01       	movw	r24, r22
     210:	be 01       	movw	r22, r28
     212:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <__udivmodhi4>
     216:	80 5d       	subi	r24, 0xD0	; 208
     218:	83 83       	std	Z+3, r24	; 0x03
	str[2] = (char) ((value%100) / 10 + 48);
     21a:	04 e6       	ldi	r16, 0x64	; 100
     21c:	10 e0       	ldi	r17, 0x00	; 0
     21e:	c9 01       	movw	r24, r18
     220:	b8 01       	movw	r22, r16
     222:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <__udivmodhi4>
     226:	be 01       	movw	r22, r28
     228:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <__udivmodhi4>
     22c:	60 5d       	subi	r22, 0xD0	; 208
     22e:	62 83       	std	Z+2, r22	; 0x02
	str[1] = (char) ((value%1000) / 100 + 48);
     230:	c8 ee       	ldi	r28, 0xE8	; 232
     232:	d3 e0       	ldi	r29, 0x03	; 3
     234:	c9 01       	movw	r24, r18
     236:	be 01       	movw	r22, r28
     238:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <__udivmodhi4>
     23c:	b8 01       	movw	r22, r16
     23e:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <__udivmodhi4>
     242:	60 5d       	subi	r22, 0xD0	; 208
     244:	61 83       	std	Z+1, r22	; 0x01
	str[0] = (char) ((value%10000) / 1000 + 48);
     246:	c9 01       	movw	r24, r18
     248:	60 e1       	ldi	r22, 0x10	; 16
     24a:	77 e2       	ldi	r23, 0x27	; 39
     24c:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <__udivmodhi4>
     250:	be 01       	movw	r22, r28
     252:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <__udivmodhi4>
     256:	60 5d       	subi	r22, 0xD0	; 208
     258:	60 83       	st	Z, r22
}
     25a:	df 91       	pop	r29
     25c:	cf 91       	pop	r28
     25e:	1f 91       	pop	r17
     260:	0f 91       	pop	r16
     262:	08 95       	ret

00000264 <uint8ToString4>:

//convert uint8 to string of 4 characters
void uint8ToString4(char* str,uint16 value)
{
     264:	0f 93       	push	r16
     266:	1f 93       	push	r17
     268:	cf 93       	push	r28
     26a:	df 93       	push	r29
     26c:	fc 01       	movw	r30, r24
     26e:	9b 01       	movw	r18, r22
	str[4] = '\0';
     270:	14 82       	std	Z+4, r1	; 0x04
	str[3] = (char ) (value%10 + 48);
     272:	0a e0       	ldi	r16, 0x0A	; 10
     274:	10 e0       	ldi	r17, 0x00	; 0
     276:	cb 01       	movw	r24, r22
     278:	b8 01       	movw	r22, r16
     27a:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <__udivmodhi4>
     27e:	80 5d       	subi	r24, 0xD0	; 208
     280:	83 83       	std	Z+3, r24	; 0x03
	str[2] = (char) ((value%100) / 10 + 48);
     282:	c4 e6       	ldi	r28, 0x64	; 100
     284:	d0 e0       	ldi	r29, 0x00	; 0
     286:	c9 01       	movw	r24, r18
     288:	be 01       	movw	r22, r28
     28a:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <__udivmodhi4>
     28e:	b8 01       	movw	r22, r16
     290:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <__udivmodhi4>
     294:	60 5d       	subi	r22, 0xD0	; 208
     296:	62 83       	std	Z+2, r22	; 0x02
	str[1] = (char) ((value%1000) / 100 + 48);
     298:	c9 01       	movw	r24, r18
     29a:	68 ee       	ldi	r22, 0xE8	; 232
     29c:	73 e0       	ldi	r23, 0x03	; 3
     29e:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <__udivmodhi4>
     2a2:	be 01       	movw	r22, r28
     2a4:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <__udivmodhi4>
     2a8:	60 5d       	subi	r22, 0xD0	; 208
     2aa:	61 83       	std	Z+1, r22	; 0x01
	str[0] = '0';
     2ac:	80 e3       	ldi	r24, 0x30	; 48
     2ae:	80 83       	st	Z, r24
}
     2b0:	df 91       	pop	r29
     2b2:	cf 91       	pop	r28
     2b4:	1f 91       	pop	r17
     2b6:	0f 91       	pop	r16
     2b8:	08 95       	ret

000002ba <string4ToUint16>:

//convert string of 4 characters uint16
uint16 string4ToUint16(char* str)
{
     2ba:	fc 01       	movw	r30, r24
	uint16 value;
	value = (uint16) (str[0]-48)*1000 + (str[1]-48)*100 
	+ (str[2]-48)*10 + str[3]-48;
     2bc:	23 81       	ldd	r18, Z+3	; 0x03
     2be:	30 e0       	ldi	r19, 0x00	; 0

//convert string of 4 characters uint16
uint16 string4ToUint16(char* str)
{
	uint16 value;
	value = (uint16) (str[0]-48)*1000 + (str[1]-48)*100 
     2c0:	20 53       	subi	r18, 0x30	; 48
     2c2:	31 09       	sbc	r19, r1
     2c4:	80 81       	ld	r24, Z
     2c6:	90 e0       	ldi	r25, 0x00	; 0
     2c8:	c0 97       	sbiw	r24, 0x30	; 48
     2ca:	68 ee       	ldi	r22, 0xE8	; 232
     2cc:	73 e0       	ldi	r23, 0x03	; 3
     2ce:	86 9f       	mul	r24, r22
     2d0:	a0 01       	movw	r20, r0
     2d2:	87 9f       	mul	r24, r23
     2d4:	50 0d       	add	r21, r0
     2d6:	96 9f       	mul	r25, r22
     2d8:	50 0d       	add	r21, r0
     2da:	11 24       	eor	r1, r1
	+ (str[2]-48)*10 + str[3]-48;
     2dc:	24 0f       	add	r18, r20
     2de:	35 1f       	adc	r19, r21

//convert string of 4 characters uint16
uint16 string4ToUint16(char* str)
{
	uint16 value;
	value = (uint16) (str[0]-48)*1000 + (str[1]-48)*100 
     2e0:	81 81       	ldd	r24, Z+1	; 0x01
     2e2:	90 e0       	ldi	r25, 0x00	; 0
     2e4:	c0 97       	sbiw	r24, 0x30	; 48
     2e6:	64 e6       	ldi	r22, 0x64	; 100
     2e8:	68 9f       	mul	r22, r24
     2ea:	a0 01       	movw	r20, r0
     2ec:	69 9f       	mul	r22, r25
     2ee:	50 0d       	add	r21, r0
     2f0:	11 24       	eor	r1, r1
	+ (str[2]-48)*10 + str[3]-48;
     2f2:	24 0f       	add	r18, r20
     2f4:	35 1f       	adc	r19, r21
     2f6:	42 81       	ldd	r20, Z+2	; 0x02
     2f8:	50 e0       	ldi	r21, 0x00	; 0
     2fa:	40 53       	subi	r20, 0x30	; 48
     2fc:	51 09       	sbc	r21, r1
     2fe:	6a e0       	ldi	r22, 0x0A	; 10
     300:	64 9f       	mul	r22, r20
     302:	c0 01       	movw	r24, r0
     304:	65 9f       	mul	r22, r21
     306:	90 0d       	add	r25, r0
     308:	11 24       	eor	r1, r1
	return value;
}
     30a:	82 0f       	add	r24, r18
     30c:	93 1f       	adc	r25, r19
     30e:	08 95       	ret

00000310 <string4Touint8>:

//convert string of 4 characters uint8
uint8 string4Touint8(char* str)
{
     310:	fc 01       	movw	r30, r24
	uint8 value;
	value = (uint8) ((str[1]-48)*100 
     312:	83 81       	ldd	r24, Z+3	; 0x03
     314:	80 53       	subi	r24, 0x30	; 48
     316:	91 81       	ldd	r25, Z+1	; 0x01
     318:	90 53       	subi	r25, 0x30	; 48
     31a:	24 e6       	ldi	r18, 0x64	; 100
     31c:	92 9f       	mul	r25, r18
     31e:	80 0d       	add	r24, r0
     320:	11 24       	eor	r1, r1
	+ (str[2]-48)*10 + str[3]-48);
     322:	92 81       	ldd	r25, Z+2	; 0x02
     324:	99 0f       	add	r25, r25

//convert string of 4 characters uint8
uint8 string4Touint8(char* str)
{
	uint8 value;
	value = (uint8) ((str[1]-48)*100 
     326:	90 56       	subi	r25, 0x60	; 96
     328:	29 2f       	mov	r18, r25
     32a:	22 0f       	add	r18, r18
     32c:	22 0f       	add	r18, r18
     32e:	29 0f       	add	r18, r25
	+ (str[2]-48)*10 + str[3]-48);
	return value;
}
     330:	82 0f       	add	r24, r18
     332:	08 95       	ret

00000334 <__vector_21>:
		}
    }
}

ISR(ADC_vect)
{
     334:	1f 92       	push	r1
     336:	0f 92       	push	r0
     338:	0f b6       	in	r0, 0x3f	; 63
     33a:	0f 92       	push	r0
     33c:	11 24       	eor	r1, r1
     33e:	2f 93       	push	r18
     340:	3f 93       	push	r19
     342:	4f 93       	push	r20
     344:	5f 93       	push	r21
     346:	6f 93       	push	r22
     348:	7f 93       	push	r23
     34a:	8f 93       	push	r24
     34c:	9f 93       	push	r25
     34e:	af 93       	push	r26
     350:	bf 93       	push	r27
     352:	ef 93       	push	r30
     354:	ff 93       	push	r31
	switch (channel)
     356:	80 91 07 01 	lds	r24, 0x0107
     35a:	81 30       	cpi	r24, 0x01	; 1
     35c:	d1 f0       	breq	.+52     	; 0x392 <__vector_21+0x5e>
     35e:	70 f0       	brcs	.+28     	; 0x37c <__vector_21+0x48>
     360:	82 30       	cpi	r24, 0x02	; 2
     362:	41 f1       	breq	.+80     	; 0x3b4 <__vector_21+0x80>
     364:	83 30       	cpi	r24, 0x03	; 3
     366:	99 f5       	brne	.+102    	; 0x3ce <__vector_21+0x9a>
			break;
		case VOLTAGE_CHANNEL:
			status.voltage = ADC / 30;
			break;
		case TEMP_CHANNEL:
			status.temperature = ADC / 2;
     368:	80 91 78 00 	lds	r24, 0x0078
     36c:	90 91 79 00 	lds	r25, 0x0079
     370:	96 95       	lsr	r25
     372:	87 95       	ror	r24
     374:	80 93 3c 01 	sts	0x013C, r24
			channel = POT_CHANNEL;
     378:	81 e0       	ldi	r24, 0x01	; 1
     37a:	27 c0       	rjmp	.+78     	; 0x3ca <__vector_21+0x96>
ISR(ADC_vect)
{
	switch (channel)
	{
		case CURRENT_CHANNEL:
			status.current = ADC / 5;
     37c:	80 91 78 00 	lds	r24, 0x0078
     380:	90 91 79 00 	lds	r25, 0x0079
     384:	65 e0       	ldi	r22, 0x05	; 5
     386:	70 e0       	ldi	r23, 0x00	; 0
     388:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <__udivmodhi4>
     38c:	60 93 3a 01 	sts	0x013A, r22
			break;
     390:	1e c0       	rjmp	.+60     	; 0x3ce <__vector_21+0x9a>
		case POT_CHANNEL:
			if(flags.mode == POT_MODE)
     392:	80 91 37 01 	lds	r24, 0x0137
     396:	8c 70       	andi	r24, 0x0C	; 12
     398:	88 30       	cpi	r24, 0x08	; 8
     39a:	51 f4       	brne	.+20     	; 0x3b0 <__vector_21+0x7c>
				dcReq = ADC / 10;
     39c:	80 91 78 00 	lds	r24, 0x0078
     3a0:	90 91 79 00 	lds	r25, 0x0079
     3a4:	6a e0       	ldi	r22, 0x0A	; 10
     3a6:	70 e0       	ldi	r23, 0x00	; 0
     3a8:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <__udivmodhi4>
     3ac:	60 93 34 01 	sts	0x0134, r22
			channel = TEMP_CHANNEL;
     3b0:	83 e0       	ldi	r24, 0x03	; 3
     3b2:	0b c0       	rjmp	.+22     	; 0x3ca <__vector_21+0x96>
			break;
		case VOLTAGE_CHANNEL:
			status.voltage = ADC / 30;
     3b4:	80 91 78 00 	lds	r24, 0x0078
     3b8:	90 91 79 00 	lds	r25, 0x0079
     3bc:	6e e1       	ldi	r22, 0x1E	; 30
     3be:	70 e0       	ldi	r23, 0x00	; 0
     3c0:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <__udivmodhi4>
     3c4:	60 93 3d 01 	sts	0x013D, r22
			break;
     3c8:	02 c0       	rjmp	.+4      	; 0x3ce <__vector_21+0x9a>
		case TEMP_CHANNEL:
			status.temperature = ADC / 2;
			channel = POT_CHANNEL;
     3ca:	80 93 07 01 	sts	0x0107, r24
	/*if(channel == LAST_CHANNEL)
		channel = FIRST_CHANNEL;
	else
		channel ++;
	*/
	adcSelectChannel(channel);
     3ce:	80 91 07 01 	lds	r24, 0x0107
     3d2:	0e 94 2f 09 	call	0x125e	; 0x125e <adcSelectChannel>
	adcStartConversion();
     3d6:	0e 94 76 09 	call	0x12ec	; 0x12ec <adcStartConversion>
}
     3da:	ff 91       	pop	r31
     3dc:	ef 91       	pop	r30
     3de:	bf 91       	pop	r27
     3e0:	af 91       	pop	r26
     3e2:	9f 91       	pop	r25
     3e4:	8f 91       	pop	r24
     3e6:	7f 91       	pop	r23
     3e8:	6f 91       	pop	r22
     3ea:	5f 91       	pop	r21
     3ec:	4f 91       	pop	r20
     3ee:	3f 91       	pop	r19
     3f0:	2f 91       	pop	r18
     3f2:	0f 90       	pop	r0
     3f4:	0f be       	out	0x3f, r0	; 63
     3f6:	0f 90       	pop	r0
     3f8:	1f 90       	pop	r1
     3fa:	18 95       	reti

000003fc <__vector_11>:

ISR(TIMER1_COMPA_vect)
{
     3fc:	1f 92       	push	r1
     3fe:	0f 92       	push	r0
     400:	0f b6       	in	r0, 0x3f	; 63
     402:	0f 92       	push	r0
     404:	11 24       	eor	r1, r1
     406:	8f 93       	push	r24
	if(status.dc > 0 && flags.on && flags.dms)
     408:	80 91 3b 01 	lds	r24, 0x013B
     40c:	88 23       	and	r24, r24
     40e:	31 f0       	breq	.+12     	; 0x41c <__vector_11+0x20>
     410:	80 91 37 01 	lds	r24, 0x0137
     414:	80 73       	andi	r24, 0x30	; 48
     416:	80 33       	cpi	r24, 0x30	; 48
     418:	09 f4       	brne	.+2      	; 0x41c <__vector_11+0x20>
		setBit(PWM_PORT,PWM_BIT);		//Inicia o período em nível alto do PWM
     41a:	29 9a       	sbi	0x05, 1	; 5
}
     41c:	8f 91       	pop	r24
     41e:	0f 90       	pop	r0
     420:	0f be       	out	0x3f, r0	; 63
     422:	0f 90       	pop	r0
     424:	1f 90       	pop	r1
     426:	18 95       	reti

00000428 <__vector_12>:

ISR(TIMER1_COMPB_vect)
{
     428:	1f 92       	push	r1
     42a:	0f 92       	push	r0
     42c:	0f b6       	in	r0, 0x3f	; 63
     42e:	0f 92       	push	r0
     430:	11 24       	eor	r1, r1
     432:	8f 93       	push	r24
	if(status.dc < 100)
     434:	80 91 3b 01 	lds	r24, 0x013B
     438:	84 36       	cpi	r24, 0x64	; 100
     43a:	08 f4       	brcc	.+2      	; 0x43e <__vector_12+0x16>
		clrBit(PWM_PORT,PWM_BIT);		//Inicia o período em nível baixo do PWM
     43c:	29 98       	cbi	0x05, 1	; 5
}
     43e:	8f 91       	pop	r24
     440:	0f 90       	pop	r0
     442:	0f be       	out	0x3f, r0	; 63
     444:	0f 90       	pop	r0
     446:	1f 90       	pop	r1
     448:	18 95       	reti

0000044a <__vector_16>:

//60Hz
ISR(TIMER0_OVF_vect)
{
     44a:	1f 92       	push	r1
     44c:	0f 92       	push	r0
     44e:	0f b6       	in	r0, 0x3f	; 63
     450:	0f 92       	push	r0
     452:	11 24       	eor	r1, r1
     454:	2f 93       	push	r18
     456:	3f 93       	push	r19
     458:	4f 93       	push	r20
     45a:	5f 93       	push	r21
     45c:	6f 93       	push	r22
     45e:	7f 93       	push	r23
     460:	8f 93       	push	r24
     462:	9f 93       	push	r25
     464:	af 93       	push	r26
     466:	bf 93       	push	r27
     468:	ef 93       	push	r30
     46a:	ff 93       	push	r31
	//setBit(PIND,PD0);
	flags.on = isBitClr(ON_PIN,ON_BIT);
     46c:	99 b1       	in	r25, 0x09	; 9
     46e:	95 fb       	bst	r25, 5
     470:	99 27       	eor	r25, r25
     472:	90 f9       	bld	r25, 0
     474:	21 e0       	ldi	r18, 0x01	; 1
     476:	92 27       	eor	r25, r18
     478:	80 91 37 01 	lds	r24, 0x0137
     47c:	90 fb       	bst	r25, 0
     47e:	84 f9       	bld	r24, 4
     480:	80 93 37 01 	sts	0x0137, r24
	flags.dms = isBitClr(DMS_PIN,DMS_BIT);
     484:	99 b1       	in	r25, 0x09	; 9
     486:	92 95       	swap	r25
     488:	91 70       	andi	r25, 0x01	; 1
     48a:	92 27       	eor	r25, r18
     48c:	90 fb       	bst	r25, 0
     48e:	85 f9       	bld	r24, 5
     490:	80 93 37 01 	sts	0x0137, r24
	if(flags.on && flags.dms)
     494:	80 73       	andi	r24, 0x30	; 48
     496:	90 91 3b 01 	lds	r25, 0x013B
     49a:	80 33       	cpi	r24, 0x30	; 48
     49c:	79 f5       	brne	.+94     	; 0x4fc <__vector_16+0xb2>
	{
    	if(status.dc != dcReq)
     49e:	80 91 34 01 	lds	r24, 0x0134
     4a2:	98 17       	cp	r25, r24
     4a4:	81 f1       	breq	.+96     	; 0x506 <__vector_16+0xbc>
    	{
    		if(dcReq > status.dc && dcReq > (minDC + 5))
     4a6:	98 17       	cp	r25, r24
     4a8:	30 f5       	brcc	.+76     	; 0x4f6 <__vector_16+0xac>
     4aa:	60 91 05 01 	lds	r22, 0x0105
     4ae:	48 2f       	mov	r20, r24
     4b0:	50 e0       	ldi	r21, 0x00	; 0
     4b2:	26 2f       	mov	r18, r22
     4b4:	30 e0       	ldi	r19, 0x00	; 0
     4b6:	2b 5f       	subi	r18, 0xFB	; 251
     4b8:	3f 4f       	sbci	r19, 0xFF	; 255
     4ba:	24 17       	cp	r18, r20
     4bc:	35 07       	cpc	r19, r21
     4be:	dc f4       	brge	.+54     	; 0x4f6 <__vector_16+0xac>
    		{
    			if(cont == maxCont)
     4c0:	20 91 35 01 	lds	r18, 0x0135
     4c4:	30 91 36 01 	lds	r19, 0x0136
     4c8:	23 30       	cpi	r18, 0x03	; 3
     4ca:	31 05       	cpc	r19, r1
     4cc:	69 f4       	brne	.+26     	; 0x4e8 <__vector_16+0x9e>
    			{
    				if(status.dc == 0)
     4ce:	91 11       	cpse	r25, r1
     4d0:	02 c0       	rjmp	.+4      	; 0x4d6 <__vector_16+0x8c>
    					seta_dc(minDC);
     4d2:	86 2f       	mov	r24, r22
     4d4:	02 c0       	rjmp	.+4      	; 0x4da <__vector_16+0x90>
    				else
    					seta_dc(status.dc+1);
     4d6:	81 e0       	ldi	r24, 0x01	; 1
     4d8:	89 0f       	add	r24, r25
     4da:	0e 94 83 00 	call	0x106	; 0x106 <seta_dc>
    				cont = 0;
     4de:	10 92 36 01 	sts	0x0136, r1
     4e2:	10 92 35 01 	sts	0x0135, r1
     4e6:	0f c0       	rjmp	.+30     	; 0x506 <__vector_16+0xbc>
    			}
    			else
    				cont++;
     4e8:	2f 5f       	subi	r18, 0xFF	; 255
     4ea:	3f 4f       	sbci	r19, 0xFF	; 255
     4ec:	30 93 36 01 	sts	0x0136, r19
     4f0:	20 93 35 01 	sts	0x0135, r18
     4f4:	08 c0       	rjmp	.+16     	; 0x506 <__vector_16+0xbc>
    		}
    		else
    			if (dcReq < status.dc)
     4f6:	89 17       	cp	r24, r25
     4f8:	30 f4       	brcc	.+12     	; 0x506 <__vector_16+0xbc>
     4fa:	03 c0       	rjmp	.+6      	; 0x502 <__vector_16+0xb8>
    				seta_dc(dcReq);			//definição do Duty Cicle do PWM
    	}
	}
	else
	{
		if(status.dc != 0)					//se o sistema ainda nao esta desligado
     4fc:	99 23       	and	r25, r25
     4fe:	19 f0       	breq	.+6      	; 0x506 <__vector_16+0xbc>
			seta_dc(0);				//desliga o sistema
     500:	80 e0       	ldi	r24, 0x00	; 0
     502:	0e 94 83 00 	call	0x106	; 0x106 <seta_dc>
	}
	if(status.temperature > criticalTemp && !flags.warning)
     506:	90 91 3c 01 	lds	r25, 0x013C
     50a:	80 91 01 01 	lds	r24, 0x0101
     50e:	89 17       	cp	r24, r25
     510:	50 f4       	brcc	.+20     	; 0x526 <__vector_16+0xdc>
     512:	20 91 37 01 	lds	r18, 0x0137
     516:	20 fd       	sbrc	r18, 0
     518:	06 c0       	rjmp	.+12     	; 0x526 <__vector_16+0xdc>
	{
		flags.warning = 1;
     51a:	82 2f       	mov	r24, r18
     51c:	81 60       	ori	r24, 0x01	; 1
     51e:	80 93 37 01 	sts	0x0137, r24
		setBit(BUZZER_PORT,BUZZER_BIT);
     522:	44 9a       	sbi	0x08, 4	; 8
     524:	0a c0       	rjmp	.+20     	; 0x53a <__vector_16+0xf0>
	}
	else
		if(status.temperature < criticalTemp && flags.warning)
     526:	98 17       	cp	r25, r24
     528:	40 f4       	brcc	.+16     	; 0x53a <__vector_16+0xf0>
     52a:	80 91 37 01 	lds	r24, 0x0137
     52e:	80 ff       	sbrs	r24, 0
     530:	04 c0       	rjmp	.+8      	; 0x53a <__vector_16+0xf0>
		{
			flags.warning = 0;
     532:	8e 7f       	andi	r24, 0xFE	; 254
     534:	80 93 37 01 	sts	0x0137, r24
			clrBit(BUZZER_PORT,BUZZER_BIT);
     538:	44 98       	cbi	0x08, 4	; 8
		}
}
     53a:	ff 91       	pop	r31
     53c:	ef 91       	pop	r30
     53e:	bf 91       	pop	r27
     540:	af 91       	pop	r26
     542:	9f 91       	pop	r25
     544:	8f 91       	pop	r24
     546:	7f 91       	pop	r23
     548:	6f 91       	pop	r22
     54a:	5f 91       	pop	r21
     54c:	4f 91       	pop	r20
     54e:	3f 91       	pop	r19
     550:	2f 91       	pop	r18
     552:	0f 90       	pop	r0
     554:	0f be       	out	0x3f, r0	; 63
     556:	0f 90       	pop	r0
     558:	1f 90       	pop	r1
     55a:	18 95       	reti

0000055c <__vector_18>:

ISR(USART_RX_vect)
{
     55c:	1f 92       	push	r1
     55e:	0f 92       	push	r0
     560:	0f b6       	in	r0, 0x3f	; 63
     562:	0f 92       	push	r0
     564:	11 24       	eor	r1, r1
     566:	2f 93       	push	r18
     568:	3f 93       	push	r19
     56a:	4f 93       	push	r20
     56c:	5f 93       	push	r21
     56e:	6f 93       	push	r22
     570:	7f 93       	push	r23
     572:	8f 93       	push	r24
     574:	9f 93       	push	r25
     576:	af 93       	push	r26
     578:	bf 93       	push	r27
     57a:	ef 93       	push	r30
     57c:	ff 93       	push	r31
	usartAddDataToReceiverBuffer(UDR0);
     57e:	80 91 c6 00 	lds	r24, 0x00C6
     582:	0e 94 de 0a 	call	0x15bc	; 0x15bc <usartAddDataToReceiverBuffer>
     586:	ff 91       	pop	r31
     588:	ef 91       	pop	r30
     58a:	bf 91       	pop	r27
     58c:	af 91       	pop	r26
     58e:	9f 91       	pop	r25
     590:	8f 91       	pop	r24
     592:	7f 91       	pop	r23
     594:	6f 91       	pop	r22
     596:	5f 91       	pop	r21
     598:	4f 91       	pop	r20
     59a:	3f 91       	pop	r19
     59c:	2f 91       	pop	r18
     59e:	0f 90       	pop	r0
     5a0:	0f be       	out	0x3f, r0	; 63
     5a2:	0f 90       	pop	r0
     5a4:	1f 90       	pop	r1
     5a6:	18 95       	reti

000005a8 <usartReceiveStd>:
 * Checks if a reception has been completed
 * -------------------------------------------------------------------------- */

bool_t usartIsReceptionComplete(void)
{
	return isBitSet(UCSR0A, RXC0);
     5a8:	80 91 c0 00 	lds	r24, 0x00C0
 * standard input heandler
 * -------------------------------------------------------------------------- */

int16 usartReceiveStd(FILE * stream)
{
	while(!usartIsReceptionComplete())
     5ac:	87 ff       	sbrs	r24, 7
     5ae:	fc cf       	rjmp	.-8      	; 0x5a8 <usartReceiveStd>
		;	// Waits until last reception ends
	return (int16)UDR0;
     5b0:	80 91 c6 00 	lds	r24, 0x00C6
}
     5b4:	90 e0       	ldi	r25, 0x00	; 0
     5b6:	08 95       	ret

000005b8 <globalInterruptEnable>:
 * Enable global interrupts
 * -------------------------------------------------------------------------- */

void globalInterruptEnable(void)
{
	sei();
     5b8:	78 94       	sei
     5ba:	08 95       	ret

000005bc <globalInterruptDisable>:
 * Disable global interrupts
 * -------------------------------------------------------------------------- */

void globalInterruptDisable(void)
{
	cli();
     5bc:	f8 94       	cli
     5be:	08 95       	ret

000005c0 <systemClockSetPrescaler>:

resultValue_t systemClockSetPrescaler(systemPrescalerValue_t prescaler)
{
	uint8 aux8 = 0;

	switch(prescaler){
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	89 30       	cpi	r24, 0x09	; 9
     5c4:	91 05       	cpc	r25, r1
     5c6:	00 f5       	brcc	.+64     	; 0x608 <systemClockSetPrescaler+0x48>
     5c8:	fc 01       	movw	r30, r24
     5ca:	e4 5b       	subi	r30, 0xB4	; 180
     5cc:	ff 4f       	sbci	r31, 0xFF	; 255
     5ce:	0c 94 39 0d 	jmp	0x1a72	; 0x1a72 <__tablejump2__>
		case SYSTEM_PRESCALER_OFF:		aux8 = 0;	break;
     5d2:	80 e0       	ldi	r24, 0x00	; 0
     5d4:	0f c0       	rjmp	.+30     	; 0x5f4 <systemClockSetPrescaler+0x34>
		case SYSTEM_PRESCALER_2:		aux8 = 1;	break;
		case SYSTEM_PRESCALER_4:		aux8 = 2;	break;
     5d6:	82 e0       	ldi	r24, 0x02	; 2
     5d8:	0d c0       	rjmp	.+26     	; 0x5f4 <systemClockSetPrescaler+0x34>
		case SYSTEM_PRESCALER_8:		aux8 = 3;	break;
     5da:	83 e0       	ldi	r24, 0x03	; 3
     5dc:	0b c0       	rjmp	.+22     	; 0x5f4 <systemClockSetPrescaler+0x34>
		case SYSTEM_PRESCALER_16:		aux8 = 4;	break;
     5de:	84 e0       	ldi	r24, 0x04	; 4
     5e0:	09 c0       	rjmp	.+18     	; 0x5f4 <systemClockSetPrescaler+0x34>
		case SYSTEM_PRESCALER_32:		aux8 = 5;	break;
     5e2:	85 e0       	ldi	r24, 0x05	; 5
     5e4:	07 c0       	rjmp	.+14     	; 0x5f4 <systemClockSetPrescaler+0x34>
		case SYSTEM_PRESCALER_64:		aux8 = 6;	break;
     5e6:	86 e0       	ldi	r24, 0x06	; 6
     5e8:	05 c0       	rjmp	.+10     	; 0x5f4 <systemClockSetPrescaler+0x34>
		case SYSTEM_PRESCALER_128:		aux8 = 7;	break;
     5ea:	87 e0       	ldi	r24, 0x07	; 7
     5ec:	03 c0       	rjmp	.+6      	; 0x5f4 <systemClockSetPrescaler+0x34>
		case SYSTEM_PRESCALER_256:		aux8 = 8;	break;
     5ee:	88 e0       	ldi	r24, 0x08	; 8
     5f0:	01 c0       	rjmp	.+2      	; 0x5f4 <systemClockSetPrescaler+0x34>
{
	uint8 aux8 = 0;

	switch(prescaler){
		case SYSTEM_PRESCALER_OFF:		aux8 = 0;	break;
		case SYSTEM_PRESCALER_2:		aux8 = 1;	break;
     5f2:	81 e0       	ldi	r24, 0x01	; 1
		case SYSTEM_PRESCALER_64:		aux8 = 6;	break;
		case SYSTEM_PRESCALER_128:		aux8 = 7;	break;
		case SYSTEM_PRESCALER_256:		aux8 = 8;	break;
		default:						return RESULT_UNSUPPORTED_VALUE;	break;
	}
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
     5f4:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     5f6:	f8 94       	cli
		CLKPR = 0b10000000;
     5f8:	20 e8       	ldi	r18, 0x80	; 128
     5fa:	20 93 61 00 	sts	0x0061, r18
		CLKPR = aux8;
     5fe:	80 93 61 00 	sts	0x0061, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     602:	9f bf       	out	0x3f, r25	; 63
	}

	return RESULT_OK;
     604:	80 e0       	ldi	r24, 0x00	; 0
     606:	08 95       	ret
		case SYSTEM_PRESCALER_16:		aux8 = 4;	break;
		case SYSTEM_PRESCALER_32:		aux8 = 5;	break;
		case SYSTEM_PRESCALER_64:		aux8 = 6;	break;
		case SYSTEM_PRESCALER_128:		aux8 = 7;	break;
		case SYSTEM_PRESCALER_256:		aux8 = 8;	break;
		default:						return RESULT_UNSUPPORTED_VALUE;	break;
     608:	87 e0       	ldi	r24, 0x07	; 7
		CLKPR = 0b10000000;
		CLKPR = aux8;
	}

	return RESULT_OK;
}
     60a:	08 95       	ret

0000060c <eepromSetOperationMode>:

void eepromSetOperationMode(eepromMode_t mode)
{
	uint8 aux8 = 0;

	aux8 = EECR & ~(0x03 << EEPM0);
     60c:	2f b3       	in	r18, 0x1f	; 31
	aux8 |= (mode << EEPM0);
     60e:	30 e1       	ldi	r19, 0x10	; 16
     610:	83 9f       	mul	r24, r19
     612:	c0 01       	movw	r24, r0
     614:	11 24       	eor	r1, r1

void eepromSetOperationMode(eepromMode_t mode)
{
	uint8 aux8 = 0;

	aux8 = EECR & ~(0x03 << EEPM0);
     616:	2f 7c       	andi	r18, 0xCF	; 207
	aux8 |= (mode << EEPM0);
     618:	28 2b       	or	r18, r24
	EECR = aux8;
     61a:	2f bb       	out	0x1f, r18	; 31
     61c:	08 95       	ret

0000061e <eepromReadyActivateInterrupt>:
 * Activates the EEPROM ready interrupt
 * -------------------------------------------------------------------------- */

void eepromReadyActivateInterrupt(void)
{
	setBit(EECR, EERIE);
     61e:	fb 9a       	sbi	0x1f, 3	; 31
     620:	08 95       	ret

00000622 <eepromReadyDeactivateInterrupt>:
 * Deactivates the EEPROM ready interrupt
 * -------------------------------------------------------------------------- */

void eepromReadyDeactivateInterrupt(void)
{
	clrBit(EECR, EERIE);
     622:	fb 98       	cbi	0x1f, 3	; 31
     624:	08 95       	ret

00000626 <eepromWrite>:
 * Writes a byte in the specified address in the EEPROM
 * -------------------------------------------------------------------------- */

void eepromWrite(uint16 address, uint8 data)
{
	waitUntilBitIsClear(EECR, EEPE);
     626:	f9 99       	sbic	0x1f, 1	; 31
     628:	fe cf       	rjmp	.-4      	; 0x626 <eepromWrite>
	waitUntilBitIsClear(SPMEN, SPMCSR);
     62a:	27 b7       	in	r18, 0x37	; 55
	EEAR = (address & EEPROM_ADDRESS_MASK);
     62c:	93 70       	andi	r25, 0x03	; 3
     62e:	92 bd       	out	0x22, r25	; 34
     630:	81 bd       	out	0x21, r24	; 33
	EEDR = data;
     632:	60 bd       	out	0x20, r22	; 32
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
     634:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     636:	f8 94       	cli
		setBit(EECR, EEMPE);
     638:	fa 9a       	sbi	0x1f, 2	; 31
		setBit(EECR, EEPE);
     63a:	f9 9a       	sbi	0x1f, 1	; 31
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     63c:	8f bf       	out	0x3f, r24	; 63
    __asm__ volatile ("" ::: "memory");
     63e:	08 95       	ret

00000640 <eepromRead>:
 * Reads a byte from the specified address in the EEPROM
 * -------------------------------------------------------------------------- */

uint8 eepromRead(uint16 address)
{
	waitUntilBitIsClear(EECR, EEPE);
     640:	f9 99       	sbic	0x1f, 1	; 31
     642:	fe cf       	rjmp	.-4      	; 0x640 <eepromRead>
	EEAR = (address & EEPROM_ADDRESS_MASK);
     644:	93 70       	andi	r25, 0x03	; 3
     646:	92 bd       	out	0x22, r25	; 34
     648:	81 bd       	out	0x21, r24	; 33
	setBit(EECR, EERE);
     64a:	f8 9a       	sbi	0x1f, 0	; 31
	return EEDR;
     64c:	80 b5       	in	r24, 0x20	; 32
}
     64e:	08 95       	ret

00000650 <globalPullUpEnable>:
 * Enables the global pull-up
 * -------------------------------------------------------------------------- */

void globalPullUpEnable(void)
{
	clrBit(MCUCR, PUD);
     650:	85 b7       	in	r24, 0x35	; 53
     652:	8f 7e       	andi	r24, 0xEF	; 239
     654:	85 bf       	out	0x35, r24	; 53
     656:	08 95       	ret

00000658 <pullUpDisable>:
 * Disables the global pull-up
 * -------------------------------------------------------------------------- */

void pullUpDisable(void)
{
	setBit(MCUCR, PUD);
     658:	85 b7       	in	r24, 0x35	; 53
     65a:	80 61       	ori	r24, 0x10	; 16
     65c:	85 bf       	out	0x35, r24	; 53
     65e:	08 95       	ret

00000660 <int0Config>:

resultValue_t int0Config(portMode_t port, senseMode_t sense)
{
	uint8 aux8 = 0;

	switch(port){
     660:	82 30       	cpi	r24, 0x02	; 2
     662:	79 f0       	breq	.+30     	; 0x682 <int0Config+0x22>
     664:	30 f4       	brcc	.+12     	; 0x672 <int0Config+0x12>
     666:	88 23       	and	r24, r24
     668:	49 f0       	breq	.+18     	; 0x67c <int0Config+0x1c>
     66a:	81 30       	cpi	r24, 0x01	; 1
     66c:	11 f5       	brne	.+68     	; 0x6b2 <int0Config+0x52>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD2); setBit(DDRD, PD2);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD2); setBit(DDRD, PD2);	break;
     66e:	5a 9a       	sbi	0x0b, 2	; 11
     670:	06 c0       	rjmp	.+12     	; 0x67e <int0Config+0x1e>

resultValue_t int0Config(portMode_t port, senseMode_t sense)
{
	uint8 aux8 = 0;

	switch(port){
     672:	83 30       	cpi	r24, 0x03	; 3
     674:	41 f0       	breq	.+16     	; 0x686 <int0Config+0x26>
     676:	8f 3f       	cpi	r24, 0xFF	; 255
     678:	41 f0       	breq	.+16     	; 0x68a <int0Config+0x2a>
     67a:	1b c0       	rjmp	.+54     	; 0x6b2 <int0Config+0x52>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD2); setBit(DDRD, PD2);	break;
     67c:	5a 98       	cbi	0x0b, 2	; 11
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD2); setBit(DDRD, PD2);	break;
     67e:	52 9a       	sbi	0x0a, 2	; 10
     680:	04 c0       	rjmp	.+8      	; 0x68a <int0Config+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD2); clrBit(DDRD, PD2);	break;
     682:	5a 98       	cbi	0x0b, 2	; 11
     684:	01 c0       	rjmp	.+2      	; 0x688 <int0Config+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD2); clrBit(DDRD, PD2);	break;
     686:	5a 9a       	sbi	0x0b, 2	; 11
     688:	52 98       	cbi	0x0a, 2	; 10
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}

	if(sense != SENSE_NO_CHANGE){
     68a:	6f 3f       	cpi	r22, 0xFF	; 255
     68c:	a1 f0       	breq	.+40     	; 0x6b6 <int0Config+0x56>
		aux8 = EICRA & ~(0x03 << ISC00);
     68e:	80 91 69 00 	lds	r24, 0x0069
     692:	8c 7f       	andi	r24, 0xFC	; 252
		switch(sense){
     694:	61 30       	cpi	r22, 0x01	; 1
     696:	39 f0       	breq	.+14     	; 0x6a6 <int0Config+0x46>
     698:	48 f0       	brcs	.+18     	; 0x6ac <int0Config+0x4c>
     69a:	62 30       	cpi	r22, 0x02	; 2
     69c:	31 f0       	breq	.+12     	; 0x6aa <int0Config+0x4a>
     69e:	63 30       	cpi	r22, 0x03	; 3
     6a0:	61 f4       	brne	.+24     	; 0x6ba <int0Config+0x5a>
			case SENSE_LOW_LEVEL:		break;
			case SENSE_ANY_EDGE:		aux8 |= (0x01 << ISC00);			break;
			case SENSE_FALLING_EDGE:	aux8 |= (0x02 << ISC00);			break;
			case SENSE_RISING_EDGE:		aux8 |= (0x03 << ISC00);			break;
     6a2:	83 60       	ori	r24, 0x03	; 3
     6a4:	03 c0       	rjmp	.+6      	; 0x6ac <int0Config+0x4c>

	if(sense != SENSE_NO_CHANGE){
		aux8 = EICRA & ~(0x03 << ISC00);
		switch(sense){
			case SENSE_LOW_LEVEL:		break;
			case SENSE_ANY_EDGE:		aux8 |= (0x01 << ISC00);			break;
     6a6:	81 60       	ori	r24, 0x01	; 1
     6a8:	01 c0       	rjmp	.+2      	; 0x6ac <int0Config+0x4c>
			case SENSE_FALLING_EDGE:	aux8 |= (0x02 << ISC00);			break;
     6aa:	82 60       	ori	r24, 0x02	; 2
			case SENSE_RISING_EDGE:		aux8 |= (0x03 << ISC00);			break;
			case SENSE_NO_CHANGE:		break;
			default:					return RESULT_INT_SENSE_VALUE_UNSUPPORTED;	break;
		}
		EICRA = aux8;
     6ac:	80 93 69 00 	sts	0x0069, r24
     6b0:	02 c0       	rjmp	.+4      	; 0x6b6 <int0Config+0x56>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD2); setBit(DDRD, PD2);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD2); setBit(DDRD, PD2);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD2); clrBit(DDRD, PD2);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD2); clrBit(DDRD, PD2);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     6b2:	81 e0       	ldi	r24, 0x01	; 1
     6b4:	08 95       	ret
			default:					return RESULT_INT_SENSE_VALUE_UNSUPPORTED;	break;
		}
		EICRA = aux8;
	}

	return RESULT_OK;
     6b6:	80 e0       	ldi	r24, 0x00	; 0
     6b8:	08 95       	ret
			case SENSE_LOW_LEVEL:		break;
			case SENSE_ANY_EDGE:		aux8 |= (0x01 << ISC00);			break;
			case SENSE_FALLING_EDGE:	aux8 |= (0x02 << ISC00);			break;
			case SENSE_RISING_EDGE:		aux8 |= (0x03 << ISC00);			break;
			case SENSE_NO_CHANGE:		break;
			default:					return RESULT_INT_SENSE_VALUE_UNSUPPORTED;	break;
     6ba:	82 e0       	ldi	r24, 0x02	; 2
		}
		EICRA = aux8;
	}

	return RESULT_OK;
}
     6bc:	08 95       	ret

000006be <int0ActivateInterrupt>:
 * Activates the external interrupt int0
 * -------------------------------------------------------------------------- */

void int0ActivateInterrupt(void)
{
	setBit(EIMSK, INT0);
     6be:	e8 9a       	sbi	0x1d, 0	; 29
     6c0:	08 95       	ret

000006c2 <int0DeactivateInterrupt>:
 * Deactivates the external interrupt int0
 * -------------------------------------------------------------------------- */

void int0DeactivateInterrupt(void)
{
	clrBit(EIMSK, INT0);
     6c2:	e8 98       	cbi	0x1d, 0	; 29
     6c4:	08 95       	ret

000006c6 <int0ClearInterruptRequest>:
 * Clears the external interrupt int0 request
 * -------------------------------------------------------------------------- */

void int0ClearInterruptRequest(void)
{
	setBit(EIFR, INTF0);
     6c6:	e0 9a       	sbi	0x1c, 0	; 28
     6c8:	08 95       	ret

000006ca <int1Config>:

resultValue_t int1Config(portMode_t port, senseMode_t sense)
{
	uint8 aux8 = 0;

	switch(port){
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	79 f0       	breq	.+30     	; 0x6ec <int1Config+0x22>
     6ce:	30 f4       	brcc	.+12     	; 0x6dc <int1Config+0x12>
     6d0:	88 23       	and	r24, r24
     6d2:	49 f0       	breq	.+18     	; 0x6e6 <int1Config+0x1c>
     6d4:	81 30       	cpi	r24, 0x01	; 1
     6d6:	11 f5       	brne	.+68     	; 0x71c <int1Config+0x52>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD3); setBit(DDRD, PD3);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD3); setBit(DDRD, PD3);	break;
     6d8:	5b 9a       	sbi	0x0b, 3	; 11
     6da:	06 c0       	rjmp	.+12     	; 0x6e8 <int1Config+0x1e>

resultValue_t int1Config(portMode_t port, senseMode_t sense)
{
	uint8 aux8 = 0;

	switch(port){
     6dc:	83 30       	cpi	r24, 0x03	; 3
     6de:	41 f0       	breq	.+16     	; 0x6f0 <int1Config+0x26>
     6e0:	8f 3f       	cpi	r24, 0xFF	; 255
     6e2:	41 f0       	breq	.+16     	; 0x6f4 <int1Config+0x2a>
     6e4:	1b c0       	rjmp	.+54     	; 0x71c <int1Config+0x52>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD3); setBit(DDRD, PD3);	break;
     6e6:	5b 98       	cbi	0x0b, 3	; 11
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD3); setBit(DDRD, PD3);	break;
     6e8:	53 9a       	sbi	0x0a, 3	; 10
     6ea:	04 c0       	rjmp	.+8      	; 0x6f4 <int1Config+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD3); clrBit(DDRD, PD3);	break;
     6ec:	5b 98       	cbi	0x0b, 3	; 11
     6ee:	01 c0       	rjmp	.+2      	; 0x6f2 <int1Config+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD3); clrBit(DDRD, PD3);	break;
     6f0:	5b 9a       	sbi	0x0b, 3	; 11
     6f2:	53 98       	cbi	0x0a, 3	; 10
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}

	if(sense != SENSE_NO_CHANGE){
     6f4:	6f 3f       	cpi	r22, 0xFF	; 255
     6f6:	a1 f0       	breq	.+40     	; 0x720 <int1Config+0x56>
		aux8 = EICRA & ~(0x03 << ISC10);
     6f8:	80 91 69 00 	lds	r24, 0x0069
     6fc:	83 7f       	andi	r24, 0xF3	; 243
		switch(sense){
     6fe:	61 30       	cpi	r22, 0x01	; 1
     700:	39 f0       	breq	.+14     	; 0x710 <int1Config+0x46>
     702:	48 f0       	brcs	.+18     	; 0x716 <int1Config+0x4c>
     704:	62 30       	cpi	r22, 0x02	; 2
     706:	31 f0       	breq	.+12     	; 0x714 <int1Config+0x4a>
     708:	63 30       	cpi	r22, 0x03	; 3
     70a:	61 f4       	brne	.+24     	; 0x724 <int1Config+0x5a>
			case SENSE_LOW_LEVEL:		break;
			case SENSE_ANY_EDGE:		aux8 |= (0x01 << ISC10);			break;
			case SENSE_FALLING_EDGE:	aux8 |= (0x02 << ISC10);			break;
			case SENSE_RISING_EDGE:		aux8 |= (0x03 << ISC10);			break;
     70c:	8c 60       	ori	r24, 0x0C	; 12
     70e:	03 c0       	rjmp	.+6      	; 0x716 <int1Config+0x4c>

	if(sense != SENSE_NO_CHANGE){
		aux8 = EICRA & ~(0x03 << ISC10);
		switch(sense){
			case SENSE_LOW_LEVEL:		break;
			case SENSE_ANY_EDGE:		aux8 |= (0x01 << ISC10);			break;
     710:	84 60       	ori	r24, 0x04	; 4
     712:	01 c0       	rjmp	.+2      	; 0x716 <int1Config+0x4c>
			case SENSE_FALLING_EDGE:	aux8 |= (0x02 << ISC10);			break;
     714:	88 60       	ori	r24, 0x08	; 8
			case SENSE_RISING_EDGE:		aux8 |= (0x03 << ISC10);			break;
			case SENSE_NO_CHANGE:		break;
			default:					return RESULT_INT_SENSE_VALUE_UNSUPPORTED;	break;
		}
		EICRA = aux8;
     716:	80 93 69 00 	sts	0x0069, r24
     71a:	02 c0       	rjmp	.+4      	; 0x720 <int1Config+0x56>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD3); setBit(DDRD, PD3);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD3); setBit(DDRD, PD3);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD3); clrBit(DDRD, PD3);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD3); clrBit(DDRD, PD3);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     71c:	81 e0       	ldi	r24, 0x01	; 1
     71e:	08 95       	ret
			default:					return RESULT_INT_SENSE_VALUE_UNSUPPORTED;	break;
		}
		EICRA = aux8;
	}

	return RESULT_OK;
     720:	80 e0       	ldi	r24, 0x00	; 0
     722:	08 95       	ret
			case SENSE_LOW_LEVEL:		break;
			case SENSE_ANY_EDGE:		aux8 |= (0x01 << ISC10);			break;
			case SENSE_FALLING_EDGE:	aux8 |= (0x02 << ISC10);			break;
			case SENSE_RISING_EDGE:		aux8 |= (0x03 << ISC10);			break;
			case SENSE_NO_CHANGE:		break;
			default:					return RESULT_INT_SENSE_VALUE_UNSUPPORTED;	break;
     724:	82 e0       	ldi	r24, 0x02	; 2
		}
		EICRA = aux8;
	}

	return RESULT_OK;
}
     726:	08 95       	ret

00000728 <int1ActivateInterrupt>:
 * Activates the external interrupt int1
 * -------------------------------------------------------------------------- */

void int1ActivateInterrupt(void)
{
	setBit(EIMSK, INT1);
     728:	e9 9a       	sbi	0x1d, 1	; 29
     72a:	08 95       	ret

0000072c <int1DeactivateInterrupt>:
 * Deactivates the external interrupt int1
 * -------------------------------------------------------------------------- */

void int1DeactivateInterrupt(void)
{
	clrBit(EIMSK, INT1);
     72c:	e9 98       	cbi	0x1d, 1	; 29
     72e:	08 95       	ret

00000730 <int1ClearInterruptRequest>:
 * Clears the external interrupt int1 request
 * -------------------------------------------------------------------------- */

void int1ClearInterruptRequest(void)
{
	setBit(EIFR, INTF1);
     730:	e1 9a       	sbi	0x1c, 1	; 28
     732:	08 95       	ret

00000734 <pcint7_0Enable>:
 * Enables the external interrupt pcint in port B
 * -------------------------------------------------------------------------- */

void pcint7_0Enable(void)
{
	setBit(PCICR, PCIE0);
     734:	e8 e6       	ldi	r30, 0x68	; 104
     736:	f0 e0       	ldi	r31, 0x00	; 0
     738:	80 81       	ld	r24, Z
     73a:	81 60       	ori	r24, 0x01	; 1
     73c:	80 83       	st	Z, r24
     73e:	08 95       	ret

00000740 <pcint7_0Disable>:
 * Disables the external interrupt pcint in port B
 * -------------------------------------------------------------------------- */

void pcint7_0Disable(void)
{
	clrBit(PCICR, PCIE0);
     740:	e8 e6       	ldi	r30, 0x68	; 104
     742:	f0 e0       	ldi	r31, 0x00	; 0
     744:	80 81       	ld	r24, Z
     746:	8e 7f       	andi	r24, 0xFE	; 254
     748:	80 83       	st	Z, r24
     74a:	08 95       	ret

0000074c <pcint7_0ClearInterruptRequest>:
 * Disables the external interrupt pcint in port B
 * -------------------------------------------------------------------------- */

void pcint7_0ClearInterruptRequest(void)
{
	setBit(PCIFR, PCIF0);
     74c:	d8 9a       	sbi	0x1b, 0	; 27
     74e:	08 95       	ret

00000750 <pcint0ActivateInterrupt>:
 * Activates the external interrupt pcint0 and configures port mode in PB0
 * -------------------------------------------------------------------------- */

resultValue_t pcint0ActivateInterrupt(portMode_t port)
{
	switch(port){
     750:	82 30       	cpi	r24, 0x02	; 2
     752:	79 f0       	breq	.+30     	; 0x772 <pcint0ActivateInterrupt+0x22>
     754:	30 f4       	brcc	.+12     	; 0x762 <pcint0ActivateInterrupt+0x12>
     756:	88 23       	and	r24, r24
     758:	49 f0       	breq	.+18     	; 0x76c <pcint0ActivateInterrupt+0x1c>
     75a:	81 30       	cpi	r24, 0x01	; 1
     75c:	a9 f4       	brne	.+42     	; 0x788 <pcint0ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB0); setBit(DDRB, PB0);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB0); setBit(DDRB, PB0);	break;
     75e:	28 9a       	sbi	0x05, 0	; 5
     760:	06 c0       	rjmp	.+12     	; 0x76e <pcint0ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint0 and configures port mode in PB0
 * -------------------------------------------------------------------------- */

resultValue_t pcint0ActivateInterrupt(portMode_t port)
{
	switch(port){
     762:	83 30       	cpi	r24, 0x03	; 3
     764:	41 f0       	breq	.+16     	; 0x776 <pcint0ActivateInterrupt+0x26>
     766:	8f 3f       	cpi	r24, 0xFF	; 255
     768:	41 f0       	breq	.+16     	; 0x77a <pcint0ActivateInterrupt+0x2a>
     76a:	0e c0       	rjmp	.+28     	; 0x788 <pcint0ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB0); setBit(DDRB, PB0);	break;
     76c:	28 98       	cbi	0x05, 0	; 5
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB0); setBit(DDRB, PB0);	break;
     76e:	20 9a       	sbi	0x04, 0	; 4
     770:	04 c0       	rjmp	.+8      	; 0x77a <pcint0ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB0); clrBit(DDRB, PB0);	break;
     772:	28 98       	cbi	0x05, 0	; 5
     774:	01 c0       	rjmp	.+2      	; 0x778 <pcint0ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB0); clrBit(DDRB, PB0);	break;
     776:	28 9a       	sbi	0x05, 0	; 5
     778:	20 98       	cbi	0x04, 0	; 4
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK0, PCINT0);
     77a:	80 91 6b 00 	lds	r24, 0x006B
     77e:	81 60       	ori	r24, 0x01	; 1
     780:	80 93 6b 00 	sts	0x006B, r24
	return RESULT_OK;
     784:	80 e0       	ldi	r24, 0x00	; 0
     786:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB0); setBit(DDRB, PB0);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB0); setBit(DDRB, PB0);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB0); clrBit(DDRB, PB0);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB0); clrBit(DDRB, PB0);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     788:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK0, PCINT0);
	return RESULT_OK;
}
     78a:	08 95       	ret

0000078c <pcint0DeactivateInterrupt>:
 * Deactivates the external interrupt pcint0 in PB0
 * -------------------------------------------------------------------------- */

void pcint0DeactivateInterrupt(void)
{
	clrBit(PCMSK0, PCINT0);
     78c:	eb e6       	ldi	r30, 0x6B	; 107
     78e:	f0 e0       	ldi	r31, 0x00	; 0
     790:	80 81       	ld	r24, Z
     792:	8e 7f       	andi	r24, 0xFE	; 254
     794:	80 83       	st	Z, r24
     796:	08 95       	ret

00000798 <pcint1ActivateInterrupt>:
 * Activates the external interrupt pcint1 and configures port mode in PB1
 * -------------------------------------------------------------------------- */

resultValue_t pcint1ActivateInterrupt(portMode_t port)
{
	switch(port){
     798:	82 30       	cpi	r24, 0x02	; 2
     79a:	79 f0       	breq	.+30     	; 0x7ba <pcint1ActivateInterrupt+0x22>
     79c:	30 f4       	brcc	.+12     	; 0x7aa <pcint1ActivateInterrupt+0x12>
     79e:	88 23       	and	r24, r24
     7a0:	49 f0       	breq	.+18     	; 0x7b4 <pcint1ActivateInterrupt+0x1c>
     7a2:	81 30       	cpi	r24, 0x01	; 1
     7a4:	a9 f4       	brne	.+42     	; 0x7d0 <pcint1ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB1); setBit(DDRB, PB1);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB1); setBit(DDRB, PB1);	break;
     7a6:	29 9a       	sbi	0x05, 1	; 5
     7a8:	06 c0       	rjmp	.+12     	; 0x7b6 <pcint1ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint1 and configures port mode in PB1
 * -------------------------------------------------------------------------- */

resultValue_t pcint1ActivateInterrupt(portMode_t port)
{
	switch(port){
     7aa:	83 30       	cpi	r24, 0x03	; 3
     7ac:	41 f0       	breq	.+16     	; 0x7be <pcint1ActivateInterrupt+0x26>
     7ae:	8f 3f       	cpi	r24, 0xFF	; 255
     7b0:	41 f0       	breq	.+16     	; 0x7c2 <pcint1ActivateInterrupt+0x2a>
     7b2:	0e c0       	rjmp	.+28     	; 0x7d0 <pcint1ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB1); setBit(DDRB, PB1);	break;
     7b4:	29 98       	cbi	0x05, 1	; 5
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB1); setBit(DDRB, PB1);	break;
     7b6:	21 9a       	sbi	0x04, 1	; 4
     7b8:	04 c0       	rjmp	.+8      	; 0x7c2 <pcint1ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB1); clrBit(DDRB, PB1);	break;
     7ba:	29 98       	cbi	0x05, 1	; 5
     7bc:	01 c0       	rjmp	.+2      	; 0x7c0 <pcint1ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB1); clrBit(DDRB, PB1);	break;
     7be:	29 9a       	sbi	0x05, 1	; 5
     7c0:	21 98       	cbi	0x04, 1	; 4
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK0, PCINT1);
     7c2:	80 91 6b 00 	lds	r24, 0x006B
     7c6:	82 60       	ori	r24, 0x02	; 2
     7c8:	80 93 6b 00 	sts	0x006B, r24
	return RESULT_OK;
     7cc:	80 e0       	ldi	r24, 0x00	; 0
     7ce:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB1); setBit(DDRB, PB1);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB1); setBit(DDRB, PB1);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB1); clrBit(DDRB, PB1);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB1); clrBit(DDRB, PB1);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     7d0:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK0, PCINT1);
	return RESULT_OK;
}
     7d2:	08 95       	ret

000007d4 <pcint1DeactivateInterrupt>:
 * Deactivates the external interrupt pcint1 in PB1
 * -------------------------------------------------------------------------- */

void pcint1DeactivateInterrupt(void)
{
	clrBit(PCMSK0, PCINT1);
     7d4:	eb e6       	ldi	r30, 0x6B	; 107
     7d6:	f0 e0       	ldi	r31, 0x00	; 0
     7d8:	80 81       	ld	r24, Z
     7da:	8d 7f       	andi	r24, 0xFD	; 253
     7dc:	80 83       	st	Z, r24
     7de:	08 95       	ret

000007e0 <pcint2ActivateInterrupt>:
 * Activates the external interrupt pcint2 and configures port mode in PB2
 * -------------------------------------------------------------------------- */

resultValue_t pcint2ActivateInterrupt(portMode_t port)
{
	switch(port){
     7e0:	82 30       	cpi	r24, 0x02	; 2
     7e2:	79 f0       	breq	.+30     	; 0x802 <pcint2ActivateInterrupt+0x22>
     7e4:	30 f4       	brcc	.+12     	; 0x7f2 <pcint2ActivateInterrupt+0x12>
     7e6:	88 23       	and	r24, r24
     7e8:	49 f0       	breq	.+18     	; 0x7fc <pcint2ActivateInterrupt+0x1c>
     7ea:	81 30       	cpi	r24, 0x01	; 1
     7ec:	a9 f4       	brne	.+42     	; 0x818 <pcint2ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB2); setBit(DDRB, PB2);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB2); setBit(DDRB, PB2);	break;
     7ee:	2a 9a       	sbi	0x05, 2	; 5
     7f0:	06 c0       	rjmp	.+12     	; 0x7fe <pcint2ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint2 and configures port mode in PB2
 * -------------------------------------------------------------------------- */

resultValue_t pcint2ActivateInterrupt(portMode_t port)
{
	switch(port){
     7f2:	83 30       	cpi	r24, 0x03	; 3
     7f4:	41 f0       	breq	.+16     	; 0x806 <pcint2ActivateInterrupt+0x26>
     7f6:	8f 3f       	cpi	r24, 0xFF	; 255
     7f8:	41 f0       	breq	.+16     	; 0x80a <pcint2ActivateInterrupt+0x2a>
     7fa:	0e c0       	rjmp	.+28     	; 0x818 <pcint2ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB2); setBit(DDRB, PB2);	break;
     7fc:	2a 98       	cbi	0x05, 2	; 5
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB2); setBit(DDRB, PB2);	break;
     7fe:	22 9a       	sbi	0x04, 2	; 4
     800:	04 c0       	rjmp	.+8      	; 0x80a <pcint2ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB2); clrBit(DDRB, PB2);	break;
     802:	2a 98       	cbi	0x05, 2	; 5
     804:	01 c0       	rjmp	.+2      	; 0x808 <pcint2ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB2); clrBit(DDRB, PB2);	break;
     806:	2a 9a       	sbi	0x05, 2	; 5
     808:	22 98       	cbi	0x04, 2	; 4
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK0, PCINT2);
     80a:	80 91 6b 00 	lds	r24, 0x006B
     80e:	84 60       	ori	r24, 0x04	; 4
     810:	80 93 6b 00 	sts	0x006B, r24
	return RESULT_OK;
     814:	80 e0       	ldi	r24, 0x00	; 0
     816:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB2); setBit(DDRB, PB2);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB2); setBit(DDRB, PB2);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB2); clrBit(DDRB, PB2);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB2); clrBit(DDRB, PB2);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     818:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK0, PCINT2);
	return RESULT_OK;
}
     81a:	08 95       	ret

0000081c <pcint2DeactivateInterrupt>:
 * Deactivates the external interrupt pcint2 in PB2
 * -------------------------------------------------------------------------- */

void pcint2DeactivateInterrupt(void)
{
	clrBit(PCMSK0, PCINT2);
     81c:	eb e6       	ldi	r30, 0x6B	; 107
     81e:	f0 e0       	ldi	r31, 0x00	; 0
     820:	80 81       	ld	r24, Z
     822:	8b 7f       	andi	r24, 0xFB	; 251
     824:	80 83       	st	Z, r24
     826:	08 95       	ret

00000828 <pcint3ActivateInterrupt>:
 * Activates the external interrupt pcint3 and configures port mode in PB3
 * -------------------------------------------------------------------------- */

resultValue_t pcint3ActivateInterrupt(portMode_t port)
{
	switch(port){
     828:	82 30       	cpi	r24, 0x02	; 2
     82a:	79 f0       	breq	.+30     	; 0x84a <pcint3ActivateInterrupt+0x22>
     82c:	30 f4       	brcc	.+12     	; 0x83a <pcint3ActivateInterrupt+0x12>
     82e:	88 23       	and	r24, r24
     830:	49 f0       	breq	.+18     	; 0x844 <pcint3ActivateInterrupt+0x1c>
     832:	81 30       	cpi	r24, 0x01	; 1
     834:	a9 f4       	brne	.+42     	; 0x860 <pcint3ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB3); setBit(DDRB, PB3);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB3); setBit(DDRB, PB3);	break;
     836:	2b 9a       	sbi	0x05, 3	; 5
     838:	06 c0       	rjmp	.+12     	; 0x846 <pcint3ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint3 and configures port mode in PB3
 * -------------------------------------------------------------------------- */

resultValue_t pcint3ActivateInterrupt(portMode_t port)
{
	switch(port){
     83a:	83 30       	cpi	r24, 0x03	; 3
     83c:	41 f0       	breq	.+16     	; 0x84e <pcint3ActivateInterrupt+0x26>
     83e:	8f 3f       	cpi	r24, 0xFF	; 255
     840:	41 f0       	breq	.+16     	; 0x852 <pcint3ActivateInterrupt+0x2a>
     842:	0e c0       	rjmp	.+28     	; 0x860 <pcint3ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB3); setBit(DDRB, PB3);	break;
     844:	2b 98       	cbi	0x05, 3	; 5
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB3); setBit(DDRB, PB3);	break;
     846:	23 9a       	sbi	0x04, 3	; 4
     848:	04 c0       	rjmp	.+8      	; 0x852 <pcint3ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB3); clrBit(DDRB, PB3);	break;
     84a:	2b 98       	cbi	0x05, 3	; 5
     84c:	01 c0       	rjmp	.+2      	; 0x850 <pcint3ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB3); clrBit(DDRB, PB3);	break;
     84e:	2b 9a       	sbi	0x05, 3	; 5
     850:	23 98       	cbi	0x04, 3	; 4
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK0, PCINT3);
     852:	80 91 6b 00 	lds	r24, 0x006B
     856:	88 60       	ori	r24, 0x08	; 8
     858:	80 93 6b 00 	sts	0x006B, r24
	return RESULT_OK;
     85c:	80 e0       	ldi	r24, 0x00	; 0
     85e:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB3); setBit(DDRB, PB3);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB3); setBit(DDRB, PB3);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB3); clrBit(DDRB, PB3);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB3); clrBit(DDRB, PB3);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     860:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK0, PCINT3);
	return RESULT_OK;
}
     862:	08 95       	ret

00000864 <pcint3DeactivateInterrupt>:
 * Deactivates the external interrupt pcint3 in PB3
 * -------------------------------------------------------------------------- */

void pcint3DeactivateInterrupt(void)
{
	clrBit(PCMSK0, PCINT3);
     864:	eb e6       	ldi	r30, 0x6B	; 107
     866:	f0 e0       	ldi	r31, 0x00	; 0
     868:	80 81       	ld	r24, Z
     86a:	87 7f       	andi	r24, 0xF7	; 247
     86c:	80 83       	st	Z, r24
     86e:	08 95       	ret

00000870 <pcint4ActivateInterrupt>:
 * Activates the external interrupt pcint4 and configures port mode in PB4
 * -------------------------------------------------------------------------- */

resultValue_t pcint4ActivateInterrupt(portMode_t port)
{
	switch(port){
     870:	82 30       	cpi	r24, 0x02	; 2
     872:	79 f0       	breq	.+30     	; 0x892 <pcint4ActivateInterrupt+0x22>
     874:	30 f4       	brcc	.+12     	; 0x882 <pcint4ActivateInterrupt+0x12>
     876:	88 23       	and	r24, r24
     878:	49 f0       	breq	.+18     	; 0x88c <pcint4ActivateInterrupt+0x1c>
     87a:	81 30       	cpi	r24, 0x01	; 1
     87c:	a9 f4       	brne	.+42     	; 0x8a8 <pcint4ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB4); setBit(DDRB, PB4);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB4); setBit(DDRB, PB4);	break;
     87e:	2c 9a       	sbi	0x05, 4	; 5
     880:	06 c0       	rjmp	.+12     	; 0x88e <pcint4ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint4 and configures port mode in PB4
 * -------------------------------------------------------------------------- */

resultValue_t pcint4ActivateInterrupt(portMode_t port)
{
	switch(port){
     882:	83 30       	cpi	r24, 0x03	; 3
     884:	41 f0       	breq	.+16     	; 0x896 <pcint4ActivateInterrupt+0x26>
     886:	8f 3f       	cpi	r24, 0xFF	; 255
     888:	41 f0       	breq	.+16     	; 0x89a <pcint4ActivateInterrupt+0x2a>
     88a:	0e c0       	rjmp	.+28     	; 0x8a8 <pcint4ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB4); setBit(DDRB, PB4);	break;
     88c:	2c 98       	cbi	0x05, 4	; 5
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB4); setBit(DDRB, PB4);	break;
     88e:	24 9a       	sbi	0x04, 4	; 4
     890:	04 c0       	rjmp	.+8      	; 0x89a <pcint4ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB4); clrBit(DDRB, PB4);	break;
     892:	2c 98       	cbi	0x05, 4	; 5
     894:	01 c0       	rjmp	.+2      	; 0x898 <pcint4ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB4); clrBit(DDRB, PB4);	break;
     896:	2c 9a       	sbi	0x05, 4	; 5
     898:	24 98       	cbi	0x04, 4	; 4
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK0, PCINT4);
     89a:	80 91 6b 00 	lds	r24, 0x006B
     89e:	80 61       	ori	r24, 0x10	; 16
     8a0:	80 93 6b 00 	sts	0x006B, r24
	return RESULT_OK;
     8a4:	80 e0       	ldi	r24, 0x00	; 0
     8a6:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB4); setBit(DDRB, PB4);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB4); setBit(DDRB, PB4);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB4); clrBit(DDRB, PB4);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB4); clrBit(DDRB, PB4);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     8a8:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK0, PCINT4);
	return RESULT_OK;
}
     8aa:	08 95       	ret

000008ac <pcint4DeactivateInterrupt>:
 * Deactivates the external interrupt pcint4 in PB4
 * -------------------------------------------------------------------------- */

void pcint4DeactivateInterrupt(void)
{
	clrBit(PCMSK0, PCINT4);
     8ac:	eb e6       	ldi	r30, 0x6B	; 107
     8ae:	f0 e0       	ldi	r31, 0x00	; 0
     8b0:	80 81       	ld	r24, Z
     8b2:	8f 7e       	andi	r24, 0xEF	; 239
     8b4:	80 83       	st	Z, r24
     8b6:	08 95       	ret

000008b8 <pcint5ActivateInterrupt>:
 * Activates the external interrupt pcint5 and configures port mode in PB5
 * -------------------------------------------------------------------------- */

resultValue_t pcint5ActivateInterrupt(portMode_t port)
{
	switch(port){
     8b8:	82 30       	cpi	r24, 0x02	; 2
     8ba:	79 f0       	breq	.+30     	; 0x8da <pcint5ActivateInterrupt+0x22>
     8bc:	30 f4       	brcc	.+12     	; 0x8ca <pcint5ActivateInterrupt+0x12>
     8be:	88 23       	and	r24, r24
     8c0:	49 f0       	breq	.+18     	; 0x8d4 <pcint5ActivateInterrupt+0x1c>
     8c2:	81 30       	cpi	r24, 0x01	; 1
     8c4:	a9 f4       	brne	.+42     	; 0x8f0 <pcint5ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB5); setBit(DDRB, PB5);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB5); setBit(DDRB, PB5);	break;
     8c6:	2d 9a       	sbi	0x05, 5	; 5
     8c8:	06 c0       	rjmp	.+12     	; 0x8d6 <pcint5ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint5 and configures port mode in PB5
 * -------------------------------------------------------------------------- */

resultValue_t pcint5ActivateInterrupt(portMode_t port)
{
	switch(port){
     8ca:	83 30       	cpi	r24, 0x03	; 3
     8cc:	41 f0       	breq	.+16     	; 0x8de <pcint5ActivateInterrupt+0x26>
     8ce:	8f 3f       	cpi	r24, 0xFF	; 255
     8d0:	41 f0       	breq	.+16     	; 0x8e2 <pcint5ActivateInterrupt+0x2a>
     8d2:	0e c0       	rjmp	.+28     	; 0x8f0 <pcint5ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB5); setBit(DDRB, PB5);	break;
     8d4:	2d 98       	cbi	0x05, 5	; 5
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB5); setBit(DDRB, PB5);	break;
     8d6:	25 9a       	sbi	0x04, 5	; 4
     8d8:	04 c0       	rjmp	.+8      	; 0x8e2 <pcint5ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB5); clrBit(DDRB, PB5);	break;
     8da:	2d 98       	cbi	0x05, 5	; 5
     8dc:	01 c0       	rjmp	.+2      	; 0x8e0 <pcint5ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB5); clrBit(DDRB, PB5);	break;
     8de:	2d 9a       	sbi	0x05, 5	; 5
     8e0:	25 98       	cbi	0x04, 5	; 4
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK0, PCINT5);
     8e2:	80 91 6b 00 	lds	r24, 0x006B
     8e6:	80 62       	ori	r24, 0x20	; 32
     8e8:	80 93 6b 00 	sts	0x006B, r24
	return RESULT_OK;
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB5); setBit(DDRB, PB5);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB5); setBit(DDRB, PB5);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB5); clrBit(DDRB, PB5);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB5); clrBit(DDRB, PB5);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     8f0:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK0, PCINT5);
	return RESULT_OK;
}
     8f2:	08 95       	ret

000008f4 <pcint5DeactivateInterrupt>:
 * Deactivates the external interrupt pcint5 in PB5
 * -------------------------------------------------------------------------- */

void pcint5DeactivateInterrupt(void)
{
	clrBit(PCMSK0, PCINT5);
     8f4:	eb e6       	ldi	r30, 0x6B	; 107
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	80 81       	ld	r24, Z
     8fa:	8f 7d       	andi	r24, 0xDF	; 223
     8fc:	80 83       	st	Z, r24
     8fe:	08 95       	ret

00000900 <pcint6ActivateInterrupt>:
 * Activates the external interrupt pcint6 and configures port mode in PB6
 * -------------------------------------------------------------------------- */

resultValue_t pcint6ActivateInterrupt(portMode_t port)
{
	switch(port){
     900:	82 30       	cpi	r24, 0x02	; 2
     902:	79 f0       	breq	.+30     	; 0x922 <pcint6ActivateInterrupt+0x22>
     904:	30 f4       	brcc	.+12     	; 0x912 <pcint6ActivateInterrupt+0x12>
     906:	88 23       	and	r24, r24
     908:	49 f0       	breq	.+18     	; 0x91c <pcint6ActivateInterrupt+0x1c>
     90a:	81 30       	cpi	r24, 0x01	; 1
     90c:	a9 f4       	brne	.+42     	; 0x938 <pcint6ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB6); setBit(DDRB, PB6);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB6); setBit(DDRB, PB6);	break;
     90e:	2e 9a       	sbi	0x05, 6	; 5
     910:	06 c0       	rjmp	.+12     	; 0x91e <pcint6ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint6 and configures port mode in PB6
 * -------------------------------------------------------------------------- */

resultValue_t pcint6ActivateInterrupt(portMode_t port)
{
	switch(port){
     912:	83 30       	cpi	r24, 0x03	; 3
     914:	41 f0       	breq	.+16     	; 0x926 <pcint6ActivateInterrupt+0x26>
     916:	8f 3f       	cpi	r24, 0xFF	; 255
     918:	41 f0       	breq	.+16     	; 0x92a <pcint6ActivateInterrupt+0x2a>
     91a:	0e c0       	rjmp	.+28     	; 0x938 <pcint6ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB6); setBit(DDRB, PB6);	break;
     91c:	2e 98       	cbi	0x05, 6	; 5
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB6); setBit(DDRB, PB6);	break;
     91e:	26 9a       	sbi	0x04, 6	; 4
     920:	04 c0       	rjmp	.+8      	; 0x92a <pcint6ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB6); clrBit(DDRB, PB6);	break;
     922:	2e 98       	cbi	0x05, 6	; 5
     924:	01 c0       	rjmp	.+2      	; 0x928 <pcint6ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB6); clrBit(DDRB, PB6);	break;
     926:	2e 9a       	sbi	0x05, 6	; 5
     928:	26 98       	cbi	0x04, 6	; 4
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK0, PCINT6);
     92a:	80 91 6b 00 	lds	r24, 0x006B
     92e:	80 64       	ori	r24, 0x40	; 64
     930:	80 93 6b 00 	sts	0x006B, r24
	return RESULT_OK;
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB6); setBit(DDRB, PB6);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB6); setBit(DDRB, PB6);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB6); clrBit(DDRB, PB6);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB6); clrBit(DDRB, PB6);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     938:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK0, PCINT6);
	return RESULT_OK;
}
     93a:	08 95       	ret

0000093c <pcint6DeactivateInterrupt>:
 * Deactivates the external interrupt pcint6 in PB6
 * -------------------------------------------------------------------------- */

void pcint6DeactivateInterrupt(void)
{
	clrBit(PCMSK0, PCINT6);
     93c:	eb e6       	ldi	r30, 0x6B	; 107
     93e:	f0 e0       	ldi	r31, 0x00	; 0
     940:	80 81       	ld	r24, Z
     942:	8f 7b       	andi	r24, 0xBF	; 191
     944:	80 83       	st	Z, r24
     946:	08 95       	ret

00000948 <pcint7ActivateInterrupt>:
 * Activates the external interrupt pcint7 and configures port mode in PB7
 * -------------------------------------------------------------------------- */

resultValue_t pcint7ActivateInterrupt(portMode_t port)
{
	switch(port){
     948:	82 30       	cpi	r24, 0x02	; 2
     94a:	79 f0       	breq	.+30     	; 0x96a <pcint7ActivateInterrupt+0x22>
     94c:	30 f4       	brcc	.+12     	; 0x95a <pcint7ActivateInterrupt+0x12>
     94e:	88 23       	and	r24, r24
     950:	49 f0       	breq	.+18     	; 0x964 <pcint7ActivateInterrupt+0x1c>
     952:	81 30       	cpi	r24, 0x01	; 1
     954:	a9 f4       	brne	.+42     	; 0x980 <pcint7ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB7); setBit(DDRB, PB7);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB7); setBit(DDRB, PB7);	break;
     956:	2f 9a       	sbi	0x05, 7	; 5
     958:	06 c0       	rjmp	.+12     	; 0x966 <pcint7ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint7 and configures port mode in PB7
 * -------------------------------------------------------------------------- */

resultValue_t pcint7ActivateInterrupt(portMode_t port)
{
	switch(port){
     95a:	83 30       	cpi	r24, 0x03	; 3
     95c:	41 f0       	breq	.+16     	; 0x96e <pcint7ActivateInterrupt+0x26>
     95e:	8f 3f       	cpi	r24, 0xFF	; 255
     960:	41 f0       	breq	.+16     	; 0x972 <pcint7ActivateInterrupt+0x2a>
     962:	0e c0       	rjmp	.+28     	; 0x980 <pcint7ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB7); setBit(DDRB, PB7);	break;
     964:	2f 98       	cbi	0x05, 7	; 5
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB7); setBit(DDRB, PB7);	break;
     966:	27 9a       	sbi	0x04, 7	; 4
     968:	04 c0       	rjmp	.+8      	; 0x972 <pcint7ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB7); clrBit(DDRB, PB7);	break;
     96a:	2f 98       	cbi	0x05, 7	; 5
     96c:	01 c0       	rjmp	.+2      	; 0x970 <pcint7ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB7); clrBit(DDRB, PB7);	break;
     96e:	2f 9a       	sbi	0x05, 7	; 5
     970:	27 98       	cbi	0x04, 7	; 4
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK0, PCINT7);
     972:	80 91 6b 00 	lds	r24, 0x006B
     976:	80 68       	ori	r24, 0x80	; 128
     978:	80 93 6b 00 	sts	0x006B, r24
	return RESULT_OK;
     97c:	80 e0       	ldi	r24, 0x00	; 0
     97e:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTB, PB7); setBit(DDRB, PB7);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTB, PB7); setBit(DDRB, PB7);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTB, PB7); clrBit(DDRB, PB7);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTB, PB7); clrBit(DDRB, PB7);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     980:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK0, PCINT7);
	return RESULT_OK;
}
     982:	08 95       	ret

00000984 <pcint7DeactivateInterrupt>:
 * Deactivates the external interrupt pcint7 in PB7
 * -------------------------------------------------------------------------- */

void pcint7DeactivateInterrupt(void)
{
	clrBit(PCMSK0, PCINT7);
     984:	eb e6       	ldi	r30, 0x6B	; 107
     986:	f0 e0       	ldi	r31, 0x00	; 0
     988:	80 81       	ld	r24, Z
     98a:	8f 77       	andi	r24, 0x7F	; 127
     98c:	80 83       	st	Z, r24
     98e:	08 95       	ret

00000990 <pcint14_8Enable>:
 * Enables the external interrupt pcint in port C
 * -------------------------------------------------------------------------- */

void pcint14_8Enable(void)
{
	setBit(PCICR, PCIE1);
     990:	e8 e6       	ldi	r30, 0x68	; 104
     992:	f0 e0       	ldi	r31, 0x00	; 0
     994:	80 81       	ld	r24, Z
     996:	82 60       	ori	r24, 0x02	; 2
     998:	80 83       	st	Z, r24
     99a:	08 95       	ret

0000099c <pcint14_8Disable>:
 * Disables the external interrupt pcint in port C
 * -------------------------------------------------------------------------- */

void pcint14_8Disable(void)
{
	clrBit(PCICR, PCIE1);
     99c:	e8 e6       	ldi	r30, 0x68	; 104
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	80 81       	ld	r24, Z
     9a2:	8d 7f       	andi	r24, 0xFD	; 253
     9a4:	80 83       	st	Z, r24
     9a6:	08 95       	ret

000009a8 <pcint14_8ClearInterruptRequest>:
 * Disables the external interrupt pcint in port C
 * -------------------------------------------------------------------------- */

void pcint14_8ClearInterruptRequest(void)
{
	setBit(PCIFR, PCIF1);
     9a8:	d9 9a       	sbi	0x1b, 1	; 27
     9aa:	08 95       	ret

000009ac <pcint8ActivateInterrupt>:
 * Activates the external interrupt pcint8 and configures port mode in PC0
 * -------------------------------------------------------------------------- */

resultValue_t pcint8ActivateInterrupt(portMode_t port)
{
	switch(port){
     9ac:	82 30       	cpi	r24, 0x02	; 2
     9ae:	79 f0       	breq	.+30     	; 0x9ce <pcint8ActivateInterrupt+0x22>
     9b0:	30 f4       	brcc	.+12     	; 0x9be <pcint8ActivateInterrupt+0x12>
     9b2:	88 23       	and	r24, r24
     9b4:	49 f0       	breq	.+18     	; 0x9c8 <pcint8ActivateInterrupt+0x1c>
     9b6:	81 30       	cpi	r24, 0x01	; 1
     9b8:	a9 f4       	brne	.+42     	; 0x9e4 <pcint8ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC0); setBit(DDRC, PC0);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC0); setBit(DDRC, PC0);	break;
     9ba:	40 9a       	sbi	0x08, 0	; 8
     9bc:	06 c0       	rjmp	.+12     	; 0x9ca <pcint8ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint8 and configures port mode in PC0
 * -------------------------------------------------------------------------- */

resultValue_t pcint8ActivateInterrupt(portMode_t port)
{
	switch(port){
     9be:	83 30       	cpi	r24, 0x03	; 3
     9c0:	41 f0       	breq	.+16     	; 0x9d2 <pcint8ActivateInterrupt+0x26>
     9c2:	8f 3f       	cpi	r24, 0xFF	; 255
     9c4:	41 f0       	breq	.+16     	; 0x9d6 <pcint8ActivateInterrupt+0x2a>
     9c6:	0e c0       	rjmp	.+28     	; 0x9e4 <pcint8ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC0); setBit(DDRC, PC0);	break;
     9c8:	40 98       	cbi	0x08, 0	; 8
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC0); setBit(DDRC, PC0);	break;
     9ca:	38 9a       	sbi	0x07, 0	; 7
     9cc:	04 c0       	rjmp	.+8      	; 0x9d6 <pcint8ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTC, PC0); clrBit(DDRC, PC0);	break;
     9ce:	40 98       	cbi	0x08, 0	; 8
     9d0:	01 c0       	rjmp	.+2      	; 0x9d4 <pcint8ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTC, PC0); clrBit(DDRC, PC0);	break;
     9d2:	40 9a       	sbi	0x08, 0	; 8
     9d4:	38 98       	cbi	0x07, 0	; 7
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK1, PCINT8);
     9d6:	80 91 6c 00 	lds	r24, 0x006C
     9da:	81 60       	ori	r24, 0x01	; 1
     9dc:	80 93 6c 00 	sts	0x006C, r24
	return RESULT_OK;
     9e0:	80 e0       	ldi	r24, 0x00	; 0
     9e2:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC0); setBit(DDRC, PC0);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC0); setBit(DDRC, PC0);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTC, PC0); clrBit(DDRC, PC0);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTC, PC0); clrBit(DDRC, PC0);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     9e4:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK1, PCINT8);
	return RESULT_OK;
}
     9e6:	08 95       	ret

000009e8 <pcint8DeactivateInterrupt>:
 * Deactivates the external interrupt pcint8 in PC0
 * -------------------------------------------------------------------------- */

void pcint8DeactivateInterrupt(void)
{
	clrBit(PCMSK1, PCINT8);
     9e8:	ec e6       	ldi	r30, 0x6C	; 108
     9ea:	f0 e0       	ldi	r31, 0x00	; 0
     9ec:	80 81       	ld	r24, Z
     9ee:	8e 7f       	andi	r24, 0xFE	; 254
     9f0:	80 83       	st	Z, r24
     9f2:	08 95       	ret

000009f4 <pcint9ActivateInterrupt>:
 * Activates the external interrupt pcint9 and configures port mode in PC1
 * -------------------------------------------------------------------------- */

resultValue_t pcint9ActivateInterrupt(portMode_t port)
{
	switch(port){
     9f4:	82 30       	cpi	r24, 0x02	; 2
     9f6:	79 f0       	breq	.+30     	; 0xa16 <pcint9ActivateInterrupt+0x22>
     9f8:	30 f4       	brcc	.+12     	; 0xa06 <pcint9ActivateInterrupt+0x12>
     9fa:	88 23       	and	r24, r24
     9fc:	49 f0       	breq	.+18     	; 0xa10 <pcint9ActivateInterrupt+0x1c>
     9fe:	81 30       	cpi	r24, 0x01	; 1
     a00:	a9 f4       	brne	.+42     	; 0xa2c <pcint9ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC1); setBit(DDRC, PC1);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC1); setBit(DDRC, PC1);	break;
     a02:	41 9a       	sbi	0x08, 1	; 8
     a04:	06 c0       	rjmp	.+12     	; 0xa12 <pcint9ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint9 and configures port mode in PC1
 * -------------------------------------------------------------------------- */

resultValue_t pcint9ActivateInterrupt(portMode_t port)
{
	switch(port){
     a06:	83 30       	cpi	r24, 0x03	; 3
     a08:	41 f0       	breq	.+16     	; 0xa1a <pcint9ActivateInterrupt+0x26>
     a0a:	8f 3f       	cpi	r24, 0xFF	; 255
     a0c:	41 f0       	breq	.+16     	; 0xa1e <pcint9ActivateInterrupt+0x2a>
     a0e:	0e c0       	rjmp	.+28     	; 0xa2c <pcint9ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC1); setBit(DDRC, PC1);	break;
     a10:	41 98       	cbi	0x08, 1	; 8
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC1); setBit(DDRC, PC1);	break;
     a12:	39 9a       	sbi	0x07, 1	; 7
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <pcint9ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTC, PC1); clrBit(DDRC, PC1);	break;
     a16:	41 98       	cbi	0x08, 1	; 8
     a18:	01 c0       	rjmp	.+2      	; 0xa1c <pcint9ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTC, PC1); clrBit(DDRC, PC1);	break;
     a1a:	41 9a       	sbi	0x08, 1	; 8
     a1c:	39 98       	cbi	0x07, 1	; 7
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK1, PCINT9);
     a1e:	80 91 6c 00 	lds	r24, 0x006C
     a22:	82 60       	ori	r24, 0x02	; 2
     a24:	80 93 6c 00 	sts	0x006C, r24
	return RESULT_OK;
     a28:	80 e0       	ldi	r24, 0x00	; 0
     a2a:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC1); setBit(DDRC, PC1);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC1); setBit(DDRC, PC1);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTC, PC1); clrBit(DDRC, PC1);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTC, PC1); clrBit(DDRC, PC1);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     a2c:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK1, PCINT9);
	return RESULT_OK;
}
     a2e:	08 95       	ret

00000a30 <pcint9DeactivateInterrupt>:
 * Deactivates the external interrupt pcint9 in PC1
 * -------------------------------------------------------------------------- */

void pcint9DeactivateInterrupt(void)
{
	clrBit(PCMSK1, PCINT9);
     a30:	ec e6       	ldi	r30, 0x6C	; 108
     a32:	f0 e0       	ldi	r31, 0x00	; 0
     a34:	80 81       	ld	r24, Z
     a36:	8d 7f       	andi	r24, 0xFD	; 253
     a38:	80 83       	st	Z, r24
     a3a:	08 95       	ret

00000a3c <pcint10ActivateInterrupt>:
 * Activates the external interrupt pcint10 and configures port mode in PC2
 * -------------------------------------------------------------------------- */

resultValue_t pcint10ActivateInterrupt(portMode_t port)
{
	switch(port){
     a3c:	82 30       	cpi	r24, 0x02	; 2
     a3e:	79 f0       	breq	.+30     	; 0xa5e <pcint10ActivateInterrupt+0x22>
     a40:	30 f4       	brcc	.+12     	; 0xa4e <pcint10ActivateInterrupt+0x12>
     a42:	88 23       	and	r24, r24
     a44:	49 f0       	breq	.+18     	; 0xa58 <pcint10ActivateInterrupt+0x1c>
     a46:	81 30       	cpi	r24, 0x01	; 1
     a48:	a9 f4       	brne	.+42     	; 0xa74 <pcint10ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC2); setBit(DDRC, PC2);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC2); setBit(DDRC, PC2);	break;
     a4a:	42 9a       	sbi	0x08, 2	; 8
     a4c:	06 c0       	rjmp	.+12     	; 0xa5a <pcint10ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint10 and configures port mode in PC2
 * -------------------------------------------------------------------------- */

resultValue_t pcint10ActivateInterrupt(portMode_t port)
{
	switch(port){
     a4e:	83 30       	cpi	r24, 0x03	; 3
     a50:	41 f0       	breq	.+16     	; 0xa62 <pcint10ActivateInterrupt+0x26>
     a52:	8f 3f       	cpi	r24, 0xFF	; 255
     a54:	41 f0       	breq	.+16     	; 0xa66 <pcint10ActivateInterrupt+0x2a>
     a56:	0e c0       	rjmp	.+28     	; 0xa74 <pcint10ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC2); setBit(DDRC, PC2);	break;
     a58:	42 98       	cbi	0x08, 2	; 8
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC2); setBit(DDRC, PC2);	break;
     a5a:	3a 9a       	sbi	0x07, 2	; 7
     a5c:	04 c0       	rjmp	.+8      	; 0xa66 <pcint10ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTC, PC2); clrBit(DDRC, PC2);	break;
     a5e:	42 98       	cbi	0x08, 2	; 8
     a60:	01 c0       	rjmp	.+2      	; 0xa64 <pcint10ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTC, PC2); clrBit(DDRC, PC2);	break;
     a62:	42 9a       	sbi	0x08, 2	; 8
     a64:	3a 98       	cbi	0x07, 2	; 7
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK1, PCINT10);
     a66:	80 91 6c 00 	lds	r24, 0x006C
     a6a:	84 60       	ori	r24, 0x04	; 4
     a6c:	80 93 6c 00 	sts	0x006C, r24
	return RESULT_OK;
     a70:	80 e0       	ldi	r24, 0x00	; 0
     a72:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC2); setBit(DDRC, PC2);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC2); setBit(DDRC, PC2);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTC, PC2); clrBit(DDRC, PC2);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTC, PC2); clrBit(DDRC, PC2);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     a74:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK1, PCINT10);
	return RESULT_OK;
}
     a76:	08 95       	ret

00000a78 <pcint10DeactivateInterrupt>:
 * Deactivates the external interrupt pcint10 in PC2
 * -------------------------------------------------------------------------- */

void pcint10DeactivateInterrupt(void)
{
	clrBit(PCMSK1, PCINT10);
     a78:	ec e6       	ldi	r30, 0x6C	; 108
     a7a:	f0 e0       	ldi	r31, 0x00	; 0
     a7c:	80 81       	ld	r24, Z
     a7e:	8b 7f       	andi	r24, 0xFB	; 251
     a80:	80 83       	st	Z, r24
     a82:	08 95       	ret

00000a84 <pcint11ActivateInterrupt>:
 * Activates the external interrupt pcint11 and configures port mode in PC3
 * -------------------------------------------------------------------------- */

resultValue_t pcint11ActivateInterrupt(portMode_t port)
{
	switch(port){
     a84:	82 30       	cpi	r24, 0x02	; 2
     a86:	79 f0       	breq	.+30     	; 0xaa6 <pcint11ActivateInterrupt+0x22>
     a88:	30 f4       	brcc	.+12     	; 0xa96 <pcint11ActivateInterrupt+0x12>
     a8a:	88 23       	and	r24, r24
     a8c:	49 f0       	breq	.+18     	; 0xaa0 <pcint11ActivateInterrupt+0x1c>
     a8e:	81 30       	cpi	r24, 0x01	; 1
     a90:	a9 f4       	brne	.+42     	; 0xabc <pcint11ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC3); setBit(DDRC, PC3);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC3); setBit(DDRC, PC3);	break;
     a92:	43 9a       	sbi	0x08, 3	; 8
     a94:	06 c0       	rjmp	.+12     	; 0xaa2 <pcint11ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint11 and configures port mode in PC3
 * -------------------------------------------------------------------------- */

resultValue_t pcint11ActivateInterrupt(portMode_t port)
{
	switch(port){
     a96:	83 30       	cpi	r24, 0x03	; 3
     a98:	41 f0       	breq	.+16     	; 0xaaa <pcint11ActivateInterrupt+0x26>
     a9a:	8f 3f       	cpi	r24, 0xFF	; 255
     a9c:	41 f0       	breq	.+16     	; 0xaae <pcint11ActivateInterrupt+0x2a>
     a9e:	0e c0       	rjmp	.+28     	; 0xabc <pcint11ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC3); setBit(DDRC, PC3);	break;
     aa0:	43 98       	cbi	0x08, 3	; 8
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC3); setBit(DDRC, PC3);	break;
     aa2:	3b 9a       	sbi	0x07, 3	; 7
     aa4:	04 c0       	rjmp	.+8      	; 0xaae <pcint11ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTC, PC3); clrBit(DDRC, PC3);	break;
     aa6:	43 98       	cbi	0x08, 3	; 8
     aa8:	01 c0       	rjmp	.+2      	; 0xaac <pcint11ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTC, PC3); clrBit(DDRC, PC3);	break;
     aaa:	43 9a       	sbi	0x08, 3	; 8
     aac:	3b 98       	cbi	0x07, 3	; 7
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK1, PCINT11);
     aae:	80 91 6c 00 	lds	r24, 0x006C
     ab2:	88 60       	ori	r24, 0x08	; 8
     ab4:	80 93 6c 00 	sts	0x006C, r24
	return RESULT_OK;
     ab8:	80 e0       	ldi	r24, 0x00	; 0
     aba:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC3); setBit(DDRC, PC3);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC3); setBit(DDRC, PC3);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTC, PC3); clrBit(DDRC, PC3);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTC, PC3); clrBit(DDRC, PC3);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     abc:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK1, PCINT11);
	return RESULT_OK;
}
     abe:	08 95       	ret

00000ac0 <pcint11DeactivateInterrupt>:
 * Deactivates the external interrupt pcint11 in PC3
 * -------------------------------------------------------------------------- */

void pcint11DeactivateInterrupt(void)
{
	clrBit(PCMSK1, PCINT11);
     ac0:	ec e6       	ldi	r30, 0x6C	; 108
     ac2:	f0 e0       	ldi	r31, 0x00	; 0
     ac4:	80 81       	ld	r24, Z
     ac6:	87 7f       	andi	r24, 0xF7	; 247
     ac8:	80 83       	st	Z, r24
     aca:	08 95       	ret

00000acc <pcint12ActivateInterrupt>:
 * Activates the external interrupt pcint12 and configures port mode in PC4
 * -------------------------------------------------------------------------- */

resultValue_t pcint12ActivateInterrupt(portMode_t port)
{
	switch(port){
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	79 f0       	breq	.+30     	; 0xaee <pcint12ActivateInterrupt+0x22>
     ad0:	30 f4       	brcc	.+12     	; 0xade <pcint12ActivateInterrupt+0x12>
     ad2:	88 23       	and	r24, r24
     ad4:	49 f0       	breq	.+18     	; 0xae8 <pcint12ActivateInterrupt+0x1c>
     ad6:	81 30       	cpi	r24, 0x01	; 1
     ad8:	a9 f4       	brne	.+42     	; 0xb04 <pcint12ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC4); setBit(DDRC, PC4);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC4); setBit(DDRC, PC4);	break;
     ada:	44 9a       	sbi	0x08, 4	; 8
     adc:	06 c0       	rjmp	.+12     	; 0xaea <pcint12ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint12 and configures port mode in PC4
 * -------------------------------------------------------------------------- */

resultValue_t pcint12ActivateInterrupt(portMode_t port)
{
	switch(port){
     ade:	83 30       	cpi	r24, 0x03	; 3
     ae0:	41 f0       	breq	.+16     	; 0xaf2 <pcint12ActivateInterrupt+0x26>
     ae2:	8f 3f       	cpi	r24, 0xFF	; 255
     ae4:	41 f0       	breq	.+16     	; 0xaf6 <pcint12ActivateInterrupt+0x2a>
     ae6:	0e c0       	rjmp	.+28     	; 0xb04 <pcint12ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC4); setBit(DDRC, PC4);	break;
     ae8:	44 98       	cbi	0x08, 4	; 8
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC4); setBit(DDRC, PC4);	break;
     aea:	3c 9a       	sbi	0x07, 4	; 7
     aec:	04 c0       	rjmp	.+8      	; 0xaf6 <pcint12ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTC, PC4); clrBit(DDRC, PC4);	break;
     aee:	44 98       	cbi	0x08, 4	; 8
     af0:	01 c0       	rjmp	.+2      	; 0xaf4 <pcint12ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTC, PC4); clrBit(DDRC, PC4);	break;
     af2:	44 9a       	sbi	0x08, 4	; 8
     af4:	3c 98       	cbi	0x07, 4	; 7
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK1, PCINT12);
     af6:	80 91 6c 00 	lds	r24, 0x006C
     afa:	80 61       	ori	r24, 0x10	; 16
     afc:	80 93 6c 00 	sts	0x006C, r24
	return RESULT_OK;
     b00:	80 e0       	ldi	r24, 0x00	; 0
     b02:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC4); setBit(DDRC, PC4);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC4); setBit(DDRC, PC4);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTC, PC4); clrBit(DDRC, PC4);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTC, PC4); clrBit(DDRC, PC4);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     b04:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK1, PCINT12);
	return RESULT_OK;
}
     b06:	08 95       	ret

00000b08 <pcint12DeactivateInterrupt>:
 * Deactivates the external interrupt pcint12 in PC4
 * -------------------------------------------------------------------------- */

void pcint12DeactivateInterrupt(void)
{
	clrBit(PCMSK1, PCINT12);
     b08:	ec e6       	ldi	r30, 0x6C	; 108
     b0a:	f0 e0       	ldi	r31, 0x00	; 0
     b0c:	80 81       	ld	r24, Z
     b0e:	8f 7e       	andi	r24, 0xEF	; 239
     b10:	80 83       	st	Z, r24
     b12:	08 95       	ret

00000b14 <pcint13ActivateInterrupt>:
 * Activates the external interrupt pcint13 and configures port mode in PC5
 * -------------------------------------------------------------------------- */

resultValue_t pcint13ActivateInterrupt(portMode_t port)
{
	switch(port){
     b14:	82 30       	cpi	r24, 0x02	; 2
     b16:	79 f0       	breq	.+30     	; 0xb36 <pcint13ActivateInterrupt+0x22>
     b18:	30 f4       	brcc	.+12     	; 0xb26 <pcint13ActivateInterrupt+0x12>
     b1a:	88 23       	and	r24, r24
     b1c:	49 f0       	breq	.+18     	; 0xb30 <pcint13ActivateInterrupt+0x1c>
     b1e:	81 30       	cpi	r24, 0x01	; 1
     b20:	a9 f4       	brne	.+42     	; 0xb4c <pcint13ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC5); setBit(DDRC, PC5);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC5); setBit(DDRC, PC5);	break;
     b22:	45 9a       	sbi	0x08, 5	; 8
     b24:	06 c0       	rjmp	.+12     	; 0xb32 <pcint13ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint13 and configures port mode in PC5
 * -------------------------------------------------------------------------- */

resultValue_t pcint13ActivateInterrupt(portMode_t port)
{
	switch(port){
     b26:	83 30       	cpi	r24, 0x03	; 3
     b28:	41 f0       	breq	.+16     	; 0xb3a <pcint13ActivateInterrupt+0x26>
     b2a:	8f 3f       	cpi	r24, 0xFF	; 255
     b2c:	41 f0       	breq	.+16     	; 0xb3e <pcint13ActivateInterrupt+0x2a>
     b2e:	0e c0       	rjmp	.+28     	; 0xb4c <pcint13ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC5); setBit(DDRC, PC5);	break;
     b30:	45 98       	cbi	0x08, 5	; 8
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC5); setBit(DDRC, PC5);	break;
     b32:	3d 9a       	sbi	0x07, 5	; 7
     b34:	04 c0       	rjmp	.+8      	; 0xb3e <pcint13ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTC, PC5); clrBit(DDRC, PC5);	break;
     b36:	45 98       	cbi	0x08, 5	; 8
     b38:	01 c0       	rjmp	.+2      	; 0xb3c <pcint13ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTC, PC5); clrBit(DDRC, PC5);	break;
     b3a:	45 9a       	sbi	0x08, 5	; 8
     b3c:	3d 98       	cbi	0x07, 5	; 7
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK1, PCINT13);
     b3e:	80 91 6c 00 	lds	r24, 0x006C
     b42:	80 62       	ori	r24, 0x20	; 32
     b44:	80 93 6c 00 	sts	0x006C, r24
	return RESULT_OK;
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC5); setBit(DDRC, PC5);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC5); setBit(DDRC, PC5);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTC, PC5); clrBit(DDRC, PC5);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTC, PC5); clrBit(DDRC, PC5);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     b4c:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK1, PCINT13);
	return RESULT_OK;
}
     b4e:	08 95       	ret

00000b50 <pcint13DeactivateInterrupt>:
 * Deactivates the external interrupt pcint13 in PC5
 * -------------------------------------------------------------------------- */

void pcint13DeactivateInterrupt(void)
{
	clrBit(PCMSK1, PCINT13);
     b50:	ec e6       	ldi	r30, 0x6C	; 108
     b52:	f0 e0       	ldi	r31, 0x00	; 0
     b54:	80 81       	ld	r24, Z
     b56:	8f 7d       	andi	r24, 0xDF	; 223
     b58:	80 83       	st	Z, r24
     b5a:	08 95       	ret

00000b5c <pcint14ActivateInterrupt>:
 * Activates the external interrupt pcint14 and configures port mode in PC6
 * -------------------------------------------------------------------------- */

resultValue_t pcint14ActivateInterrupt(portMode_t port)
{
	switch(port){
     b5c:	82 30       	cpi	r24, 0x02	; 2
     b5e:	79 f0       	breq	.+30     	; 0xb7e <pcint14ActivateInterrupt+0x22>
     b60:	30 f4       	brcc	.+12     	; 0xb6e <pcint14ActivateInterrupt+0x12>
     b62:	88 23       	and	r24, r24
     b64:	49 f0       	breq	.+18     	; 0xb78 <pcint14ActivateInterrupt+0x1c>
     b66:	81 30       	cpi	r24, 0x01	; 1
     b68:	a9 f4       	brne	.+42     	; 0xb94 <pcint14ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC6); setBit(DDRC, PC6);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC6); setBit(DDRC, PC6);	break;
     b6a:	46 9a       	sbi	0x08, 6	; 8
     b6c:	06 c0       	rjmp	.+12     	; 0xb7a <pcint14ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint14 and configures port mode in PC6
 * -------------------------------------------------------------------------- */

resultValue_t pcint14ActivateInterrupt(portMode_t port)
{
	switch(port){
     b6e:	83 30       	cpi	r24, 0x03	; 3
     b70:	41 f0       	breq	.+16     	; 0xb82 <pcint14ActivateInterrupt+0x26>
     b72:	8f 3f       	cpi	r24, 0xFF	; 255
     b74:	41 f0       	breq	.+16     	; 0xb86 <pcint14ActivateInterrupt+0x2a>
     b76:	0e c0       	rjmp	.+28     	; 0xb94 <pcint14ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC6); setBit(DDRC, PC6);	break;
     b78:	46 98       	cbi	0x08, 6	; 8
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC6); setBit(DDRC, PC6);	break;
     b7a:	3e 9a       	sbi	0x07, 6	; 7
     b7c:	04 c0       	rjmp	.+8      	; 0xb86 <pcint14ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTC, PC6); clrBit(DDRC, PC6);	break;
     b7e:	46 98       	cbi	0x08, 6	; 8
     b80:	01 c0       	rjmp	.+2      	; 0xb84 <pcint14ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTC, PC6); clrBit(DDRC, PC6);	break;
     b82:	46 9a       	sbi	0x08, 6	; 8
     b84:	3e 98       	cbi	0x07, 6	; 7
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK1, PCINT14);
     b86:	80 91 6c 00 	lds	r24, 0x006C
     b8a:	80 64       	ori	r24, 0x40	; 64
     b8c:	80 93 6c 00 	sts	0x006C, r24
	return RESULT_OK;
     b90:	80 e0       	ldi	r24, 0x00	; 0
     b92:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTC, PC6); setBit(DDRC, PC6);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTC, PC6); setBit(DDRC, PC6);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTC, PC6); clrBit(DDRC, PC6);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTC, PC6); clrBit(DDRC, PC6);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     b94:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK1, PCINT14);
	return RESULT_OK;
}
     b96:	08 95       	ret

00000b98 <pcint14DeactivateInterrupt>:
 * Deactivates the external interrupt pcint14 in PC6
 * -------------------------------------------------------------------------- */

void pcint14DeactivateInterrupt(void)
{
	clrBit(PCMSK1, PCINT14);
     b98:	ec e6       	ldi	r30, 0x6C	; 108
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	8f 7b       	andi	r24, 0xBF	; 191
     ba0:	80 83       	st	Z, r24
     ba2:	08 95       	ret

00000ba4 <pcint23_16Enable>:
 * Enables the external interrupt pcint in port D
 * -------------------------------------------------------------------------- */

void pcint23_16Enable(void)
{
	setBit(PCICR, PCIE2);
     ba4:	e8 e6       	ldi	r30, 0x68	; 104
     ba6:	f0 e0       	ldi	r31, 0x00	; 0
     ba8:	80 81       	ld	r24, Z
     baa:	84 60       	ori	r24, 0x04	; 4
     bac:	80 83       	st	Z, r24
     bae:	08 95       	ret

00000bb0 <pcint23_16Disable>:
 * Disables the external interrupt pcint in port D
 * -------------------------------------------------------------------------- */

void pcint23_16Disable(void)
{
	clrBit(PCICR, PCIE2);
     bb0:	e8 e6       	ldi	r30, 0x68	; 104
     bb2:	f0 e0       	ldi	r31, 0x00	; 0
     bb4:	80 81       	ld	r24, Z
     bb6:	8b 7f       	andi	r24, 0xFB	; 251
     bb8:	80 83       	st	Z, r24
     bba:	08 95       	ret

00000bbc <pcint23_16ClearInterruptRequest>:
 * Disables the external interrupt pcint in port D
 * -------------------------------------------------------------------------- */

void pcint23_16ClearInterruptRequest(void)
{
	setBit(PCIFR, PCIF2);
     bbc:	da 9a       	sbi	0x1b, 2	; 27
     bbe:	08 95       	ret

00000bc0 <pcint16ActivateInterrupt>:
 * Activates the external interrupt pcint16 and configures port mode in PD0
 * -------------------------------------------------------------------------- */

resultValue_t pcint16ActivateInterrupt(portMode_t port)
{
	switch(port){
     bc0:	82 30       	cpi	r24, 0x02	; 2
     bc2:	79 f0       	breq	.+30     	; 0xbe2 <pcint16ActivateInterrupt+0x22>
     bc4:	30 f4       	brcc	.+12     	; 0xbd2 <pcint16ActivateInterrupt+0x12>
     bc6:	88 23       	and	r24, r24
     bc8:	49 f0       	breq	.+18     	; 0xbdc <pcint16ActivateInterrupt+0x1c>
     bca:	81 30       	cpi	r24, 0x01	; 1
     bcc:	a9 f4       	brne	.+42     	; 0xbf8 <pcint16ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD0); setBit(DDRD, PD0);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD0); setBit(DDRD, PD0);	break;
     bce:	58 9a       	sbi	0x0b, 0	; 11
     bd0:	06 c0       	rjmp	.+12     	; 0xbde <pcint16ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint16 and configures port mode in PD0
 * -------------------------------------------------------------------------- */

resultValue_t pcint16ActivateInterrupt(portMode_t port)
{
	switch(port){
     bd2:	83 30       	cpi	r24, 0x03	; 3
     bd4:	41 f0       	breq	.+16     	; 0xbe6 <pcint16ActivateInterrupt+0x26>
     bd6:	8f 3f       	cpi	r24, 0xFF	; 255
     bd8:	41 f0       	breq	.+16     	; 0xbea <pcint16ActivateInterrupt+0x2a>
     bda:	0e c0       	rjmp	.+28     	; 0xbf8 <pcint16ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD0); setBit(DDRD, PD0);	break;
     bdc:	58 98       	cbi	0x0b, 0	; 11
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD0); setBit(DDRD, PD0);	break;
     bde:	50 9a       	sbi	0x0a, 0	; 10
     be0:	04 c0       	rjmp	.+8      	; 0xbea <pcint16ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD0); clrBit(DDRD, PD0);	break;
     be2:	58 98       	cbi	0x0b, 0	; 11
     be4:	01 c0       	rjmp	.+2      	; 0xbe8 <pcint16ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD0); clrBit(DDRD, PD0);	break;
     be6:	58 9a       	sbi	0x0b, 0	; 11
     be8:	50 98       	cbi	0x0a, 0	; 10
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK2, PCINT16);
     bea:	80 91 6d 00 	lds	r24, 0x006D
     bee:	81 60       	ori	r24, 0x01	; 1
     bf0:	80 93 6d 00 	sts	0x006D, r24
	return RESULT_OK;
     bf4:	80 e0       	ldi	r24, 0x00	; 0
     bf6:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD0); setBit(DDRD, PD0);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD0); setBit(DDRD, PD0);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD0); clrBit(DDRD, PD0);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD0); clrBit(DDRD, PD0);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     bf8:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK2, PCINT16);
	return RESULT_OK;
}
     bfa:	08 95       	ret

00000bfc <pcint16DeactivateInterrupt>:
 * Deactivates the external interrupt pcint16 in PD0
 * -------------------------------------------------------------------------- */

void pcint16DeactivateInterrupt(void)
{
	clrBit(PCMSK2, PCINT16);
     bfc:	ed e6       	ldi	r30, 0x6D	; 109
     bfe:	f0 e0       	ldi	r31, 0x00	; 0
     c00:	80 81       	ld	r24, Z
     c02:	8e 7f       	andi	r24, 0xFE	; 254
     c04:	80 83       	st	Z, r24
     c06:	08 95       	ret

00000c08 <pcint17ActivateInterrupt>:
 * Activates the external interrupt pcint17 and configures port mode in PD1
 * -------------------------------------------------------------------------- */

resultValue_t pcint17ActivateInterrupt(portMode_t port)
{
	switch(port){
     c08:	82 30       	cpi	r24, 0x02	; 2
     c0a:	79 f0       	breq	.+30     	; 0xc2a <pcint17ActivateInterrupt+0x22>
     c0c:	30 f4       	brcc	.+12     	; 0xc1a <pcint17ActivateInterrupt+0x12>
     c0e:	88 23       	and	r24, r24
     c10:	49 f0       	breq	.+18     	; 0xc24 <pcint17ActivateInterrupt+0x1c>
     c12:	81 30       	cpi	r24, 0x01	; 1
     c14:	a9 f4       	brne	.+42     	; 0xc40 <pcint17ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD1); setBit(DDRD, PD1);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD1); setBit(DDRD, PD1);	break;
     c16:	59 9a       	sbi	0x0b, 1	; 11
     c18:	06 c0       	rjmp	.+12     	; 0xc26 <pcint17ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint17 and configures port mode in PD1
 * -------------------------------------------------------------------------- */

resultValue_t pcint17ActivateInterrupt(portMode_t port)
{
	switch(port){
     c1a:	83 30       	cpi	r24, 0x03	; 3
     c1c:	41 f0       	breq	.+16     	; 0xc2e <pcint17ActivateInterrupt+0x26>
     c1e:	8f 3f       	cpi	r24, 0xFF	; 255
     c20:	41 f0       	breq	.+16     	; 0xc32 <pcint17ActivateInterrupt+0x2a>
     c22:	0e c0       	rjmp	.+28     	; 0xc40 <pcint17ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD1); setBit(DDRD, PD1);	break;
     c24:	59 98       	cbi	0x0b, 1	; 11
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD1); setBit(DDRD, PD1);	break;
     c26:	51 9a       	sbi	0x0a, 1	; 10
     c28:	04 c0       	rjmp	.+8      	; 0xc32 <pcint17ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD1); clrBit(DDRD, PD1);	break;
     c2a:	59 98       	cbi	0x0b, 1	; 11
     c2c:	01 c0       	rjmp	.+2      	; 0xc30 <pcint17ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD1); clrBit(DDRD, PD1);	break;
     c2e:	59 9a       	sbi	0x0b, 1	; 11
     c30:	51 98       	cbi	0x0a, 1	; 10
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK2, PCINT17);
     c32:	80 91 6d 00 	lds	r24, 0x006D
     c36:	82 60       	ori	r24, 0x02	; 2
     c38:	80 93 6d 00 	sts	0x006D, r24
	return RESULT_OK;
     c3c:	80 e0       	ldi	r24, 0x00	; 0
     c3e:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD1); setBit(DDRD, PD1);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD1); setBit(DDRD, PD1);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD1); clrBit(DDRD, PD1);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD1); clrBit(DDRD, PD1);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     c40:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK2, PCINT17);
	return RESULT_OK;
}
     c42:	08 95       	ret

00000c44 <pcint17DeactivateInterrupt>:
 * Deactivates the external interrupt pcint17 in PD1
 * -------------------------------------------------------------------------- */

void pcint17DeactivateInterrupt(void)
{
	clrBit(PCMSK2, PCINT17);
     c44:	ed e6       	ldi	r30, 0x6D	; 109
     c46:	f0 e0       	ldi	r31, 0x00	; 0
     c48:	80 81       	ld	r24, Z
     c4a:	8d 7f       	andi	r24, 0xFD	; 253
     c4c:	80 83       	st	Z, r24
     c4e:	08 95       	ret

00000c50 <pcint18ActivateInterrupt>:
 * Activates the external interrupt pcint18 and configures port mode in PD2
 * -------------------------------------------------------------------------- */

resultValue_t pcint18ActivateInterrupt(portMode_t port)
{
	switch(port){
     c50:	82 30       	cpi	r24, 0x02	; 2
     c52:	79 f0       	breq	.+30     	; 0xc72 <pcint18ActivateInterrupt+0x22>
     c54:	30 f4       	brcc	.+12     	; 0xc62 <pcint18ActivateInterrupt+0x12>
     c56:	88 23       	and	r24, r24
     c58:	49 f0       	breq	.+18     	; 0xc6c <pcint18ActivateInterrupt+0x1c>
     c5a:	81 30       	cpi	r24, 0x01	; 1
     c5c:	a9 f4       	brne	.+42     	; 0xc88 <pcint18ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD2); setBit(DDRD, PD2);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD2); setBit(DDRD, PD2);	break;
     c5e:	5a 9a       	sbi	0x0b, 2	; 11
     c60:	06 c0       	rjmp	.+12     	; 0xc6e <pcint18ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint18 and configures port mode in PD2
 * -------------------------------------------------------------------------- */

resultValue_t pcint18ActivateInterrupt(portMode_t port)
{
	switch(port){
     c62:	83 30       	cpi	r24, 0x03	; 3
     c64:	41 f0       	breq	.+16     	; 0xc76 <pcint18ActivateInterrupt+0x26>
     c66:	8f 3f       	cpi	r24, 0xFF	; 255
     c68:	41 f0       	breq	.+16     	; 0xc7a <pcint18ActivateInterrupt+0x2a>
     c6a:	0e c0       	rjmp	.+28     	; 0xc88 <pcint18ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD2); setBit(DDRD, PD2);	break;
     c6c:	5a 98       	cbi	0x0b, 2	; 11
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD2); setBit(DDRD, PD2);	break;
     c6e:	52 9a       	sbi	0x0a, 2	; 10
     c70:	04 c0       	rjmp	.+8      	; 0xc7a <pcint18ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD2); clrBit(DDRD, PD2);	break;
     c72:	5a 98       	cbi	0x0b, 2	; 11
     c74:	01 c0       	rjmp	.+2      	; 0xc78 <pcint18ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD2); clrBit(DDRD, PD2);	break;
     c76:	5a 9a       	sbi	0x0b, 2	; 11
     c78:	52 98       	cbi	0x0a, 2	; 10
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK2, PCINT18);
     c7a:	80 91 6d 00 	lds	r24, 0x006D
     c7e:	84 60       	ori	r24, 0x04	; 4
     c80:	80 93 6d 00 	sts	0x006D, r24
	return RESULT_OK;
     c84:	80 e0       	ldi	r24, 0x00	; 0
     c86:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD2); setBit(DDRD, PD2);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD2); setBit(DDRD, PD2);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD2); clrBit(DDRD, PD2);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD2); clrBit(DDRD, PD2);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     c88:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK2, PCINT18);
	return RESULT_OK;
}
     c8a:	08 95       	ret

00000c8c <pcint18DeactivateInterrupt>:
 * Deactivates the external interrupt pcint18 in PD2
 * -------------------------------------------------------------------------- */

void pcint18DeactivateInterrupt(void)
{
	clrBit(PCMSK2, PCINT18);
     c8c:	ed e6       	ldi	r30, 0x6D	; 109
     c8e:	f0 e0       	ldi	r31, 0x00	; 0
     c90:	80 81       	ld	r24, Z
     c92:	8b 7f       	andi	r24, 0xFB	; 251
     c94:	80 83       	st	Z, r24
     c96:	08 95       	ret

00000c98 <pcint19ActivateInterrupt>:
 * Activates the external interrupt pcint19 and configures port mode in PD3
 * -------------------------------------------------------------------------- */

resultValue_t pcint19ActivateInterrupt(portMode_t port)
{
	switch(port){
     c98:	82 30       	cpi	r24, 0x02	; 2
     c9a:	79 f0       	breq	.+30     	; 0xcba <pcint19ActivateInterrupt+0x22>
     c9c:	30 f4       	brcc	.+12     	; 0xcaa <pcint19ActivateInterrupt+0x12>
     c9e:	88 23       	and	r24, r24
     ca0:	49 f0       	breq	.+18     	; 0xcb4 <pcint19ActivateInterrupt+0x1c>
     ca2:	81 30       	cpi	r24, 0x01	; 1
     ca4:	a9 f4       	brne	.+42     	; 0xcd0 <pcint19ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD3); setBit(DDRD, PD3);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD3); setBit(DDRD, PD3);	break;
     ca6:	5b 9a       	sbi	0x0b, 3	; 11
     ca8:	06 c0       	rjmp	.+12     	; 0xcb6 <pcint19ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint19 and configures port mode in PD3
 * -------------------------------------------------------------------------- */

resultValue_t pcint19ActivateInterrupt(portMode_t port)
{
	switch(port){
     caa:	83 30       	cpi	r24, 0x03	; 3
     cac:	41 f0       	breq	.+16     	; 0xcbe <pcint19ActivateInterrupt+0x26>
     cae:	8f 3f       	cpi	r24, 0xFF	; 255
     cb0:	41 f0       	breq	.+16     	; 0xcc2 <pcint19ActivateInterrupt+0x2a>
     cb2:	0e c0       	rjmp	.+28     	; 0xcd0 <pcint19ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD3); setBit(DDRD, PD3);	break;
     cb4:	5b 98       	cbi	0x0b, 3	; 11
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD3); setBit(DDRD, PD3);	break;
     cb6:	53 9a       	sbi	0x0a, 3	; 10
     cb8:	04 c0       	rjmp	.+8      	; 0xcc2 <pcint19ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD3); clrBit(DDRD, PD3);	break;
     cba:	5b 98       	cbi	0x0b, 3	; 11
     cbc:	01 c0       	rjmp	.+2      	; 0xcc0 <pcint19ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD3); clrBit(DDRD, PD3);	break;
     cbe:	5b 9a       	sbi	0x0b, 3	; 11
     cc0:	53 98       	cbi	0x0a, 3	; 10
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK2, PCINT19);
     cc2:	80 91 6d 00 	lds	r24, 0x006D
     cc6:	88 60       	ori	r24, 0x08	; 8
     cc8:	80 93 6d 00 	sts	0x006D, r24
	return RESULT_OK;
     ccc:	80 e0       	ldi	r24, 0x00	; 0
     cce:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD3); setBit(DDRD, PD3);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD3); setBit(DDRD, PD3);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD3); clrBit(DDRD, PD3);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD3); clrBit(DDRD, PD3);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     cd0:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK2, PCINT19);
	return RESULT_OK;
}
     cd2:	08 95       	ret

00000cd4 <pcint19DeactivateInterrupt>:
 * Deactivates the external interrupt pcint19 in PD3
 * -------------------------------------------------------------------------- */

void pcint19DeactivateInterrupt(void)
{
	clrBit(PCMSK2, PCINT19);
     cd4:	ed e6       	ldi	r30, 0x6D	; 109
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	80 81       	ld	r24, Z
     cda:	87 7f       	andi	r24, 0xF7	; 247
     cdc:	80 83       	st	Z, r24
     cde:	08 95       	ret

00000ce0 <pcint20ActivateInterrupt>:
 * Activates the external interrupt pcint20 and configures port mode in PD4
 * -------------------------------------------------------------------------- */

resultValue_t pcint20ActivateInterrupt(portMode_t port)
{
	switch(port){
     ce0:	82 30       	cpi	r24, 0x02	; 2
     ce2:	79 f0       	breq	.+30     	; 0xd02 <pcint20ActivateInterrupt+0x22>
     ce4:	30 f4       	brcc	.+12     	; 0xcf2 <pcint20ActivateInterrupt+0x12>
     ce6:	88 23       	and	r24, r24
     ce8:	49 f0       	breq	.+18     	; 0xcfc <pcint20ActivateInterrupt+0x1c>
     cea:	81 30       	cpi	r24, 0x01	; 1
     cec:	a9 f4       	brne	.+42     	; 0xd18 <pcint20ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD4); setBit(DDRD, PD4);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD4); setBit(DDRD, PD4);	break;
     cee:	5c 9a       	sbi	0x0b, 4	; 11
     cf0:	06 c0       	rjmp	.+12     	; 0xcfe <pcint20ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint20 and configures port mode in PD4
 * -------------------------------------------------------------------------- */

resultValue_t pcint20ActivateInterrupt(portMode_t port)
{
	switch(port){
     cf2:	83 30       	cpi	r24, 0x03	; 3
     cf4:	41 f0       	breq	.+16     	; 0xd06 <pcint20ActivateInterrupt+0x26>
     cf6:	8f 3f       	cpi	r24, 0xFF	; 255
     cf8:	41 f0       	breq	.+16     	; 0xd0a <pcint20ActivateInterrupt+0x2a>
     cfa:	0e c0       	rjmp	.+28     	; 0xd18 <pcint20ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD4); setBit(DDRD, PD4);	break;
     cfc:	5c 98       	cbi	0x0b, 4	; 11
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD4); setBit(DDRD, PD4);	break;
     cfe:	54 9a       	sbi	0x0a, 4	; 10
     d00:	04 c0       	rjmp	.+8      	; 0xd0a <pcint20ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD4); clrBit(DDRD, PD4);	break;
     d02:	5c 98       	cbi	0x0b, 4	; 11
     d04:	01 c0       	rjmp	.+2      	; 0xd08 <pcint20ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD4); clrBit(DDRD, PD4);	break;
     d06:	5c 9a       	sbi	0x0b, 4	; 11
     d08:	54 98       	cbi	0x0a, 4	; 10
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK2, PCINT20);
     d0a:	80 91 6d 00 	lds	r24, 0x006D
     d0e:	80 61       	ori	r24, 0x10	; 16
     d10:	80 93 6d 00 	sts	0x006D, r24
	return RESULT_OK;
     d14:	80 e0       	ldi	r24, 0x00	; 0
     d16:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD4); setBit(DDRD, PD4);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD4); setBit(DDRD, PD4);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD4); clrBit(DDRD, PD4);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD4); clrBit(DDRD, PD4);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     d18:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK2, PCINT20);
	return RESULT_OK;
}
     d1a:	08 95       	ret

00000d1c <pcint20DeactivateInterrupt>:
 * Deactivates the external interrupt pcint20 in PD4
 * -------------------------------------------------------------------------- */

void pcint20DeactivateInterrupt(void)
{
	clrBit(PCMSK2, PCINT20);
     d1c:	ed e6       	ldi	r30, 0x6D	; 109
     d1e:	f0 e0       	ldi	r31, 0x00	; 0
     d20:	80 81       	ld	r24, Z
     d22:	8f 7e       	andi	r24, 0xEF	; 239
     d24:	80 83       	st	Z, r24
     d26:	08 95       	ret

00000d28 <pcint21ActivateInterrupt>:
 * Activates the external interrupt pcint21 and configures port mode in PD5
 * -------------------------------------------------------------------------- */

resultValue_t pcint21ActivateInterrupt(portMode_t port)
{
	switch(port){
     d28:	82 30       	cpi	r24, 0x02	; 2
     d2a:	79 f0       	breq	.+30     	; 0xd4a <pcint21ActivateInterrupt+0x22>
     d2c:	30 f4       	brcc	.+12     	; 0xd3a <pcint21ActivateInterrupt+0x12>
     d2e:	88 23       	and	r24, r24
     d30:	49 f0       	breq	.+18     	; 0xd44 <pcint21ActivateInterrupt+0x1c>
     d32:	81 30       	cpi	r24, 0x01	; 1
     d34:	a9 f4       	brne	.+42     	; 0xd60 <pcint21ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD5); setBit(DDRD, PD5);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD5); setBit(DDRD, PD5);	break;
     d36:	5d 9a       	sbi	0x0b, 5	; 11
     d38:	06 c0       	rjmp	.+12     	; 0xd46 <pcint21ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint21 and configures port mode in PD5
 * -------------------------------------------------------------------------- */

resultValue_t pcint21ActivateInterrupt(portMode_t port)
{
	switch(port){
     d3a:	83 30       	cpi	r24, 0x03	; 3
     d3c:	41 f0       	breq	.+16     	; 0xd4e <pcint21ActivateInterrupt+0x26>
     d3e:	8f 3f       	cpi	r24, 0xFF	; 255
     d40:	41 f0       	breq	.+16     	; 0xd52 <pcint21ActivateInterrupt+0x2a>
     d42:	0e c0       	rjmp	.+28     	; 0xd60 <pcint21ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD5); setBit(DDRD, PD5);	break;
     d44:	5d 98       	cbi	0x0b, 5	; 11
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD5); setBit(DDRD, PD5);	break;
     d46:	55 9a       	sbi	0x0a, 5	; 10
     d48:	04 c0       	rjmp	.+8      	; 0xd52 <pcint21ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD5); clrBit(DDRD, PD5);	break;
     d4a:	5d 98       	cbi	0x0b, 5	; 11
     d4c:	01 c0       	rjmp	.+2      	; 0xd50 <pcint21ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD5); clrBit(DDRD, PD5);	break;
     d4e:	5d 9a       	sbi	0x0b, 5	; 11
     d50:	55 98       	cbi	0x0a, 5	; 10
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK2, PCINT21);
     d52:	80 91 6d 00 	lds	r24, 0x006D
     d56:	80 62       	ori	r24, 0x20	; 32
     d58:	80 93 6d 00 	sts	0x006D, r24
	return RESULT_OK;
     d5c:	80 e0       	ldi	r24, 0x00	; 0
     d5e:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD5); setBit(DDRD, PD5);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD5); setBit(DDRD, PD5);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD5); clrBit(DDRD, PD5);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD5); clrBit(DDRD, PD5);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     d60:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK2, PCINT21);
	return RESULT_OK;
}
     d62:	08 95       	ret

00000d64 <pcint21DeactivateInterrupt>:
 * Deactivates the external interrupt pcint21 in PD5
 * -------------------------------------------------------------------------- */

void pcint21DeactivateInterrupt(void)
{
	clrBit(PCMSK2, PCINT21);
     d64:	ed e6       	ldi	r30, 0x6D	; 109
     d66:	f0 e0       	ldi	r31, 0x00	; 0
     d68:	80 81       	ld	r24, Z
     d6a:	8f 7d       	andi	r24, 0xDF	; 223
     d6c:	80 83       	st	Z, r24
     d6e:	08 95       	ret

00000d70 <pcint22ActivateInterrupt>:
 * Activates the external interrupt pcint22 and configures port mode in PD6
 * -------------------------------------------------------------------------- */

resultValue_t pcint22ActivateInterrupt(portMode_t port)
{
	switch(port){
     d70:	82 30       	cpi	r24, 0x02	; 2
     d72:	79 f0       	breq	.+30     	; 0xd92 <pcint22ActivateInterrupt+0x22>
     d74:	30 f4       	brcc	.+12     	; 0xd82 <pcint22ActivateInterrupt+0x12>
     d76:	88 23       	and	r24, r24
     d78:	49 f0       	breq	.+18     	; 0xd8c <pcint22ActivateInterrupt+0x1c>
     d7a:	81 30       	cpi	r24, 0x01	; 1
     d7c:	a9 f4       	brne	.+42     	; 0xda8 <pcint22ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD6); setBit(DDRD, PD6);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD6); setBit(DDRD, PD6);	break;
     d7e:	5e 9a       	sbi	0x0b, 6	; 11
     d80:	06 c0       	rjmp	.+12     	; 0xd8e <pcint22ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint22 and configures port mode in PD6
 * -------------------------------------------------------------------------- */

resultValue_t pcint22ActivateInterrupt(portMode_t port)
{
	switch(port){
     d82:	83 30       	cpi	r24, 0x03	; 3
     d84:	41 f0       	breq	.+16     	; 0xd96 <pcint22ActivateInterrupt+0x26>
     d86:	8f 3f       	cpi	r24, 0xFF	; 255
     d88:	41 f0       	breq	.+16     	; 0xd9a <pcint22ActivateInterrupt+0x2a>
     d8a:	0e c0       	rjmp	.+28     	; 0xda8 <pcint22ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD6); setBit(DDRD, PD6);	break;
     d8c:	5e 98       	cbi	0x0b, 6	; 11
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD6); setBit(DDRD, PD6);	break;
     d8e:	56 9a       	sbi	0x0a, 6	; 10
     d90:	04 c0       	rjmp	.+8      	; 0xd9a <pcint22ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD6); clrBit(DDRD, PD6);	break;
     d92:	5e 98       	cbi	0x0b, 6	; 11
     d94:	01 c0       	rjmp	.+2      	; 0xd98 <pcint22ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD6); clrBit(DDRD, PD6);	break;
     d96:	5e 9a       	sbi	0x0b, 6	; 11
     d98:	56 98       	cbi	0x0a, 6	; 10
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK2, PCINT22);
     d9a:	80 91 6d 00 	lds	r24, 0x006D
     d9e:	80 64       	ori	r24, 0x40	; 64
     da0:	80 93 6d 00 	sts	0x006D, r24
	return RESULT_OK;
     da4:	80 e0       	ldi	r24, 0x00	; 0
     da6:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD6); setBit(DDRD, PD6);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD6); setBit(DDRD, PD6);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD6); clrBit(DDRD, PD6);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD6); clrBit(DDRD, PD6);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     da8:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK2, PCINT22);
	return RESULT_OK;
}
     daa:	08 95       	ret

00000dac <pcint22DeactivateInterrupt>:
 * Deactivates the external interrupt pcint22 in PD6
 * -------------------------------------------------------------------------- */

void pcint22DeactivateInterrupt(void)
{
	clrBit(PCMSK2, PCINT22);
     dac:	ed e6       	ldi	r30, 0x6D	; 109
     dae:	f0 e0       	ldi	r31, 0x00	; 0
     db0:	80 81       	ld	r24, Z
     db2:	8f 7b       	andi	r24, 0xBF	; 191
     db4:	80 83       	st	Z, r24
     db6:	08 95       	ret

00000db8 <pcint23ActivateInterrupt>:
 * Activates the external interrupt pcint23 and configures port mode in PD7
 * -------------------------------------------------------------------------- */

resultValue_t pcint23ActivateInterrupt(portMode_t port)
{
	switch(port){
     db8:	82 30       	cpi	r24, 0x02	; 2
     dba:	79 f0       	breq	.+30     	; 0xdda <pcint23ActivateInterrupt+0x22>
     dbc:	30 f4       	brcc	.+12     	; 0xdca <pcint23ActivateInterrupt+0x12>
     dbe:	88 23       	and	r24, r24
     dc0:	49 f0       	breq	.+18     	; 0xdd4 <pcint23ActivateInterrupt+0x1c>
     dc2:	81 30       	cpi	r24, 0x01	; 1
     dc4:	a9 f4       	brne	.+42     	; 0xdf0 <pcint23ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD7); setBit(DDRD, PD7);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD7); setBit(DDRD, PD7);	break;
     dc6:	5f 9a       	sbi	0x0b, 7	; 11
     dc8:	06 c0       	rjmp	.+12     	; 0xdd6 <pcint23ActivateInterrupt+0x1e>
 * Activates the external interrupt pcint23 and configures port mode in PD7
 * -------------------------------------------------------------------------- */

resultValue_t pcint23ActivateInterrupt(portMode_t port)
{
	switch(port){
     dca:	83 30       	cpi	r24, 0x03	; 3
     dcc:	41 f0       	breq	.+16     	; 0xdde <pcint23ActivateInterrupt+0x26>
     dce:	8f 3f       	cpi	r24, 0xFF	; 255
     dd0:	41 f0       	breq	.+16     	; 0xde2 <pcint23ActivateInterrupt+0x2a>
     dd2:	0e c0       	rjmp	.+28     	; 0xdf0 <pcint23ActivateInterrupt+0x38>
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD7); setBit(DDRD, PD7);	break;
     dd4:	5f 98       	cbi	0x0b, 7	; 11
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD7); setBit(DDRD, PD7);	break;
     dd6:	57 9a       	sbi	0x0a, 7	; 10
     dd8:	04 c0       	rjmp	.+8      	; 0xde2 <pcint23ActivateInterrupt+0x2a>
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD7); clrBit(DDRD, PD7);	break;
     dda:	5f 98       	cbi	0x0b, 7	; 11
     ddc:	01 c0       	rjmp	.+2      	; 0xde0 <pcint23ActivateInterrupt+0x28>
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD7); clrBit(DDRD, PD7);	break;
     dde:	5f 9a       	sbi	0x0b, 7	; 11
     de0:	57 98       	cbi	0x0a, 7	; 10
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
	}
	setBit(PCMSK2, PCINT23);
     de2:	80 91 6d 00 	lds	r24, 0x006D
     de6:	80 68       	ori	r24, 0x80	; 128
     de8:	80 93 6d 00 	sts	0x006D, r24
	return RESULT_OK;
     dec:	80 e0       	ldi	r24, 0x00	; 0
     dee:	08 95       	ret
		case PORT_OUTPUT_LOW:		clrBit(PORTD, PD7); setBit(DDRD, PD7);	break;
		case PORT_OUTPUT_HIGH:		setBit(PORTD, PD7); setBit(DDRD, PD7);	break;
		case PORT_INPUT_TRISTATE:	clrBit(PORTD, PD7); clrBit(DDRD, PD7);	break;
		case PORT_INPUT_PULL_UP:	setBit(PORTD, PD7); clrBit(DDRD, PD7);	break;
		case PORT_NO_CHANGE:		break;
		default:					return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     df0:	81 e0       	ldi	r24, 0x01	; 1
	}
	setBit(PCMSK2, PCINT23);
	return RESULT_OK;
}
     df2:	08 95       	ret

00000df4 <pcint23DeactivateInterrupt>:
 * Deactivates the external interrupt pcint23 in PD7
 * -------------------------------------------------------------------------- */

void pcint23DeactivateInterrupt(void)
{
	clrBit(PCMSK2, PCINT23);
     df4:	ed e6       	ldi	r30, 0x6D	; 109
     df6:	f0 e0       	ldi	r31, 0x00	; 0
     df8:	80 81       	ld	r24, Z
     dfa:	8f 77       	andi	r24, 0x7F	; 127
     dfc:	80 83       	st	Z, r24
     dfe:	08 95       	ret

00000e00 <timer0Config>:
 * Configures the timer0 mode and prescaler
 * -------------------------------------------------------------------------- */

resultValue_t timer0Config(timerModeA_t mode, timerPrescalerValueA_t prescaler)
{
	uint8 regA = TCCR0A;
     e00:	24 b5       	in	r18, 0x24	; 36
	uint8 regB = TCCR0B;
     e02:	95 b5       	in	r25, 0x25	; 37

	if(prescaler != TIMER_A_PRESCALER_NO_CHANGE){
     e04:	6f 3f       	cpi	r22, 0xFF	; 255
     e06:	c1 f0       	breq	.+48     	; 0xe38 <timer0Config+0x38>
		regB &= ~(0x07 << CS00);
     e08:	98 7f       	andi	r25, 0xF8	; 248
		switch(prescaler){
     e0a:	46 2f       	mov	r20, r22
     e0c:	50 e0       	ldi	r21, 0x00	; 0
     e0e:	48 30       	cpi	r20, 0x08	; 8
     e10:	51 05       	cpc	r21, r1
     e12:	80 f5       	brcc	.+96     	; 0xe74 <timer0Config+0x74>
     e14:	fa 01       	movw	r30, r20
     e16:	eb 5a       	subi	r30, 0xAB	; 171
     e18:	ff 4f       	sbci	r31, 0xFF	; 255
     e1a:	0c 94 39 0d 	jmp	0x1a72	; 0x1a72 <__tablejump2__>
			case TIMER_A_CLOCK_DISABLE:					break;
			case TIMER_A_PRESCALER_OFF:					regB |= (1 << CS00);	break;
     e1e:	91 60       	ori	r25, 0x01	; 1
     e20:	0b c0       	rjmp	.+22     	; 0xe38 <timer0Config+0x38>
			case TIMER_A_PRESCALER_8:					regB |= (2 << CS00);	break;
     e22:	92 60       	ori	r25, 0x02	; 2
     e24:	09 c0       	rjmp	.+18     	; 0xe38 <timer0Config+0x38>
			case TIMER_A_PRESCALER_64:					regB |= (3 << CS00);	break;
     e26:	93 60       	ori	r25, 0x03	; 3
     e28:	07 c0       	rjmp	.+14     	; 0xe38 <timer0Config+0x38>
			case TIMER_A_PRESCALER_256:					regB |= (4 << CS00);	break;
     e2a:	94 60       	ori	r25, 0x04	; 4
     e2c:	05 c0       	rjmp	.+10     	; 0xe38 <timer0Config+0x38>
			case TIMER_A_PRESCALER_1024:				regB |= (5 << CS00);	break;
     e2e:	95 60       	ori	r25, 0x05	; 5
     e30:	03 c0       	rjmp	.+6      	; 0xe38 <timer0Config+0x38>
			case TIMER_A_PRESCALER_T0_FALLING_EDGE:		regB |= (6 << CS00);	break;
     e32:	96 60       	ori	r25, 0x06	; 6
     e34:	01 c0       	rjmp	.+2      	; 0xe38 <timer0Config+0x38>
			case TIMER_A_PRESCALER_T0_RISING_EDGE:		regB |= (7 << CS00);	break;
     e36:	97 60       	ori	r25, 0x07	; 7
			case TIMER_A_PRESCALER_NO_CHANGE:			break;
			default:									return RESULT_TIMER_PRESCALER_VALUE_UNSUPPORTED;	break;
		}
	}

	if(mode != TIMER_A_MODE_NO_CHANGE){
     e38:	8f 3f       	cpi	r24, 0xFF	; 255
     e3a:	c1 f0       	breq	.+48     	; 0xe6c <timer0Config+0x6c>
		regA &= ~(0x03 << WGM00);
     e3c:	2c 7f       	andi	r18, 0xFC	; 252
		clrBit(regB, WGM02);
     e3e:	97 7f       	andi	r25, 0xF7	; 247
		switch(mode){
     e40:	82 30       	cpi	r24, 0x02	; 2
     e42:	69 f0       	breq	.+26     	; 0xe5e <timer0Config+0x5e>
     e44:	28 f4       	brcc	.+10     	; 0xe50 <timer0Config+0x50>
     e46:	88 23       	and	r24, r24
     e48:	89 f0       	breq	.+34     	; 0xe6c <timer0Config+0x6c>
     e4a:	81 30       	cpi	r24, 0x01	; 1
     e4c:	59 f0       	breq	.+22     	; 0xe64 <timer0Config+0x64>
     e4e:	14 c0       	rjmp	.+40     	; 0xe78 <timer0Config+0x78>
     e50:	85 30       	cpi	r24, 0x05	; 5
     e52:	39 f0       	breq	.+14     	; 0xe62 <timer0Config+0x62>
     e54:	87 30       	cpi	r24, 0x07	; 7
     e56:	41 f0       	breq	.+16     	; 0xe68 <timer0Config+0x68>
     e58:	83 30       	cpi	r24, 0x03	; 3
     e5a:	71 f4       	brne	.+28     	; 0xe78 <timer0Config+0x78>
     e5c:	06 c0       	rjmp	.+12     	; 0xe6a <timer0Config+0x6a>
			case TIMER_A_MODE_NORMAL:						break;
			case TIMER_A_MODE_PWM_PHASE_CORRECTED_MAX:		regA |= (1 << WGM00);	break;
			case TIMER_A_MODE_CTC:							regA |= (2 << WGM00);	break;
     e5e:	22 60       	ori	r18, 0x02	; 2
     e60:	05 c0       	rjmp	.+10     	; 0xe6c <timer0Config+0x6c>
			case TIMER_A_MODE_FAST_PWM_MAX:					regA |= (3 << WGM00);	break;
			case TIMER_A_MODE_PWM_PHASE_CORRECTED_OCRA:		setBit(regB, WGM02);regA |= (1 << WGM00);	break;
     e62:	98 60       	ori	r25, 0x08	; 8
     e64:	21 60       	ori	r18, 0x01	; 1
     e66:	02 c0       	rjmp	.+4      	; 0xe6c <timer0Config+0x6c>
			case TIMER_A_MODE_FAST_PWM_OCRA:				setBit(regB, WGM02);regA |= (3 << WGM00);	break;
     e68:	98 60       	ori	r25, 0x08	; 8
     e6a:	23 60       	ori	r18, 0x03	; 3
			case TIMER_A_MODE_NO_CHANGE:					break;
			default:										return RESULT_TIMER_MODE_VALUE_UNSUPPORTED;	break;
		}
	}
	TCCR0A = regA;
     e6c:	24 bd       	out	0x24, r18	; 36
	TCCR0B = regB;
     e6e:	95 bd       	out	0x25, r25	; 37

	return RESULT_OK;
     e70:	80 e0       	ldi	r24, 0x00	; 0
     e72:	08 95       	ret
			case TIMER_A_PRESCALER_256:					regB |= (4 << CS00);	break;
			case TIMER_A_PRESCALER_1024:				regB |= (5 << CS00);	break;
			case TIMER_A_PRESCALER_T0_FALLING_EDGE:		regB |= (6 << CS00);	break;
			case TIMER_A_PRESCALER_T0_RISING_EDGE:		regB |= (7 << CS00);	break;
			case TIMER_A_PRESCALER_NO_CHANGE:			break;
			default:									return RESULT_TIMER_PRESCALER_VALUE_UNSUPPORTED;	break;
     e74:	83 e0       	ldi	r24, 0x03	; 3
     e76:	08 95       	ret
			case TIMER_A_MODE_CTC:							regA |= (2 << WGM00);	break;
			case TIMER_A_MODE_FAST_PWM_MAX:					regA |= (3 << WGM00);	break;
			case TIMER_A_MODE_PWM_PHASE_CORRECTED_OCRA:		setBit(regB, WGM02);regA |= (1 << WGM00);	break;
			case TIMER_A_MODE_FAST_PWM_OCRA:				setBit(regB, WGM02);regA |= (3 << WGM00);	break;
			case TIMER_A_MODE_NO_CHANGE:					break;
			default:										return RESULT_TIMER_MODE_VALUE_UNSUPPORTED;	break;
     e78:	84 e0       	ldi	r24, 0x04	; 4
	}
	TCCR0A = regA;
	TCCR0B = regB;

	return RESULT_OK;
}
     e7a:	08 95       	ret

00000e7c <timer0OutputConfig>:
 * Configures the timer0 compare outputs
 * -------------------------------------------------------------------------- */

resultValue_t timer0OutputConfig(timerOutput_t compA, timerOutput_t compB)
{
	uint8 reg = TCCR0A;
     e7c:	94 b5       	in	r25, 0x24	; 36

	if(compA != TIMER_PORT_NO_CHANGE){
     e7e:	8f 3f       	cpi	r24, 0xFF	; 255
     e80:	69 f0       	breq	.+26     	; 0xe9c <timer0OutputConfig+0x20>
		reg &= ~(0x03 << COM0A0);
     e82:	9f 73       	andi	r25, 0x3F	; 63
		switch(compA){
     e84:	81 30       	cpi	r24, 0x01	; 1
     e86:	39 f0       	breq	.+14     	; 0xe96 <timer0OutputConfig+0x1a>
     e88:	48 f0       	brcs	.+18     	; 0xe9c <timer0OutputConfig+0x20>
     e8a:	82 30       	cpi	r24, 0x02	; 2
     e8c:	31 f0       	breq	.+12     	; 0xe9a <timer0OutputConfig+0x1e>
     e8e:	83 30       	cpi	r24, 0x03	; 3
     e90:	e1 f4       	brne	.+56     	; 0xeca <timer0OutputConfig+0x4e>
			case TIMER_PORT_NORMAL:				break;
			case TIMER_PORT_TOGGLE_ON_COMPARE:	reg |= (1 << COM0A0);	break;
			case TIMER_PORT_CLEAR_ON_COMPARE:	reg |= (2 << COM0A0);	break;
			case TIMER_PORT_SET_ON_COMPARE:		reg |= (3 << COM0A0);	break;
     e92:	90 6c       	ori	r25, 0xC0	; 192
     e94:	03 c0       	rjmp	.+6      	; 0xe9c <timer0OutputConfig+0x20>

	if(compA != TIMER_PORT_NO_CHANGE){
		reg &= ~(0x03 << COM0A0);
		switch(compA){
			case TIMER_PORT_NORMAL:				break;
			case TIMER_PORT_TOGGLE_ON_COMPARE:	reg |= (1 << COM0A0);	break;
     e96:	90 64       	ori	r25, 0x40	; 64
     e98:	01 c0       	rjmp	.+2      	; 0xe9c <timer0OutputConfig+0x20>
			case TIMER_PORT_CLEAR_ON_COMPARE:	reg |= (2 << COM0A0);	break;
     e9a:	90 68       	ori	r25, 0x80	; 128
			case TIMER_PORT_SET_ON_COMPARE:		reg |= (3 << COM0A0);	break;
			case TIMER_PORT_NO_CHANGE:			break;
			default:							return RESULT_PORT_VALUE_UNSUPPORTED;	break;
		}
	}
	if(compB != TIMER_PORT_NO_CHANGE){
     e9c:	6f 3f       	cpi	r22, 0xFF	; 255
     e9e:	91 f0       	breq	.+36     	; 0xec4 <timer0OutputConfig+0x48>
		reg &= ~(0x03 << COM0B0);
     ea0:	9f 7c       	andi	r25, 0xCF	; 207
		switch(compA){
     ea2:	82 30       	cpi	r24, 0x02	; 2
     ea4:	61 f0       	breq	.+24     	; 0xebe <timer0OutputConfig+0x42>
     ea6:	30 f4       	brcc	.+12     	; 0xeb4 <timer0OutputConfig+0x38>
     ea8:	88 23       	and	r24, r24
     eaa:	61 f0       	breq	.+24     	; 0xec4 <timer0OutputConfig+0x48>
     eac:	81 30       	cpi	r24, 0x01	; 1
     eae:	69 f4       	brne	.+26     	; 0xeca <timer0OutputConfig+0x4e>
			case TIMER_PORT_NORMAL:				break;
			case TIMER_PORT_TOGGLE_ON_COMPARE:	reg |= (1 << COM0B0);	break;
     eb0:	90 61       	ori	r25, 0x10	; 16
     eb2:	08 c0       	rjmp	.+16     	; 0xec4 <timer0OutputConfig+0x48>
			default:							return RESULT_PORT_VALUE_UNSUPPORTED;	break;
		}
	}
	if(compB != TIMER_PORT_NO_CHANGE){
		reg &= ~(0x03 << COM0B0);
		switch(compA){
     eb4:	83 30       	cpi	r24, 0x03	; 3
     eb6:	29 f0       	breq	.+10     	; 0xec2 <timer0OutputConfig+0x46>
     eb8:	8f 3f       	cpi	r24, 0xFF	; 255
     eba:	21 f0       	breq	.+8      	; 0xec4 <timer0OutputConfig+0x48>
     ebc:	06 c0       	rjmp	.+12     	; 0xeca <timer0OutputConfig+0x4e>
			case TIMER_PORT_NORMAL:				break;
			case TIMER_PORT_TOGGLE_ON_COMPARE:	reg |= (1 << COM0B0);	break;
			case TIMER_PORT_CLEAR_ON_COMPARE:	reg |= (2 << COM0B0);	break;
     ebe:	90 62       	ori	r25, 0x20	; 32
     ec0:	01 c0       	rjmp	.+2      	; 0xec4 <timer0OutputConfig+0x48>
			case TIMER_PORT_SET_ON_COMPARE:		reg |= (3 << COM0B0);	break;
     ec2:	90 63       	ori	r25, 0x30	; 48
			case TIMER_PORT_NO_CHANGE:			break;
			default:							return RESULT_PORT_VALUE_UNSUPPORTED;	break;
		}
	}
	TCCR0A = reg;
     ec4:	94 bd       	out	0x24, r25	; 36
	return RESULT_OK;
     ec6:	80 e0       	ldi	r24, 0x00	; 0
     ec8:	08 95       	ret
			case TIMER_PORT_NORMAL:				break;
			case TIMER_PORT_TOGGLE_ON_COMPARE:	reg |= (1 << COM0B0);	break;
			case TIMER_PORT_CLEAR_ON_COMPARE:	reg |= (2 << COM0B0);	break;
			case TIMER_PORT_SET_ON_COMPARE:		reg |= (3 << COM0B0);	break;
			case TIMER_PORT_NO_CHANGE:			break;
			default:							return RESULT_PORT_VALUE_UNSUPPORTED;	break;
     eca:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	TCCR0A = reg;
	return RESULT_OK;
}
     ecc:	08 95       	ret

00000ece <timer0ActivateOverflowInterrupt>:
 * Activates the timer0 overflow interrupt
 * -------------------------------------------------------------------------- */

void timer0ActivateOverflowInterrupt(void)
{
	setBit(TIMSK0, TOIE0);
     ece:	ee e6       	ldi	r30, 0x6E	; 110
     ed0:	f0 e0       	ldi	r31, 0x00	; 0
     ed2:	80 81       	ld	r24, Z
     ed4:	81 60       	ori	r24, 0x01	; 1
     ed6:	80 83       	st	Z, r24
     ed8:	08 95       	ret

00000eda <timer0DeactivateOverflowInterrupt>:
 * Deactivates the timer0 overflow interrupt
 * -------------------------------------------------------------------------- */

void timer0DeactivateOverflowInterrupt(void)
{
	clrBit(TIMSK0, TOIE0);
     eda:	ee e6       	ldi	r30, 0x6E	; 110
     edc:	f0 e0       	ldi	r31, 0x00	; 0
     ede:	80 81       	ld	r24, Z
     ee0:	8e 7f       	andi	r24, 0xFE	; 254
     ee2:	80 83       	st	Z, r24
     ee4:	08 95       	ret

00000ee6 <timer0ClearOverflowInterruptRequest>:
 * Clears the timer0 overflow interrupt request
 * -------------------------------------------------------------------------- */

void timer0ClearOverflowInterruptRequest(void)
{
	setBit(TIFR0, TOV0);
     ee6:	a8 9a       	sbi	0x15, 0	; 21
     ee8:	08 95       	ret

00000eea <timer0ActivateCompareAInterrupt>:
 * Activates the timer0 compare A interrupt
 * -------------------------------------------------------------------------- */

void timer0ActivateCompareAInterrupt(void)
{
	setBit(TIMSK0, OCIE0A);
     eea:	ee e6       	ldi	r30, 0x6E	; 110
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	80 81       	ld	r24, Z
     ef0:	82 60       	ori	r24, 0x02	; 2
     ef2:	80 83       	st	Z, r24
     ef4:	08 95       	ret

00000ef6 <timer0DeactivateCompareAInterrupt>:
 * Deactivates the timer0 compare A interrupt
 * -------------------------------------------------------------------------- */

void timer0DeactivateCompareAInterrupt(void)
{
	clrBit(TIMSK0, OCIE0A);
     ef6:	ee e6       	ldi	r30, 0x6E	; 110
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	80 81       	ld	r24, Z
     efc:	8d 7f       	andi	r24, 0xFD	; 253
     efe:	80 83       	st	Z, r24
     f00:	08 95       	ret

00000f02 <timer0ClearCompareAInterruptRequest>:
 * Clears the timer0 compare A interrupt request
 * -------------------------------------------------------------------------- */

void timer0ClearCompareAInterruptRequest(void)
{
	setBit(TIFR0, OCF0A);
     f02:	a9 9a       	sbi	0x15, 1	; 21
     f04:	08 95       	ret

00000f06 <timer0ActivateCompareBInterrupt>:
 * Activates the timer0 compare B interrupt
 * -------------------------------------------------------------------------- */

void timer0ActivateCompareBInterrupt(void)
{
	setBit(TIMSK0, OCIE0B);
     f06:	ee e6       	ldi	r30, 0x6E	; 110
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	80 81       	ld	r24, Z
     f0c:	84 60       	ori	r24, 0x04	; 4
     f0e:	80 83       	st	Z, r24
     f10:	08 95       	ret

00000f12 <timer0DeactivateCompareBInterrupt>:
 * Deactivates the timer0 compare B interrupt
 * -------------------------------------------------------------------------- */

void timer0DeactivateCompareBInterrupt(void)
{
	clrBit(TIMSK0, OCIE0B);
     f12:	ee e6       	ldi	r30, 0x6E	; 110
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	8b 7f       	andi	r24, 0xFB	; 251
     f1a:	80 83       	st	Z, r24
     f1c:	08 95       	ret

00000f1e <timer0ClearCompareBInterruptRequest>:
 * Clears the timer0 compare B interrupt request
 * -------------------------------------------------------------------------- */

void timer0ClearCompareBInterruptRequest(void)
{
	setBit(TIFR0, OCF0B);
     f1e:	aa 9a       	sbi	0x15, 2	; 21
     f20:	08 95       	ret

00000f22 <timer0ForceCompareA>:
 * Forces a comparison on the output compare A of the timer0
 * -------------------------------------------------------------------------- */

void timer0ForceCompareA(void)
{
	setBit(TCCR0B, FOC0A);
     f22:	85 b5       	in	r24, 0x25	; 37
     f24:	80 68       	ori	r24, 0x80	; 128
     f26:	85 bd       	out	0x25, r24	; 37
     f28:	08 95       	ret

00000f2a <timer0ForceCompareB>:
 * Forces a comparison on the output compare B of the timer0
 * -------------------------------------------------------------------------- */

void timer0ForceCompareB(void)
{
	setBit(TCCR0B, FOC0B);
     f2a:	85 b5       	in	r24, 0x25	; 37
     f2c:	80 64       	ori	r24, 0x40	; 64
     f2e:	85 bd       	out	0x25, r24	; 37
     f30:	08 95       	ret

00000f32 <timer0SetCounterValue>:
 * Sets the timer0 counter value
 * -------------------------------------------------------------------------- */

void timer0SetCounterValue(uint8 value)
{
	TCNT0 = value;
     f32:	86 bd       	out	0x26, r24	; 38
     f34:	08 95       	ret

00000f36 <timer0GetCounterValue>:
 * Gets the timer0 counter value
 * -------------------------------------------------------------------------- */

uint8 timer0GetCounterValue(void)
{
	return TCNT0;
     f36:	86 b5       	in	r24, 0x26	; 38
}
     f38:	08 95       	ret

00000f3a <timer0SetCompareAValue>:
 * Sets the timer0 compare A value
 * -------------------------------------------------------------------------- */

void timer0SetCompareAValue(uint8 value)
{
	OCR0A = value;
     f3a:	87 bd       	out	0x27, r24	; 39
     f3c:	08 95       	ret

00000f3e <timer0GetCompareAValue>:
 * Gets the timer0 compare A value
 * -------------------------------------------------------------------------- */

uint8 timer0GetCompareAValue(void)
{
	return OCR0A;
     f3e:	87 b5       	in	r24, 0x27	; 39
}
     f40:	08 95       	ret

00000f42 <timer0SetCompareBValue>:
 * Sets the timer0 compare B value
 * -------------------------------------------------------------------------- */

void timer0SetCompareBValue(uint8 value)
{
	OCR0B = value;
     f42:	88 bd       	out	0x28, r24	; 40
     f44:	08 95       	ret

00000f46 <timer0GetCompareBValue>:
 * Gets the timer0 compare B value
 * -------------------------------------------------------------------------- */

uint8 timer0GetCompareBValue(void)
{
	return OCR0B;
     f46:	88 b5       	in	r24, 0x28	; 40
}
     f48:	08 95       	ret

00000f4a <timer1Config>:
 * Configures the timer1 mode and prescaler
 * -------------------------------------------------------------------------- */

resultValue_t timer1Config(timerModeB_t mode, timerPrescalerValueA_t prescaler)
{
	uint8 reg1 = TCCR1A;
     f4a:	20 91 80 00 	lds	r18, 0x0080
	uint8 reg2 = TCCR1B;
     f4e:	90 91 81 00 	lds	r25, 0x0081

	if(prescaler != TIMER_A_PRESCALER_NO_CHANGE){
     f52:	6f 3f       	cpi	r22, 0xFF	; 255
     f54:	11 f0       	breq	.+4      	; 0xf5a <timer1Config+0x10>
		reg2 &= ~(0x07 << CS10);
     f56:	98 7f       	andi	r25, 0xF8	; 248
		reg2 |= prescaler;
     f58:	96 2b       	or	r25, r22
	}

	if(mode != TIMER_B_MODE_NO_CHANGE){
     f5a:	8f 3f       	cpi	r24, 0xFF	; 255
     f5c:	69 f0       	breq	.+26     	; 0xf78 <timer1Config+0x2e>
		if(isBitSet(mode, 3))
     f5e:	83 ff       	sbrs	r24, 3
     f60:	02 c0       	rjmp	.+4      	; 0xf66 <timer1Config+0x1c>
			setBit(reg2, WGM13);
     f62:	90 61       	ori	r25, 0x10	; 16
     f64:	01 c0       	rjmp	.+2      	; 0xf68 <timer1Config+0x1e>
		else
			clrBit(reg2, WGM13);
     f66:	9f 7e       	andi	r25, 0xEF	; 239
		if(isBitSet(mode, 2))
     f68:	82 ff       	sbrs	r24, 2
     f6a:	02 c0       	rjmp	.+4      	; 0xf70 <timer1Config+0x26>
			setBit(reg2, WGM12);
     f6c:	98 60       	ori	r25, 0x08	; 8
     f6e:	01 c0       	rjmp	.+2      	; 0xf72 <timer1Config+0x28>
		else
			clrBit(reg2, WGM12);
     f70:	97 7f       	andi	r25, 0xF7	; 247
		reg1 &= ~(0x03 << WGM10);
		reg1 |= (mode & 0x03);
     f72:	83 70       	andi	r24, 0x03	; 3
			clrBit(reg2, WGM13);
		if(isBitSet(mode, 2))
			setBit(reg2, WGM12);
		else
			clrBit(reg2, WGM12);
		reg1 &= ~(0x03 << WGM10);
     f74:	2c 7f       	andi	r18, 0xFC	; 252
		reg1 |= (mode & 0x03);
     f76:	28 2b       	or	r18, r24
	}
	TCCR1A = reg1;
     f78:	20 93 80 00 	sts	0x0080, r18
	TCCR1B = reg2;
     f7c:	90 93 81 00 	sts	0x0081, r25

	return RESULT_OK;
}
     f80:	80 e0       	ldi	r24, 0x00	; 0
     f82:	08 95       	ret

00000f84 <timer1OutputConfig>:
 * Configures the timer1 compare outputs
 * -------------------------------------------------------------------------- */

resultValue_t timer1OutputConfig(timerOutput_t compA, timerOutput_t compB)
{
	uint8 aux8 = TCCR1A;
     f84:	20 91 80 00 	lds	r18, 0x0080

	if(compA != TIMER_PORT_NO_CHANGE){
     f88:	8f 3f       	cpi	r24, 0xFF	; 255
     f8a:	31 f0       	breq	.+12     	; 0xf98 <timer1OutputConfig+0x14>
		aux8 &= ~(0x03 << COM1A0);
		aux8 |= (compA << COM1A0); 
     f8c:	30 e4       	ldi	r19, 0x40	; 64
     f8e:	83 9f       	mul	r24, r19
     f90:	c0 01       	movw	r24, r0
     f92:	11 24       	eor	r1, r1
resultValue_t timer1OutputConfig(timerOutput_t compA, timerOutput_t compB)
{
	uint8 aux8 = TCCR1A;

	if(compA != TIMER_PORT_NO_CHANGE){
		aux8 &= ~(0x03 << COM1A0);
     f94:	2f 73       	andi	r18, 0x3F	; 63
		aux8 |= (compA << COM1A0); 
     f96:	28 2b       	or	r18, r24
	}
	if(compB != TIMER_PORT_NO_CHANGE){
     f98:	6f 3f       	cpi	r22, 0xFF	; 255
     f9a:	31 f0       	breq	.+12     	; 0xfa8 <timer1OutputConfig+0x24>
		aux8 &= ~(0x03 << COM1B0);
     f9c:	2f 7c       	andi	r18, 0xCF	; 207
		aux8 |= (compB << COM1B0); 
     f9e:	80 e1       	ldi	r24, 0x10	; 16
     fa0:	68 9f       	mul	r22, r24
     fa2:	b0 01       	movw	r22, r0
     fa4:	11 24       	eor	r1, r1
     fa6:	26 2b       	or	r18, r22
	}
	TCCR1A = aux8;
     fa8:	20 93 80 00 	sts	0x0080, r18
	return RESULT_OK;
}
     fac:	80 e0       	ldi	r24, 0x00	; 0
     fae:	08 95       	ret

00000fb0 <timer1InputCaptureNoiseCancelerConfig>:
 * Configures the noise canceler of input capture of timer1
 * -------------------------------------------------------------------------- */

resultValue_t	timer1InputCaptureNoiseCancelerConfig(timerInputCaptureNoiseCanceler_t mode)
{
	uint8 aux8 = TCCR1B;
     fb0:	e1 e8       	ldi	r30, 0x81	; 129
     fb2:	f0 e0       	ldi	r31, 0x00	; 0
     fb4:	90 81       	ld	r25, Z

	aux8 &= ~(0x03 << ICES1);
     fb6:	9f 73       	andi	r25, 0x3F	; 63
	aux8 |= mode;
     fb8:	98 2b       	or	r25, r24

	TCCR1B = aux8;
     fba:	90 83       	st	Z, r25
	return RESULT_OK;
}
     fbc:	80 e0       	ldi	r24, 0x00	; 0
     fbe:	08 95       	ret

00000fc0 <timer1ActivateOverflowInterrupt>:
 * Activates the timer1 overflow interrupt
 * -------------------------------------------------------------------------- */

resultValue_t timer1ActivateOverflowInterrupt(void)
{
	setBit(TIMSK1, TOIE1);
     fc0:	ef e6       	ldi	r30, 0x6F	; 111
     fc2:	f0 e0       	ldi	r31, 0x00	; 0
     fc4:	80 81       	ld	r24, Z
     fc6:	81 60       	ori	r24, 0x01	; 1
     fc8:	80 83       	st	Z, r24
	return RESULT_OK;
}
     fca:	80 e0       	ldi	r24, 0x00	; 0
     fcc:	08 95       	ret

00000fce <timer1DeactivateOverflowInterrupt>:
 * Deactivates the timer1 overflow interrupt
 * -------------------------------------------------------------------------- */

resultValue_t timer1DeactivateOverflowInterrupt(void)
{
	clrBit(TIMSK1, TOIE1);
     fce:	ef e6       	ldi	r30, 0x6F	; 111
     fd0:	f0 e0       	ldi	r31, 0x00	; 0
     fd2:	80 81       	ld	r24, Z
     fd4:	8e 7f       	andi	r24, 0xFE	; 254
     fd6:	80 83       	st	Z, r24
	return RESULT_OK;
}
     fd8:	80 e0       	ldi	r24, 0x00	; 0
     fda:	08 95       	ret

00000fdc <timer1ClearOverflowInterruptRequest>:
 * Clears the timer1 overflow interrupt request
 * -------------------------------------------------------------------------- */

resultValue_t timer1ClearOverflowInterruptRequest(void)
{
	setBit(TIFR1, TOV1);
     fdc:	b0 9a       	sbi	0x16, 0	; 22
	return RESULT_OK;
}
     fde:	80 e0       	ldi	r24, 0x00	; 0
     fe0:	08 95       	ret

00000fe2 <timer1ActivateCompareAInterrupt>:
 * Activates the timer1 compare A interrupt
 * -------------------------------------------------------------------------- */

resultValue_t timer1ActivateCompareAInterrupt(void)
{
	setBit(TIMSK1, OCIE1A);
     fe2:	ef e6       	ldi	r30, 0x6F	; 111
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	80 81       	ld	r24, Z
     fe8:	82 60       	ori	r24, 0x02	; 2
     fea:	80 83       	st	Z, r24
	return RESULT_OK;
}
     fec:	80 e0       	ldi	r24, 0x00	; 0
     fee:	08 95       	ret

00000ff0 <timer1DeactivateCompareAInterrupt>:
 * Deactivates the timer1 compare A interrupt
 * -------------------------------------------------------------------------- */

resultValue_t timer1DeactivateCompareAInterrupt(void)
{
	clrBit(TIMSK1, OCIE1A);
     ff0:	ef e6       	ldi	r30, 0x6F	; 111
     ff2:	f0 e0       	ldi	r31, 0x00	; 0
     ff4:	80 81       	ld	r24, Z
     ff6:	8d 7f       	andi	r24, 0xFD	; 253
     ff8:	80 83       	st	Z, r24
	return RESULT_OK;
}
     ffa:	80 e0       	ldi	r24, 0x00	; 0
     ffc:	08 95       	ret

00000ffe <timer1ClearCompareAInterruptRequest>:
 * Clears the timer1 compare A interrupt request
 * -------------------------------------------------------------------------- */

resultValue_t timer1ClearCompareAInterruptRequest(void)
{
	setBit(TIFR1, OCF1A);
     ffe:	b1 9a       	sbi	0x16, 1	; 22
	return RESULT_OK;
}
    1000:	80 e0       	ldi	r24, 0x00	; 0
    1002:	08 95       	ret

00001004 <timer1ActivateCompareBInterrupt>:
 * Activates the timer1 compare B interrupt
 * -------------------------------------------------------------------------- */

resultValue_t timer1ActivateCompareBInterrupt(void)
{
	setBit(TIMSK1, OCIE1B);
    1004:	ef e6       	ldi	r30, 0x6F	; 111
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	80 81       	ld	r24, Z
    100a:	84 60       	ori	r24, 0x04	; 4
    100c:	80 83       	st	Z, r24
	return RESULT_OK;
}
    100e:	80 e0       	ldi	r24, 0x00	; 0
    1010:	08 95       	ret

00001012 <timer1DeactivateCompareBInterrupt>:
 * Deactivates the timer1 compare B interrupt
 * -------------------------------------------------------------------------- */

resultValue_t timer1DeactivateCompareBInterrupt(void)
{
	clrBit(TIMSK1, OCIE1B);
    1012:	ef e6       	ldi	r30, 0x6F	; 111
    1014:	f0 e0       	ldi	r31, 0x00	; 0
    1016:	80 81       	ld	r24, Z
    1018:	8b 7f       	andi	r24, 0xFB	; 251
    101a:	80 83       	st	Z, r24
	return RESULT_OK;
}
    101c:	80 e0       	ldi	r24, 0x00	; 0
    101e:	08 95       	ret

00001020 <timer1ClearCompareBInterruptRequest>:
 * Clears the timer1 compare B interrupt request
 * -------------------------------------------------------------------------- */

resultValue_t timer1ClearCompareBInterruptRequest(void)
{
	setBit(TIFR1, OCF1B);
    1020:	b2 9a       	sbi	0x16, 2	; 22
	return RESULT_OK;
}
    1022:	80 e0       	ldi	r24, 0x00	; 0
    1024:	08 95       	ret

00001026 <timer1ActivateInputCaptureInterrupt>:
 * Activates the timer1 input capture interrupt
 * -------------------------------------------------------------------------- */

resultValue_t timer1ActivateInputCaptureInterrupt(void)
{
	setBit(TIMSK1, ICIE1);
    1026:	ef e6       	ldi	r30, 0x6F	; 111
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	80 81       	ld	r24, Z
    102c:	80 62       	ori	r24, 0x20	; 32
    102e:	80 83       	st	Z, r24
	return RESULT_OK;
}
    1030:	80 e0       	ldi	r24, 0x00	; 0
    1032:	08 95       	ret

00001034 <timer1DeactivateInputCaptureInterrupt>:
 * Deactivates the timer1 input capture interrupt
 * -------------------------------------------------------------------------- */

resultValue_t timer1DeactivateInputCaptureInterrupt(void)
{
	clrBit(TIMSK1, ICIE1);
    1034:	ef e6       	ldi	r30, 0x6F	; 111
    1036:	f0 e0       	ldi	r31, 0x00	; 0
    1038:	80 81       	ld	r24, Z
    103a:	8f 7d       	andi	r24, 0xDF	; 223
    103c:	80 83       	st	Z, r24
	return RESULT_OK;
}
    103e:	80 e0       	ldi	r24, 0x00	; 0
    1040:	08 95       	ret

00001042 <timer1ClearInputCaptureInterruptRequest>:
 * Clears the timer1 input capture interrupt request
 * -------------------------------------------------------------------------- */

resultValue_t timer1ClearInputCaptureInterruptRequest(void)
{
	setBit(TIFR1, ICF1);
    1042:	b5 9a       	sbi	0x16, 5	; 22
	return RESULT_OK;
}
    1044:	80 e0       	ldi	r24, 0x00	; 0
    1046:	08 95       	ret

00001048 <timer1ForceCompareA>:
 * Forces a comparison on the output compare A of the timer1
 * -------------------------------------------------------------------------- */

resultValue_t timer1ForceCompareA(void)
{
	setBit(TCCR1C, FOC1A);
    1048:	e2 e8       	ldi	r30, 0x82	; 130
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	80 81       	ld	r24, Z
    104e:	80 68       	ori	r24, 0x80	; 128
    1050:	80 83       	st	Z, r24
	return RESULT_OK;
}
    1052:	80 e0       	ldi	r24, 0x00	; 0
    1054:	08 95       	ret

00001056 <timer1ForceCompareB>:
 * Forces a comparison on the output compare B of the timer1
 * -------------------------------------------------------------------------- */

resultValue_t timer1ForceCompareB(void)
{
	setBit(TCCR1C, FOC1B);
    1056:	e2 e8       	ldi	r30, 0x82	; 130
    1058:	f0 e0       	ldi	r31, 0x00	; 0
    105a:	80 81       	ld	r24, Z
    105c:	80 64       	ori	r24, 0x40	; 64
    105e:	80 83       	st	Z, r24
	return RESULT_OK;
}
    1060:	80 e0       	ldi	r24, 0x00	; 0
    1062:	08 95       	ret

00001064 <timer1SetCounterValue>:
 * Sets the timer1 counter value
 * -------------------------------------------------------------------------- */

resultValue_t timer1SetCounterValue(uint16 value)
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    1064:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1066:	f8 94       	cli
		TCNT1 = value;
    1068:	90 93 85 00 	sts	0x0085, r25
    106c:	80 93 84 00 	sts	0x0084, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1070:	2f bf       	out	0x3f, r18	; 63
	}
	return RESULT_OK;
}
    1072:	80 e0       	ldi	r24, 0x00	; 0
    1074:	08 95       	ret

00001076 <timer1GetCounterValue>:
 * Gets the timer1 counter value
 * -------------------------------------------------------------------------- */

uint16 timer1GetCounterValue(void)
{
	return TCNT1;
    1076:	80 91 84 00 	lds	r24, 0x0084
    107a:	90 91 85 00 	lds	r25, 0x0085
}
    107e:	08 95       	ret

00001080 <timer1SetCompareAValue>:
 * Sets the timer1 compare A value
 * -------------------------------------------------------------------------- */

resultValue_t timer1SetCompareAValue(uint16 value)
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    1080:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1082:	f8 94       	cli
		OCR1A = value;
    1084:	90 93 89 00 	sts	0x0089, r25
    1088:	80 93 88 00 	sts	0x0088, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    108c:	2f bf       	out	0x3f, r18	; 63
	}
	return RESULT_OK;
}
    108e:	80 e0       	ldi	r24, 0x00	; 0
    1090:	08 95       	ret

00001092 <timer1GetCompareAValue>:
 * Gets the timer1 compare A value
 * -------------------------------------------------------------------------- */

uint16 timer1GetCompareAValue(void)
{
	return OCR1A;
    1092:	80 91 88 00 	lds	r24, 0x0088
    1096:	90 91 89 00 	lds	r25, 0x0089
}
    109a:	08 95       	ret

0000109c <timer1SetCompareBValue>:
 * Sets the timer1 compare B value
 * -------------------------------------------------------------------------- */

resultValue_t timer1SetCompareBValue(uint16 value)
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    109c:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    109e:	f8 94       	cli
		OCR1B = value;
    10a0:	90 93 8b 00 	sts	0x008B, r25
    10a4:	80 93 8a 00 	sts	0x008A, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    10a8:	2f bf       	out	0x3f, r18	; 63
	}
	return RESULT_OK;
}
    10aa:	80 e0       	ldi	r24, 0x00	; 0
    10ac:	08 95       	ret

000010ae <timer1GetCompareBValue>:
 * Gets the timer1 compare B value
 * -------------------------------------------------------------------------- */

uint16 timer1GetCompareBValue(void)
{
	return OCR1B;
    10ae:	80 91 8a 00 	lds	r24, 0x008A
    10b2:	90 91 8b 00 	lds	r25, 0x008B
}
    10b6:	08 95       	ret

000010b8 <timer1SetInputCaptureValue>:
 * Sets the timer1 input capture value
 * -------------------------------------------------------------------------- */

resultValue_t timer1SetInputCaptureValue(uint16 value)
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    10b8:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    10ba:	f8 94       	cli
		ICR1 = value;
    10bc:	90 93 87 00 	sts	0x0087, r25
    10c0:	80 93 86 00 	sts	0x0086, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    10c4:	2f bf       	out	0x3f, r18	; 63
	}
	return RESULT_OK;
}
    10c6:	80 e0       	ldi	r24, 0x00	; 0
    10c8:	08 95       	ret

000010ca <timer1GetInputCaptureValue>:
 * Gets the timer1 input capture value
 * -------------------------------------------------------------------------- */

uint16 timer1GetInputCaptureValue(void)
{
	return ICR1;
    10ca:	80 91 86 00 	lds	r24, 0x0086
    10ce:	90 91 87 00 	lds	r25, 0x0087
}
    10d2:	08 95       	ret

000010d4 <timer2Config>:
 * Configures the timer2 mode and prescaler
 * -------------------------------------------------------------------------- */

resultValue_t timer2Config(timerModeA_t mode, timerPrescalerValueB_t prescaler)
{
	uint8 reg1 = TCCR2A;
    10d4:	20 91 b0 00 	lds	r18, 0x00B0
	uint8 reg2 = TCCR2B;
    10d8:	90 91 b1 00 	lds	r25, 0x00B1

	if(prescaler != TIMER_B_PRESCALER_NO_CHANGE){
    10dc:	6f 3f       	cpi	r22, 0xFF	; 255
    10de:	11 f0       	breq	.+4      	; 0x10e4 <timer2Config+0x10>
		reg2 &= ~(0x07 << CS20);
    10e0:	98 7f       	andi	r25, 0xF8	; 248
		reg2 |= prescaler;
    10e2:	96 2b       	or	r25, r22
	}

	if(mode != TIMER_A_MODE_NO_CHANGE){
    10e4:	8f 3f       	cpi	r24, 0xFF	; 255
    10e6:	41 f0       	breq	.+16     	; 0x10f8 <timer2Config+0x24>
		if(isBitSet(mode, 2))
    10e8:	82 ff       	sbrs	r24, 2
    10ea:	02 c0       	rjmp	.+4      	; 0x10f0 <timer2Config+0x1c>
			setBit(reg2, WGM22);
    10ec:	98 60       	ori	r25, 0x08	; 8
    10ee:	01 c0       	rjmp	.+2      	; 0x10f2 <timer2Config+0x1e>
		else
			clrBit(reg2, WGM22);
    10f0:	97 7f       	andi	r25, 0xF7	; 247
		reg1 &= ~(0x03 << WGM20);
		reg1 |= (mode & 0x03);
    10f2:	83 70       	andi	r24, 0x03	; 3
	if(mode != TIMER_A_MODE_NO_CHANGE){
		if(isBitSet(mode, 2))
			setBit(reg2, WGM22);
		else
			clrBit(reg2, WGM22);
		reg1 &= ~(0x03 << WGM20);
    10f4:	2c 7f       	andi	r18, 0xFC	; 252
		reg1 |= (mode & 0x03);
    10f6:	28 2b       	or	r18, r24
	}
	TCCR2A = reg1;
    10f8:	20 93 b0 00 	sts	0x00B0, r18
	TCCR2B = reg2;
    10fc:	90 93 b1 00 	sts	0x00B1, r25

	return RESULT_OK;
}
    1100:	80 e0       	ldi	r24, 0x00	; 0
    1102:	08 95       	ret

00001104 <timer2OutputConfig>:
 * Configures the timer2 compare outputs
 * -------------------------------------------------------------------------- */

resultValue_t timer2OutputConfig(timerOutput_t compA, timerOutput_t compB)
{
	uint8 aux8 = TCCR2A;
    1104:	20 91 b0 00 	lds	r18, 0x00B0

	if(compA != TIMER_PORT_NO_CHANGE){
    1108:	8f 3f       	cpi	r24, 0xFF	; 255
    110a:	31 f0       	breq	.+12     	; 0x1118 <timer2OutputConfig+0x14>
		aux8 &= ~(0x03 << COM2A0);
		aux8 |= (compA << COM2A0); 
    110c:	30 e4       	ldi	r19, 0x40	; 64
    110e:	83 9f       	mul	r24, r19
    1110:	c0 01       	movw	r24, r0
    1112:	11 24       	eor	r1, r1
resultValue_t timer2OutputConfig(timerOutput_t compA, timerOutput_t compB)
{
	uint8 aux8 = TCCR2A;

	if(compA != TIMER_PORT_NO_CHANGE){
		aux8 &= ~(0x03 << COM2A0);
    1114:	2f 73       	andi	r18, 0x3F	; 63
		aux8 |= (compA << COM2A0); 
    1116:	28 2b       	or	r18, r24
	}
	if(compB != TIMER_PORT_NO_CHANGE){
    1118:	6f 3f       	cpi	r22, 0xFF	; 255
    111a:	31 f0       	breq	.+12     	; 0x1128 <timer2OutputConfig+0x24>
		aux8 &= ~(0x03 << COM2B0);
    111c:	2f 7c       	andi	r18, 0xCF	; 207
		aux8 |= (compB << COM2B0); 
    111e:	80 e1       	ldi	r24, 0x10	; 16
    1120:	68 9f       	mul	r22, r24
    1122:	b0 01       	movw	r22, r0
    1124:	11 24       	eor	r1, r1
    1126:	26 2b       	or	r18, r22
	}
	TCCR2A = aux8;
    1128:	20 93 b0 00 	sts	0x00B0, r18
	return RESULT_OK;
}
    112c:	80 e0       	ldi	r24, 0x00	; 0
    112e:	08 95       	ret

00001130 <timer2ActivateOverflowInterrupt>:
 * Activates the timer2 overflow interrupt
 * -------------------------------------------------------------------------- */

resultValue_t timer2ActivateOverflowInterrupt(void)
{
	setBit(TIMSK2, TOIE2);
    1130:	e0 e7       	ldi	r30, 0x70	; 112
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	80 81       	ld	r24, Z
    1136:	81 60       	ori	r24, 0x01	; 1
    1138:	80 83       	st	Z, r24
	return RESULT_OK;
}
    113a:	80 e0       	ldi	r24, 0x00	; 0
    113c:	08 95       	ret

0000113e <timer2DeactivateOverflowInterrupt>:
 * Deactivates the timer2 overflow interrupt
 * -------------------------------------------------------------------------- */

resultValue_t timer2DeactivateOverflowInterrupt(void)
{
	clrBit(TIMSK2, TOIE2);
    113e:	e0 e7       	ldi	r30, 0x70	; 112
    1140:	f0 e0       	ldi	r31, 0x00	; 0
    1142:	80 81       	ld	r24, Z
    1144:	8e 7f       	andi	r24, 0xFE	; 254
    1146:	80 83       	st	Z, r24
	return RESULT_OK;
}
    1148:	80 e0       	ldi	r24, 0x00	; 0
    114a:	08 95       	ret

0000114c <timer2ClearOverflowInterruptRequest>:
 * Clears the timer2 overflow interrupt request
 * -------------------------------------------------------------------------- */

resultValue_t timer2ClearOverflowInterruptRequest(void)
{
	setBit(TIFR2, TOV2);
    114c:	b8 9a       	sbi	0x17, 0	; 23
	return RESULT_OK;
}
    114e:	80 e0       	ldi	r24, 0x00	; 0
    1150:	08 95       	ret

00001152 <timer2ActivateCompareAInterrupt>:
 * Activates the timer2 compare A interrupt
 * -------------------------------------------------------------------------- */

resultValue_t timer2ActivateCompareAInterrupt(void)
{
	setBit(TIMSK2, OCIE2A);
    1152:	e0 e7       	ldi	r30, 0x70	; 112
    1154:	f0 e0       	ldi	r31, 0x00	; 0
    1156:	80 81       	ld	r24, Z
    1158:	82 60       	ori	r24, 0x02	; 2
    115a:	80 83       	st	Z, r24
	return RESULT_OK;
}
    115c:	80 e0       	ldi	r24, 0x00	; 0
    115e:	08 95       	ret

00001160 <timer2DeactivateCompareAInterrupt>:
 * Deactivates the timer2 compare A interrupt
 * -------------------------------------------------------------------------- */

resultValue_t timer2DeactivateCompareAInterrupt(void)
{
	clrBit(TIMSK2, OCIE2A);
    1160:	e0 e7       	ldi	r30, 0x70	; 112
    1162:	f0 e0       	ldi	r31, 0x00	; 0
    1164:	80 81       	ld	r24, Z
    1166:	8d 7f       	andi	r24, 0xFD	; 253
    1168:	80 83       	st	Z, r24
	return RESULT_OK;
}
    116a:	80 e0       	ldi	r24, 0x00	; 0
    116c:	08 95       	ret

0000116e <timer2ClearCompareAInterruptRequest>:
 * Clears the timer2 compare A interrupt request
 * -------------------------------------------------------------------------- */

resultValue_t timer2ClearCompareAInterruptRequest(void)
{
	setBit(TIFR2, OCF2A);
    116e:	b9 9a       	sbi	0x17, 1	; 23
	return RESULT_OK;
}
    1170:	80 e0       	ldi	r24, 0x00	; 0
    1172:	08 95       	ret

00001174 <timer2ActivateCompareBInterrupt>:
 * Activates the timer2 compare B interrupt
 * -------------------------------------------------------------------------- */

resultValue_t timer2ActivateCompareBInterrupt(void)
{
	setBit(TIMSK2, OCIE2B);
    1174:	e0 e7       	ldi	r30, 0x70	; 112
    1176:	f0 e0       	ldi	r31, 0x00	; 0
    1178:	80 81       	ld	r24, Z
    117a:	84 60       	ori	r24, 0x04	; 4
    117c:	80 83       	st	Z, r24
	return RESULT_OK;
}
    117e:	80 e0       	ldi	r24, 0x00	; 0
    1180:	08 95       	ret

00001182 <timer2DeactivateCompareBInterrupt>:
 * Deactivates the timer2 compare B interrupt
 * -------------------------------------------------------------------------- */

resultValue_t timer2DeactivateCompareBInterrupt(void)
{
	clrBit(TIMSK2, OCIE2B);
    1182:	e0 e7       	ldi	r30, 0x70	; 112
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	80 81       	ld	r24, Z
    1188:	8b 7f       	andi	r24, 0xFB	; 251
    118a:	80 83       	st	Z, r24
	return RESULT_OK;
}
    118c:	80 e0       	ldi	r24, 0x00	; 0
    118e:	08 95       	ret

00001190 <timer2ClearCompareBInterruptRequest>:
 * Clears the timer2 compare B interrupt request
 * -------------------------------------------------------------------------- */

resultValue_t timer2ClearCompareBInterruptRequest(void)
{
	setBit(TIFR2, OCF2B);
    1190:	ba 9a       	sbi	0x17, 2	; 23
	return RESULT_OK;
}
    1192:	80 e0       	ldi	r24, 0x00	; 0
    1194:	08 95       	ret

00001196 <timer2ForceCompareA>:
 * Forces a comparison on the output compare A of the timer2
 * -------------------------------------------------------------------------- */

resultValue_t timer2ForceCompareA(void)
{
	setBit(TCCR2B, FOC2A);
    1196:	e1 eb       	ldi	r30, 0xB1	; 177
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	80 68       	ori	r24, 0x80	; 128
    119e:	80 83       	st	Z, r24
	return RESULT_OK;
}
    11a0:	80 e0       	ldi	r24, 0x00	; 0
    11a2:	08 95       	ret

000011a4 <timer2ForceCompareB>:
 * Forces a comparison on the output compare B of the timer2
 * -------------------------------------------------------------------------- */

resultValue_t timer2ForceCompareB(void)
{
	setBit(TCCR2B, FOC2B);
    11a4:	e1 eb       	ldi	r30, 0xB1	; 177
    11a6:	f0 e0       	ldi	r31, 0x00	; 0
    11a8:	80 81       	ld	r24, Z
    11aa:	80 64       	ori	r24, 0x40	; 64
    11ac:	80 83       	st	Z, r24
	return RESULT_OK;
}
    11ae:	80 e0       	ldi	r24, 0x00	; 0
    11b0:	08 95       	ret

000011b2 <timer2SetCounterValue>:
 * Sets the timer2 counter value
 * -------------------------------------------------------------------------- */

resultValue_t timer2SetCounterValue(uint8 value)
{
	TCNT2 = value;
    11b2:	80 93 b2 00 	sts	0x00B2, r24
	return RESULT_OK;
}
    11b6:	80 e0       	ldi	r24, 0x00	; 0
    11b8:	08 95       	ret

000011ba <timer2GetCounterValue>:
 * Gets the timer2 counter value
 * -------------------------------------------------------------------------- */

uint8 timer2GetCounterValue(void)
{
	return TCNT2;
    11ba:	80 91 b2 00 	lds	r24, 0x00B2
}
    11be:	08 95       	ret

000011c0 <timer2SetCompareAValue>:
 * Sets the timer2 compare A value
 * -------------------------------------------------------------------------- */

resultValue_t timer2SetCompareAValue(uint8 value)
{
	OCR2A = value;
    11c0:	80 93 b3 00 	sts	0x00B3, r24
	return RESULT_OK;
}
    11c4:	80 e0       	ldi	r24, 0x00	; 0
    11c6:	08 95       	ret

000011c8 <timer2GetCompareAValue>:
 * Gets the timer2 compare A value
 * -------------------------------------------------------------------------- */

uint8 timer2GetCompareAValue(void)
{
	return OCR2A;
    11c8:	80 91 b3 00 	lds	r24, 0x00B3
}
    11cc:	08 95       	ret

000011ce <timer2SetCompareBValue>:
 * Sets the timer2 compare B value
 * -------------------------------------------------------------------------- */

resultValue_t timer2SetCompareBValue(uint8 value)
{
	OCR2B = value;
    11ce:	80 93 b4 00 	sts	0x00B4, r24
	return RESULT_OK;
}
    11d2:	80 e0       	ldi	r24, 0x00	; 0
    11d4:	08 95       	ret

000011d6 <timer2GetCompareBValue>:
 * Gets the timer2 compare B value
 * -------------------------------------------------------------------------- */

uint8 timer2GetCompareBValue(void)
{
	return OCR2B;
    11d6:	80 91 b4 00 	lds	r24, 0x00B4
}
    11da:	08 95       	ret

000011dc <adcConfig>:

resultValue_t adcConfig(adcMode_t mode, adcReference_t reference, adcPrescaler_t  prescaler)
{
	uint8 reg = 0;

	if(reference != ADC_REFERENCE_NO_CHANGE){
    11dc:	6f 3f       	cpi	r22, 0xFF	; 255
    11de:	51 f0       	breq	.+20     	; 0x11f4 <adcConfig+0x18>
		reg = ADMUX;
    11e0:	90 91 7c 00 	lds	r25, 0x007C
		reg &= ~(0x03 << REFS0);
		reg |= reference << REFS0;
    11e4:	20 e4       	ldi	r18, 0x40	; 64
    11e6:	62 9f       	mul	r22, r18
    11e8:	b0 01       	movw	r22, r0
    11ea:	11 24       	eor	r1, r1
{
	uint8 reg = 0;

	if(reference != ADC_REFERENCE_NO_CHANGE){
		reg = ADMUX;
		reg &= ~(0x03 << REFS0);
    11ec:	9f 73       	andi	r25, 0x3F	; 63
		reg |= reference << REFS0;
    11ee:	96 2b       	or	r25, r22
		ADMUX = reg;
    11f0:	90 93 7c 00 	sts	0x007C, r25
	}

	if(prescaler != ADC_PRESCALER_NO_CHANGE){
    11f4:	4f 3f       	cpi	r20, 0xFF	; 255
    11f6:	31 f0       	breq	.+12     	; 0x1204 <adcConfig+0x28>
		reg = ADCSRA;
    11f8:	90 91 7a 00 	lds	r25, 0x007A
		reg &= ~(0x07 << ADPS0);
    11fc:	98 7f       	andi	r25, 0xF8	; 248
		reg |= prescaler << ADPS0;
    11fe:	94 2b       	or	r25, r20
		ADCSRA = reg;
    1200:	90 93 7a 00 	sts	0x007A, r25
	}

	if(mode != ADC_MODE_NO_CHANGE){
    1204:	8f 3f       	cpi	r24, 0xFF	; 255
    1206:	39 f1       	breq	.+78     	; 0x1256 <adcConfig+0x7a>
		if(mode == ADC_MODE_SINGLE_CONVERSION)
    1208:	81 11       	cpse	r24, r1
    120a:	04 c0       	rjmp	.+8      	; 0x1214 <adcConfig+0x38>
			clrBit(ADCSRA, ADATE);
    120c:	80 91 7a 00 	lds	r24, 0x007A
    1210:	8f 7d       	andi	r24, 0xDF	; 223
    1212:	1f c0       	rjmp	.+62     	; 0x1252 <adcConfig+0x76>
		else{
			reg = ADCSRB;
    1214:	20 91 7b 00 	lds	r18, 0x007B
			reg &= ~(0x07 << ADTS0);
    1218:	28 7f       	andi	r18, 0xF8	; 248
			switch(mode){
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	fc 01       	movw	r30, r24
    121e:	32 97       	sbiw	r30, 0x02	; 2
    1220:	e7 30       	cpi	r30, 0x07	; 7
    1222:	f1 05       	cpc	r31, r1
    1224:	d0 f4       	brcc	.+52     	; 0x125a <adcConfig+0x7e>
    1226:	e3 5a       	subi	r30, 0xA3	; 163
    1228:	ff 4f       	sbci	r31, 0xFF	; 255
    122a:	0c 94 39 0d 	jmp	0x1a72	; 0x1a72 <__tablejump2__>
				case ADC_MODE_AUTO_ANALOG_COMP:		reg |= (1 << ADTS0);	break;
    122e:	21 60       	ori	r18, 0x01	; 1
    1230:	0b c0       	rjmp	.+22     	; 0x1248 <adcConfig+0x6c>
				case ADC_MODE_AUTO_INT0:			reg |= (2 << ADTS0);	break;
    1232:	22 60       	ori	r18, 0x02	; 2
    1234:	09 c0       	rjmp	.+18     	; 0x1248 <adcConfig+0x6c>
				case ADC_MODE_AUTO_TIMER0_COMPA:	reg |= (3 << ADTS0);	break;
    1236:	23 60       	ori	r18, 0x03	; 3
    1238:	07 c0       	rjmp	.+14     	; 0x1248 <adcConfig+0x6c>
				case ADC_MODE_AUTO_TIMER0_OVERFLOW:	reg |= (4 << ADTS0);	break;
    123a:	24 60       	ori	r18, 0x04	; 4
    123c:	05 c0       	rjmp	.+10     	; 0x1248 <adcConfig+0x6c>
				case ADC_MODE_AUTO_TIMER1_COMPB:	reg |= (5 << ADTS0);	break;
    123e:	25 60       	ori	r18, 0x05	; 5
    1240:	03 c0       	rjmp	.+6      	; 0x1248 <adcConfig+0x6c>
				case ADC_MODE_AUTO_TIMER1_OVERFLOW:	reg |= (6 << ADTS0);	break;
    1242:	26 60       	ori	r18, 0x06	; 6
    1244:	01 c0       	rjmp	.+2      	; 0x1248 <adcConfig+0x6c>
				case ADC_MODE_AUTO_TIMER1_CAPTURE:	reg |= (7 << ADTS0);	break;
    1246:	27 60       	ori	r18, 0x07	; 7
				default:							return RESULT_UNSUPPORTED_VALUE;	break;
			}
			ADCSRB = reg;
    1248:	20 93 7b 00 	sts	0x007B, r18
			setBit(ADCSRA, ADATE);
    124c:	80 91 7a 00 	lds	r24, 0x007A
    1250:	80 62       	ori	r24, 0x20	; 32
    1252:	80 93 7a 00 	sts	0x007A, r24
		}
	}

	return RESULT_OK;
    1256:	80 e0       	ldi	r24, 0x00	; 0
    1258:	08 95       	ret
				case ADC_MODE_AUTO_TIMER0_COMPA:	reg |= (3 << ADTS0);	break;
				case ADC_MODE_AUTO_TIMER0_OVERFLOW:	reg |= (4 << ADTS0);	break;
				case ADC_MODE_AUTO_TIMER1_COMPB:	reg |= (5 << ADTS0);	break;
				case ADC_MODE_AUTO_TIMER1_OVERFLOW:	reg |= (6 << ADTS0);	break;
				case ADC_MODE_AUTO_TIMER1_CAPTURE:	reg |= (7 << ADTS0);	break;
				default:							return RESULT_UNSUPPORTED_VALUE;	break;
    125a:	87 e0       	ldi	r24, 0x07	; 7
			setBit(ADCSRA, ADATE);
		}
	}

	return RESULT_OK;
 }
    125c:	08 95       	ret

0000125e <adcSelectChannel>:
 * Selects the adc channel
 * -------------------------------------------------------------------------- */

resultValue_t adcSelectChannel(adcChannel_t channel)
{
	uint8 reg = ADMUX;
    125e:	ec e7       	ldi	r30, 0x7C	; 124
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	90 81       	ld	r25, Z

	reg &= ~(0x0F << MUX0);
    1264:	90 7f       	andi	r25, 0xF0	; 240
	reg |= (channel << MUX0);
    1266:	98 2b       	or	r25, r24
	ADMUX = reg;
    1268:	90 83       	st	Z, r25

	return RESULT_OK;
}
    126a:	80 e0       	ldi	r24, 0x00	; 0
    126c:	08 95       	ret

0000126e <adcEnableDigitalInput>:
 * Enable adc digital inputs
 * -------------------------------------------------------------------------- */

resultValue_t adcEnableDigitalInput(uint8 flagInputs)
{
	DIDR0 &= (~flagInputs);
    126e:	ee e7       	ldi	r30, 0x7E	; 126
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	90 81       	ld	r25, Z
    1274:	80 95       	com	r24
    1276:	89 23       	and	r24, r25
    1278:	80 83       	st	Z, r24

	return RESULT_OK;
}
    127a:	80 e0       	ldi	r24, 0x00	; 0
    127c:	08 95       	ret

0000127e <adcDisableDigitalInput>:
 * Enable adc digital inputs
 * -------------------------------------------------------------------------- */

resultValue_t adcDisableDigitalInput(uint8 flagInputs)
{
	DIDR0 |= flagInputs;
    127e:	ee e7       	ldi	r30, 0x7E	; 126
    1280:	f0 e0       	ldi	r31, 0x00	; 0
    1282:	90 81       	ld	r25, Z
    1284:	98 2b       	or	r25, r24
    1286:	90 83       	st	Z, r25

	return RESULT_OK;
}
    1288:	80 e0       	ldi	r24, 0x00	; 0
    128a:	08 95       	ret

0000128c <adcDataPresentation>:
 * Sets the adc data presentation
 * -------------------------------------------------------------------------- */

resultValue_t adcDataPresentation(adcDataPresentation_t presentation)
{
	if(presentation == ADC_LEFT_ADJUSTED)
    128c:	81 11       	cpse	r24, r1
    128e:	04 c0       	rjmp	.+8      	; 0x1298 <adcDataPresentation+0xc>
		setBit(ADMUX, ADLAR);
    1290:	80 91 7c 00 	lds	r24, 0x007C
    1294:	80 62       	ori	r24, 0x20	; 32
    1296:	03 c0       	rjmp	.+6      	; 0x129e <adcDataPresentation+0x12>
	else
		clrBit(ADMUX, ADLAR);
    1298:	80 91 7c 00 	lds	r24, 0x007C
    129c:	8f 7d       	andi	r24, 0xDF	; 223
    129e:	80 93 7c 00 	sts	0x007C, r24

	return RESULT_OK;
}
    12a2:	80 e0       	ldi	r24, 0x00	; 0
    12a4:	08 95       	ret

000012a6 <adcEnable>:
 * Enables the adc module
 * -------------------------------------------------------------------------- */

resultValue_t adcEnable(void)
{
	setBit(ADCSRA, ADEN);
    12a6:	ea e7       	ldi	r30, 0x7A	; 122
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	80 81       	ld	r24, Z
    12ac:	80 68       	ori	r24, 0x80	; 128
    12ae:	80 83       	st	Z, r24

	return RESULT_OK;
}
    12b0:	80 e0       	ldi	r24, 0x00	; 0
    12b2:	08 95       	ret

000012b4 <adcDisable>:
 * Disables the adc module
 * -------------------------------------------------------------------------- */

resultValue_t adcDisable(void)
{
	clrBit(ADCSRA, ADEN);
    12b4:	ea e7       	ldi	r30, 0x7A	; 122
    12b6:	f0 e0       	ldi	r31, 0x00	; 0
    12b8:	80 81       	ld	r24, Z
    12ba:	8f 77       	andi	r24, 0x7F	; 127
    12bc:	80 83       	st	Z, r24

	return RESULT_OK;
}
    12be:	80 e0       	ldi	r24, 0x00	; 0
    12c0:	08 95       	ret

000012c2 <adcClearInterruptRequest>:
 * Clears the adc interrupt request
 * -------------------------------------------------------------------------- */

resultValue_t adcClearInterruptRequest(void)
{
	setBit(ADCSRA, ADIF);
    12c2:	ea e7       	ldi	r30, 0x7A	; 122
    12c4:	f0 e0       	ldi	r31, 0x00	; 0
    12c6:	80 81       	ld	r24, Z
    12c8:	80 61       	ori	r24, 0x10	; 16
    12ca:	80 83       	st	Z, r24

	return RESULT_OK;
}
    12cc:	80 e0       	ldi	r24, 0x00	; 0
    12ce:	08 95       	ret

000012d0 <adcActivateInterrupt>:
 * Enables the adc interrupt
 * -------------------------------------------------------------------------- */

resultValue_t adcActivateInterrupt(void)
{
	setBit(ADCSRA, ADIE);
    12d0:	ea e7       	ldi	r30, 0x7A	; 122
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	80 81       	ld	r24, Z
    12d6:	88 60       	ori	r24, 0x08	; 8
    12d8:	80 83       	st	Z, r24

	return RESULT_OK;
}
    12da:	80 e0       	ldi	r24, 0x00	; 0
    12dc:	08 95       	ret

000012de <adcDeactivateInterrupt>:
 * Disables the adc interrupt
 * -------------------------------------------------------------------------- */

resultValue_t adcDeactivateInterrupt(void)
{
	clrBit(ADCSRA, ADIE);
    12de:	ea e7       	ldi	r30, 0x7A	; 122
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	80 81       	ld	r24, Z
    12e4:	87 7f       	andi	r24, 0xF7	; 247
    12e6:	80 83       	st	Z, r24

	return RESULT_OK;
}
    12e8:	80 e0       	ldi	r24, 0x00	; 0
    12ea:	08 95       	ret

000012ec <adcStartConversion>:
 * Starts an adc conversion
 * -------------------------------------------------------------------------- */

resultValue_t adcStartConversion(void)
{
	setBit(ADCSRA, ADSC);
    12ec:	ea e7       	ldi	r30, 0x7A	; 122
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	80 81       	ld	r24, Z
    12f2:	80 64       	ori	r24, 0x40	; 64
    12f4:	80 83       	st	Z, r24

	return RESULT_OK;
}
    12f6:	80 e0       	ldi	r24, 0x00	; 0
    12f8:	08 95       	ret

000012fa <adcIsBusy>:
 * Returns if an adc conversion is running
 * -------------------------------------------------------------------------- */

bool_t adcIsBusy(void)
{
	return isBitSet(ADCSRA, ADSC);
    12fa:	80 91 7a 00 	lds	r24, 0x007A
}
    12fe:	86 fb       	bst	r24, 6
    1300:	88 27       	eor	r24, r24
    1302:	80 f9       	bld	r24, 0
    1304:	08 95       	ret

00001306 <adcWaitUntilConversionFinish>:
 * Waits until the current conversion is finished
 * -------------------------------------------------------------------------- */

resultValue_t adcWaitUntilConversionFinish(void)
{
	waitUntilBitIsClear(ADCSRA, ADSC);
    1306:	80 91 7a 00 	lds	r24, 0x007A
    130a:	86 fd       	sbrc	r24, 6
    130c:	fc cf       	rjmp	.-8      	; 0x1306 <adcWaitUntilConversionFinish>
	return RESULT_OK;
}
    130e:	80 e0       	ldi	r24, 0x00	; 0
    1310:	08 95       	ret

00001312 <usartConfig>:
/* -----------------------------------------------------------------------------
 * Configures the USART controller
 * -------------------------------------------------------------------------- */

resultValue_t usartConfig(usartMode_t mode, usartBaudRate_t baudRate, usartDataBits_t dataBits, usartParity_t parity, usartStopBits_t stopBits)
{
    1312:	8f 92       	push	r8
    1314:	9f 92       	push	r9
    1316:	af 92       	push	r10
    1318:	bf 92       	push	r11
    131a:	cf 92       	push	r12
    131c:	df 92       	push	r13
    131e:	ef 92       	push	r14
    1320:	ff 92       	push	r15
    1322:	0f 93       	push	r16
    1324:	4a 01       	movw	r8, r20
    1326:	5b 01       	movw	r10, r22
    1328:	9e 2d       	mov	r25, r14
	uint8 reg1 = UCSR0A;
    132a:	30 91 c0 00 	lds	r19, 0x00C0
	uint8 reg2 = UCSR0B;
    132e:	30 91 c1 00 	lds	r19, 0x00C1
	uint8 reg3 = UCSR0C;
    1332:	30 91 c2 00 	lds	r19, 0x00C2

	// Clear errors
	reg1 &= ~((1 << FE0) | (1 << DOR0) | (1 << UPE0));

	// USART stop bits
	if(stopBits != USART_STOP_BIT_NO_CHANGE){
    1336:	9f 3f       	cpi	r25, 0xFF	; 255
    1338:	19 f0       	breq	.+6      	; 0x1340 <usartConfig+0x2e>
		switch(stopBits){
    133a:	92 30       	cpi	r25, 0x02	; 2
    133c:	08 f0       	brcs	.+2      	; 0x1340 <usartConfig+0x2e>
    133e:	5f c0       	rjmp	.+190    	; 0x13fe <usartConfig+0xec>
			default:					return RESULT_UNSUPPORTED_VALUE;	break;
		}
	}

	// USART parity bits
	if(parity != USART_PARITY_NO_CHANGE){
    1340:	0f 3f       	cpi	r16, 0xFF	; 255
    1342:	19 f0       	breq	.+6      	; 0x134a <usartConfig+0x38>
		reg3 &= ~(0x03 << UPM00);
		switch(parity){
    1344:	03 30       	cpi	r16, 0x03	; 3
    1346:	08 f0       	brcs	.+2      	; 0x134a <usartConfig+0x38>
    1348:	5c c0       	rjmp	.+184    	; 0x1402 <usartConfig+0xf0>
			default:					return RESULT_USART_PARITY_UNSUPORTED;	break;
		}
	}

	// USART data bits
	if(dataBits != USART_DATA_BITS_NO_CHANGE){
    134a:	2f 3f       	cpi	r18, 0xFF	; 255
    134c:	19 f0       	breq	.+6      	; 0x1354 <usartConfig+0x42>
		clrBit(reg2, UCSZ02);
		reg3 &= ~(0x03 << UCSZ00);
		switch(dataBits){
    134e:	25 30       	cpi	r18, 0x05	; 5
    1350:	08 f0       	brcs	.+2      	; 0x1354 <usartConfig+0x42>
    1352:	57 c0       	rjmp	.+174    	; 0x1402 <usartConfig+0xf0>
			break;
		}
	}

	// USART mode
	if(mode != USART_MODE_NO_CHANGE){
    1354:	8f 3f       	cpi	r24, 0xFF	; 255
    1356:	79 f4       	brne	.+30     	; 0x1376 <usartConfig+0x64>
			reg3 |= (3 << UMSEL00);		// Synchronous SPI Mode
			setBit(reg3, UCPOL0);		// Polarity
			break;
		}
	}else{
		aux8 = (0x03 & (UCSR0C >> UMSEL00));
    1358:	80 91 c2 00 	lds	r24, 0x00C2
    135c:	82 95       	swap	r24
    135e:	86 95       	lsr	r24
    1360:	86 95       	lsr	r24
    1362:	83 70       	andi	r24, 0x03	; 3
		switch(aux8){
    1364:	21 f0       	breq	.+8      	; 0x136e <usartConfig+0x5c>
    1366:	83 30       	cpi	r24, 0x03	; 3
    1368:	e9 f0       	breq	.+58     	; 0x13a4 <usartConfig+0x92>
resultValue_t usartConfig(usartMode_t mode, usartBaudRate_t baudRate, usartDataBits_t dataBits, usartParity_t parity, usartStopBits_t stopBits)
{
	uint8 reg1 = UCSR0A;
	uint8 reg2 = UCSR0B;
	uint8 reg3 = UCSR0C;
	uint8 modeAux = 0;
    136a:	80 e0       	ldi	r24, 0x00	; 0
    136c:	04 c0       	rjmp	.+8      	; 0x1376 <usartConfig+0x64>
		}
	}else{
		aux8 = (0x03 & (UCSR0C >> UMSEL00));
		switch(aux8){
		case 0:	// Asynchronous mode
			if(isBitClr(UCSR0A, U2X0)){	// Single speed
    136e:	80 91 c0 00 	lds	r24, 0x00C0
    1372:	86 95       	lsr	r24
    1374:	81 70       	andi	r24, 0x01	; 1
			modeAux = USART_MODE_SYNCHRONOUS_SPI;
			break;
		}
	}

	if(baudRate != USART_BAUD_NO_CHANGE){
    1376:	9f ef       	ldi	r25, 0xFF	; 255
    1378:	89 16       	cp	r8, r25
    137a:	99 06       	cpc	r9, r25
    137c:	a9 06       	cpc	r10, r25
    137e:	b9 06       	cpc	r11, r25
    1380:	09 f4       	brne	.+2      	; 0x1384 <usartConfig+0x72>
    1382:	41 c0       	rjmp	.+130    	; 0x1406 <usartConfig+0xf4>
		switch(modeAux){
    1384:	81 30       	cpi	r24, 0x01	; 1
    1386:	49 f0       	breq	.+18     	; 0x139a <usartConfig+0x88>
    1388:	18 f0       	brcs	.+6      	; 0x1390 <usartConfig+0x7e>
    138a:	84 30       	cpi	r24, 0x04	; 4
    138c:	89 f0       	breq	.+34     	; 0x13b0 <usartConfig+0x9e>
    138e:	22 c0       	rjmp	.+68     	; 0x13d4 <usartConfig+0xc2>
		case USART_MODE_ASYNCHRONOUS:
			aux64 = (F_CPU / 16 / baudRate) - 1;
    1390:	60 e4       	ldi	r22, 0x40	; 64
    1392:	72 e4       	ldi	r23, 0x42	; 66
    1394:	8f e0       	ldi	r24, 0x0F	; 15
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	0f c0       	rjmp	.+30     	; 0x13b8 <usartConfig+0xa6>
			break;
		case USART_MODE_ASYNCHRONOUS_DOUBLE_SPEED:
			aux64 = (F_CPU / 8 / baudRate) - 1;
    139a:	60 e8       	ldi	r22, 0x80	; 128
    139c:	74 e8       	ldi	r23, 0x84	; 132
    139e:	8e e1       	ldi	r24, 0x1E	; 30
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	0a c0       	rjmp	.+20     	; 0x13b8 <usartConfig+0xa6>
			modeAux = USART_MODE_SYNCHRONOUS_SPI;
			break;
		}
	}

	if(baudRate != USART_BAUD_NO_CHANGE){
    13a4:	8f ef       	ldi	r24, 0xFF	; 255
    13a6:	88 16       	cp	r8, r24
    13a8:	98 06       	cpc	r9, r24
    13aa:	a8 06       	cpc	r10, r24
    13ac:	b8 06       	cpc	r11, r24
    13ae:	59 f1       	breq	.+86     	; 0x1406 <usartConfig+0xf4>
			break;
		case USART_MODE_ASYNCHRONOUS_DOUBLE_SPEED:
			aux64 = (F_CPU / 8 / baudRate) - 1;
			break;
		case USART_MODE_SYNCHRONOUS_SPI:
			aux64 = (F_CPU / 2 / baudRate) - 1;
    13b0:	60 e0       	ldi	r22, 0x00	; 0
    13b2:	72 e1       	ldi	r23, 0x12	; 18
    13b4:	8a e7       	ldi	r24, 0x7A	; 122
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	a5 01       	movw	r20, r10
    13ba:	94 01       	movw	r18, r8
    13bc:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <__udivmodsi4>
    13c0:	21 50       	subi	r18, 0x01	; 1
    13c2:	31 09       	sbc	r19, r1
    13c4:	41 09       	sbc	r20, r1
    13c6:	51 09       	sbc	r21, r1
    13c8:	49 01       	movw	r8, r18
    13ca:	5a 01       	movw	r10, r20
    13cc:	c1 2c       	mov	r12, r1
    13ce:	d1 2c       	mov	r13, r1
    13d0:	76 01       	movw	r14, r12
			break;
    13d2:	08 c0       	rjmp	.+16     	; 0x13e4 <usartConfig+0xd2>
	uint8 reg1 = UCSR0A;
	uint8 reg2 = UCSR0B;
	uint8 reg3 = UCSR0C;
	uint8 modeAux = 0;
	uint8 aux8 = 0;
	uint64 aux64 = 0;
    13d4:	81 2c       	mov	r8, r1
    13d6:	91 2c       	mov	r9, r1
    13d8:	a1 2c       	mov	r10, r1
    13da:	b1 2c       	mov	r11, r1
    13dc:	c1 2c       	mov	r12, r1
    13de:	d1 2c       	mov	r13, r1
    13e0:	e1 2c       	mov	r14, r1
    13e2:	f1 2c       	mov	r15, r1
			aux64 = (F_CPU / 2 / baudRate) - 1;
			break;
		}
//		if((aux64 > (1.05 * baudRate)) || (aux64 < (0.95 * baudRate)))
//			return RESULT_USART_BAUD_RATE_UNSUPORTED;
		UBRR0H = 0x0F & (aux64 >> 8);
    13e4:	94 01       	movw	r18, r8
    13e6:	a5 01       	movw	r20, r10
    13e8:	b6 01       	movw	r22, r12
    13ea:	c7 01       	movw	r24, r14
    13ec:	08 e0       	ldi	r16, 0x08	; 8
    13ee:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <__lshrdi3>
    13f2:	2f 70       	andi	r18, 0x0F	; 15
    13f4:	20 93 c5 00 	sts	0x00C5, r18
		UBRR0L = (0xFF & aux64);
    13f8:	80 92 c4 00 	sts	0x00C4, r8
    13fc:	04 c0       	rjmp	.+8      	; 0x1406 <usartConfig+0xf4>
	// USART stop bits
	if(stopBits != USART_STOP_BIT_NO_CHANGE){
		switch(stopBits){
			case USART_STOP_BIT_SINGLE:	clrBit(reg3, USBS0);				break;
			case USART_STOP_BIT_DOUBLE:	setBit(reg3, USBS0);				break;
			default:					return RESULT_UNSUPPORTED_VALUE;	break;
    13fe:	87 e0       	ldi	r24, 0x07	; 7
    1400:	03 c0       	rjmp	.+6      	; 0x1408 <usartConfig+0xf6>
		case USART_DATA_BITS_9:
			setBit(reg2, UCSZ02);
			reg3 |= (0x03 << UCSZ00);
			break;
		default:
			return RESULT_USART_PARITY_UNSUPORTED;
    1402:	85 e0       	ldi	r24, 0x05	; 5
    1404:	01 c0       	rjmp	.+2      	; 0x1408 <usartConfig+0xf6>
//			return RESULT_USART_BAUD_RATE_UNSUPORTED;
		UBRR0H = 0x0F & (aux64 >> 8);
		UBRR0L = (0xFF & aux64);
	}

	return RESULT_OK;
    1406:	80 e0       	ldi	r24, 0x00	; 0
}
    1408:	0f 91       	pop	r16
    140a:	ff 90       	pop	r15
    140c:	ef 90       	pop	r14
    140e:	df 90       	pop	r13
    1410:	cf 90       	pop	r12
    1412:	bf 90       	pop	r11
    1414:	af 90       	pop	r10
    1416:	9f 90       	pop	r9
    1418:	8f 90       	pop	r8
    141a:	08 95       	ret

0000141c <usartEnableReceiver>:
 * Enables USART reception module
 * -------------------------------------------------------------------------- */

resultValue_t usartEnableReceiver(void)
{
	setBit(UCSR0B, RXEN0);
    141c:	e1 ec       	ldi	r30, 0xC1	; 193
    141e:	f0 e0       	ldi	r31, 0x00	; 0
    1420:	80 81       	ld	r24, Z
    1422:	80 61       	ori	r24, 0x10	; 16
    1424:	80 83       	st	Z, r24
	return RESULT_OK;
}
    1426:	80 e0       	ldi	r24, 0x00	; 0
    1428:	08 95       	ret

0000142a <usartDisableReceiver>:
 * Disables USART reception module
 * -------------------------------------------------------------------------- */

resultValue_t usartDisableReceiver(void)
{
	clrBit(UCSR0B, RXEN0);
    142a:	e1 ec       	ldi	r30, 0xC1	; 193
    142c:	f0 e0       	ldi	r31, 0x00	; 0
    142e:	80 81       	ld	r24, Z
    1430:	8f 7e       	andi	r24, 0xEF	; 239
    1432:	80 83       	st	Z, r24
	return RESULT_OK;
}
    1434:	80 e0       	ldi	r24, 0x00	; 0
    1436:	08 95       	ret

00001438 <usartEnableTransmitter>:
 * Enables USART transmission module
 * -------------------------------------------------------------------------- */

resultValue_t usartEnableTransmitter(void)
{
	setBit(UCSR0B, TXEN0);
    1438:	e1 ec       	ldi	r30, 0xC1	; 193
    143a:	f0 e0       	ldi	r31, 0x00	; 0
    143c:	80 81       	ld	r24, Z
    143e:	88 60       	ori	r24, 0x08	; 8
    1440:	80 83       	st	Z, r24
	return RESULT_OK;
}
    1442:	80 e0       	ldi	r24, 0x00	; 0
    1444:	08 95       	ret

00001446 <usartDisableTransmitter>:
 * Disables USART transmission module
 * -------------------------------------------------------------------------- */

resultValue_t usartDisableTransmitter(void)
{
	clrBit(UCSR0B, TXEN0);
    1446:	e1 ec       	ldi	r30, 0xC1	; 193
    1448:	f0 e0       	ldi	r31, 0x00	; 0
    144a:	80 81       	ld	r24, Z
    144c:	87 7f       	andi	r24, 0xF7	; 247
    144e:	80 83       	st	Z, r24
	return RESULT_OK;
}
    1450:	80 e0       	ldi	r24, 0x00	; 0
    1452:	08 95       	ret

00001454 <usartActivateReceptionCompleteInterrupt>:
 * Activates USART reception complete interrupt
 * -------------------------------------------------------------------------- */

resultValue_t usartActivateReceptionCompleteInterrupt(void)
{
	setBit(UCSR0B, RXCIE0);
    1454:	e1 ec       	ldi	r30, 0xC1	; 193
    1456:	f0 e0       	ldi	r31, 0x00	; 0
    1458:	80 81       	ld	r24, Z
    145a:	80 68       	ori	r24, 0x80	; 128
    145c:	80 83       	st	Z, r24
	return RESULT_OK;
}
    145e:	80 e0       	ldi	r24, 0x00	; 0
    1460:	08 95       	ret

00001462 <usartDeactivateReceptionCompleteInterrupt>:
 * Deactivates USART reception complete interrupt
 * -------------------------------------------------------------------------- */

resultValue_t usartDeactivateReceptionCompleteInterrupt(void)
{
	clrBit(UCSR0B, RXCIE0);
    1462:	e1 ec       	ldi	r30, 0xC1	; 193
    1464:	f0 e0       	ldi	r31, 0x00	; 0
    1466:	80 81       	ld	r24, Z
    1468:	8f 77       	andi	r24, 0x7F	; 127
    146a:	80 83       	st	Z, r24
	return RESULT_OK;
}
    146c:	80 e0       	ldi	r24, 0x00	; 0
    146e:	08 95       	ret

00001470 <usartActivateTransmissionCompleteInterrupt>:
 * Activates USART transmission complete interrupt
 * -------------------------------------------------------------------------- */

resultValue_t usartActivateTransmissionCompleteInterrupt(void)
{
	setBit(UCSR0B, TXCIE0);
    1470:	e1 ec       	ldi	r30, 0xC1	; 193
    1472:	f0 e0       	ldi	r31, 0x00	; 0
    1474:	80 81       	ld	r24, Z
    1476:	80 64       	ori	r24, 0x40	; 64
    1478:	80 83       	st	Z, r24
	return RESULT_OK;
}
    147a:	80 e0       	ldi	r24, 0x00	; 0
    147c:	08 95       	ret

0000147e <usartDeactivateTransmissionCompleteInterrupt>:
 * Deactivates USART transmission complete interrupt
 * -------------------------------------------------------------------------- */

resultValue_t usartDeactivateTransmissionCompleteInterrupt(void)
{
	clrBit(UCSR0B, TXCIE0);
    147e:	e1 ec       	ldi	r30, 0xC1	; 193
    1480:	f0 e0       	ldi	r31, 0x00	; 0
    1482:	80 81       	ld	r24, Z
    1484:	8f 7b       	andi	r24, 0xBF	; 191
    1486:	80 83       	st	Z, r24
	return RESULT_OK;
}
    1488:	80 e0       	ldi	r24, 0x00	; 0
    148a:	08 95       	ret

0000148c <usartActivateBufferEmptyInterrupt>:
 * Activates USART buffer empty interrupt
 * -------------------------------------------------------------------------- */

resultValue_t usartActivateBufferEmptyInterrupt(void)
{
	setBit(UCSR0B, UDRIE0);
    148c:	e1 ec       	ldi	r30, 0xC1	; 193
    148e:	f0 e0       	ldi	r31, 0x00	; 0
    1490:	80 81       	ld	r24, Z
    1492:	80 62       	ori	r24, 0x20	; 32
    1494:	80 83       	st	Z, r24
	return RESULT_OK;
}
    1496:	80 e0       	ldi	r24, 0x00	; 0
    1498:	08 95       	ret

0000149a <usartDeactivateBufferEmptyInterrupt>:
 * Deactivates USART buffer empty interrupt
 * -------------------------------------------------------------------------- */

resultValue_t usartDeactivateBufferEmptyInterrupt(void)
{
	clrBit(UCSR0B, UDRIE0);
    149a:	e1 ec       	ldi	r30, 0xC1	; 193
    149c:	f0 e0       	ldi	r31, 0x00	; 0
    149e:	80 81       	ld	r24, Z
    14a0:	8f 7d       	andi	r24, 0xDF	; 223
    14a2:	80 83       	st	Z, r24
	return RESULT_OK;
}
    14a4:	80 e0       	ldi	r24, 0x00	; 0
    14a6:	08 95       	ret

000014a8 <usartStdio>:
 * Changes the std handlers to usart module
 * -------------------------------------------------------------------------- */

resultValue_t usartStdio(void)
{
	stdin = stdout = stderr = &usartStream;
    14a8:	88 e0       	ldi	r24, 0x08	; 8
    14aa:	91 e0       	ldi	r25, 0x01	; 1
    14ac:	90 93 79 01 	sts	0x0179, r25
    14b0:	80 93 78 01 	sts	0x0178, r24
    14b4:	90 93 77 01 	sts	0x0177, r25
    14b8:	80 93 76 01 	sts	0x0176, r24
    14bc:	90 93 75 01 	sts	0x0175, r25
    14c0:	80 93 74 01 	sts	0x0174, r24
	return RESULT_OK;
}
    14c4:	80 e0       	ldi	r24, 0x00	; 0
    14c6:	08 95       	ret

000014c8 <usartIsReceptionComplete>:
 * Checks if a reception has been completed
 * -------------------------------------------------------------------------- */

bool_t usartIsReceptionComplete(void)
{
	return isBitSet(UCSR0A, RXC0);
    14c8:	80 91 c0 00 	lds	r24, 0x00C0
}
    14cc:	88 1f       	adc	r24, r24
    14ce:	88 27       	eor	r24, r24
    14d0:	88 1f       	adc	r24, r24
    14d2:	08 95       	ret

000014d4 <usartIsTransmissionComplete>:
 * Checks if a transmission has been completed
 * -------------------------------------------------------------------------- */

bool_t usartIsTransmissionComplete(void)
{
	return isBitSet(UCSR0A, TXC0);
    14d4:	80 91 c0 00 	lds	r24, 0x00C0
}
    14d8:	86 fb       	bst	r24, 6
    14da:	88 27       	eor	r24, r24
    14dc:	80 f9       	bld	r24, 0
    14de:	08 95       	ret

000014e0 <usartIsBufferEmpty>:
 * Checks if the buffer is empty
 * -------------------------------------------------------------------------- */

bool_t usartIsBufferEmpty(void)
{
	return isBitSet(UCSR0A, UDRE0);
    14e0:	80 91 c0 00 	lds	r24, 0x00C0
}
    14e4:	85 fb       	bst	r24, 5
    14e6:	88 27       	eor	r24, r24
    14e8:	80 f9       	bld	r24, 0
    14ea:	08 95       	ret

000014ec <usartTransmitStd>:
 * Transmits data in 5, 6, 7 or 8 bits modes using the USART controller and
 * standard output heandler
 * -------------------------------------------------------------------------- */

resultValue_t usartTransmitStd(int8 data, FILE * stream)
{
    14ec:	cf 93       	push	r28
    14ee:	c8 2f       	mov	r28, r24
	while(!usartIsBufferEmpty())
    14f0:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <usartIsBufferEmpty>
    14f4:	88 23       	and	r24, r24
    14f6:	e1 f3       	breq	.-8      	; 0x14f0 <usartTransmitStd+0x4>
		;	// Waits until last transmission ends
	UDR0 = data;
    14f8:	c0 93 c6 00 	sts	0x00C6, r28
	return RESULT_OK;
}
    14fc:	80 e0       	ldi	r24, 0x00	; 0
    14fe:	cf 91       	pop	r28
    1500:	08 95       	ret

00001502 <usartCheckError>:

usartError_t usartCheckError(void)
{
	usartError_t error = 0;

	if(isBitSet(UCSR0A, FE0))
    1502:	80 91 c0 00 	lds	r24, 0x00C0
    1506:	84 fd       	sbrc	r24, 4
    1508:	02 c0       	rjmp	.+4      	; 0x150e <usartCheckError+0xc>
 * Checks if an error occurred during transmission or reception
 * -------------------------------------------------------------------------- */

usartError_t usartCheckError(void)
{
	usartError_t error = 0;
    150a:	80 e0       	ldi	r24, 0x00	; 0
    150c:	01 c0       	rjmp	.+2      	; 0x1510 <usartCheckError+0xe>

	if(isBitSet(UCSR0A, FE0))
		error |= USART_FRAME_ERROR;
    150e:	82 e0       	ldi	r24, 0x02	; 2
	if(isBitSet(UCSR0A, DOR0))
    1510:	90 91 c0 00 	lds	r25, 0x00C0
    1514:	93 fd       	sbrc	r25, 3
		error |= USART_PARITY_ERROR;
    1516:	84 60       	ori	r24, 0x04	; 4
	if(isBitSet(UCSR0A, UPE0))
    1518:	90 91 c0 00 	lds	r25, 0x00C0
    151c:	92 ff       	sbrs	r25, 2
    151e:	02 c0       	rjmp	.+4      	; 0x1524 <usartCheckError+0x22>
		error |= USART_BUFFER_OVERFLOW_ERROR;
    1520:	88 60       	ori	r24, 0x08	; 8
    1522:	08 95       	ret

	if(error == 0)
    1524:	81 11       	cpse	r24, r1
    1526:	01 c0       	rjmp	.+2      	; 0x152a <usartCheckError+0x28>
		return USART_OK;
    1528:	81 e0       	ldi	r24, 0x01	; 1
	return error;
}
    152a:	08 95       	ret

0000152c <usartTransmit>:
/* -----------------------------------------------------------------------------
 * Transmits data in 5, 6, 7 or 8 bits modes using the USART controller
 * -------------------------------------------------------------------------- */

resultValue_t usartTransmit(int8 data)
{
    152c:	cf 93       	push	r28
    152e:	c8 2f       	mov	r28, r24
	while(!usartIsBufferEmpty())
    1530:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <usartIsBufferEmpty>
    1534:	88 23       	and	r24, r24
    1536:	e1 f3       	breq	.-8      	; 0x1530 <usartTransmit+0x4>
		;	// Waits until last transmission ends
	UDR0 = data;
    1538:	c0 93 c6 00 	sts	0x00C6, r28
	return RESULT_OK;
}
    153c:	80 e0       	ldi	r24, 0x00	; 0
    153e:	cf 91       	pop	r28
    1540:	08 95       	ret

00001542 <usartTransmit9bits>:
/* -----------------------------------------------------------------------------
 * Transmits data in 9 bits mode using the USART controller
 * -------------------------------------------------------------------------- */

resultValue_t usartTransmit9bits(uint16 data)
{
    1542:	cf 93       	push	r28
    1544:	df 93       	push	r29
    1546:	ec 01       	movw	r28, r24
	uint8 aux;

	while(!usartIsBufferEmpty())
    1548:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <usartIsBufferEmpty>
    154c:	88 23       	and	r24, r24
    154e:	e1 f3       	breq	.-8      	; 0x1548 <usartTransmit9bits+0x6>
		;	// Waits until last transmission ends
	aux = ((data & 0x100) >> 8);
    1550:	ce 01       	movw	r24, r28
    1552:	88 27       	eor	r24, r24
    1554:	91 70       	andi	r25, 0x01	; 1
	if(aux)
		setBit(UCSR0B, TXB80);
    1556:	80 91 c1 00 	lds	r24, 0x00C1
	uint8 aux;

	while(!usartIsBufferEmpty())
		;	// Waits until last transmission ends
	aux = ((data & 0x100) >> 8);
	if(aux)
    155a:	99 23       	and	r25, r25
    155c:	11 f0       	breq	.+4      	; 0x1562 <usartTransmit9bits+0x20>
		setBit(UCSR0B, TXB80);
    155e:	81 60       	ori	r24, 0x01	; 1
    1560:	01 c0       	rjmp	.+2      	; 0x1564 <usartTransmit9bits+0x22>
	else
		clrBit(UCSR0B, TXB80);
    1562:	8e 7f       	andi	r24, 0xFE	; 254
    1564:	80 93 c1 00 	sts	0x00C1, r24
	UDR0 = (uint8)data;
    1568:	c0 93 c6 00 	sts	0x00C6, r28
	return RESULT_OK;
}
    156c:	80 e0       	ldi	r24, 0x00	; 0
    156e:	df 91       	pop	r29
    1570:	cf 91       	pop	r28
    1572:	08 95       	ret

00001574 <usartReceive>:
 * Checks if a reception has been completed
 * -------------------------------------------------------------------------- */

bool_t usartIsReceptionComplete(void)
{
	return isBitSet(UCSR0A, RXC0);
    1574:	80 91 c0 00 	lds	r24, 0x00C0

uint8 usartReceive(void)
{
	uint8 status;

	while(!usartIsReceptionComplete())
    1578:	87 ff       	sbrs	r24, 7
    157a:	fc cf       	rjmp	.-8      	; 0x1574 <usartReceive>
		;	// Waits until last reception ends
	status = UCSR0A;
    157c:	80 91 c0 00 	lds	r24, 0x00C0
	return UDR0;
    1580:	80 91 c6 00 	lds	r24, 0x00C6
}
    1584:	08 95       	ret

00001586 <usartReceive9bits>:
 * Checks if a reception has been completed
 * -------------------------------------------------------------------------- */

bool_t usartIsReceptionComplete(void)
{
	return isBitSet(UCSR0A, RXC0);
    1586:	80 91 c0 00 	lds	r24, 0x00C0
	uint8 status;
	uint8 byteh;
	uint8 bytel;
	uint16 byte;

	while(!usartIsReceptionComplete())
    158a:	87 ff       	sbrs	r24, 7
    158c:	fc cf       	rjmp	.-8      	; 0x1586 <usartReceive9bits>
		;	// Waits until last reception ends
	status = UCSR0A;
    158e:	80 91 c0 00 	lds	r24, 0x00C0
	byteh = UCSR0B;
    1592:	80 91 c1 00 	lds	r24, 0x00C1
	bytel = UDR0;
    1596:	20 91 c6 00 	lds	r18, 0x00C6

	byte = (uint16)(byteh & 0x02) << 7;
    159a:	82 70       	andi	r24, 0x02	; 2
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	96 95       	lsr	r25
    15a0:	98 2f       	mov	r25, r24
    15a2:	88 27       	eor	r24, r24
    15a4:	97 95       	ror	r25
    15a6:	87 95       	ror	r24
	byte |= bytel;
	return  byte;
}
    15a8:	82 2b       	or	r24, r18
    15aa:	08 95       	ret

000015ac <usartClearReceptionBuffer>:
 * Checks if a reception has been completed
 * -------------------------------------------------------------------------- */

bool_t usartIsReceptionComplete(void)
{
	return isBitSet(UCSR0A, RXC0);
    15ac:	80 91 c0 00 	lds	r24, 0x00C0
 * -------------------------------------------------------------------------- */

void usartClearReceptionBuffer(void)
{
	uint8 aux;
	while(usartIsReceptionComplete())
    15b0:	87 ff       	sbrs	r24, 7
    15b2:	03 c0       	rjmp	.+6      	; 0x15ba <usartClearReceptionBuffer+0xe>
		aux = UDR0;
    15b4:	80 91 c6 00 	lds	r24, 0x00C6
    15b8:	f9 cf       	rjmp	.-14     	; 0x15ac <usartClearReceptionBuffer>
	return;
}
    15ba:	08 95       	ret

000015bc <usartAddDataToReceiverBuffer>:
/* -----------------------------------------------------------------------------
 * Adds data to the reception buffer. The function has NO CONTROL of lost data.
 * -------------------------------------------------------------------------- */

void usartAddDataToReceiverBuffer(uint8 data)
{
    15bc:	ff 92       	push	r15
    15be:	0f 93       	push	r16
    15c0:	1f 93       	push	r17
    15c2:	cf 93       	push	r28
    15c4:	df 93       	push	r29
    15c6:	f8 2e       	mov	r15, r24
	if(((usartReceiverBufferNextWrite + 1) % USART_RECEIVER_BUFFER_SIZE) != usartReceiverBufferNextRead){
    15c8:	c0 91 71 01 	lds	r28, 0x0171
    15cc:	d0 e0       	ldi	r29, 0x00	; 0
    15ce:	be 01       	movw	r22, r28
    15d0:	6f 5f       	subi	r22, 0xFF	; 255
    15d2:	7f 4f       	sbci	r23, 0xFF	; 255
    15d4:	88 27       	eor	r24, r24
    15d6:	77 fd       	sbrc	r23, 7
    15d8:	80 95       	com	r24
    15da:	98 2f       	mov	r25, r24
    15dc:	22 e3       	ldi	r18, 0x32	; 50
    15de:	30 e0       	ldi	r19, 0x00	; 0
    15e0:	40 e0       	ldi	r20, 0x00	; 0
    15e2:	50 e0       	ldi	r21, 0x00	; 0
    15e4:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <__udivmodsi4>
    15e8:	00 91 73 01 	lds	r16, 0x0173
    15ec:	10 e0       	ldi	r17, 0x00	; 0
    15ee:	20 e0       	ldi	r18, 0x00	; 0
    15f0:	30 e0       	ldi	r19, 0x00	; 0
    15f2:	60 17       	cp	r22, r16
    15f4:	71 07       	cpc	r23, r17
    15f6:	82 07       	cpc	r24, r18
    15f8:	93 07       	cpc	r25, r19
    15fa:	51 f0       	breq	.+20     	; 0x1610 <usartAddDataToReceiverBuffer+0x54>
		usartReceiverBuffer[usartReceiverBufferNextWrite] = data;
    15fc:	c1 5c       	subi	r28, 0xC1	; 193
    15fe:	de 4f       	sbci	r29, 0xFE	; 254
    1600:	f8 82       	st	Y, r15
		usartReceiverBufferNextWrite = (usartReceiverBufferNextWrite + 1) % USART_RECEIVER_BUFFER_SIZE;
    1602:	60 93 71 01 	sts	0x0171, r22
		usartReceiverBufferLength++;
    1606:	80 91 72 01 	lds	r24, 0x0172
    160a:	8f 5f       	subi	r24, 0xFF	; 255
    160c:	80 93 72 01 	sts	0x0172, r24
	}
	return;
}
    1610:	df 91       	pop	r29
    1612:	cf 91       	pop	r28
    1614:	1f 91       	pop	r17
    1616:	0f 91       	pop	r16
    1618:	ff 90       	pop	r15
    161a:	08 95       	ret

0000161c <usartGetDataFromReceiverBuffer>:
 * usartIsReceiverBufferEmpty() function must be called to check if there is new
 * data in the buffer.
 * -------------------------------------------------------------------------- */

uint8 usartGetDataFromReceiverBuffer(void)
{
    161c:	cf 93       	push	r28
    161e:	df 93       	push	r29
	uint8 data = usartReceiverBuffer[usartReceiverBufferNextRead];
    1620:	60 91 73 01 	lds	r22, 0x0173
    1624:	70 e0       	ldi	r23, 0x00	; 0
    1626:	fb 01       	movw	r30, r22
    1628:	e1 5c       	subi	r30, 0xC1	; 193
    162a:	fe 4f       	sbci	r31, 0xFE	; 254
    162c:	d0 81       	ld	r29, Z
	if(usartReceiverBufferLength > 0){
    162e:	c0 91 72 01 	lds	r28, 0x0172
    1632:	cc 23       	and	r28, r28
    1634:	89 f0       	breq	.+34     	; 0x1658 <usartGetDataFromReceiverBuffer+0x3c>
		usartReceiverBufferNextRead = (usartReceiverBufferNextRead + 1) % USART_RECEIVER_BUFFER_SIZE;
    1636:	6f 5f       	subi	r22, 0xFF	; 255
    1638:	7f 4f       	sbci	r23, 0xFF	; 255
    163a:	88 27       	eor	r24, r24
    163c:	77 fd       	sbrc	r23, 7
    163e:	80 95       	com	r24
    1640:	98 2f       	mov	r25, r24
    1642:	22 e3       	ldi	r18, 0x32	; 50
    1644:	30 e0       	ldi	r19, 0x00	; 0
    1646:	40 e0       	ldi	r20, 0x00	; 0
    1648:	50 e0       	ldi	r21, 0x00	; 0
    164a:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <__udivmodsi4>
    164e:	60 93 73 01 	sts	0x0173, r22
		usartReceiverBufferLength--;
    1652:	c1 50       	subi	r28, 0x01	; 1
    1654:	c0 93 72 01 	sts	0x0172, r28
	}
	return data;
}
    1658:	8d 2f       	mov	r24, r29
    165a:	df 91       	pop	r29
    165c:	cf 91       	pop	r28
    165e:	08 95       	ret

00001660 <usartIsReceiverBufferEmpty>:
 * reading the buffer.
 * -------------------------------------------------------------------------- */

uint8 usartIsReceiverBufferEmpty(void)
{
	if(usartReceiverBufferLength == 0)
    1660:	81 e0       	ldi	r24, 0x01	; 1
    1662:	90 91 72 01 	lds	r25, 0x0172
    1666:	91 11       	cpse	r25, r1
    1668:	80 e0       	ldi	r24, 0x00	; 0
		return TRUE;
	return FALSE;
}
    166a:	08 95       	ret

0000166c <usartGetCurrentBaudRate>:
//	case 2:
//		aux32 = F_CPU / 2 / (UBRR0 + 1);
//		break;
//	}
	return aux32;
 }
    166c:	60 e0       	ldi	r22, 0x00	; 0
    166e:	70 e0       	ldi	r23, 0x00	; 0
    1670:	cb 01       	movw	r24, r22
    1672:	08 95       	ret

00001674 <spiInit>:
/* -----------------------------------------------------------------------------
 * Configures the SPI controller
 * -------------------------------------------------------------------------- */

void spiInit(void)
{
    1674:	08 95       	ret

00001676 <spiMasterTransmit>:
 * Transmit data at the SPI bus in master mode
 * -------------------------------------------------------------------------- */

uint8 spiMasterTransmit(uint8 data)
{
	SPDR = data;
    1676:	8e bd       	out	0x2e, r24	; 46
	waitUntilBitIsClear(SPSR, SPIF);
    1678:	0d b4       	in	r0, 0x2d	; 45
    167a:	07 fc       	sbrc	r0, 7
    167c:	fd cf       	rjmp	.-6      	; 0x1678 <spiMasterTransmit+0x2>
	return SPDR;
    167e:	8e b5       	in	r24, 0x2e	; 46
}
    1680:	08 95       	ret

00001682 <spiSlaveTransmit>:
 * Receives data from the SPI bus
 * -------------------------------------------------------------------------- */

uint8 spiSlaveTransmit(void)
{
	waitUntilBitIsClear(SPSR, SPIF);
    1682:	0d b4       	in	r0, 0x2d	; 45
    1684:	07 fc       	sbrc	r0, 7
    1686:	fd cf       	rjmp	.-6      	; 0x1682 <spiSlaveTransmit>
	return SPDR;
    1688:	8e b5       	in	r24, 0x2e	; 46
}
    168a:	08 95       	ret

0000168c <main>:
	+ (str[2]-48)*10 + str[3]-48);
	return value;
}

int main(void)
{
    168c:	cf 93       	push	r28
    168e:	df 93       	push	r29
    1690:	cd b7       	in	r28, 0x3d	; 61
    1692:	de b7       	in	r29, 0x3e	; 62
    1694:	ce 59       	subi	r28, 0x9E	; 158
    1696:	d1 09       	sbc	r29, r1
    1698:	0f b6       	in	r0, 0x3f	; 63
    169a:	f8 94       	cli
    169c:	de bf       	out	0x3e, r29	; 62
    169e:	0f be       	out	0x3f, r0	; 63
    16a0:	cd bf       	out	0x3d, r28	; 61
	flags.mode = POT_MODE;
    16a2:	80 91 37 01 	lds	r24, 0x0137
    16a6:	83 7f       	andi	r24, 0xF3	; 243
    16a8:	88 60       	ori	r24, 0x08	; 8
    16aa:	80 93 37 01 	sts	0x0137, r24
	status.freq = 1000;
    16ae:	88 ee       	ldi	r24, 0xE8	; 232
    16b0:	93 e0       	ldi	r25, 0x03	; 3
    16b2:	90 93 39 01 	sts	0x0139, r25
    16b6:	80 93 38 01 	sts	0x0138, r24
	// VARIAVEIS LOCAIS;
	char frameData[50];
	uint8 frameIndex = 0;
	char recebido[100] = "";
    16ba:	19 82       	std	Y+1, r1	; 0x01
    16bc:	1a 82       	std	Y+2, r1	; 0x02
    16be:	1b 82       	std	Y+3, r1	; 0x03
    16c0:	1c 82       	std	Y+4, r1	; 0x04
    16c2:	fe 01       	movw	r30, r28
    16c4:	35 96       	adiw	r30, 0x05	; 5
    16c6:	80 e6       	ldi	r24, 0x60	; 96
    16c8:	df 01       	movw	r26, r30
    16ca:	1d 92       	st	X+, r1
    16cc:	8a 95       	dec	r24
    16ce:	e9 f7       	brne	.-6      	; 0x16ca <main+0x3e>
	char msgToSend[8] = "";
    16d0:	c9 56       	subi	r28, 0x69	; 105
    16d2:	df 4f       	sbci	r29, 0xFF	; 255
    16d4:	18 82       	st	Y, r1
    16d6:	19 82       	std	Y+1, r1	; 0x01
    16d8:	1a 82       	std	Y+2, r1	; 0x02
    16da:	1b 82       	std	Y+3, r1	; 0x03
    16dc:	c7 59       	subi	r28, 0x97	; 151
    16de:	d0 40       	sbci	r29, 0x00	; 0
    16e0:	c5 56       	subi	r28, 0x65	; 101
    16e2:	df 4f       	sbci	r29, 0xFF	; 255
    16e4:	18 82       	st	Y, r1
    16e6:	19 82       	std	Y+1, r1	; 0x01
    16e8:	1a 82       	std	Y+2, r1	; 0x02
    16ea:	1b 82       	std	Y+3, r1	; 0x03
    16ec:	cb 59       	subi	r28, 0x9B	; 155
    16ee:	d0 40       	sbci	r29, 0x00	; 0
	uint8 pos =  0;
	
	// CONFIGURA ADC
	clrBit(DDRC,POT_BIT);		//SETA O PINO DO ADC COMO ENTRADA
    16f0:	39 98       	cbi	0x07, 1	; 7
	adcConfig(ADC_MODE_SINGLE_CONVERSION, ADC_REFRENCE_POWER_SUPPLY , ADC_PRESCALER_128);
    16f2:	47 e0       	ldi	r20, 0x07	; 7
    16f4:	61 e0       	ldi	r22, 0x01	; 1
    16f6:	80 e0       	ldi	r24, 0x00	; 0
    16f8:	0e 94 ee 08 	call	0x11dc	; 0x11dc <adcConfig>
	adcSelectChannel(POT_CHANNEL);
    16fc:	81 e0       	ldi	r24, 0x01	; 1
    16fe:	0e 94 2f 09 	call	0x125e	; 0x125e <adcSelectChannel>
	adcClearInterruptRequest();
    1702:	0e 94 61 09 	call	0x12c2	; 0x12c2 <adcClearInterruptRequest>
	adcActivateInterrupt();
    1706:	0e 94 68 09 	call	0x12d0	; 0x12d0 <adcActivateInterrupt>
	adcEnable();
    170a:	0e 94 53 09 	call	0x12a6	; 0x12a6 <adcEnable>
	adcStartConversion();
    170e:	0e 94 76 09 	call	0x12ec	; 0x12ec <adcStartConversion>
	
	// CONFIGURA PWM
	timer1Config(TIMER_B_MODE_CTC, TIMER_A_PRESCALER_64);
    1712:	63 e0       	ldi	r22, 0x03	; 3
    1714:	84 e0       	ldi	r24, 0x04	; 4
    1716:	0e 94 a5 07 	call	0xf4a	; 0xf4a <timer1Config>
	timer1ClearCompareBInterruptRequest();									
    171a:	0e 94 10 08 	call	0x1020	; 0x1020 <timer1ClearCompareBInterruptRequest>
	timer1ClearCompareAInterruptRequest();
    171e:	0e 94 ff 07 	call	0xffe	; 0xffe <timer1ClearCompareAInterruptRequest>
	timer1ActivateCompareBInterrupt();									//ativa a interrupcao do compA
    1722:	0e 94 02 08 	call	0x1004	; 0x1004 <timer1ActivateCompareBInterrupt>
	timer1ActivateCompareAInterrupt();									//ativa a interrupcao do compB
    1726:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <timer1ActivateCompareAInterrupt>
	timer1SetCompareAValue((F_CPU/64)/status.freq);							//valor do comparador A,  define a frequencia
    172a:	20 91 38 01 	lds	r18, 0x0138
    172e:	30 91 39 01 	lds	r19, 0x0139
    1732:	40 e0       	ldi	r20, 0x00	; 0
    1734:	50 e0       	ldi	r21, 0x00	; 0
    1736:	60 e9       	ldi	r22, 0x90	; 144
    1738:	70 ed       	ldi	r23, 0xD0	; 208
    173a:	83 e0       	ldi	r24, 0x03	; 3
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <__udivmodsi4>
    1742:	c9 01       	movw	r24, r18
    1744:	0e 94 40 08 	call	0x1080	; 0x1080 <timer1SetCompareAValue>
	timer1SetCompareBValue((status.dc * (timer1GetCompareAValue()))/100);		//valor do comparador B,  define Duty Cicle
    1748:	00 91 3b 01 	lds	r16, 0x013B
    174c:	10 e0       	ldi	r17, 0x00	; 0
    174e:	0e 94 49 08 	call	0x1092	; 0x1092 <timer1GetCompareAValue>
    1752:	9c 01       	movw	r18, r24
    1754:	20 9f       	mul	r18, r16
    1756:	c0 01       	movw	r24, r0
    1758:	21 9f       	mul	r18, r17
    175a:	90 0d       	add	r25, r0
    175c:	30 9f       	mul	r19, r16
    175e:	90 0d       	add	r25, r0
    1760:	11 24       	eor	r1, r1
    1762:	64 e6       	ldi	r22, 0x64	; 100
    1764:	70 e0       	ldi	r23, 0x00	; 0
    1766:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <__udivmodhi4>
    176a:	cb 01       	movw	r24, r22
    176c:	0e 94 4e 08 	call	0x109c	; 0x109c <timer1SetCompareBValue>

	// CONFIGURA A INTERRUPÇÃO DE CONTROLE(60Hz)
	timer0Config(TIMER_A_MODE_NORMAL, TIMER_A_PRESCALER_1024);			
    1770:	65 e0       	ldi	r22, 0x05	; 5
    1772:	80 e0       	ldi	r24, 0x00	; 0
    1774:	0e 94 00 07 	call	0xe00	; 0xe00 <timer0Config>
	timer0ClearOverflowInterruptRequest();								//limpa a interrupcao de OVF
    1778:	0e 94 73 07 	call	0xee6	; 0xee6 <timer0ClearOverflowInterruptRequest>
	timer0ActivateOverflowInterrupt();							
    177c:	0e 94 67 07 	call	0xece	; 0xece <timer0ActivateOverflowInterrupt>
	if (flags.mode == SERIAL_MODE)
    1780:	80 91 37 01 	lds	r24, 0x0137
    1784:	8c 70       	andi	r24, 0x0C	; 12
    1786:	84 30       	cpi	r24, 0x04	; 4
    1788:	81 f4       	brne	.+32     	; 0x17aa <main+0x11e>
	{
		// CONFIGURA A USART
		usartConfig(USART_MODE_ASYNCHRONOUS,USART_BAUD_9600 ,USART_DATA_BITS_8,USART_PARITY_NONE,USART_STOP_BIT_SINGLE);
    178a:	e1 2c       	mov	r14, r1
    178c:	00 e0       	ldi	r16, 0x00	; 0
    178e:	23 e0       	ldi	r18, 0x03	; 3
    1790:	40 e8       	ldi	r20, 0x80	; 128
    1792:	55 e2       	ldi	r21, 0x25	; 37
    1794:	60 e0       	ldi	r22, 0x00	; 0
    1796:	70 e0       	ldi	r23, 0x00	; 0
    1798:	80 e0       	ldi	r24, 0x00	; 0
    179a:	0e 94 89 09 	call	0x1312	; 0x1312 <usartConfig>
		usartEnableReceiver();
    179e:	0e 94 0e 0a 	call	0x141c	; 0x141c <usartEnableReceiver>
		usartEnableTransmitter();
    17a2:	0e 94 1c 0a 	call	0x1438	; 0x1438 <usartEnableTransmitter>
		usartActivateReceptionCompleteInterrupt();
    17a6:	0e 94 2a 0a 	call	0x1454	; 0x1454 <usartActivateReceptionCompleteInterrupt>
	}

	sei();
    17aa:	78 94       	sei
	
	setBit(PWM_DDR,PWM_BIT);			//define o pino do pwm como saída
    17ac:	21 9a       	sbi	0x04, 1	; 4

	setBit(ON_PORT,ON_BIT);				//habilita o pull-up da chave on
    17ae:	5d 9a       	sbi	0x0b, 5	; 11
	setBit(DMS_PORT,DMS_BIT);			//habilita o pull-up da chave dms
    17b0:	5c 9a       	sbi	0x0b, 4	; 11

//configura o buzzer e da sinal de alerta de ligação
	setBit(BUZZER_DDR,BUZZER_BIT);			
    17b2:	3c 9a       	sbi	0x07, 4	; 7
	setBit(BUZZER_PORT,BUZZER_BIT);
    17b4:	44 9a       	sbi	0x08, 4	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    17b6:	3f ef       	ldi	r19, 0xFF	; 255
    17b8:	83 ed       	ldi	r24, 0xD3	; 211
    17ba:	90 e3       	ldi	r25, 0x30	; 48
    17bc:	31 50       	subi	r19, 0x01	; 1
    17be:	80 40       	sbci	r24, 0x00	; 0
    17c0:	90 40       	sbci	r25, 0x00	; 0
    17c2:	e1 f7       	brne	.-8      	; 0x17bc <main+0x130>
    17c4:	00 c0       	rjmp	.+0      	; 0x17c6 <main+0x13a>
    17c6:	00 00       	nop
	_delay_ms(1000);
	clrBit(BUZZER_PORT,BUZZER_BIT);
    17c8:	44 98       	cbi	0x08, 4	; 8
{
	flags.mode = POT_MODE;
	status.freq = 1000;
	// VARIAVEIS LOCAIS;
	char frameData[50];
	uint8 frameIndex = 0;
    17ca:	00 e0       	ldi	r16, 0x00	; 0
	setBit(PORTD,PD0);			
*/

    while(1)
    {
    	if(flags.mode == SERIAL_MODE)
    17cc:	80 91 37 01 	lds	r24, 0x0137
    17d0:	8c 70       	andi	r24, 0x0C	; 12
    17d2:	84 30       	cpi	r24, 0x04	; 4
    17d4:	b9 f0       	breq	.+46     	; 0x1804 <main+0x178>
    17d6:	ff cf       	rjmp	.-2      	; 0x17d6 <main+0x14a>
    	{
	    	while(!usartIsReceiverBufferEmpty())
	    	{
				frameData[frameIndex++] = usartGetDataFromReceiverBuffer();
    17d8:	11 e0       	ldi	r17, 0x01	; 1
    17da:	10 0f       	add	r17, r16
    17dc:	0e 94 0e 0b 	call	0x161c	; 0x161c <usartGetDataFromReceiverBuffer>
    17e0:	e5 e6       	ldi	r30, 0x65	; 101
    17e2:	f0 e0       	ldi	r31, 0x00	; 0
    17e4:	ec 0f       	add	r30, r28
    17e6:	fd 1f       	adc	r31, r29
    17e8:	e0 0f       	add	r30, r16
    17ea:	f1 1d       	adc	r31, r1
    17ec:	80 83       	st	Z, r24
				if ((frameData[frameIndex-1] == FINALDOPACOTE))
    17ee:	e5 e6       	ldi	r30, 0x65	; 101
    17f0:	f0 e0       	ldi	r31, 0x00	; 0
    17f2:	ec 0f       	add	r30, r28
    17f4:	fd 1f       	adc	r31, r29
    17f6:	e1 0f       	add	r30, r17
    17f8:	f1 1d       	adc	r31, r1
    17fa:	31 97       	sbiw	r30, 0x01	; 1
    17fc:	80 81       	ld	r24, Z
    17fe:	8a 32       	cpi	r24, 0x2A	; 42
    1800:	31 f0       	breq	.+12     	; 0x180e <main+0x182>
    {
    	if(flags.mode == SERIAL_MODE)
    	{
	    	while(!usartIsReceiverBufferEmpty())
	    	{
				frameData[frameIndex++] = usartGetDataFromReceiverBuffer();
    1802:	01 2f       	mov	r16, r17

    while(1)
    {
    	if(flags.mode == SERIAL_MODE)
    	{
	    	while(!usartIsReceiverBufferEmpty())
    1804:	0e 94 30 0b 	call	0x1660	; 0x1660 <usartIsReceiverBufferEmpty>
    1808:	88 23       	and	r24, r24
    180a:	31 f3       	breq	.-52     	; 0x17d8 <main+0x14c>
    180c:	df cf       	rjmp	.-66     	; 0x17cc <main+0x140>
	    	{
				frameData[frameIndex++] = usartGetDataFromReceiverBuffer();
				if ((frameData[frameIndex-1] == FINALDOPACOTE))
				{//se esta no final da palavra
					if(frameData[0] == INICIODOPACOTE )
    180e:	a6 96       	adiw	r28, 0x26	; 38
    1810:	8f ad       	ldd	r24, Y+63	; 0x3f
    1812:	a6 97       	sbiw	r28, 0x26	; 38
    1814:	80 34       	cpi	r24, 0x40	; 64
    1816:	09 f0       	breq	.+2      	; 0x181a <main+0x18e>
    1818:	f2 c0       	rjmp	.+484    	; 0x19fe <main+0x372>
					{//verifica se o inicio da palavra esta correto
						strcpy(recebido,frameData);
    181a:	be 01       	movw	r22, r28
    181c:	6b 59       	subi	r22, 0x9B	; 155
    181e:	7f 4f       	sbci	r23, 0xFF	; 255
    1820:	ce 01       	movw	r24, r28
    1822:	01 96       	adiw	r24, 0x01	; 1
    1824:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <strcpy>
						pos = (recebido[2]-48) + (recebido[1] - 48)*10;
    1828:	8b 81       	ldd	r24, Y+3	; 0x03
    182a:	80 53       	subi	r24, 0x30	; 48
    182c:	9a 81       	ldd	r25, Y+2	; 0x02
    182e:	99 0f       	add	r25, r25
    1830:	90 56       	subi	r25, 0x60	; 96
    1832:	29 2f       	mov	r18, r25
    1834:	22 0f       	add	r18, r18
    1836:	22 0f       	add	r18, r18
    1838:	29 0f       	add	r18, r25
    183a:	82 0f       	add	r24, r18
						if(frameIndex == GETWORDSIZE)
    183c:	14 30       	cpi	r17, 0x04	; 4
    183e:	09 f0       	breq	.+2      	; 0x1842 <main+0x1b6>
    1840:	68 c0       	rjmp	.+208    	; 0x1912 <main+0x286>
						{
							memcpy( recebido,  (recebido+1), 2);
    1842:	2a 81       	ldd	r18, Y+2	; 0x02
    1844:	3b 81       	ldd	r19, Y+3	; 0x03
    1846:	3a 83       	std	Y+2, r19	; 0x02
    1848:	29 83       	std	Y+1, r18	; 0x01
							recebido[2] = '\0';//isola o id
    184a:	1b 82       	std	Y+3, r1	; 0x03
							switch (pos)
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	8e 30       	cpi	r24, 0x0E	; 14
    1850:	91 05       	cpc	r25, r1
    1852:	08 f0       	brcs	.+2      	; 0x1856 <main+0x1ca>
    1854:	44 c0       	rjmp	.+136    	; 0x18de <main+0x252>
    1856:	fc 01       	movw	r30, r24
    1858:	ec 5c       	subi	r30, 0xCC	; 204
    185a:	ff 4f       	sbci	r31, 0xFF	; 255
    185c:	0c 94 39 0d 	jmp	0x1a72	; 0x1a72 <__tablejump2__>
							{
								case 0:
									strcpy(msgToSend,"OK");
    1860:	66 e1       	ldi	r22, 0x16	; 22
    1862:	71 e0       	ldi	r23, 0x01	; 1
    1864:	3e c0       	rjmp	.+124    	; 0x18e2 <main+0x256>
									break;
								case 1:
									uint16ToString4(msgToSend,status.freq);
    1866:	60 91 38 01 	lds	r22, 0x0138
    186a:	70 91 39 01 	lds	r23, 0x0139
    186e:	ce 01       	movw	r24, r28
    1870:	89 56       	subi	r24, 0x69	; 105
    1872:	9f 4f       	sbci	r25, 0xFF	; 255
    1874:	0e 94 fe 00 	call	0x1fc	; 0x1fc <uint16ToString4>
									break;
    1878:	39 c0       	rjmp	.+114    	; 0x18ec <main+0x260>
								case 2:
									uint8ToString4(msgToSend,maxCurrent);
    187a:	60 91 06 01 	lds	r22, 0x0106
    187e:	28 c0       	rjmp	.+80     	; 0x18d0 <main+0x244>
									break;
								case 3:
									uint8ToString4(msgToSend,maxDC);
    1880:	60 91 04 01 	lds	r22, 0x0104
    1884:	25 c0       	rjmp	.+74     	; 0x18d0 <main+0x244>
									break;
								case 4:
									uint8ToString4(msgToSend,minDC);
    1886:	60 91 05 01 	lds	r22, 0x0105
    188a:	22 c0       	rjmp	.+68     	; 0x18d0 <main+0x244>
									break;
								case 5:
									uint8ToString4(msgToSend,maxDV);
    188c:	60 91 03 01 	lds	r22, 0x0103
    1890:	1f c0       	rjmp	.+62     	; 0x18d0 <main+0x244>
									break;
								case 6 :
									if(flags.on)
    1892:	80 91 37 01 	lds	r24, 0x0137
    1896:	84 ff       	sbrs	r24, 4
    1898:	07 c0       	rjmp	.+14     	; 0x18a8 <main+0x21c>
										strcpy(msgToSend, "0001");
    189a:	69 e1       	ldi	r22, 0x19	; 25
    189c:	71 e0       	ldi	r23, 0x01	; 1
    189e:	21 c0       	rjmp	.+66     	; 0x18e2 <main+0x256>
									else
										strcpy(msgToSend, "0000");
									break;
								case 7:
									if(flags.dms)
    18a0:	80 91 37 01 	lds	r24, 0x0137
    18a4:	85 fd       	sbrc	r24, 5
    18a6:	f9 cf       	rjmp	.-14     	; 0x189a <main+0x20e>
									break;
								case 6 :
									if(flags.on)
										strcpy(msgToSend, "0001");
									else
										strcpy(msgToSend, "0000");
    18a8:	6e e1       	ldi	r22, 0x1E	; 30
    18aa:	71 e0       	ldi	r23, 0x01	; 1
    18ac:	1a c0       	rjmp	.+52     	; 0x18e2 <main+0x256>
										strcpy(msgToSend, "0001");
									else
										strcpy(msgToSend, "0000");
									break;
								case 8:
									uint8ToString4(msgToSend,maxTemp);
    18ae:	60 91 02 01 	lds	r22, 0x0102
    18b2:	0e c0       	rjmp	.+28     	; 0x18d0 <main+0x244>
									break;
								case 9:
									uint8ToString4(msgToSend,minVotage);
    18b4:	60 91 00 01 	lds	r22, 0x0100
    18b8:	0b c0       	rjmp	.+22     	; 0x18d0 <main+0x244>
									break;
								case 10:
									uint8ToString4(msgToSend,status.dc);
    18ba:	60 91 3b 01 	lds	r22, 0x013B
    18be:	08 c0       	rjmp	.+16     	; 0x18d0 <main+0x244>
									break;
								case 11:
									uint8ToString4(msgToSend,status.temperature);
    18c0:	60 91 3c 01 	lds	r22, 0x013C
    18c4:	05 c0       	rjmp	.+10     	; 0x18d0 <main+0x244>
									break;
								case 12:
									uint8ToString4(msgToSend,status.current);
    18c6:	60 91 3a 01 	lds	r22, 0x013A
    18ca:	02 c0       	rjmp	.+4      	; 0x18d0 <main+0x244>
									break;
								case 13:
									uint8ToString4(msgToSend,status.voltage);
    18cc:	60 91 3d 01 	lds	r22, 0x013D
    18d0:	70 e0       	ldi	r23, 0x00	; 0
    18d2:	ce 01       	movw	r24, r28
    18d4:	89 56       	subi	r24, 0x69	; 105
    18d6:	9f 4f       	sbci	r25, 0xFF	; 255
    18d8:	0e 94 32 01 	call	0x264	; 0x264 <uint8ToString4>
									break;
    18dc:	07 c0       	rjmp	.+14     	; 0x18ec <main+0x260>
								default:
									strcpy(msgToSend,"ERRO");
    18de:	63 e2       	ldi	r22, 0x23	; 35
    18e0:	71 e0       	ldi	r23, 0x01	; 1
    18e2:	ce 01       	movw	r24, r28
    18e4:	89 56       	subi	r24, 0x69	; 105
    18e6:	9f 4f       	sbci	r25, 0xFF	; 255
    18e8:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <strcpy>
							}
							strcat(recebido,msgToSend);
    18ec:	be 01       	movw	r22, r28
    18ee:	69 56       	subi	r22, 0x69	; 105
    18f0:	7f 4f       	sbci	r23, 0xFF	; 255
    18f2:	ce 01       	movw	r24, r28
    18f4:	01 96       	adiw	r24, 0x01	; 1
    18f6:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <strcat>
							strcpy(msgToSend,recebido);
    18fa:	be 01       	movw	r22, r28
    18fc:	6f 5f       	subi	r22, 0xFF	; 255
    18fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1900:	ce 01       	movw	r24, r28
    1902:	89 56       	subi	r24, 0x69	; 105
    1904:	9f 4f       	sbci	r25, 0xFF	; 255
    1906:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <strcpy>

							stringTransmit(msgToSend);
    190a:	ce 01       	movw	r24, r28
    190c:	89 56       	subi	r24, 0x69	; 105
    190e:	9f 4f       	sbci	r25, 0xFF	; 255
    1910:	6f c0       	rjmp	.+222    	; 0x19f0 <main+0x364>
						}
						else
						{
							if(frameIndex == SETWORDSIZE)
    1912:	18 30       	cpi	r17, 0x08	; 8
    1914:	09 f0       	breq	.+2      	; 0x1918 <main+0x28c>
    1916:	6f c0       	rjmp	.+222    	; 0x19f6 <main+0x36a>
							{
								memcpy((void *) recebido, (void *) (recebido+3), 4);//isola somente o valor, usando 4 caracteres
    1918:	4c 81       	ldd	r20, Y+4	; 0x04
    191a:	5d 81       	ldd	r21, Y+5	; 0x05
    191c:	6e 81       	ldd	r22, Y+6	; 0x06
    191e:	7f 81       	ldd	r23, Y+7	; 0x07
    1920:	49 83       	std	Y+1, r20	; 0x01
    1922:	5a 83       	std	Y+2, r21	; 0x02
    1924:	6b 83       	std	Y+3, r22	; 0x03
    1926:	7c 83       	std	Y+4, r23	; 0x04
								recebido[4] = '\0';
    1928:	1d 82       	std	Y+5, r1	; 0x05

								switch (pos){
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	fc 01       	movw	r30, r24
    192e:	31 97       	sbiw	r30, 0x01	; 1
    1930:	ea 30       	cpi	r30, 0x0A	; 10
    1932:	f1 05       	cpc	r31, r1
    1934:	08 f0       	brcs	.+2      	; 0x1938 <main+0x2ac>
    1936:	5a c0       	rjmp	.+180    	; 0x19ec <main+0x360>
    1938:	ee 5b       	subi	r30, 0xBE	; 190
    193a:	ff 4f       	sbci	r31, 0xFF	; 255
    193c:	0c 94 39 0d 	jmp	0x1a72	; 0x1a72 <__tablejump2__>
									case 1:
										seta_freq(string4ToUint16(recebido));
    1940:	ce 01       	movw	r24, r28
    1942:	01 96       	adiw	r24, 0x01	; 1
    1944:	0e 94 5d 01 	call	0x2ba	; 0x2ba <string4ToUint16>
    1948:	0e 94 aa 00 	call	0x154	; 0x154 <seta_freq>
										break;
    194c:	5a c0       	rjmp	.+180    	; 0x1a02 <main+0x376>
									case 2:
										maxCurrent = string4Touint8(recebido);
    194e:	ce 01       	movw	r24, r28
    1950:	01 96       	adiw	r24, 0x01	; 1
    1952:	0e 94 88 01 	call	0x310	; 0x310 <string4Touint8>
    1956:	80 93 06 01 	sts	0x0106, r24
										break;
    195a:	53 c0       	rjmp	.+166    	; 0x1a02 <main+0x376>
									case 3:
										maxDC = string4Touint8(recebido);
    195c:	ce 01       	movw	r24, r28
    195e:	01 96       	adiw	r24, 0x01	; 1
    1960:	0e 94 88 01 	call	0x310	; 0x310 <string4Touint8>
    1964:	80 93 04 01 	sts	0x0104, r24
										break;
    1968:	4c c0       	rjmp	.+152    	; 0x1a02 <main+0x376>
									case 4:
										minDC = string4Touint8(recebido);
    196a:	ce 01       	movw	r24, r28
    196c:	01 96       	adiw	r24, 0x01	; 1
    196e:	0e 94 88 01 	call	0x310	; 0x310 <string4Touint8>
    1972:	80 93 05 01 	sts	0x0105, r24
										seta_dc(dcReq);
    1976:	80 91 34 01 	lds	r24, 0x0134
    197a:	35 c0       	rjmp	.+106    	; 0x19e6 <main+0x35a>
										break;
									case 5:
										maxDV = string4Touint8(recebido);
    197c:	ce 01       	movw	r24, r28
    197e:	01 96       	adiw	r24, 0x01	; 1
    1980:	0e 94 88 01 	call	0x310	; 0x310 <string4Touint8>
    1984:	80 93 03 01 	sts	0x0103, r24
										break;
    1988:	3c c0       	rjmp	.+120    	; 0x1a02 <main+0x376>
									case 6 :
										if(recebido[3] == '1')
    198a:	8c 81       	ldd	r24, Y+4	; 0x04
    198c:	81 33       	cpi	r24, 0x31	; 49
    198e:	21 f4       	brne	.+8      	; 0x1998 <main+0x30c>
											flags.on = 1;
    1990:	80 91 37 01 	lds	r24, 0x0137
    1994:	80 61       	ori	r24, 0x10	; 16
    1996:	0c c0       	rjmp	.+24     	; 0x19b0 <main+0x324>
										if(recebido[3] == '0')
    1998:	80 33       	cpi	r24, 0x30	; 48
    199a:	99 f5       	brne	.+102    	; 0x1a02 <main+0x376>
											flags.on = 0;
    199c:	80 91 37 01 	lds	r24, 0x0137
    19a0:	8f 7e       	andi	r24, 0xEF	; 239
    19a2:	06 c0       	rjmp	.+12     	; 0x19b0 <main+0x324>
										break;
									case 7:
										if(recebido[3] == '1')
    19a4:	8c 81       	ldd	r24, Y+4	; 0x04
    19a6:	81 33       	cpi	r24, 0x31	; 49
    19a8:	31 f4       	brne	.+12     	; 0x19b6 <main+0x32a>
											flags.dms = 1;
    19aa:	80 91 37 01 	lds	r24, 0x0137
    19ae:	80 62       	ori	r24, 0x20	; 32
    19b0:	80 93 37 01 	sts	0x0137, r24
    19b4:	26 c0       	rjmp	.+76     	; 0x1a02 <main+0x376>
										if(recebido[3] == '0')
    19b6:	80 33       	cpi	r24, 0x30	; 48
    19b8:	21 f5       	brne	.+72     	; 0x1a02 <main+0x376>
											flags.dms = 0;
    19ba:	80 91 37 01 	lds	r24, 0x0137
    19be:	8f 7d       	andi	r24, 0xDF	; 223
    19c0:	f7 cf       	rjmp	.-18     	; 0x19b0 <main+0x324>
										break;
									case 8:
										maxTemp = string4Touint8(recebido);
    19c2:	ce 01       	movw	r24, r28
    19c4:	01 96       	adiw	r24, 0x01	; 1
    19c6:	0e 94 88 01 	call	0x310	; 0x310 <string4Touint8>
    19ca:	80 93 02 01 	sts	0x0102, r24
										break;
    19ce:	19 c0       	rjmp	.+50     	; 0x1a02 <main+0x376>
									case 9:
										minVotage = string4Touint8(recebido);
    19d0:	ce 01       	movw	r24, r28
    19d2:	01 96       	adiw	r24, 0x01	; 1
    19d4:	0e 94 88 01 	call	0x310	; 0x310 <string4Touint8>
    19d8:	80 93 00 01 	sts	0x0100, r24
										break;
    19dc:	12 c0       	rjmp	.+36     	; 0x1a02 <main+0x376>
									case 10:
										seta_dc(string4Touint8(recebido));
    19de:	ce 01       	movw	r24, r28
    19e0:	01 96       	adiw	r24, 0x01	; 1
    19e2:	0e 94 88 01 	call	0x310	; 0x310 <string4Touint8>
    19e6:	0e 94 83 00 	call	0x106	; 0x106 <seta_dc>
										break;
    19ea:	0b c0       	rjmp	.+22     	; 0x1a02 <main+0x376>
									case 11:
									case 12:
									case 13:

									default:
										stringTransmit("ERRO");
    19ec:	83 e2       	ldi	r24, 0x23	; 35
    19ee:	91 e0       	ldi	r25, 0x01	; 1
    19f0:	0e 94 e6 00 	call	0x1cc	; 0x1cc <stringTransmit>
    19f4:	06 c0       	rjmp	.+12     	; 0x1a02 <main+0x376>
								}
							}
							else
							{
								stringTransmit("wrong size");	
    19f6:	88 e2       	ldi	r24, 0x28	; 40
    19f8:	91 e0       	ldi	r25, 0x01	; 1
    19fa:	0e 94 e6 00 	call	0x1cc	; 0x1cc <stringTransmit>
							}
						}
					}
					else
					{//se o inicio da palavra nao esta correto
						esvaziaBuffer();
    19fe:	0e 94 de 00 	call	0x1bc	; 0x1bc <esvaziaBuffer>
    1a02:	00 e0       	ldi	r16, 0x00	; 0
    1a04:	ff ce       	rjmp	.-514    	; 0x1804 <main+0x178>

00001a06 <__udivmodhi4>:
    1a06:	aa 1b       	sub	r26, r26
    1a08:	bb 1b       	sub	r27, r27
    1a0a:	51 e1       	ldi	r21, 0x11	; 17
    1a0c:	07 c0       	rjmp	.+14     	; 0x1a1c <__udivmodhi4_ep>

00001a0e <__udivmodhi4_loop>:
    1a0e:	aa 1f       	adc	r26, r26
    1a10:	bb 1f       	adc	r27, r27
    1a12:	a6 17       	cp	r26, r22
    1a14:	b7 07       	cpc	r27, r23
    1a16:	10 f0       	brcs	.+4      	; 0x1a1c <__udivmodhi4_ep>
    1a18:	a6 1b       	sub	r26, r22
    1a1a:	b7 0b       	sbc	r27, r23

00001a1c <__udivmodhi4_ep>:
    1a1c:	88 1f       	adc	r24, r24
    1a1e:	99 1f       	adc	r25, r25
    1a20:	5a 95       	dec	r21
    1a22:	a9 f7       	brne	.-22     	; 0x1a0e <__udivmodhi4_loop>
    1a24:	80 95       	com	r24
    1a26:	90 95       	com	r25
    1a28:	bc 01       	movw	r22, r24
    1a2a:	cd 01       	movw	r24, r26
    1a2c:	08 95       	ret

00001a2e <__udivmodsi4>:
    1a2e:	a1 e2       	ldi	r26, 0x21	; 33
    1a30:	1a 2e       	mov	r1, r26
    1a32:	aa 1b       	sub	r26, r26
    1a34:	bb 1b       	sub	r27, r27
    1a36:	fd 01       	movw	r30, r26
    1a38:	0d c0       	rjmp	.+26     	; 0x1a54 <__udivmodsi4_ep>

00001a3a <__udivmodsi4_loop>:
    1a3a:	aa 1f       	adc	r26, r26
    1a3c:	bb 1f       	adc	r27, r27
    1a3e:	ee 1f       	adc	r30, r30
    1a40:	ff 1f       	adc	r31, r31
    1a42:	a2 17       	cp	r26, r18
    1a44:	b3 07       	cpc	r27, r19
    1a46:	e4 07       	cpc	r30, r20
    1a48:	f5 07       	cpc	r31, r21
    1a4a:	20 f0       	brcs	.+8      	; 0x1a54 <__udivmodsi4_ep>
    1a4c:	a2 1b       	sub	r26, r18
    1a4e:	b3 0b       	sbc	r27, r19
    1a50:	e4 0b       	sbc	r30, r20
    1a52:	f5 0b       	sbc	r31, r21

00001a54 <__udivmodsi4_ep>:
    1a54:	66 1f       	adc	r22, r22
    1a56:	77 1f       	adc	r23, r23
    1a58:	88 1f       	adc	r24, r24
    1a5a:	99 1f       	adc	r25, r25
    1a5c:	1a 94       	dec	r1
    1a5e:	69 f7       	brne	.-38     	; 0x1a3a <__udivmodsi4_loop>
    1a60:	60 95       	com	r22
    1a62:	70 95       	com	r23
    1a64:	80 95       	com	r24
    1a66:	90 95       	com	r25
    1a68:	9b 01       	movw	r18, r22
    1a6a:	ac 01       	movw	r20, r24
    1a6c:	bd 01       	movw	r22, r26
    1a6e:	cf 01       	movw	r24, r30
    1a70:	08 95       	ret

00001a72 <__tablejump2__>:
    1a72:	ee 0f       	add	r30, r30
    1a74:	ff 1f       	adc	r31, r31

00001a76 <__tablejump__>:
    1a76:	05 90       	lpm	r0, Z+
    1a78:	f4 91       	lpm	r31, Z
    1a7a:	e0 2d       	mov	r30, r0
    1a7c:	09 94       	ijmp

00001a7e <__ashrdi3>:
    1a7e:	97 fb       	bst	r25, 7
    1a80:	10 f8       	bld	r1, 0

00001a82 <__lshrdi3>:
    1a82:	16 94       	lsr	r1
    1a84:	00 08       	sbc	r0, r0
    1a86:	0f 93       	push	r16
    1a88:	08 30       	cpi	r16, 0x08	; 8
    1a8a:	98 f0       	brcs	.+38     	; 0x1ab2 <__lshrdi3+0x30>
    1a8c:	08 50       	subi	r16, 0x08	; 8
    1a8e:	23 2f       	mov	r18, r19
    1a90:	34 2f       	mov	r19, r20
    1a92:	45 2f       	mov	r20, r21
    1a94:	56 2f       	mov	r21, r22
    1a96:	67 2f       	mov	r22, r23
    1a98:	78 2f       	mov	r23, r24
    1a9a:	89 2f       	mov	r24, r25
    1a9c:	90 2d       	mov	r25, r0
    1a9e:	f4 cf       	rjmp	.-24     	; 0x1a88 <__lshrdi3+0x6>
    1aa0:	05 94       	asr	r0
    1aa2:	97 95       	ror	r25
    1aa4:	87 95       	ror	r24
    1aa6:	77 95       	ror	r23
    1aa8:	67 95       	ror	r22
    1aaa:	57 95       	ror	r21
    1aac:	47 95       	ror	r20
    1aae:	37 95       	ror	r19
    1ab0:	27 95       	ror	r18
    1ab2:	0a 95       	dec	r16
    1ab4:	aa f7       	brpl	.-22     	; 0x1aa0 <__lshrdi3+0x1e>
    1ab6:	0f 91       	pop	r16
    1ab8:	08 95       	ret

00001aba <strcat>:
    1aba:	fb 01       	movw	r30, r22
    1abc:	dc 01       	movw	r26, r24
    1abe:	0d 90       	ld	r0, X+
    1ac0:	00 20       	and	r0, r0
    1ac2:	e9 f7       	brne	.-6      	; 0x1abe <strcat+0x4>
    1ac4:	11 97       	sbiw	r26, 0x01	; 1
    1ac6:	01 90       	ld	r0, Z+
    1ac8:	0d 92       	st	X+, r0
    1aca:	00 20       	and	r0, r0
    1acc:	e1 f7       	brne	.-8      	; 0x1ac6 <strcat+0xc>
    1ace:	08 95       	ret

00001ad0 <strcpy>:
    1ad0:	fb 01       	movw	r30, r22
    1ad2:	dc 01       	movw	r26, r24
    1ad4:	01 90       	ld	r0, Z+
    1ad6:	0d 92       	st	X+, r0
    1ad8:	00 20       	and	r0, r0
    1ada:	e1 f7       	brne	.-8      	; 0x1ad4 <strcpy+0x4>
    1adc:	08 95       	ret

00001ade <_exit>:
    1ade:	f8 94       	cli

00001ae0 <__stop_program>:
    1ae0:	ff cf       	rjmp	.-2      	; 0x1ae0 <__stop_program>
